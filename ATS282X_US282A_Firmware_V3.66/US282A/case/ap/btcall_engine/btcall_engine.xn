
/*定义GROUP BANK INDEX 和其他地址变量*/
INPUT(link_base.xn)

/*1.AP INDEX*/
AP_INDEX = BACK_AP;

/*2.从地址map图中获取card模块的常驻代码段物理地址，只需写低14位，开发人员需填写，集成开始后只由集成人员修改，驱动人员不允许修改*/
SRAM_TEXT_ADDR = SRAM_AP_BACK_RCODE_ADDR;
SRAM_DATA_ADDR = SRAM_AP_BACK_DATA_ADDR;


/*3.转换为链接地址,不能修改*/
RCODE_TEXT_ADDR = RCODE_ADDR_BASE + SRAM_TEXT_ADDR;
RCODE_SIZE = SRAM_AP_BACK_RCODE_SIZE;

RDATA_DATA_ADDR = RDATA_ADDR_BASE + SRAM_DATA_ADDR;
DATA_BSS_SIZE = SRAM_AP_BACK_DATA_SIZE;

CALLRING_BUF_ADDR = RDATA_ADDR_BASE + SRAM_BTCALL_CALLRING_BUF_ADDR;
CALLRING_BUF_SIZE = SRAM_BTCALL_CALLRING_BUF_SIZE;

ASQT_TEST_BUF_ADDR = RCODE_ADDR_BASE + SRAM_BTCALL_ASQT_BUF_ADDR;
ASQT_TEST_BUF_SIZE = SRAM_BTCALL_ASQT_BUF_SIZE;

/*只是建议起始地址，也可以往后偏移，如control_2一般不是从这个地址，如果要占全部的空间，则使用control_1*/
BANK_CONTROL_1_ADDR_BASE = (AP_BANK_BACK_CONTROL_1 << 24) + SRAM_AP_BANK_BACK_CONTROL_ADDR;

/*back ap 没有UI段*/

/*固定复用basal或者codec的空间，不能跨空间使用，跟control1和control2不一样*/
BANK_ENHANCED_1_ADDR_BASE = (AP_BANK_BACK_ENHANCED_1 << 24) + SRAM_AP_BANK_BACK_ENHANCED_1_ADDR;
BANK_ENHANCED_2_ADDR_BASE = (AP_BANK_BACK_ENHANCED_2 << 24) + SRAM_AP_BANK_BACK_ENHANCED_1_ADDR;

/*bank的实际空间大小,不能修改*/
BANK_CONTROL_SIZE = SRAM_AP_BANK_BACK_CONTROL_SIZE;
//BANK_UI_SIZE = SRAM_AP_BANK_FRONT_UI_SIZE;
BANK_ENHANCED1_SIZE = SRAM_AP_BANK_BACK_ENHANCED_1_SIZE;
BANK_ENHANCED2_SIZE = SRAM_AP_BANK_BACK_ENHANCED_2_SIZE;

/*系统允许的bank的最大空间大小，不能修改*/
AP_BANK_SPACE = BANK_SPACE;

OUTPUT_ARCH(mips)

ENTRY(__start)
EXTERN(libc_op_entry)
EXTERN(sys_op_entry)
EXTERN(audio_device_op_entry)
EXTERN(base_op_entry)

SECTIONS
{
    . = CALLRING_BUF_ADDR;
    CALLRING_BUF	:
    {
    	btcall_eg_global_var.o(.bss.callring_dac)
    	btcall_eg_global_var.o(.bss.callring_read)
		. = CALLRING_BUF_SIZE;
    }
    
    . = ASQT_TEST_BUF_ADDR;
    ASQT_TEST_BUF	:
    {
    	btcall_eg_global_var.o(.bss.asqt_test_mem)/*与callring互斥*/
		. = ASQT_TEST_BUF_SIZE;
    }
    
    /*常驻代码*/
    .text RCODE_TEXT_ADDR  : 
    {
        /*API OBJ在此链接*/
        audio_device_op_entry.o(.text)
        libc_op_entry.o(.text)
        sys_op_entry.o(.text)
        base_op_entry.o(.text)
        key_op_entry.o(.text)
        mmm_hfp_cmd.o(.text)
        stub_mod_cmd.o(.text)

        /*common 常驻代码*/
        btcall_eg_message_loop.o(.text)
        btcall_eg_sco_connect.o(.rodata)
        
        app_timer_rcode_for_engine.o(.text) 
    	message_rcode_for_engine.o(.text)

		btcall_eg_audio_config.o(.text.dma_dac_start_transfer) 				                   
 		btcall_eg_message_loop.o(.bank)        	    

        btcall_eg_message_handle.o(.rodata)
         btcall_eg_stub_asqt.o(.rcode) 
		btcall_eg_callring.o(.text.irq)

    }
    
    /* 初始化了的全局数据段，紧跟在 .text段后面: .data */
    .data RDATA_DATA_ADDR	: AT(ADDR(.text) + SIZEOF(.text)) 
    {
	   /*5.填写rdata输入节，所以文件产生的.data都被链接到这里*/
        . = 0x4;/*确保.data段非空，.bss段地址好接连在后面*/
        btcall_eg_main.o(.data .data.*)                       	                      
        btcall_eg_global_var.o(.data .data.*)
        btcall_eg_message_loop.o(.data .data.*)
        btcall_eg_message_handle.o(.data .data.*)
        *.o(.data)
        *.o(.data.*)     
    }

	/* 未初始化的全局数据段，系统不会进行清零，由应用开发者自己把握: .bss, .sbss .common common */
    .bss (RDATA_DATA_ADDR + SIZEOF(.data)) :
    {
		/*common 全局数据*/
    	applib_app_data.o(.bss)
    	btcall_eg_main.o(.bss .bss.*)
    	btcall_eg_global_var.o(.bss .bss.*)
        btcall_eg_message_handle.o(.bss .bss.*)  
        *.o(.bss)
        *.o(.bss.*)
        *(.sbss)
        *(.common)/*小普通符号*/
        *(common)/*标准普通符号*/     
    }    

    /*6.链接bank control 0代码*/
    . = BANK_CONTROL_1_ADDR_BASE;
    OFFSET = . & 0x3ffff;
    BANK_CONTROL_1_0    : 
    {
        ctor.o(.text .rodata)        
    }

    /*bank control 1*/
    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
     BANK_CONTROL_1_1   : 
    {
        btcall_eg_main.o(.text .rodata)
    }  
    
    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
    BANK_CONTROL_1_2	: 
    {
    	btcall_eg_message_handle.o(.text .rodata)
    }                

    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
    BANK_CONTROL_1_3	: 
    {
        btcall_eg_callring.o(.text .rodata)
        btcall_eg_audio_config.o(.text)
    }
    
    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
    BANK_CONTROL_1_4	: 
    {
        btcall_eg_sco_connect.o(.text .rodata)
    }
    /*ASQT测试模式,才会运行此段代码*/
    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
    BANK_CONTROL_1_5    :
    { 
        btcall_eg_stub_asqt_init.o(.text .rodata)  
    }=0x0
    . = ((. + AP_BANK_SPACE) & (~(AP_BANK_SPACE - 1))) + OFFSET;
    BANK_CONTROL_1_6    :
    {
        btcall_eg_stub_asqt.o(.text .rodata)      
    }=0x0
}
