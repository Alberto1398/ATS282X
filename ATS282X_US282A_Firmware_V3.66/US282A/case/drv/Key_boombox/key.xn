/*定义GROUP BANK INDEX 和其他地址变量*/
INPUT(link_base.xn)


/*1.获取card模块的group index，驱动开发人员需选择*/
BANK_GROUP_INDEX = DRV_GROUP_KEY;

/*2.从地址map图中获取card模块的常驻代码段物理地址，只需写低14位，驱动开发人员需填写，集成开始后只由集成人员修改，驱动人员不允许修改*/
SRAM_TEXT_ADDR = SRAM_KEY_MESSAGE_RCODE_ADDR;
SRAM_DATA_ADDR = SRAM_KEY_MESSAGE_DATA_ADDR;


/*3.转换为链接地址,不能修改*/
RCODE_TEXT_ADDR = RCODE_ADDR_BASE + SRAM_TEXT_ADDR;
ROM_TEXT_ADDR = RCODE_ADDR_BASE + SROM_TWI_ADDR_MDY;    /*2k rom*/
RDATA_DATA_ADDR = RDATA_ADDR_BASE + SRAM_DATA_ADDR;

KERNEL_BANK_A_ADDR_BASE = (KERNEL_BANK_A << 28) + (BANK_GROUP_INDEX << 24) + SRAM_BANK_A_ADDR;
KERNEL_BANK_B_ADDR_BASE = (KERNEL_BANK_B << 28) + (BANK_GROUP_INDEX << 24) + SRAM_BANK_B_ADDR;

/*bank的实际空间大小,不能修改*/
KERNEL_BANK_A_SIZE = SRAM_BANK_A_SIZE;
KERNEL_BANK_B_SIZE = SRAM_BANK_B_SIZE;


ROM_TEXT_SIZE = SROM_TWI_SIZE_MDY;

/*输出段开头以4字节对齐， .bss 段总大小减4，防止 .data 段大小不是4整倍时溢出几个字节的情况*/
SRAM_KEY_MESSAGE_DATA_SIZE_FILL = SRAM_KEY_MESSAGE_DATA_SIZE - 4;

/*系统允许的bank的最大空间大小，不能修改*/
KERNEL_BANK_SPACE = BANK_SPACE;

OUTPUT_ARCH(mips)

ENTRY(blk_op)

SECTIONS
{
    .DATA_SHARE 0x9fc34000:
    {
        *.o(.share_info_section)
    }
	
	.text RCODE_TEXT_ADDR  : 
    {
        /*API OBJ在此链接*/
        libc_op_entry.o(.text)
		sys_op_entry.o(.text)
		
        key_rcode_*.o(.text .rodata)
        key_bat_charge_comm.o(.text .rodata)
        . = SRAM_KEY_MESSAGE_RCODE_SIZE;
    }
    
    .data RDATA_DATA_ADDR   :  AT(ADDR(.text) + SIZEOF(.text)) 
    {
        /*5.填写rdata输入节，所以文件产生的.data都被链接到这里*/
        *.o(.data)
    }
    .bss :
    {
        *(.bss)
        *(.sbss)
        *(.common)
        *(common)
        . = SRAM_KEY_MESSAGE_DATA_SIZE_FILL - SIZEOF(.data);
    } 

    .rom ROM_TEXT_ADDR :
    {
        rom_TWI.o(.text .rodata)
        . = ROM_TEXT_SIZE; 
    }
    

    /*6.链接bank a代码*/
    . = KERNEL_BANK_A_ADDR_BASE;
    OFFSET = . & 0x3ffff;
    BANK_A_0    : 
    {
        adjust_freq_comm.o(.text .rodata)
                
    }=0x0 
    
     /*7.链接bank b代码*/
    . = KERNEL_BANK_B_ADDR_BASE;
    OFFSET = . & 0x3ffff;
    BANK_B_0    : 
    {
        key_bankb0_init.o(.text .rodata)  
        uart_recordkey_init.o(.text .rodata)  
        key_bankb1_exit.o(.text .rodata)
        key_discrete_led_op.o(.text .rodata)
        key_bat_charge_comm.o(.bank0 .rodata_0)

    }=0x0 
    
    /*假设还有一个bank b，文件名为bank_b_card_xx.c*/
    . = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
    BANK_B_1   : 
    {
        key_bat_charge_comm.o(.bank1 .rodata_1)
        key_peripheral_detect.o(.text .rodata)
        key_discrete_led_op.o(.text.led_twinkle)

    }

    /*假设还有一个bank b，文件名为bank_b_card_xx.c*/
    . = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
    BANK_B_2   : 
    {
        key_dae.o(.text .rodata)

    }=0x0
	
	 /*假设还有一个bank b，文件名为bank_b_card_xx.c*/
    . = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
    BANK_B_3   : 
    {
        key_waves_dae.o(.text .rodata)
		address_translation.o(.text)
    }=0x0
	
	/*假设还有一个bank b，文件名为bank_b_card_xx.c*/
    . = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
    BANK_B_4   : 
    {
        key_math_exp_fixed.o(.text .rodata)

    }=0x0
	/*假设还有一个bank b，文件名为bank_b_card_xx.c*/
	. = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
	BANK_B_5   : 
    {
        dae_print.o(.text .rodata)
    }=0x0
	/*假设还有一个bank b，文件名为bank_b_card_xx.c*/
	. = ((. + KERNEL_BANK_SPACE) & (~(KERNEL_BANK_SPACE - 1))) + OFFSET;
	 BANK_B_6   : 
    {
        dae_print1.o(.text .rodata)
    }=0x0

    
}
