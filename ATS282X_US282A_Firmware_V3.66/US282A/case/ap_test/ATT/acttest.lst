
acttest.exe:     file format elf32-tradlittlemips

Disassembly of section .text:

bfc38800 <process_start>:
bfc38800:	64d4      	save	32,ra,s1
bfc38802:	0104      	addiu	s1,sp,16
bfc38804:	d984      	sw	a0,16(s1)
bfc38806:	9944      	lw	v0,16(s1)
bfc38808:	6782      	move	a0,v0
bfc3880a:	6d00      	li	a1,0
bfc3880c:	b207      	lw	v0,bfc38828 <RCODE_TEXT_ADDR+0x28>
bfc3880e:	eac0      	jalrc	v0
bfc38810:	c140      	sb	v0,0(s1)
bfc38812:	8140      	lb	v0,0(s1)
bfc38814:	6782      	move	a0,v0
bfc38816:	6d00      	li	a1,0
bfc38818:	6e00      	li	a2,0
bfc3881a:	6f0e      	li	a3,14
bfc3881c:	b204      	lw	v0,bfc3882c <RCODE_TEXT_ADDR+0x2c>
bfc3881e:	eac0      	jalrc	v0
bfc38820:	6a00      	li	v0,0
bfc38822:	65b9      	move	sp,s1
bfc38824:	6452      	restore	16,ra,s1
bfc38826:	e8a0      	jrc	ra
bfc38828:	8d39      	lh	s1,50(a1)
bfc3882a:	bfc3      	lwu	a2,12(a3)
bfc3882c:	88d5      	lh	a2,42(s0)
bfc3882e:	bfc3      	lwu	a2,12(a3)

bfc38830 <__start>:
bfc38830:	64d6      	save	48,ra,s1
bfc38832:	0104      	addiu	s1,sp,16
bfc38834:	d988      	sw	a0,32(s1)
bfc38836:	d9a9      	sw	a1,36(s1)
bfc38838:	6c00      	li	a0,0
bfc3883a:	6d00      	li	a1,0
bfc3883c:	6e00      	li	a2,0
bfc3883e:	6f10      	li	a3,16
bfc38840:	b220      	lw	v0,bfc388c0 <__start+0x90>
bfc38842:	eac0      	jalrc	v0
bfc38844:	c150      	sb	v0,16(s1)
bfc38846:	8170      	lb	v1,16(s1)
bfc38848:	6a01      	li	v0,1
bfc3884a:	ea4b      	neg	v0
bfc3884c:	ea6e      	xor	v0,v1
bfc3884e:	5a01      	sltiu	v0,1
bfc38850:	6004      	bteqz	bfc3885a <__start+0x2a>
bfc38852:	6a01      	li	v0,1
bfc38854:	ea4b      	neg	v0
bfc38856:	d945      	sw	v0,20(s1)
bfc38858:	102e      	b	bfc388b6 <__start+0x86>
bfc3885a:	b21b      	lw	v0,bfc388c4 <__start+0x94>
bfc3885c:	d940      	sw	v0,0(s1)
bfc3885e:	9948      	lw	v0,32(s1)
bfc38860:	d941      	sw	v0,4(s1)
bfc38862:	9949      	lw	v0,36(s1)
bfc38864:	9a41      	lw	v0,4(v0)
bfc38866:	d942      	sw	v0,8(s1)
bfc38868:	9949      	lw	v0,36(s1)
bfc3886a:	aa41      	lhu	v0,2(v0)
bfc3886c:	c946      	sh	v0,12(s1)
bfc3886e:	6c00      	li	a0,0
bfc38870:	6d00      	li	a1,0
bfc38872:	6e00      	li	a2,0
bfc38874:	6f33      	li	a3,51
bfc38876:	b215      	lw	v0,bfc388c8 <__start+0x98>
bfc38878:	eac0      	jalrc	v0
bfc3887a:	9949      	lw	v0,36(s1)
bfc3887c:	aa40      	lhu	v0,0(v0)
bfc3887e:	8170      	lb	v1,16(s1)
bfc38880:	6791      	move	a0,s1
bfc38882:	67a2      	move	a1,v0
bfc38884:	67c3      	move	a2,v1
bfc38886:	6f4a      	li	a3,74
bfc38888:	b210      	lw	v0,bfc388c8 <__start+0x98>
bfc3888a:	eac0      	jalrc	v0
bfc3888c:	5200      	slti	v0,0
bfc3888e:	6011      	bteqz	bfc388b2 <__start+0x82>
bfc38890:	8150      	lb	v0,16(s1)
bfc38892:	6782      	move	a0,v0
bfc38894:	6d00      	li	a1,0
bfc38896:	6e00      	li	a2,0
bfc38898:	6f11      	li	a3,17
bfc3889a:	b20a      	lw	v0,bfc388c0 <__start+0x90>
bfc3889c:	eac0      	jalrc	v0
bfc3889e:	6c00      	li	a0,0
bfc388a0:	6d00      	li	a1,0
bfc388a2:	6e00      	li	a2,0
bfc388a4:	6f34      	li	a3,52
bfc388a6:	b209      	lw	v0,bfc388c8 <__start+0x98>
bfc388a8:	eac0      	jalrc	v0
bfc388aa:	6a01      	li	v0,1
bfc388ac:	ea4b      	neg	v0
bfc388ae:	d945      	sw	v0,20(s1)
bfc388b0:	1002      	b	bfc388b6 <__start+0x86>
bfc388b2:	6a00      	li	v0,0
bfc388b4:	d945      	sw	v0,20(s1)
bfc388b6:	9945      	lw	v0,20(s1)
bfc388b8:	65b9      	move	sp,s1
bfc388ba:	6454      	restore	32,ra,s1
bfc388bc:	e8a0      	jrc	ra
bfc388be:	0000      	addiu	s0,sp,0
bfc388c0:	88d5      	lh	a2,42(s0)
bfc388c2:	bfc3      	lwu	a2,12(a3)
bfc388c4:	8801      	lh	s0,2(s0)
bfc388c6:	bfc3      	lwu	a2,12(a3)
bfc388c8:	88dd      	lh	a2,58(s0)
bfc388ca:	bfc3      	lwu	a2,12(a3)

bfc388cc <audio_device_op_entry>:
bfc388cc:	6b0a      	li	v1,10
bfc388ce:	e805      	break	0

bfc388d0 <key_op_entry>:
bfc388d0:	6b08      	li	v1,8
bfc388d2:	e805      	break	0

bfc388d4 <libc_op_entry>:
bfc388d4:	6b10      	li	v1,16
bfc388d6:	e805      	break	0

bfc388d8 <mmm_hfp_cmd>:
bfc388d8:	6b42      	li	v1,66
bfc388da:	e805      	break	0

bfc388dc <sys_op_entry>:
bfc388dc:	6b0f      	li	v1,15
bfc388de:	e805      	break	0

bfc388e0 <vfs_op_entry>:
bfc388e0:	6b11      	li	v1,17
bfc388e2:	e805      	break	0

bfc388e4 <att_write_data>:
bfc388e4:	64c4      	save	32,ra
    0x00, 0x00
 };

uint32 att_write_data(uint16 cmd, uint32 payload_len, uint32 data_addr)
{
bfc388e6:	7538      	cmpi	a1,56
    int32 ret_val;
    stub_ext_param_t ext_param;

    if((payload_len + 8) == 64)
bfc388e8:	ec31      	zeh	a0
bfc388ea:	6101      	btnez	bfc388ee <att_write_data+0xa>
bfc388ec:	45a4      	addiu	a1,a1,4
    {
        payload_len += 4;
bfc388ee:	677d      	move	v1,sp
    }

    ext_param.opcode = cmd;
bfc388f0:	b206      	lw	v0,bfc38908 <att_write_data+0x24>
    ext_param.payload_len = payload_len;
    ext_param.rw_buffer = (uint8 *) data_addr;

    ret_val = stub_ext_write(&ext_param);
bfc388f2:	cb88      	sh	a0,16(v1)
bfc388f4:	cba9      	sh	a1,18(v1)
bfc388f6:	d605      	sw	a2,20(sp)
bfc388f8:	0404      	addiu	a0,sp,16
bfc388fa:	6d01      	li	a1,1
bfc388fc:	6e00      	li	a2,0
bfc388fe:	ea40      	jalr	v0
bfc38900:	6f05      	li	a3,5
bfc38902:	6444      	restore	32,ra

    return ret_val;
}
bfc38904:	e8a0      	jrc	ra
bfc38906:	0000      	addiu	s0,sp,0
bfc38908:	8fd9      	lh	a2,50(a3)
bfc3890a:	bfc3      	lwu	a2,12(a3)

bfc3890c <att_read_data>:
bfc3890c:	64c4      	save	32,ra

uint32 att_read_data(uint16 cmd, uint32 payload_len, uint32 data_addr)
{
bfc3890e:	677d      	move	v1,sp
    int32 ret_val;
    stub_ext_param_t ext_param;

    ext_param.opcode = cmd;
bfc38910:	cba9      	sh	a1,18(v1)
    ext_param.payload_len = payload_len;
bfc38912:	b206      	lw	v0,bfc38928 <att_read_data+0x1c>
    ext_param.rw_buffer = (uint8 *) data_addr;

    ret_val = stub_ext_read(&ext_param);
bfc38914:	6d00      	li	a1,0
bfc38916:	cb88      	sh	a0,16(v1)
bfc38918:	d605      	sw	a2,20(sp)
bfc3891a:	0404      	addiu	a0,sp,16
bfc3891c:	67c5      	move	a2,a1
bfc3891e:	ea40      	jalr	v0
bfc38920:	6f05      	li	a3,5
bfc38922:	6444      	restore	32,ra

    return ret_val;

}
bfc38924:	e8a0      	jrc	ra
bfc38926:	0000      	addiu	s0,sp,0
bfc38928:	8fd9      	lh	a2,50(a3)
bfc3892a:	bfc3      	lwu	a2,12(a3)

bfc3892c <att_test_fread>:
bfc3892c:	f008 64f7 	save	a0-a1,56,ra,s0-s1

uint32 att_test_fread(uint8 *buffer, uint32 len, uint32 offset)
{
bfc38930:	b230      	lw	v0,bfc389f0 <att_test_fread+0xc4>
    int ret_val;
    int read_len;
    uint32 loop_exit;
    uint8 cmd_data[16];
    att_fread_arg_t *att_fread_arg;

    uint32 true_offset = offset;

    stub_set_debug_mode(0);
bfc38932:	6d00      	li	a1,0
bfc38934:	d608      	sw	a2,32(sp)
bfc38936:	6c07      	li	a0,7
bfc38938:	67c5      	move	a2,a1
bfc3893a:	ea40      	jalr	v0
bfc3893c:	6f02      	li	a3,2
bfc3893e:	920f      	lw	v0,60(sp)

    //stub_ioctrl_set(SET_READ_MODE, 0, 0);

    while (len > 0)
    {
        if (len > STUB_ONCE_BANK_READ_SIZE)
        {
            read_len = STUB_ONCE_BANK_READ_SIZE;
        }
        else
        {
            //保证读取的数据是4字节对齐
            read_len = ((len + 3) / 4) * 4;
        }

        att_fread_arg = (att_fread_arg_t *) (cmd_data);
        att_fread_arg->lengthl = read_len & 0xffff;
        att_fread_arg->lengthh = (read_len >> 16);
        att_fread_arg->offsetl = true_offset & 0xffff;
        att_fread_arg->offseth = (true_offset >> 16);

        ret_val = att_write_data(STUB_CMD_ATT_FREAD, 8, cmd_data);

        if (ret_val == 0)
        {
            ret_val = att_read_data(STUB_CMD_ATT_FREAD, read_len, STUB_ATT_READ_BANK_BUFFER);

            if (ret_val == 0)
            {
                if (read_len == STUB_ONCE_BANK_READ_SIZE)
                {
                    libc_memcpy(buffer, (uint8 *) (STUB_ATT_READ_BANK_BUFFER + sizeof(stub_ext_cmd_t)), read_len);
                }
                else
                {
                    //拷贝实际长度
                    libc_memcpy(buffer, (uint8 *) (STUB_ATT_READ_BANK_BUFFER + sizeof(stub_ext_cmd_t)), len);

                    read_len = len;
                }

                //回复ACK
                ret_val = att_write_data(STUB_CMD_ATT_ACK, 0, cmd_data);
            }
        }

        if (ret_val == 0)
        {
            buffer += read_len;
            len -= read_len;
            true_offset += read_len;
bfc38940:	2220      	beqz	v0,bfc38982 <att_test_fread+0x56>
bfc38942:	930f      	lw	v1,60(sp)
bfc38944:	f400 6900 	li	s1,1024
bfc38948:	f400 5b01 	sltiu	v1,1025
bfc3894c:	6003      	bteqz	bfc38954 <att_test_fread+0x28>
bfc3894e:	4383      	addiu	a0,v1,3
bfc38950:	338a      	srl	v1,a0,2
bfc38952:	3168      	sll	s1,v1,2
bfc38954:	9208      	lw	v0,32(sp)
bfc38956:	677d      	move	v1,sp
bfc38958:	3523      	sra	a1,s1,8
bfc3895a:	30a3      	sra	s0,a1,8
bfc3895c:	ab90      	lhu	a0,32(v1)
bfc3895e:	67dd      	move	a2,sp
bfc38960:	3742      	srl	a3,v0,8
bfc38962:	ce2d      	sh	s1,26(a2)
bfc38964:	cb0e      	sh	s0,28(v1)
bfc38966:	36e2      	srl	a2,a3,8
bfc38968:	67bd      	move	a1,sp
bfc3896a:	b023      	lw	s0,bfc389f4 <att_test_fread+0xc8>
bfc3896c:	cdcc      	sh	a2,24(a1)
bfc3896e:	cb8b      	sh	a0,22(v1)
bfc38970:	6d08      	li	a1,8
bfc38972:	f400 6c08 	li	a0,1032
bfc38976:	e840      	jalr	s0
bfc38978:	0604      	addiu	a2,sp,16
bfc3897a:	6702      	move	s0,v0
bfc3897c:	220b      	beqz	v0,bfc38994 <att_test_fread+0x68>
bfc3897e:	970f      	lw	a3,60(sp)
bfc38980:	2fe0      	bnez	a3,bfc38942 <att_test_fread+0x16>
bfc38982:	b21c      	lw	v0,bfc389f0 <att_test_fread+0xc4>
        }
    }

    //stub_ioctrl_set(SET_READ_MODE, 1, 0);

    stub_set_debug_mode(1);
bfc38984:	6c07      	li	a0,7
bfc38986:	6d01      	li	a1,1
bfc38988:	6e00      	li	a2,0
bfc3898a:	ea40      	jalr	v0
bfc3898c:	6f02      	li	a3,2
bfc3898e:	6750      	move	v0,s0

    return ret_val;
}
bfc38990:	6477      	restore	56,ra,s0-s1
bfc38992:	e8a0      	jrc	ra
bfc38994:	b619      	lw	a2,bfc389f4 <att_test_fread+0xc8>
bfc38996:	b21a      	lw	v0,bfc389fc <att_test_fread+0xd0>
bfc38998:	f400 6c08 	li	a0,1032
bfc3899c:	ea40      	jalr	v0
bfc3899e:	67b1      	move	a1,s1
bfc389a0:	6702      	move	s0,v0
bfc389a2:	2aed      	bnez	v0,bfc3897e <att_test_fread+0x52>
bfc389a4:	f400 7100 	cmpi	s1,1024
bfc389a8:	611a      	btnez	bfc389de <att_test_fread+0xb2>
bfc389aa:	940e      	lw	a0,56(sp)
bfc389ac:	b515      	lw	a1,bfc38a00 <att_test_fread+0xd4>
bfc389ae:	b016      	lw	s0,bfc38a04 <att_test_fread+0xd8>
bfc389b0:	67d1      	move	a2,s1
bfc389b2:	e840      	jalr	s0
bfc389b4:	67e2      	move	a3,v0
bfc389b6:	b210      	lw	v0,bfc389f4 <att_test_fread+0xc8>
bfc389b8:	f4e0 6c1e 	li	a0,1278
bfc389bc:	6d00      	li	a1,0
bfc389be:	ea40      	jalr	v0
bfc389c0:	0604      	addiu	a2,sp,16
bfc389c2:	6702      	move	s0,v0
bfc389c4:	2adc      	bnez	v0,bfc3897e <att_test_fread+0x52>
bfc389c6:	950f      	lw	a1,60(sp)
bfc389c8:	9308      	lw	v1,32(sp)
bfc389ca:	e533      	subu	a0,a1,s1
bfc389cc:	920e      	lw	v0,56(sp)
bfc389ce:	e33d      	addu	a3,v1,s1
bfc389d0:	d40f      	sw	a0,60(sp)
bfc389d2:	d708      	sw	a3,32(sp)
bfc389d4:	970f      	lw	a3,60(sp)
bfc389d6:	e239      	addu	a2,v0,s1
bfc389d8:	d60e      	sw	a2,56(sp)
bfc389da:	2fb3      	bnez	a3,bfc38942 <att_test_fread+0x16>
bfc389dc:	17d2      	b	bfc38982 <att_test_fread+0x56>
bfc389de:	b10a      	lw	s1,bfc38a04 <att_test_fread+0xd8>
bfc389e0:	940e      	lw	a0,56(sp)
bfc389e2:	b508      	lw	a1,bfc38a00 <att_test_fread+0xd4>
bfc389e4:	960f      	lw	a2,60(sp)
bfc389e6:	e940      	jalr	s1
bfc389e8:	67e2      	move	a3,v0
bfc389ea:	910f      	lw	s1,60(sp)
bfc389ec:	17e4      	b	bfc389b6 <att_test_fread+0x8a>
bfc389ee:	0000      	addiu	s0,sp,0
bfc389f0:	8fd9      	lh	a2,50(a3)
bfc389f2:	bfc3      	lwu	a2,12(a3)
bfc389f4:	88e5      	lh	a3,10(s0)
bfc389f6:	bfc3      	lwu	a2,12(a3)
bfc389f8:	a200      	lbu	s0,0(v0)
bfc389fa:	9fc3      	lw	a2,12(a3)
bfc389fc:	890d      	lh	s0,26(s1)
bfc389fe:	bfc3      	lwu	a2,12(a3)
bfc38a00:	a206      	lbu	s0,6(v0)
bfc38a02:	9fc3      	lw	a2,12(a3)
bfc38a04:	88d5      	lh	a2,42(s0)
bfc38a06:	bfc3      	lwu	a2,12(a3)

bfc38a08 <load_ap_bank>:
bfc38a08:	64f9      	save	72,ra,s0-s1

uint32 load_ap_bank(uint32 epc)
{
bfc38a0a:	b73b      	lw	a3,bfc38af4 <load_ap_bank+0xec>
    uint32 sd_file_handle;
    ap_bank_head_t ap_bank_head;
    uint32 read_file_offset;
    uint32 bank_no;
    uint32 epc_mask;
    uint32 ap_offset;

    bank_no = ((epc & 0xfc0000) >> 18);
bfc38a0c:	b63b      	lw	a2,bfc38af8 <load_ap_bank+0xf0>

    epc_mask = (epc & (~SRAM_SIZE_MASK));
bfc38a0e:	ef8c      	and	a3,a0
bfc38a10:	f480 33e2 	srl	v1,a3,18
bfc38a14:	b03a      	lw	s0,bfc38afc <load_ap_bank+0xf4>

    read_file_offset = 0x60;

    read_file_offset += sizeof(ap_bank_head_t) * bank_no;

    //DEBUG_ATT_PRINT("  load_ap_bank:", epc, 2);
    // DEBUG_ATT_PRINT("  bank_no:", bank_no, 2);

    if (g_att_version == 0)
bfc38a16:	3564      	sll	a1,v1,1
bfc38a18:	ee8c      	and	a2,a0
bfc38a1a:	a040      	lbu	v0,0(s0)
bfc38a1c:	e571      	addu	a0,a1,v1
bfc38a1e:	d60a      	sw	a2,40(sp)
bfc38a20:	3688      	sll	a2,a0,2
bfc38a22:	4e60      	addiu	a2,96
bfc38a24:	2a13      	bnez	v0,bfc38a4c <load_ap_bank+0x44>
bfc38a26:	984a      	lw	v0,40(s0)
    {
        ap_offset = g_old_test_info->ap_file_offset;
bfc38a28:	5b32      	sltiu	v1,50
    }
    else
    {
        ap_offset = g_test_ap_info->ap_file_offset;
    }
    if (bank_no < 50)
bfc38a2a:	aa41      	lhu	v0,2(v0)
bfc38a2c:	6778      	move	v1,t8
bfc38a2e:	d20b      	sw	v0,44(sp)
bfc38a30:	d30c      	sw	v1,48(sp)
bfc38a32:	2313      	beqz	v1,bfc38a5a <load_ap_bank+0x52>
bfc38a34:	984e      	lw	v0,56(s0)
    {
        if (g_epc_addr[0] == epc_mask)
bfc38a36:	930a      	lw	v1,40(sp)
        {
            act_writel(epc_mask + 0x40000000, PageAddr3);

            return TRUE;
        }
    }
    else
    {
        if (g_epc_addr[1] == epc_mask)
bfc38a38:	ea6e      	xor	v0,v1
bfc38a3a:	2a13      	bnez	v0,bfc38a62 <load_ap_bank+0x5a>
bfc38a3c:	b232      	lw	v0,bfc38b04 <load_ap_bank+0xfc>
        {
            act_writel(epc_mask + 0x40000000, PageAddr3);
bfc38a3e:	e351      	addu	a0,v1,v0

            return TRUE;
        }
    }

    if (g_read_code_mode == TRUE)
    {
        //if (g_file_sys_id == -1)
        //{
        //    g_file_sys_id = _config_fs_init(test_stg_type);
        //}

        if (g_file_sys_id < 0)
        {
            return FALSE;
        }

        //读bank头部
        vfs_file_seek(g_file_sys_id, read_file_offset + ap_offset, SEEK_SET, g_test_file_handle);

        vfs_file_read(g_file_sys_id, &ap_bank_head, sizeof(ap_bank_head_t), g_test_file_handle);

        //读到last segment
        if (ap_bank_head.bank_addr == 0)
        {
            return FALSE;
        }

        //读常驻代码和数据
        vfs_file_seek(g_file_sys_id, ap_bank_head.bank_offset + ap_offset, SEEK_SET, g_test_file_handle);

        vfs_file_read(g_file_sys_id, ap_bank_head.bank_addr, ap_bank_head.bank_length, g_test_file_handle);
    }
    else
    {
        att_test_fread(&ap_bank_head, sizeof(ap_bank_head_t), read_file_offset + ap_offset);

        att_test_fread(ap_bank_head.bank_addr, ap_bank_head.bank_length, ap_bank_head.bank_offset + ap_offset);
    }

    if (bank_no < 50)
    {
        g_epc_addr[0] = epc_mask;
    }
    else
    {
        g_epc_addr[1] = epc_mask;
    }

    act_writel(epc_mask + 0x40000000, PageAddr3);
bfc38a40:	b330      	lw	v1,bfc38b00 <load_ap_bank+0xf8>
bfc38a42:	db80      	sw	a0,0(v1)
bfc38a44:	6b01      	li	v1,1

    return TRUE;
bfc38a46:	6743      	move	v0,v1
}
bfc38a48:	6479      	restore	72,ra,s0-s1
bfc38a4a:	e8a0      	jrc	ra
bfc38a4c:	988b      	lw	a0,44(s0)
bfc38a4e:	5b32      	sltiu	v1,50
bfc38a50:	9c41      	lw	v0,4(a0)
bfc38a52:	6778      	move	v1,t8
bfc38a54:	d20b      	sw	v0,44(sp)
bfc38a56:	d30c      	sw	v1,48(sp)
bfc38a58:	2bed      	bnez	v1,bfc38a34 <load_ap_bank+0x2c>
bfc38a5a:	984f      	lw	v0,60(s0)
bfc38a5c:	930a      	lw	v1,40(sp)
bfc38a5e:	ea6e      	xor	v0,v1
bfc38a60:	22ed      	beqz	v0,bfc38a3c <load_ap_bank+0x34>
bfc38a62:	a0a2      	lbu	a1,2(s0)
bfc38a64:	6730      	move	s1,s0
bfc38a66:	7501      	cmpi	a1,1
bfc38a68:	6130      	btnez	bfc38aca <load_ap_bank+0xc2>
bfc38a6a:	9888      	lw	a0,32(s0)
bfc38a6c:	6b00      	li	v1,0
bfc38a6e:	5400      	slti	a0,0
bfc38a70:	61ea      	btnez	bfc38a46 <load_ap_bank+0x3e>
bfc38a72:	920b      	lw	v0,44(sp)
bfc38a74:	98e9      	lw	a3,36(s0)
bfc38a76:	6d0b      	li	a1,11
bfc38a78:	b324      	lw	v1,bfc38b08 <load_ap_bank+0x100>
bfc38a7a:	d504      	sw	a1,16(sp)
bfc38a7c:	e655      	addu	a1,a2,v0
bfc38a7e:	eb40      	jalr	v1
bfc38a80:	6e00      	li	a2,0
bfc38a82:	690d      	li	s1,13
bfc38a84:	9888      	lw	a0,32(s0)
bfc38a86:	98e9      	lw	a3,36(s0)
bfc38a88:	b320      	lw	v1,bfc38b08 <load_ap_bank+0x100>
bfc38a8a:	6e0c      	li	a2,12
bfc38a8c:	d104      	sw	s1,16(sp)
bfc38a8e:	eb40      	jalr	v1
bfc38a90:	0506      	addiu	a1,sp,24
bfc38a92:	9607      	lw	a2,28(sp)
bfc38a94:	6766      	move	v1,a2
bfc38a96:	26d7      	beqz	a2,bfc38a46 <load_ap_bank+0x3e>
bfc38a98:	9606      	lw	a2,24(sp)
bfc38a9a:	920b      	lw	v0,44(sp)
bfc38a9c:	9888      	lw	a0,32(s0)
bfc38a9e:	98e9      	lw	a3,36(s0)
bfc38aa0:	6d0b      	li	a1,11
bfc38aa2:	b31a      	lw	v1,bfc38b08 <load_ap_bank+0x100>
bfc38aa4:	d504      	sw	a1,16(sp)
bfc38aa6:	e655      	addu	a1,a2,v0
bfc38aa8:	eb40      	jalr	v1
bfc38aaa:	6e00      	li	a2,0
bfc38aac:	9888      	lw	a0,32(s0)
bfc38aae:	98e9      	lw	a3,36(s0)
bfc38ab0:	9507      	lw	a1,28(sp)
bfc38ab2:	9608      	lw	a2,32(sp)
bfc38ab4:	b315      	lw	v1,bfc38b08 <load_ap_bank+0x100>
bfc38ab6:	eb40      	jalr	v1
bfc38ab8:	d104      	sw	s1,16(sp)
bfc38aba:	940c      	lw	a0,48(sp)
bfc38abc:	2414      	beqz	a0,bfc38ae6 <load_ap_bank+0xde>
bfc38abe:	920a      	lw	v0,40(sp)
bfc38ac0:	b60f      	lw	a2,bfc38afc <load_ap_bank+0xf4>
bfc38ac2:	930a      	lw	v1,40(sp)
bfc38ac4:	de4e      	sw	v0,56(a2)
bfc38ac6:	b210      	lw	v0,bfc38b04 <load_ap_bank+0xfc>
bfc38ac8:	17ba      	b	bfc38a3e <load_ap_bank+0x36>
bfc38aca:	900b      	lw	s0,44(sp)
bfc38acc:	0406      	addiu	a0,sp,24
bfc38ace:	e619      	addu	a2,s0
bfc38ad0:	b00f      	lw	s0,bfc38b0c <load_ap_bank+0x104>
bfc38ad2:	e840      	jalr	s0
bfc38ad4:	6d0c      	li	a1,12
bfc38ad6:	9706      	lw	a3,24(sp)
bfc38ad8:	930b      	lw	v1,44(sp)
bfc38ada:	9407      	lw	a0,28(sp)
bfc38adc:	9508      	lw	a1,32(sp)
bfc38ade:	e840      	jalr	s0
bfc38ae0:	e779      	addu	a2,a3,v1
bfc38ae2:	940c      	lw	a0,48(sp)
bfc38ae4:	2cec      	bnez	a0,bfc38abe <load_ap_bank+0xb6>
bfc38ae6:	b506      	lw	a1,bfc38afc <load_ap_bank+0xf4>
bfc38ae8:	970a      	lw	a3,40(sp)
bfc38aea:	b207      	lw	v0,bfc38b04 <load_ap_bank+0xfc>
bfc38aec:	930a      	lw	v1,40(sp)
bfc38aee:	ddef      	sw	a3,60(a1)
bfc38af0:	17a6      	b	bfc38a3e <load_ap_bank+0x36>
bfc38af2:	0000      	addiu	s0,sp,0
bfc38af4:	0000      	addiu	s0,sp,0
bfc38af6:	00fc      	addiu	s0,sp,1008
bfc38af8:	0000      	addiu	s0,sp,0
bfc38afa:	fffc      	daddiu	a3,sp,112
bfc38afc:	8dc8      	lh	a2,16(a1)
bfc38afe:	bfc3      	lwu	a2,12(a3)
bfc38b00:	0058      	addiu	s0,sp,352
bfc38b02:	c00a      	sb	s0,10(s0)
bfc38b04:	0000      	addiu	s0,sp,0
bfc38b06:	4000      	addiu	s0,s0,0
bfc38b08:	88e1      	lh	a3,2(s0)
bfc38b0a:	bfc3      	lwu	a2,12(a3)
bfc38b0c:	892d      	lh	s1,26(s1)
bfc38b0e:	bfc3      	lwu	a2,12(a3)

bfc38b10 <wriet_log_data>:
bfc38b10:	64f4      	save	32,ra,s0-s1

void wriet_log_data(uint8 *write_buffer, uint32 test_value, uint32 mode)
{
bfc38b12:	a4e0      	lbu	a3,0(a0)
    uint32 write_len;
    uint8 *file_buffer = (uint8 *) ATT_LOG_FILE_BUFFER;

    write_len = 0;

    while (*write_buffer != '\0')
    {
        file_buffer[write_len + g_write_file_len] = *write_buffer;

        write_buffer++;

        write_len++;
bfc38b14:	653d      	move	t9,a1
bfc38b16:	b01a      	lw	s0,bfc38b7c <wriet_log_data+0x6c>
bfc38b18:	6d00      	li	a1,0
bfc38b1a:	2709      	beqz	a3,bfc38b2e <wriet_log_data+0x1e>
bfc38b1c:	b219      	lw	v0,bfc38b80 <wriet_log_data+0x70>
bfc38b1e:	e505      	addu	s1,a1,s0
bfc38b20:	9a67      	lw	v1,28(v0)
bfc38b22:	4481      	addiu	a0,a0,1
bfc38b24:	e169      	addu	v0,s1,v1
bfc38b26:	c2e0      	sb	a3,0(v0)
bfc38b28:	45a1      	addiu	a1,a1,1
bfc38b2a:	a4e0      	lbu	a3,0(a0)
bfc38b2c:	2ff7      	bnez	a3,bfc38b1c <wriet_log_data+0xc>
bfc38b2e:	b115      	lw	s1,bfc38b80 <wriet_log_data+0x70>
    }

    g_write_file_len += write_len;
bfc38b30:	7601      	cmpi	a2,1

    if (mode == TRUE)
bfc38b32:	9987      	lw	a0,28(s1)
bfc38b34:	e4bd      	addu	a3,a0,a1
bfc38b36:	d9e7      	sw	a3,28(s1)
bfc38b38:	600c      	bteqz	bfc38b52 <wriet_log_data+0x42>
bfc38b3a:	e715      	addu	a1,a3,s0
    {
        libc_itoa(test_value, &file_buffer[g_write_file_len], 8);
        g_write_file_len += 8;
    }

    file_buffer[g_write_file_len++] = 0x0D;
bfc38b3c:	6e0d      	li	a2,13
bfc38b3e:	c5c0      	sb	a2,0(a1)
bfc38b40:	4741      	addiu	v0,a3,1
bfc38b42:	b510      	lw	a1,bfc38b80 <wriet_log_data+0x70>
    file_buffer[g_write_file_len++] = 0x0A;
bfc38b44:	e211      	addu	a0,v0,s0
bfc38b46:	6b0a      	li	v1,10
bfc38b48:	47c2      	addiu	a2,a3,2
bfc38b4a:	c460      	sb	v1,0(a0)
bfc38b4c:	ddc7      	sw	a2,28(a1)
bfc38b4e:	6474      	restore	32,ra,s0-s1

    return;
bfc38b50:	e8a0      	jrc	ra
bfc38b52:	b20d      	lw	v0,bfc38b84 <wriet_log_data+0x74>
bfc38b54:	e0f5      	addu	a1,s0,a3
bfc38b56:	6799      	move	a0,t9
bfc38b58:	6e08      	li	a2,8
bfc38b5a:	ea40      	jalr	v0
bfc38b5c:	6f0a      	li	a3,10
bfc38b5e:	99e7      	lw	a3,28(s1)
bfc38b60:	6e0d      	li	a2,13
bfc38b62:	4f08      	addiu	a3,8
bfc38b64:	e715      	addu	a1,a3,s0
bfc38b66:	d9e7      	sw	a3,28(s1)
bfc38b68:	4741      	addiu	v0,a3,1
bfc38b6a:	c5c0      	sb	a2,0(a1)
bfc38b6c:	b505      	lw	a1,bfc38b80 <wriet_log_data+0x70>
bfc38b6e:	e211      	addu	a0,v0,s0
bfc38b70:	6b0a      	li	v1,10
bfc38b72:	47c2      	addiu	a2,a3,2
bfc38b74:	c460      	sb	v1,0(a0)
bfc38b76:	ddc7      	sw	a2,28(a1)
bfc38b78:	6474      	restore	32,ra,s0-s1
bfc38b7a:	e8a0      	jrc	ra
bfc38b7c:	b000      	lw	s0,bfc38b78 <wriet_log_data+0x68>
bfc38b7e:	0003      	addiu	s0,sp,12
bfc38b80:	8dc8      	lh	a2,16(a1)
bfc38b82:	bfc3      	lwu	a2,12(a3)
bfc38b84:	88d5      	lh	a2,42(s0)
bfc38b86:	bfc3      	lwu	a2,12(a3)

bfc38b88 <att_write_test_info>:
bfc38b88:	f008 64f4 	save	a0-a1,32,ra,s0-s1
}

void att_write_test_info(uint8 *test_info, uint32 test_value, uint32 write_data)
{
bfc38b8c:	7601      	cmpi	a2,1
    if (write_data == TRUE)
bfc38b8e:	6704      	move	s0,a0
bfc38b90:	6726      	move	s1,a2
bfc38b92:	6109      	btnez	bfc38ba6 <att_write_test_info+0x1e>
bfc38b94:	b20c      	lw	v0,bfc38bc4 <att_write_test_info+0x3c>
    {
        DEBUG_ATT_PRINT(test_info, test_value, 2);
    }
    else
    {
        DEBUG_ATT_PRINT(test_info, 0, 0);
bfc38b96:	6e02      	li	a2,2
bfc38b98:	ea40      	jalr	v0
bfc38b9a:	6f4b      	li	a3,75
bfc38b9c:	b30b      	lw	v1,bfc38bc8 <att_write_test_info+0x40>
    }

    if (g_test_mode == TEST_MODE_CARD)
bfc38b9e:	a341      	lbu	v0,1(v1)
bfc38ba0:	220a      	beqz	v0,bfc38bb6 <att_write_test_info+0x2e>
bfc38ba2:	6474      	restore	32,ra,s0-s1
    {
        wriet_log_data(test_info, test_value, write_data);
    }

    return;
}
bfc38ba4:	e8a0      	jrc	ra
bfc38ba6:	6d00      	li	a1,0
bfc38ba8:	b207      	lw	v0,bfc38bc4 <att_write_test_info+0x3c>
bfc38baa:	67c5      	move	a2,a1
bfc38bac:	ea40      	jalr	v0
bfc38bae:	6f4b      	li	a3,75
bfc38bb0:	b306      	lw	v1,bfc38bc8 <att_write_test_info+0x40>
bfc38bb2:	a341      	lbu	v0,1(v1)
bfc38bb4:	2af6      	bnez	v0,bfc38ba2 <att_write_test_info+0x1a>
bfc38bb6:	9509      	lw	a1,36(sp)
bfc38bb8:	6790      	move	a0,s0
bfc38bba:	1a1f e2c4 	jal	bfc38b10 <wriet_log_data>
bfc38bbe:	67d1      	move	a2,s1
bfc38bc0:	6474      	restore	32,ra,s0-s1
bfc38bc2:	e8a0      	jrc	ra
bfc38bc4:	88dd      	lh	a2,58(s0)
bfc38bc6:	bfc3      	lwu	a2,12(a3)
bfc38bc8:	8dc8      	lh	a2,16(a1)
bfc38bca:	bfc3      	lwu	a2,12(a3)

bfc38bcc <test_init>:
bfc38bcc:	f004 64f5 	save	a0,40,ra,s0-s1

void test_init(test_ap_info_t *test_ap_info)
{
bfc38bd0:	b131      	lw	s1,bfc38c94 <test_init+0xc8>
    //初始化线程互斥信号量
    libc_sem_init(&thread_mutex, 1);
bfc38bd2:	b032      	lw	s0,bfc38c98 <test_init+0xcc>
bfc38bd4:	6791      	move	a0,s1
bfc38bd6:	6f12      	li	a3,18
bfc38bd8:	4c30      	addiu	a0,48
bfc38bda:	6d01      	li	a1,1
bfc38bdc:	e840      	jalr	s0
bfc38bde:	6e00      	li	a2,0
bfc38be0:	b330      	lw	v1,bfc38ca0 <test_init+0xd4>

    GLOBAL_CARD_BANK_SWITCH_HANDLER = load_ap_bank;  
bfc38be2:	b22f      	lw	v0,bfc38c9c <test_init+0xd0>
bfc38be4:	da60      	sw	v1,0(v0)
bfc38be6:	a1e0      	lbu	a3,0(s1)

    if (g_att_version == 0)
bfc38be8:	2f36      	bnez	a3,bfc38c56 <test_init+0x8a>
bfc38bea:	6711      	move	s0,s1
    {
        libc_memcpy(&g_r_old_test_info, test_ap_info, sizeof(test_ap_old_info_t));
bfc38bec:	4814      	addiu	s0,20
bfc38bee:	950a      	lw	a1,40(sp)
bfc38bf0:	b32a      	lw	v1,bfc38c98 <test_init+0xcc>
bfc38bf2:	6790      	move	a0,s0
bfc38bf4:	eb40      	jalr	v1
bfc38bf6:	6e08      	li	a2,8
bfc38bf8:	d90a      	sw	s0,40(s1)
        g_old_test_info = (test_ap_old_info_t *) &g_r_old_test_info;
bfc38bfa:	b027      	lw	s0,bfc38c94 <test_init+0xc8>
    }
    else
    {
        libc_memcpy(&g_r_test_ap_info, test_ap_info, sizeof(test_ap_info_t));
        
        g_p_test_ap_info_bak = test_ap_info;
        
        g_test_ap_info = &g_r_test_ap_info;
    }
    
    g_test_info.test_id = 0;
bfc38bfc:	b32b      	lw	v1,bfc38ca8 <test_init+0xdc>

    //默认扫描512M,加快文件的创建速度
    g_fs_scan_space = 0x100000;
bfc38bfe:	b72a      	lw	a3,bfc38ca4 <test_init+0xd8>
bfc38c00:	6790      	move	a0,s0

#if 0
    //进入测试模式,A2设置输入状态，检测ONOFF状态
    act_writel(act_readl(GPIOAINEN) | (1 << 2), GPIOAINEN);

    //进入测试模式,A21设置输入状态，检测RTCVDD状态
    act_writel(act_readl(GPIOAINEN) | (1 << 21), GPIOAINEN);

    //进入测试模式,A22设置输入状态，检测VCC状态
    act_writel(act_readl(GPIOAINEN) | (1 << 21), GPIOAINEN);

    //进入测试模式,B0设置输入状态，检测SVCC状态
    act_writel(act_readl(GPIOBINEN) | (1 << 0), GPIOBINEN);

    //A0默认输出高电平，IO口接下拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);

    act_writel(act_readl(GPIOADAT) | (1 << 0), GPIOADAT);
#endif

    g_cur_line_num = 1;

    g_write_file_len = 0;

    g_epc_addr[0] = 0;
bfc38c02:	df60      	sw	v1,0(a3)
bfc38c04:	6d00      	li	a1,0
bfc38c06:	6f00      	li	a3,0
bfc38c08:	4c38      	addiu	a0,56
bfc38c0a:	6b01      	li	v1,1
bfc38c0c:	4043      	addiu	v0,s0,3

    g_epc_addr[1] = 0;

    g_skip_product_test = FALSE;
bfc38c0e:	960a      	lw	a2,40(sp)

    if (test_ap_info->base_type == DISK_H || g_old_test_info->base_type == DISK_H)
bfc38c10:	c8a7      	sh	a1,14(s0)
bfc38c12:	c064      	sb	v1,4(s0)
bfc38c14:	d8e7      	sw	a3,28(s0)
bfc38c16:	d8ee      	sw	a3,56(s0)
bfc38c18:	dce1      	sw	a3,4(a0)
bfc38c1a:	c2a0      	sb	a1,0(v0)
bfc38c1c:	a682      	lbu	a0,2(a2)
bfc38c1e:	7410      	cmpi	a0,16
bfc38c20:	6004      	bteqz	bfc38c2a <test_init+0x5e>
bfc38c22:	98ca      	lw	a2,40(s0)
bfc38c24:	a640      	lbu	v0,0(a2)
bfc38c26:	7210      	cmpi	v0,16
bfc38c28:	610d      	btnez	bfc38c44 <test_init+0x78>
bfc38c2a:	4081      	addiu	a0,s0,1
    {
        g_test_mode = TEST_MODE_CARD;
bfc38c2c:	c4a0      	sb	a1,0(a0)
bfc38c2e:	6d05      	li	a1,5

        g_read_code_mode = TRUE;

        //加载常驻代码段和数据段
        g_test_file_handle = vfs_file_open(g_file_sys_id, g_ap_name, R_NORMAL_SEEK);
bfc38c30:	c062      	sb	v1,2(s0)
bfc38c32:	9888      	lw	a0,32(s0)
bfc38c34:	b21f      	lw	v0,bfc38cb0 <test_init+0xe4>
bfc38c36:	d504      	sw	a1,16(sp)
bfc38c38:	b51d      	lw	a1,bfc38cac <test_init+0xe0>
bfc38c3a:	ea40      	jalr	v0
bfc38c3c:	67c7      	move	a2,a3
bfc38c3e:	d849      	sw	v0,36(s0)
bfc38c40:	2a16      	bnez	v0,bfc38c6e <test_init+0xa2>

        if (g_test_file_handle == 0)
bfc38c42:	17ff      	b	bfc38c42 <test_init+0x76>
bfc38c44:	7440      	cmpi	a0,64
        {
            //return FALSE;
            while (1)
                ;
        }

        DEBUG_ATT_PRINT("test counter: ", read_att_test_count(), 2);
    }
    else if (test_ap_info->base_type == DISK_S || g_old_test_info->base_type == DISK_S)
bfc38c46:	6002      	bteqz	bfc38c4c <test_init+0x80>
bfc38c48:	7240      	cmpi	v0,64
bfc38c4a:	6103      	btnez	bfc38c52 <test_init+0x86>
bfc38c4c:	40e2      	addiu	a3,s0,2
    {
        g_test_mode = TEST_MODE_USB;

        g_read_code_mode = FALSE;
bfc38c4e:	c061      	sb	v1,1(s0)
bfc38c50:	c7a0      	sb	a1,0(a3)
bfc38c52:	6475      	restore	40,ra,s0-s1

#ifdef DEBUG_WRITE_CHANNEL_DATA
        g_file_sys_id = _config_fs_init(DISK_H);
#endif
    }
    else
    {
        ;//nothing for QAC
    }
    // test_ap_info->base_type = 0;

    //while(1);
}
bfc38c54:	e8a0      	jrc	ra
bfc38c56:	6711      	move	s0,s1
bfc38c58:	4840      	addiu	s0,64
bfc38c5a:	950a      	lw	a1,40(sp)
bfc38c5c:	b30f      	lw	v1,bfc38c98 <test_init+0xcc>
bfc38c5e:	6790      	move	a0,s0
bfc38c60:	6e10      	li	a2,16
bfc38c62:	eb40      	jalr	v1
bfc38c64:	6f00      	li	a3,0
bfc38c66:	940a      	lw	a0,40(sp)
bfc38c68:	d90b      	sw	s0,44(s1)
bfc38c6a:	d98d      	sw	a0,52(s1)
bfc38c6c:	17c6      	b	bfc38bfa <test_init+0x2e>
bfc38c6e:	b212      	lw	v0,bfc38cb4 <test_init+0xe8>
bfc38c70:	eac0      	jalrc	v0
bfc38c72:	67a2      	move	a1,v0
bfc38c74:	b211      	lw	v0,bfc38cb8 <test_init+0xec>
bfc38c76:	0c04      	la	a0,bfc38c84 <test_init+0xb8>
bfc38c78:	6e02      	li	a2,2
bfc38c7a:	ea40      	jalr	v0
bfc38c7c:	6f4b      	li	a3,75
bfc38c7e:	6475      	restore	40,ra,s0-s1
bfc38c80:	e8a0      	jrc	ra
bfc38c82:	0000      	addiu	s0,sp,0
bfc38c84:	6574      	move	s3,a0
bfc38c86:	7473      	cmpi	a0,115
bfc38c88:	6320      	addiu	sp,256
bfc38c8a:	756f      	cmpi	a1,111
bfc38c8c:	746e      	cmpi	a0,110
bfc38c8e:	7265      	cmpi	v0,101
bfc38c90:	203a      	beqz	s0,bfc38d06 <test_exit+0x4a>
bfc38c92:	0000      	addiu	s0,sp,0
bfc38c94:	8dc8      	lh	a2,16(a1)
bfc38c96:	bfc3      	lwu	a2,12(a3)
bfc38c98:	88d5      	lh	a2,42(s0)
bfc38c9a:	bfc3      	lwu	a2,12(a3)
bfc38c9c:	01e8      	addiu	s1,sp,928
bfc38c9e:	9fc2      	lw	a2,8(a3)
bfc38ca0:	8a09      	lh	s0,18(v0)
bfc38ca2:	bfc3      	lwu	a2,12(a3)
bfc38ca4:	9f6c      	lw	v1,48(a3)
bfc38ca6:	9fc0      	lw	a2,0(a3)
bfc38ca8:	0000      	addiu	s0,sp,0
bfc38caa:	0010      	addiu	s0,sp,64
bfc38cac:	8e18      	lh	s0,48(a2)
bfc38cae:	bfc3      	lwu	a2,12(a3)
bfc38cb0:	88e1      	lh	a3,2(s0)
bfc38cb2:	bfc3      	lwu	a2,12(a3)
bfc38cb4:	9595      	lw	a1,596(sp)
bfc38cb6:	411b      	daddiu	s0,s1,-5
bfc38cb8:	88dd      	lh	a2,58(s0)
bfc38cba:	bfc3      	lwu	a2,12(a3)

bfc38cbc <test_exit>:
bfc38cbc:	64e3      	save	24,ra,s0

void test_exit(void)
{
bfc38cbe:	b410      	lw	a0,bfc38cfc <test_exit+0x40>
    libc_sem_destroy(&thread_mutex);
bfc38cc0:	6d00      	li	a1,0
bfc38cc2:	b010      	lw	s0,bfc38d00 <test_exit+0x44>
bfc38cc4:	67c5      	move	a2,a1
bfc38cc6:	4c30      	addiu	a0,48
bfc38cc8:	e840      	jalr	s0
bfc38cca:	6f13      	li	a3,19
bfc38ccc:	b30e      	lw	v1,bfc38d04 <test_exit+0x48>

    GLOBAL_CARD_BANK_SWITCH_HANDLER = 0;
bfc38cce:	6e00      	li	a2,0
bfc38cd0:	b00e      	lw	s0,bfc38d08 <test_exit+0x4c>

    DEBUG_ATT_PRINT("test ap end...", 0, 0);
bfc38cd2:	dbc0      	sw	a2,0(v1)
bfc38cd4:	0c06      	la	a0,bfc38cec <test_exit+0x30>
bfc38cd6:	67a6      	move	a1,a2
bfc38cd8:	e840      	jalr	s0
bfc38cda:	6f4b      	li	a3,75
bfc38cdc:	b20c      	lw	v0,bfc38d0c <test_exit+0x50>

    //控制测试结束是否重启
    //if((uint32)act_readl(DC5VADC_DATA) > 60)
    //    ENABLE_WATCH_DOG(6);

    //控制设备断电
    att_power_off();
bfc38cde:	eac0      	jalrc	v0
bfc38ce0:	6d00      	li	a1,0

    while (1)
    {
        sys_os_time_dly(1);
bfc38ce2:	6c01      	li	a0,1
bfc38ce4:	67c5      	move	a2,a1
bfc38ce6:	e840      	jalr	s0
bfc38ce8:	6f31      	li	a3,49
bfc38cea:	17fa      	b	bfc38ce0 <test_exit+0x24>
bfc38cec:	6574      	move	s3,a0
bfc38cee:	7473      	cmpi	a0,115
bfc38cf0:	6120      	btnez	bfc38d32 <test_set_share_data+0x22>
bfc38cf2:	2070      	beqz	s0,bfc38dd4 <g_test_info>
bfc38cf4:	6e65      	li	a2,101
bfc38cf6:	2e64      	bnez	a2,bfc38dc0 <g_support_norflash_wp>
bfc38cf8:	2e2e      	bnez	a2,bfc38d56 <main+0x1e>
bfc38cfa:	0000      	addiu	s0,sp,0
bfc38cfc:	8dc8      	lh	a2,16(a1)
bfc38cfe:	bfc3      	lwu	a2,12(a3)
bfc38d00:	88d5      	lh	a2,42(s0)
bfc38d02:	bfc3      	lwu	a2,12(a3)
bfc38d04:	01e8      	addiu	s1,sp,928
bfc38d06:	9fc2      	lw	a2,8(a3)
bfc38d08:	88dd      	lh	a2,58(s0)
bfc38d0a:	bfc3      	lwu	a2,12(a3)
bfc38d0c:	9d61      	lw	v1,4(a1)
bfc38d0e:	41cb      	addiu	a2,s1,-5

bfc38d10 <test_set_share_data>:
bfc38d10:	64c4      	save	32,ra
    }
}

void test_set_share_data(void)
{
bfc38d12:	b308      	lw	v1,bfc38d30 <test_set_share_data+0x20>
    msg_apps_t msg;

    msg.type = MSG_AUTOTEST_SET_SHARE_DATA_SYNC;
    msg.content.addr = &g_test_share_info;
bfc38d14:	f400 6c08 	li	a0,1032
bfc38d18:	d404      	sw	a0,16(sp)
bfc38d1a:	4b08      	addiu	v1,8
bfc38d1c:	6c00      	li	a0,0

    send_sync_msg(MSG_TARGET_ID_MANAGER, &msg, NULL, 0);
bfc38d1e:	b206      	lw	v0,bfc38d34 <test_set_share_data+0x24>
bfc38d20:	d305      	sw	v1,20(sp)
bfc38d22:	0504      	addiu	a1,sp,16
bfc38d24:	67c4      	move	a2,a0
bfc38d26:	ea40      	jalr	v0
bfc38d28:	67e4      	move	a3,a0
bfc38d2a:	6444      	restore	32,ra

    return;
bfc38d2c:	e8a0      	jrc	ra
bfc38d2e:	0000      	addiu	s0,sp,0
bfc38d30:	8dc8      	lh	a2,16(a1)
bfc38d32:	bfc3      	lwu	a2,12(a3)
bfc38d34:	8e4d      	lh	v0,26(a2)
bfc38d36:	bfc3      	lwu	a2,12(a3)

bfc38d38 <main>:
bfc38d38:	64f4      	save	32,ra,s0-s1
}

void main(test_ap_info_t *test_ap_info)
{
bfc38d3a:	6d00      	li	a1,0
    DEBUG_ATT_PRINT("  \r\ntest ap running...", 0, 0);
bfc38d3c:	b01a      	lw	s0,bfc38da4 <main+0x6c>
bfc38d3e:	67c5      	move	a2,a1
bfc38d40:	6724      	move	s1,a0
bfc38d42:	0c13      	la	a0,bfc38d8c <main+0x54>
bfc38d44:	e840      	jalr	s0
bfc38d46:	6f4b      	li	a3,75
bfc38d48:	6c01      	li	a0,1
    
    sys_set_sys_info(1, SYS_PRINT_ONOFF);
bfc38d4a:	6d04      	li	a1,4
bfc38d4c:	6e00      	li	a2,0
bfc38d4e:	e840      	jalr	s0
bfc38d50:	6f36      	li	a3,54
bfc38d52:	b416      	lw	a0,bfc38da8 <main+0x70>
    
    DISABLE_WATCH_DOG;
bfc38d54:	6b69      	li	v1,105
bfc38d56:	dc60      	sw	v1,0(a0)
bfc38d58:	a140      	lbu	v0,0(s1)

    /* 当前固件与测试程序不兼容时,
     * 需要重新从卡启动并烧录新固件.
     */
    if (test_ap_info->info_size != sizeof(test_ap_info_t))
bfc38d5a:	6b00      	li	v1,0
    //reboot_to_card_product();
    {
        g_att_version = 0;
bfc38d5c:	7210      	cmpi	v0,16
bfc38d5e:	6101      	btnez	bfc38d62 <main+0x2a>
bfc38d60:	6b01      	li	v1,1
    }
    else
    {
        g_att_version = 1;
bfc38d62:	b513      	lw	a1,bfc38dac <main+0x74>
bfc38d64:	1a1f e344 	jal	bfc38d10 <test_set_share_data>
    }

    test_set_share_data();
bfc38d68:	c560      	sb	v1,0(a1)
bfc38d6a:	6c00      	li	a0,0
    sys_os_sched_lock();
bfc38d6c:	b20e      	lw	v0,bfc38da4 <main+0x6c>
bfc38d6e:	67a4      	move	a1,a0
bfc38d70:	67c4      	move	a2,a0
bfc38d72:	ea40      	jalr	v0
bfc38d74:	6f33      	li	a3,51
bfc38d76:	1a1f e2f3 	jal	bfc38bcc <test_init>
    test_init(test_ap_info);
bfc38d7a:	6791      	move	a0,s1
bfc38d7c:	b20d      	lw	v0,bfc38db0 <main+0x78>
    test_dispatch();
bfc38d7e:	eac0      	jalrc	v0
bfc38d80:	1a1f e32f 	jal	bfc38cbc <test_exit>
    test_exit();
bfc38d84:	6500      	nop
bfc38d86:	6474      	restore	32,ra,s0-s1
    return;
bfc38d88:	e8a0      	jrc	ra
bfc38d8a:	0000      	addiu	s0,sp,0
bfc38d8c:	2020      	beqz	s0,bfc38dce <g_cur_line_num+0x2>
bfc38d8e:	0a0d      	la	v0,bfc38dc0 <g_support_norflash_wp>
bfc38d90:	6574      	move	s3,a0
bfc38d92:	7473      	cmpi	a0,115
bfc38d94:	6120      	btnez	bfc38dd6 <g_test_info+0x2>
bfc38d96:	2070      	beqz	s0,bfc38e78 <send_sync_msg+0x2c>
bfc38d98:	7572      	cmpi	a1,114
bfc38d9a:	6e6e      	li	a2,110
bfc38d9c:	6e69      	li	a2,105
bfc38d9e:	2e67      	bnez	a2,bfc38e6e <send_sync_msg+0x22>
bfc38da0:	2e2e      	bnez	a2,bfc38dfe <g_p_test_ap_info_bak+0x2>
bfc38da2:	0000      	addiu	s0,sp,0
bfc38da4:	88dd      	lh	a2,58(s0)
bfc38da6:	bfc3      	lwu	a2,12(a3)
bfc38da8:	001c      	addiu	s0,sp,112
bfc38daa:	c012      	sb	s0,18(s0)
bfc38dac:	8dc8      	lh	a2,16(a1)
bfc38dae:	bfc3      	lwu	a2,12(a3)
bfc38db0:	9de5      	lw	a3,20(a1)
bfc38db2:	41cb      	addiu	a2,s1,-5

bfc38db4 <test_stg_type>:
bfc38db4:	0010 0000                                   ....

bfc38db8 <tick_cnt>:
bfc38db8:	0000 0000                                   ....

bfc38dbc <g_app_func_id>:
bfc38dbc:	0000 0000                                   ....

bfc38dc0 <g_support_norflash_wp>:
bfc38dc0:	0000 0000                                   ....

bfc38dc4 <g_test_base_time>:
bfc38dc4:	0000 0000                                   ....

bfc38dc8 <g_att_version>:
	...

bfc38dc9 <g_test_mode>:
	...

bfc38dca <g_read_code_mode>:
	...

bfc38dcb <g_skip_product_test>:
	...

bfc38dcc <g_cur_line_num>:
bfc38dcc:	0000 0000                                   ....

bfc38dd0 <g_test_share_info>:
bfc38dd0:	0000 0000                                   ....

bfc38dd4 <g_test_info>:
	...

bfc38ddc <g_r_old_test_info>:
	...

bfc38de4 <g_write_file_len>:
bfc38de4:	0000 0000                                   ....

bfc38de8 <g_file_sys_id>:
bfc38de8:	0000 0000                                   ....

bfc38dec <g_test_file_handle>:
bfc38dec:	0000 0000                                   ....

bfc38df0 <g_old_test_info>:
bfc38df0:	0000 0000                                   ....

bfc38df4 <g_test_ap_info>:
bfc38df4:	0000 0000                                   ....

bfc38df8 <thread_mutex>:
bfc38df8:	0000 0000                                   ....

bfc38dfc <g_p_test_ap_info_bak>:
bfc38dfc:	0000 0000                                   ....

bfc38e00 <g_epc_addr>:
	...

bfc38e08 <g_r_test_ap_info>:
	...

bfc38e18 <g_ap_name>:
bfc38e18:	feff 0061 0063 0074 0069 006f 006e 0073     ..a.c.t.i.o.n.s.
bfc38e28:	0074 0065 0073 0074 002e 0061 0074 0066     t.e.s.t...a.t.f.
bfc38e38:	0000 0000                                   ....

bfc38e3c <tick_ISR>:
bfc38e3c:	b303      	lw	v1,bfc38e48 <tick_ISR+0xc>

//const uint8 key_map_val[]={3,2,7,8,5,6,11};
void tick_ISR(void)
{
    tick_cnt++;
bfc38e3e:	9b80      	lw	a0,0(v1)
bfc38e40:	4441      	addiu	v0,a0,1
bfc38e42:	e820      	jr	ra
bfc38e44:	db40      	sw	v0,0(v1)
bfc38e46:	0000      	addiu	s0,sp,0
bfc38e48:	8db8      	lh	a1,48(a1)
bfc38e4a:	bfc3      	lwu	a2,12(a3)

bfc38e4c <send_sync_msg>:
bfc38e4c:	f00e 64f8 	save	a0-a3,64,ra,s0-s1
}

int send_sync_msg(uint8 target_id, msg_apps_t *msg, msg_reply_t *reply, uint32 timeout)
{
bfc38e50:	b534      	lw	a1,bfc38f20 <send_sync_msg+0xd4>
    private_msg_t cur_send_pmsg;
    msg_reply_t temp_reply;

    os_event_t *sem;//同步消息同步信号量指针
    bool retvalue = TRUE;

    //无限时等待信号量，同时只能有1个线程发送同步消息
    libc_sem_wait(thread_mutex, 0);
bfc38e52:	6724      	move	s1,a0
bfc38e54:	6c01      	li	a0,1
bfc38e56:	b034      	lw	s0,bfc38f24 <send_sync_msg+0xd8>
bfc38e58:	d40b      	sw	a0,44(sp)
bfc38e5a:	9d80      	lw	a0,0(a1)
bfc38e5c:	6d00      	li	a1,0
bfc38e5e:	67c5      	move	a2,a1
bfc38e60:	e840      	jalr	s0
bfc38e62:	6f14      	li	a3,20
bfc38e64:	9511      	lw	a1,68(sp)

    //填充私有消息结构体
    libc_memcpy(&(cur_send_pmsg.msg), msg, sizeof(msg_apps_t));
bfc38e66:	0404      	addiu	a0,sp,16
bfc38e68:	6e08      	li	a2,8
bfc38e6a:	e840      	jalr	s0
bfc38e6c:	6f00      	li	a3,0
bfc38e6e:	6d00      	li	a1,0
    libc_sem_init(&sem, 0);
bfc38e70:	040a      	addiu	a0,sp,40
bfc38e72:	67c5      	move	a2,a1
bfc38e74:	e840      	jalr	s0
bfc38e76:	6f12      	li	a3,18
bfc38e78:	930a      	lw	v1,40(sp)
    cur_send_pmsg.sem = sem;
bfc38e7a:	9212      	lw	v0,72(sp)
    if (reply == NULL)
bfc38e7c:	e911      	zeb	s1
bfc38e7e:	d306      	sw	v1,24(sp)
bfc38e80:	223c      	beqz	v0,bfc38efa <send_sync_msg+0xae>
bfc38e82:	9212      	lw	v0,72(sp)
    {
        cur_send_pmsg.reply = &temp_reply;
    }
    else
    {
        cur_send_pmsg.reply = reply;
bfc38e84:	b029      	lw	s0,bfc38f28 <send_sync_msg+0xdc>
    }

    //发送消息到队列中
    if (sys_mq_send((uint32)(target_id), (void *) &cur_send_pmsg) == -1)
bfc38e86:	6e00      	li	a2,0
bfc38e88:	d207      	sw	v0,28(sp)
bfc38e8a:	6791      	move	a0,s1
bfc38e8c:	0504      	addiu	a1,sp,16
bfc38e8e:	e840      	jalr	s0
bfc38e90:	6f18      	li	a3,24
bfc38e92:	ee4f      	not	a2,v0
bfc38e94:	2e14      	bnez	a2,bfc38ebe <send_sync_msg+0x72>
bfc38e96:	6d00      	li	a1,0
    {
        DEBUG_ATT_PRINT("msg full", 0, 0);
bfc38e98:	67c5      	move	a2,a1
bfc38e9a:	0c1a      	la	a0,bfc38f00 <send_sync_msg+0xb4>
bfc38e9c:	e840      	jalr	s0
bfc38e9e:	6f4b      	li	a3,75
bfc38ea0:	6d00      	li	a1,0
        libc_sem_destroy(&sem);
bfc38ea2:	b021      	lw	s0,bfc38f24 <send_sync_msg+0xd8>
bfc38ea4:	040a      	addiu	a0,sp,40
bfc38ea6:	67c5      	move	a2,a1
bfc38ea8:	e840      	jalr	s0
bfc38eaa:	6f13      	li	a3,19
bfc38eac:	b71d      	lw	a3,bfc38f20 <send_sync_msg+0xd4>
        libc_sem_post(thread_mutex);
bfc38eae:	6d00      	li	a1,0
bfc38eb0:	9f80      	lw	a0,0(a3)
bfc38eb2:	67c5      	move	a2,a1
bfc38eb4:	e840      	jalr	s0
bfc38eb6:	6f16      	li	a3,22
bfc38eb8:	6a00      	li	v0,0
        return FALSE;
bfc38eba:	6478      	restore	64,ra,s0-s1
    }

    //等待同步消息回应
    if (libc_sem_wait(sem, timeout) < 0)
    {
        DEBUG_ATT_PRINT("msg wait timeout", 0, 0);
        retvalue = FALSE;
    }

    libc_sem_destroy(&sem);
    libc_sem_post(thread_mutex);
    return retvalue;
}
bfc38ebc:	e8a0      	jrc	ra
bfc38ebe:	940a      	lw	a0,40(sp)
bfc38ec0:	9513      	lw	a1,76(sp)
bfc38ec2:	b119      	lw	s1,bfc38f24 <send_sync_msg+0xd8>
bfc38ec4:	6e00      	li	a2,0
bfc38ec6:	e940      	jalr	s1
bfc38ec8:	6f14      	li	a3,20
bfc38eca:	5200      	slti	v0,0
bfc38ecc:	610e      	btnez	bfc38eea <send_sync_msg+0x9e>
bfc38ece:	6d00      	li	a1,0
bfc38ed0:	040a      	addiu	a0,sp,40
bfc38ed2:	67c5      	move	a2,a1
bfc38ed4:	e940      	jalr	s1
bfc38ed6:	6f13      	li	a3,19
bfc38ed8:	b312      	lw	v1,bfc38f20 <send_sync_msg+0xd4>
bfc38eda:	6d00      	li	a1,0
bfc38edc:	9b80      	lw	a0,0(v1)
bfc38ede:	67c5      	move	a2,a1
bfc38ee0:	e940      	jalr	s1
bfc38ee2:	6f16      	li	a3,22
bfc38ee4:	920b      	lw	v0,44(sp)
bfc38ee6:	6478      	restore	64,ra,s0-s1
bfc38ee8:	e8a0      	jrc	ra
bfc38eea:	6d00      	li	a1,0
bfc38eec:	0c08      	la	a0,bfc38f0c <send_sync_msg+0xc0>
bfc38eee:	67c5      	move	a2,a1
bfc38ef0:	e840      	jalr	s0
bfc38ef2:	6f4b      	li	a3,75
bfc38ef4:	6a00      	li	v0,0
bfc38ef6:	d20b      	sw	v0,44(sp)
bfc38ef8:	17ea      	b	bfc38ece <send_sync_msg+0x82>
bfc38efa:	0208      	addiu	v0,sp,32
bfc38efc:	17c3      	b	bfc38e84 <send_sync_msg+0x38>
bfc38efe:	0000      	addiu	s0,sp,0
bfc38f00:	736d      	cmpi	v1,109
bfc38f02:	2067      	beqz	s0,bfc38fd2 <hci_cmd_time+0x2>
bfc38f04:	7566      	cmpi	a1,102
bfc38f06:	6c6c      	li	a0,108
bfc38f08:	0000      	addiu	s0,sp,0
bfc38f0a:	0000      	addiu	s0,sp,0
bfc38f0c:	736d      	cmpi	v1,109
bfc38f0e:	2067      	beqz	s0,bfc38fde <base_op_entry+0x2>
bfc38f10:	6177      	btnez	bfc39000 <base_op_entry+0x24>
bfc38f12:	7469      	cmpi	a0,105
bfc38f14:	7420      	cmpi	a0,32
bfc38f16:	6d69      	li	a1,105
bfc38f18:	6f65      	li	a3,101
bfc38f1a:	7475      	cmpi	a0,117
bfc38f1c:	0000      	addiu	s0,sp,0
bfc38f1e:	0000      	addiu	s0,sp,0
bfc38f20:	8df8      	lh	a3,48(a1)
bfc38f22:	bfc3      	lwu	a2,12(a3)
bfc38f24:	88d5      	lh	a2,42(s0)
bfc38f26:	bfc3      	lwu	a2,12(a3)
bfc38f28:	88dd      	lh	a2,58(s0)
bfc38f2a:	bfc3      	lwu	a2,12(a3)

bfc38f2c <send_async_msg>:
bfc38f2c:	64e5      	save	40,ra,s0

int send_async_msg(uint8 target_id, msg_apps_t *msg)
{
bfc38f2e:	6704      	move	s0,a0
bfc38f30:	b20e      	lw	v0,bfc38f68 <send_async_msg+0x3c>
    private_msg_t cur_send_pmsg;

    //填充私有消息结构体
    libc_memcpy(&(cur_send_pmsg.msg), msg, sizeof(msg_apps_t));
bfc38f32:	e811      	zeb	s0
bfc38f34:	0404      	addiu	a0,sp,16
bfc38f36:	6e08      	li	a2,8
bfc38f38:	ea40      	jalr	v0
bfc38f3a:	6f00      	li	a3,0
bfc38f3c:	6790      	move	a0,s0

    //发送消息到队列中
    if (sys_mq_send((uint32)(target_id), (void *) &cur_send_pmsg) == -1)
bfc38f3e:	b00c      	lw	s0,bfc38f6c <send_async_msg+0x40>
bfc38f40:	0504      	addiu	a1,sp,16
bfc38f42:	6e00      	li	a2,0
bfc38f44:	e840      	jalr	s0
bfc38f46:	6f18      	li	a3,24
bfc38f48:	ea4f      	not	v0
bfc38f4a:	6b01      	li	v1,1
    {
        DEBUG_ATT_PRINT("msg full", 0, 0);
        return FALSE;
    }
    return TRUE;
bfc38f4c:	2203      	beqz	v0,bfc38f54 <send_async_msg+0x28>
bfc38f4e:	6743      	move	v0,v1
}
bfc38f50:	6465      	restore	40,ra,s0
bfc38f52:	e8a0      	jrc	ra
bfc38f54:	6d00      	li	a1,0
bfc38f56:	b407      	lw	a0,bfc38f70 <send_async_msg+0x44>
bfc38f58:	67c5      	move	a2,a1
bfc38f5a:	e840      	jalr	s0
bfc38f5c:	6f4b      	li	a3,75
bfc38f5e:	6b00      	li	v1,0
bfc38f60:	6743      	move	v0,v1
bfc38f62:	6465      	restore	40,ra,s0
bfc38f64:	e8a0      	jrc	ra
bfc38f66:	0000      	addiu	s0,sp,0
bfc38f68:	88d5      	lh	a2,42(s0)
bfc38f6a:	bfc3      	lwu	a2,12(a3)
bfc38f6c:	88dd      	lh	a2,58(s0)
bfc38f6e:	bfc3      	lwu	a2,12(a3)
bfc38f70:	8f00      	lh	s0,0(a3)
bfc38f72:	bfc3      	lwu	a2,12(a3)

bfc38f74 <g_connect_cnt>:
bfc38f74:	0000 0000                                   ....

bfc38f78 <g_bt_status>:
	...

bfc38f80 <g_hci_event_rev_flag>:
bfc38f80:	0000 0000                                   ....

bfc38f84 <g_SUT_state>:
	...

bfc38f85 <g_cfo_return_num>:
	...

bfc38f86 <g_add_cfo_result_flag>:
	...

bfc38f87 <g_cfo_test_retry_num>:
	...

bfc38f88 <g_mpdata_bin_len>:
bfc38f88:	0000 0000                                   ....

bfc38f8c <g_update_timer_id>:
bfc38f8c:	0000 0000                                   ....

bfc38f90 <g_ringbuf_rw>:
	...

bfc38f9c <g_hci_deal>:
	...

bfc38fcc <g_ber_control>:
bfc38fcc:	0000 0000                                   ....

bfc38fd0 <hci_cmd_time>:
bfc38fd0:	0000 0000                                   ....

bfc38fd4 <bt_op_entry>:
bfc38fd4:	6b0c      	li	v1,12
bfc38fd6:	e805      	break	0

bfc38fd8 <stub_mod_cmd>:
bfc38fd8:	6b40      	li	v1,64
bfc38fda:	e805      	break	0

bfc38fdc <base_op_entry>:
bfc38fdc:	6b00      	li	v1,0
bfc38fde:	e805      	break	0
Disassembly of section BANK_CONTROL_1_0:

41039000 <_config_fs_init>:
41039000:	64f4      	save	32,ra,s0-s1
 * \ingroup      config
 * \note
 *******************************************************************************/
int32 _config_fs_init(uint8 disk_type)
{
41039002:	b611      	lw	a2,41039044 <BANK_CONTROL_1_ADDR_BASE+0x44>
    uint8 drv_type;
    uint8 *drv_name;
    int32 file_sys_id;

    if (disk_type == DISK_H)
    {
        drv_type = DRV_GROUP_STG_CARD;
        drv_name = (uint8 *) card_drv_name;
    }
    else
    {
        drv_type = DRV_GROUP_STG_CARD;
        drv_name = (uint8 *) card_drv_name;
    }

    //装载物理介质
    if (sys_drv_install(drv_type, 0, drv_name) != 0)
41039004:	b311      	lw	v1,41039048 <BANK_CONTROL_1_ADDR_BASE+0x48>
41039006:	6724      	move	s1,a0
41039008:	6d00      	li	a1,0
4103900a:	6c01      	li	a0,1
4103900c:	eb40      	jalr	v1
4103900e:	6f0a      	li	a3,10
41039010:	6702      	move	s0,v0
41039012:	6a02      	li	v0,2
    {
        return -2;
41039014:	e911      	zeb	s1
41039016:	ea4b      	neg	v0
41039018:	2809      	bnez	s0,4103902c <BANK_CONTROL_1_ADDR_BASE+0x2c>
4103901a:	b30c      	lw	v1,41039048 <BANK_CONTROL_1_ADDR_BASE+0x48>
    }

    //装载文件系统
    file_sys_id = sys_mount_fs(drv_type, disk_type, 0);
4103901c:	6c01      	li	a0,1
4103901e:	67b1      	move	a1,s1
41039020:	67d0      	move	a2,s0
41039022:	eb40      	jalr	v1
41039024:	6f29      	li	a3,41
41039026:	ea91      	seb	v0
41039028:	ec4f      	not	a0,v0

    if (file_sys_id == -1)
4103902a:	2402      	beqz	a0,41039030 <BANK_CONTROL_1_ADDR_BASE+0x30>
4103902c:	6474      	restore	32,ra,s0-s1
    {
        //卸载驱动程序
        sys_drv_uninstall(drv_type);
        return -3;
    }

    return file_sys_id;
}
4103902e:	e8a0      	jrc	ra
41039030:	b306      	lw	v1,41039044 <BANK_CONTROL_1_ADDR_BASE+0x44>
41039032:	67b0      	move	a1,s0
41039034:	6c01      	li	a0,1
41039036:	67d0      	move	a2,s0
41039038:	eb40      	jalr	v1
4103903a:	6f0b      	li	a3,11
4103903c:	6d03      	li	a1,3
4103903e:	eaab      	neg	v0,a1
41039040:	6474      	restore	32,ra,s0-s1
41039042:	e8a0      	jrc	ra
41039044:	9140      	lw	s1,256(sp)
41039046:	4103      	addiu	s0,s1,3
41039048:	88dd      	lh	a2,58(s0)
4103904a:	bfc3      	lwu	a2,12(a3)

4103904c <_config_fs_deinit>:
4103904c:	64f4      	save	32,ra,s0-s1
/******************************************************************************/
/*!
 * \par  Description:
 *  卸载物理介质和文件系统
 * \param[in]    disk_type 磁盘类型
 * \param[out]   none
 * \return       none
 * \ingroup      config
 * \note
 *******************************************************************************/
bool _config_fs_deinit(uint8 disk_type, int32 *file_sys_id)
{
4103904e:	6724      	move	s1,a0
41039050:	9d80      	lw	a0,0(a1)
    int32 ret_val;
    uint8 drv_type;

    if (*file_sys_id != -1)
41039052:	6705      	move	s0,a1
41039054:	ea8f      	not	v0,a0
41039056:	e911      	zeb	s1
41039058:	6b01      	li	v1,1
    {
        ret_val = sys_unmount_fs(*file_sys_id);
        *file_sys_id = -1;
    }
    else
    {
        return TRUE;
4103905a:	2a03      	bnez	v0,41039062 <_config_fs_deinit+0x16>
4103905c:	6743      	move	v0,v1
    }

    if (0 > ret_val)
    {
        return FALSE;
    }

    if (disk_type == DISK_H)
    {
        drv_type = DRV_GROUP_STG_CARD;
    }
    else if (disk_type == DISK_U)
    {
        drv_type = DRV_GROUP_STG_UHOST;
    }
    else
    {
        return FALSE;
    }

    ret_val = sys_drv_uninstall(drv_type);

    if (0 > ret_val)
    {
        return FALSE;
    }

    return TRUE;
}
4103905e:	6474      	restore	32,ra,s0-s1
41039060:	e8a0      	jrc	ra
41039062:	6d00      	li	a1,0
41039064:	b20e      	lw	v0,4103909c <_config_fs_deinit+0x50>
41039066:	67c5      	move	a2,a1
41039068:	ea40      	jalr	v0
4103906a:	6f2a      	li	a3,42
4103906c:	6c01      	li	a0,1
4103906e:	eb8b      	neg	v1,a0
41039070:	5200      	slti	v0,0
41039072:	d860      	sw	v1,0(s0)
41039074:	4361      	addiu	v1,v1,1
41039076:	61f2      	btnez	4103905c <_config_fs_deinit+0x10>
41039078:	7110      	cmpi	s1,16
4103907a:	6c01      	li	a0,1
4103907c:	6003      	bteqz	41039084 <_config_fs_deinit+0x38>
4103907e:	7120      	cmpi	s1,32
41039080:	4481      	addiu	a0,a0,1
41039082:	61ec      	btnez	4103905c <_config_fs_deinit+0x10>
41039084:	6d00      	li	a1,0
41039086:	b206      	lw	v0,4103909c <_config_fs_deinit+0x50>
41039088:	67c5      	move	a2,a1
4103908a:	ea40      	jalr	v0
4103908c:	6f0b      	li	a3,11
4103908e:	5200      	slti	v0,0
41039090:	67b8      	move	a1,t8
41039092:	5d01      	sltiu	a1,1
41039094:	6778      	move	v1,t8
41039096:	6743      	move	v0,v1
41039098:	6474      	restore	32,ra,s0-s1
4103909a:	e8a0      	jrc	ra
4103909c:	88dd      	lh	a2,58(s0)
4103909e:	bfc3      	lwu	a2,12(a3)

410390a0 <tick_ISR_install>:
410390a0:	64c3      	save	24,ra

uint32 tick_ISR_install(void)
{
410390a2:	b407      	lw	a0,410390bc <tick_ISR_install+0x1c>
    uint32 timer_id;
    timer_id = sys_set_irq_timer1(tick_ISR, 100);
410390a4:	b207      	lw	v0,410390c0 <tick_ISR_install+0x20>
410390a6:	6d64      	li	a1,100
410390a8:	6e00      	li	a2,0
410390aa:	ea40      	jalr	v0
410390ac:	6f21      	li	a3,33
410390ae:	b306      	lw	v1,410390c4 <tick_ISR_install+0x24>
    tick_cnt = 0;
410390b0:	6c00      	li	a0,0
410390b2:	ea91      	seb	v0
    return timer_id;
}
410390b4:	db80      	sw	a0,0(v1)
410390b6:	6443      	restore	24,ra
410390b8:	e8a0      	jrc	ra
410390ba:	0000      	addiu	s0,sp,0
410390bc:	8e3d      	lh	s1,58(a2)
410390be:	bfc3      	lwu	a2,12(a3)
410390c0:	88dd      	lh	a2,58(s0)
410390c2:	bfc3      	lwu	a2,12(a3)
410390c4:	8db8      	lh	a1,48(a1)
410390c6:	bfc3      	lwu	a2,12(a3)

410390c8 <tick_ISR_uninstall>:
410390c8:	64c3      	save	24,ra

void tick_ISR_uninstall(uint32 timer_id)
{
410390ca:	6d00      	li	a1,0
    sys_del_irq_timer1((void *) timer_id);
410390cc:	b203      	lw	v0,410390d8 <tick_ISR_uninstall+0x10>
410390ce:	67c5      	move	a2,a1
410390d0:	ea40      	jalr	v0
410390d2:	6f22      	li	a3,34
410390d4:	6443      	restore	24,ra
410390d6:	e8a0      	jrc	ra
410390d8:	88dd      	lh	a2,58(s0)
410390da:	bfc3      	lwu	a2,12(a3)

410390dc <act_test_report_test_log>:
410390dc:	64e3      	save	24,ra,s0
}

static void sys_reboot(void)
{       
    DEBUG_ATT_PRINT("reboot...", 0, 0);
    
    sys_local_irq_save();
    
    ENABLE_WATCH_DOG(1);
    
    while(1);
}


int32 act_test_report_test_log(uint32 ret_val, uint32 test_id)
{
410390de:	6704      	move	s0,a0
410390e0:	2c11      	bnez	a0,41039104 <.LBE2+0xe>

410390e2 <.LBB2>:
    if (ret_val == FALSE)
410390e2:	b316      	lw	v1,41039138 <.LBE2+0x42>
    {
        att_write_test_info("test fail: ", test_id, 1);
410390e4:	0c0e      	la	a0,4103911c <.LBE2+0x26>
410390e6:	eb40      	jalr	v1
410390e8:	6e01      	li	a2,1
410390ea:	b215      	lw	v0,4103913c <.LBE2+0x46>
        write_log_file(FALSE);
410390ec:	ea40      	jalr	v0
410390ee:	6790      	move	a0,s0
410390f0:	1a83 e6c3 	jal	41d39b0c <led_flash_fail>
        //sys_mdelay(5000);
        //sys_reboot(); 
        led_flash_fail();
410390f4:	6500      	nop

410390f6 <.LBE2>:
410390f6:	6d00      	li	a1,0
    }  
    else
    {
        att_write_test_info("test ok: ", test_id, 1);        
    }  
    
    att_write_test_info("   ", 0, 0);   
410390f8:	b310      	lw	v1,41039138 <.LBE2+0x42>
410390fa:	0c0c      	la	a0,41039128 <.LBE2+0x32>
410390fc:	eb40      	jalr	v1
410390fe:	67c5      	move	a2,a1
41039100:	6463      	restore	24,ra,s0
}
41039102:	e8a0      	jrc	ra
41039104:	b20d      	lw	v0,41039134 <.LBE2+0x3e>
41039106:	0c0a      	la	a0,4103912c <.LBE2+0x36>
41039108:	ea40      	jalr	v0
4103910a:	6e01      	li	a2,1
4103910c:	6d00      	li	a1,0
4103910e:	b30b      	lw	v1,41039138 <.LBE2+0x42>
41039110:	0c06      	la	a0,41039128 <.LBE2+0x32>
41039112:	eb40      	jalr	v1
41039114:	67c5      	move	a2,a1
41039116:	6463      	restore	24,ra,s0
41039118:	e8a0      	jrc	ra
4103911a:	0000      	addiu	s0,sp,0
4103911c:	6574      	move	s3,a0
4103911e:	7473      	cmpi	a0,115
41039120:	6620      	0x6620
41039122:	6961      	li	s1,97
41039124:	3a6c      	ld	v1,96(v0)
41039126:	0020      	addiu	s0,sp,128
41039128:	2020      	beqz	s0,4103916a <test_get_btstack_status+0x1e>
4103912a:	0020      	addiu	s0,sp,128
4103912c:	6574      	move	s3,a0
4103912e:	7473      	cmpi	a0,115
41039130:	6f20      	li	a3,32
41039132:	3a6b      	ld	v1,88(v0)
41039134:	0020      	addiu	s0,sp,128
41039136:	0000      	addiu	s0,sp,0
41039138:	8b89      	lh	a0,18(v1)
4103913a:	bfc3      	lwu	a2,12(a3)
4103913c:	9419      	lw	a0,100(sp)
4103913e:	4113      	daddiu	s0,s1,3

41039140 <card_drv_name>:
41039140:	6163 6472 642e 7672 0000 0000               card.drv....

4103914c <test_get_btstack_status>:
4103914c:	64c4      	save	32,ra
uint8 g_connect_cnt;
test_btstack_status_t g_bt_status;

void test_get_btstack_status(test_btstack_status_t *bt_status)
{
4103914e:	f400 6b03 	li	v1,1027
    msg_apps_t msg;

    msg.type = MSG_AUTOTEST_GET_BTSTACK_STATUS_SYNC;
41039152:	6e00      	li	a2,0
    msg.content.addr = bt_status;

    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);
41039154:	b205      	lw	v0,41039168 <test_get_btstack_status+0x1c>
41039156:	d405      	sw	a0,20(sp)
41039158:	d304      	sw	v1,16(sp)
4103915a:	6c03      	li	a0,3
4103915c:	0504      	addiu	a1,sp,16
4103915e:	ea40      	jalr	v0
41039160:	67e6      	move	a3,a2
41039162:	6444      	restore	32,ra

    return;
41039164:	e8a0      	jrc	ra
41039166:	0000      	addiu	s0,sp,0
41039168:	8e4d      	lh	v0,26(a2)
4103916a:	bfc3      	lwu	a2,12(a3)

4103916c <bt_clear_error>:
4103916c:	64c4      	save	32,ra
}

/******************************************************************************/
/*!
 * \par  Description:
 * \  清除后台蓝牙的错误状态
 * \param[in]    none
 * \param[out]   none
 * \return       void the result
 * \retval           1 sucess
 * \retval           0 failed
 * \li
 */
/*******************************************************************************/
void bt_clear_error(void)
{
4103916e:	f400 6b04 	li	v1,1028
    msg_apps_t msg;
    msg.type = MSG_AUTOTEST_CLEAR_BTSTACK_ERR_SYNC;
41039172:	6e00      	li	a2,0
    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);
41039174:	b204      	lw	v0,41039184 <bt_clear_error+0x18>
41039176:	d304      	sw	v1,16(sp)
41039178:	6c03      	li	a0,3
4103917a:	0504      	addiu	a1,sp,16
4103917c:	ea40      	jalr	v0
4103917e:	67e6      	move	a3,a2
41039180:	6444      	restore	32,ra
    return;
41039182:	e8a0      	jrc	ra
41039184:	8e4d      	lh	v0,26(a2)
41039186:	bfc3      	lwu	a2,12(a3)

41039188 <connect_source>:
41039188:	64c5      	save	40,ra
}

/******************************************************************************/
/*!
 * \par  Description:
 * \  向后台发送消息要求建立A2DP信道
 * \param[in]    none
 * \param[out]   none
 * \return       void the result
 * \retval           1 sucess
 * \retval           0 failed
 * \li    由于发射机确定不会主动连接小机，因此连接都是小机通过回连方式进行的
 */
/*******************************************************************************/
void connect_source(void)
{
4103918a:	f400 6d06 	li	a1,1030
    msg_apps_t msg;
    msg_reply_t temp_reply;

    //if (g_bt_status.num_connected == 0)
    {
        //if ((g_bt_status.support_profile & (uint8) HFP_SUPPORTED) != 0)
        {
            //消息类型(即消息名称)
            //msg.type = MSG_AUTOTEST_HFP_CONNECT_SYNC;
            //发送同步消息
            //send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, &temp_reply, 0);
        }
        //else
        {
            msg.type = MSG_AUTOTEST_A2DP_CONNECT_SYNC;
4103918e:	b207      	lw	v0,410391a8 <connect_source+0x20>
            send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, &temp_reply, 0);
41039190:	d504      	sw	a1,16(sp)
41039192:	6c03      	li	a0,3
41039194:	0504      	addiu	a1,sp,16
41039196:	0606      	addiu	a2,sp,24
41039198:	ea40      	jalr	v0
4103919a:	6f00      	li	a3,0
4103919c:	b304      	lw	v1,410391ac <connect_source+0x24>
        }

        g_connect_cnt++;
4103919e:	a380      	lbu	a0,0(v1)
410391a0:	4441      	addiu	v0,a0,1
410391a2:	c340      	sb	v0,0(v1)
410391a4:	6445      	restore	40,ra
    }

    return;
410391a6:	e8a0      	jrc	ra
410391a8:	8e4d      	lh	v0,26(a2)
410391aa:	bfc3      	lwu	a2,12(a3)
410391ac:	8f74      	lh	v1,40(a3)
410391ae:	bfc3      	lwu	a2,12(a3)

410391b0 <test_bstack_status_deal>:
410391b0:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
}


bool test_bstack_status_deal(btplay_test_arg_t *btplay_test_arg, bt_paired_dev_info2_t *bt_paired_dev2, uint32 *ret_val)
{
410391b4:	b021      	lw	s0,41039238 <.LBB2+0xa>
    bool loop_exit = FALSE;
    uint32 status_bak;

    status_bak = g_bt_status.conn_status;
410391b6:	6a00      	li	v0,0
410391b8:	a064      	lbu	v1,4(s0)
410391ba:	4024      	addiu	s1,s0,4
410391bc:	6791      	move	a0,s1

    test_get_btstack_status(&g_bt_status);
410391be:	d204      	sw	v0,16(sp)
410391c0:	1802 e453 	jal	4103914c <test_get_btstack_status>
410391c4:	d305      	sw	v1,20(sp)
410391c6:	a044      	lbu	v0,4(s0)

    //DEBUG_ATT_PRINT("bt status", g_bt_status.conn_status, 2);

    //DEBUG_ATT_PRINT("err status", g_bt_status.err_status, 2);

    //DEBUG_ATT_PRINT("hfp status", g_bt_status.hfp_status, 2);

    //DEBUG_ATT_PRINT("support profile", g_bt_status.support_profile, 2);

    if (g_bt_status.conn_status == TEST_CONN_STATUS_ERROR)
410391c8:	7204      	cmpi	v0,4
410391ca:	6108      	btnez	410391dc <test_bstack_status_deal+0x2c>
410391cc:	a181      	lbu	a0,1(s1)
    {
        //硬件出错，立即退出，并设置测试失败
        if (g_bt_status.err_status == TEST_BT_ERR_HW)
410391ce:	7401      	cmpi	a0,1
410391d0:	611f      	btnez	41039210 <test_bstack_status_deal+0x60>
410391d2:	6a01      	li	v0,1
        {
            loop_exit = TRUE;
        }
        else if (g_bt_status.err_status == TEST_BT_ERR_PAGE_TIMEOUT)
        {
            //链路超时，重试一段时间
            if (g_connect_cnt < BT_PLAY_TEST_RETRY_CNT)
            {
                bt_clear_error();

                connect_source();
                tick_cnt = 0;
            }
            else
            {
                loop_exit = TRUE;
410391d4:	d204      	sw	v0,16(sp)
            }

        }
        else
        {
            ;//nothing for QAC
        }
    }
    else if (g_bt_status.conn_status == TEST_CONN_STATUS_WAIT_PAIR)
    {
        if (g_connect_cnt == 0)
        {
            connect_source();
        }
    }
    else if (g_bt_status.conn_status == TEST_CONN_STATUS_LINKED)
    {
        *ret_val = TRUE;
        if ((status_bak != g_bt_status.conn_status) && (btplay_test_arg->bt_fast_mode == TRUE))
        {
            test_btstack_get_paired_dev_info(bt_paired_dev2);               
        }
        
        //连接性测试，发现连接成功立即返回
        if (btplay_test_arg->bt_test_mode == 0)
        {    
            loop_exit = TRUE;
410391d6:	9204      	lw	v0,16(sp)
        }
    }
    else
    {
        ;//nothing for QAC
    }

    return loop_exit;
}
410391d8:	6475      	restore	40,ra,s0-s1
410391da:	e8a0      	jrc	ra
410391dc:	7201      	cmpi	v0,1
410391de:	6106      	btnez	410391ec <test_bstack_status_deal+0x3c>
410391e0:	a0e0      	lbu	a3,0(s0)
410391e2:	2ff9      	bnez	a3,410391d6 <test_bstack_status_deal+0x26>
410391e4:	1802 e462 	jal	41039188 <connect_source>
410391e8:	6500      	nop
410391ea:	17f5      	b	410391d6 <test_bstack_status_deal+0x26>
410391ec:	7203      	cmpi	v0,3
410391ee:	61f3      	btnez	410391d6 <test_bstack_status_deal+0x26>
410391f0:	940c      	lw	a0,48(sp)
410391f2:	6d01      	li	a1,1
410391f4:	dca0      	sw	a1,0(a0)
410391f6:	a044      	lbu	v0,4(s0)
410391f8:	9305      	lw	v1,20(sp)
410391fa:	ea6e      	xor	v0,v1
410391fc:	2204      	beqz	v0,41039206 <test_bstack_status_deal+0x56>
410391fe:	970a      	lw	a3,40(sp)
41039200:	a7c7      	lbu	a2,7(a3)
41039202:	7601      	cmpi	a2,1
41039204:	6014      	bteqz	4103922e <.LBB2>
41039206:	930a      	lw	v1,40(sp)
41039208:	a346      	lbu	v0,6(v1)
4103920a:	2ae5      	bnez	v0,410391d6 <test_bstack_status_deal+0x26>
4103920c:	4241      	addiu	v0,v0,1
4103920e:	17e2      	b	410391d4 <test_bstack_status_deal+0x24>
41039210:	7402      	cmpi	a0,2
41039212:	61e1      	btnez	410391d6 <test_bstack_status_deal+0x26>
41039214:	a080      	lbu	a0,0(s0)
41039216:	5c08      	sltiu	a0,8
41039218:	60dc      	bteqz	410391d2 <test_bstack_status_deal+0x22>
4103921a:	1802 e45b 	jal	4103916c <bt_clear_error>
4103921e:	6500      	nop
41039220:	1802 e462 	jal	41039188 <connect_source>
41039224:	6500      	nop
41039226:	b506      	lw	a1,4103923c <.LBB2+0xe>
41039228:	9604      	lw	a2,16(sp)
4103922a:	ddc0      	sw	a2,0(a1)
4103922c:	17d4      	b	410391d6 <test_bstack_status_deal+0x26>

4103922e <.LBB2>:
4103922e:	1802 e611 	jal	41039844 <test_btstack_get_paired_dev_info>
41039232:	940b      	lw	a0,44(sp)
41039234:	17e8      	b	41039206 <test_bstack_status_deal+0x56>
41039236:	0000      	addiu	s0,sp,0
41039238:	8f74      	lh	v1,40(a3)
4103923a:	bfc3      	lwu	a2,12(a3)
4103923c:	8db8      	lh	a1,48(a1)
4103923e:	bfc3      	lwu	a2,12(a3)

41039240 <bt_connect_proc>:
41039240:	64e3      	save	24,ra,s0

/******************************************************************************/
/*!
 * \par  Description:
 * \  蓝牙状态机处理
 * \param[in]    none
 * \param[out]   none
 * \return       void the result
 * \retval           1 sucess
 * \retval           0 failed
 * \li
 */
/*******************************************************************************/
bool bt_connect_proc(void)
{
41039242:	b30a      	lw	v1,41039268 <bt_connect_proc+0x28>
    bool loop_exit = FALSE;
    //if ((g_disp_status == STATUS_A2DP_PAUSE) || (g_disp_status == STATUS_A2DP_PLAY))
    //{
    //    //如果当前已经为A2DP播放或暂停状态，时间到结束蓝牙模组测试
    //    quit_app(TRUE);
    //    return TRUE;
    //}
    //else
    if ((g_bt_status.conn_status == TEST_CONN_STATUS_WAIT_PAIR) || (g_bt_status.conn_status == TEST_CONN_STATUS_NONE))
41039244:	6800      	li	s0,0
41039246:	a344      	lbu	v0,4(v1)
41039248:	5a02      	sltiu	v0,2
4103924a:	6004      	bteqz	41039254 <bt_connect_proc+0x14>
4103924c:	a380      	lbu	a0,0(v1)
    {
        //回连次数控制
        if (g_connect_cnt < BT_PLAY_TEST_RETRY_CNT)
4103924e:	5c08      	sltiu	a0,8
41039250:	6104      	btnez	4103925a <bt_connect_proc+0x1a>
41039252:	6801      	li	s0,1
        {
            connect_source();
        }
        else
        {
            loop_exit = TRUE;
41039254:	6750      	move	v0,s0
        }
    }
    //else if (g_disp_status == STATUS_LINKED)
    //{
    //    if(p_test_arg->play_time < 10)
    //    {
    //        //一般情况下不会出现该状态，因为配对后立即会进入A2DP，如果出现，则由于逻辑链路建立
    //        //成功，也认为测试成功
    //        quit_app(TRUE);
    //        return TRUE;
    //    }
    //}
    else
    {
        ;//nothing
    }
    return loop_exit;
}
41039256:	6463      	restore	24,ra,s0
41039258:	e8a0      	jrc	ra
4103925a:	1802 e462 	jal	41039188 <connect_source>
4103925e:	6500      	nop
41039260:	6750      	move	v0,s0
41039262:	6463      	restore	24,ra,s0
41039264:	e8a0      	jrc	ra
41039266:	0000      	addiu	s0,sp,0
41039268:	8f74      	lh	v1,40(a3)
4103926a:	bfc3      	lwu	a2,12(a3)

4103926c <switch_app>:
4103926c:	64c4      	save	32,ra

static void test_bt_force_unlink(void)
{
    msg_apps_t msg;

    //消息类型(即消息名称)
    msg.type = MSG_BTSTACK_FORCE_UNLINK_SYNC;
    msg.content.data[0] = 0x00;

    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);
}

static void switch_app(uint32 app_func_id)
{
4103926e:	b507      	lw	a1,41039288 <switch_app+0x1c>
    msg_apps_t msg;
        
    g_app_func_id = app_func_id;
41039270:	f400 6b0a 	li	v1,1034
    
    //消息类型(即消息名称)
    msg.type = MSG_AUTOTEST_SWITCH_APP;
41039274:	b206      	lw	v0,4103928c <switch_app+0x20>
    msg.content.addr = &g_app_func_id;

    send_async_msg(MSG_TARGET_ID_FRONTAPP, &msg);    
41039276:	dd80      	sw	a0,0(a1)
41039278:	d505      	sw	a1,20(sp)
4103927a:	d304      	sw	v1,16(sp)
4103927c:	6c01      	li	a0,1
4103927e:	ea40      	jalr	v0
41039280:	0504      	addiu	a1,sp,16
41039282:	6444      	restore	32,ra
41039284:	e8a0      	jrc	ra
41039286:	0000      	addiu	s0,sp,0
41039288:	8dbc      	lh	a1,56(a1)
4103928a:	bfc3      	lwu	a2,12(a3)
4103928c:	8f2d      	lh	s1,26(a3)
4103928e:	bfc3      	lwu	a2,12(a3)

41039290 <test_bt_manager_loop_deal>:
41039290:	f008 64f6 	save	a0-a1,48,ra,s0-s1
}

uint32 test_bt_manager_loop_deal(btplay_test_arg_t *btplay_test_arg, bt_paired_dev_info2_t *bt_paired_dev2)
{
41039294:	b34b      	lw	v1,410393c0 <test_bt_manager_loop_deal+0x130>
    uint8 loop_cnt = 0;
    uint32 timer_id;
    uint32 ret_val;
    uint32 total_tick = 100; //100*100ms = 10s
    uint8 loop_exit = FALSE;
    uint32 cur_time;

    g_connect_cnt = 0;
41039296:	6900      	li	s1,0
41039298:	b24b      	lw	v0,410393c4 <test_bt_manager_loop_deal+0x134>

    timer_id = tick_ISR_install();
4103929a:	c320      	sb	s1,0(v1)
4103929c:	ea40      	jalr	v0
4103929e:	d106      	sw	s1,24(sp)
410392a0:	b04a      	lw	s0,410393c8 <test_bt_manager_loop_deal+0x138>

    ret_val = FALSE;

    cur_time = sys_get_ab_timer();
410392a2:	d205      	sw	v0,20(sp)
410392a4:	d104      	sw	s1,16(sp)
410392a6:	6791      	move	a0,s1
410392a8:	67b1      	move	a1,s1
410392aa:	67d1      	move	a2,s1
410392ac:	e840      	jalr	s0
410392ae:	6f1c      	li	a3,28
410392b0:	d207      	sw	v0,28(sp)
410392b2:	7132      	cmpi	s1,50

    while (1)
    {
        if (loop_cnt == 50)
410392b4:	6034      	bteqz	4103931e <test_bt_manager_loop_deal+0x8e>
410392b6:	9606      	lw	a2,24(sp)
410392b8:	7601      	cmpi	a2,1
410392ba:	67b8      	move	a1,t8
410392bc:	5d01      	sltiu	a1,1
410392be:	6718      	move	s0,t8
410392c0:	2003      	beqz	s0,410392c8 <test_bt_manager_loop_deal+0x38>
        {
            loop_exit = test_bstack_status_deal(btplay_test_arg, bt_paired_dev2, &ret_val);
            loop_cnt = 0;
            
            if (loop_exit == TRUE)
            {
                switch_app(APP_ATT_FUNC_ID_BTPLAY);
            }            
        }

        if (loop_exit == TRUE && g_att_version == 0)
410392c2:	b243      	lw	v0,410393cc <test_bt_manager_loop_deal+0x13c>
410392c4:	a2e0      	lbu	a3,0(v0)
410392c6:	2746      	beqz	a3,41039354 <test_bt_manager_loop_deal+0xc4>
410392c8:	6c00      	li	a0,0
        {
            break;
        }  

        //测试80s自动退出
        if ((sys_get_ab_timer() - cur_time) > 30000)
410392ca:	b040      	lw	s0,410393c8 <test_bt_manager_loop_deal+0x138>
410392cc:	67a4      	move	a1,a0
410392ce:	67c4      	move	a2,a0
410392d0:	e840      	jalr	s0
410392d2:	6f1c      	li	a3,28
410392d4:	9307      	lw	v1,28(sp)
410392d6:	e273      	subu	a0,v0,v1
410392d8:	f52e 5c11 	sltiu	a0,30001
410392dc:	6106      	btnez	410392ea <test_bt_manager_loop_deal+0x5a>
410392de:	9504      	lw	a1,16(sp)
        {
            if (ret_val == TRUE)
410392e0:	7501      	cmpi	a1,1
410392e2:	6138      	btnez	41039354 <test_bt_manager_loop_deal+0xc4>
410392e4:	1802 e49b 	jal	4103926c <switch_app>
            {
                switch_app(APP_ATT_FUNC_ID_BTPLAY);
410392e8:	6c00      	li	a0,0
410392ea:	b73a      	lw	a3,410393d0 <test_bt_manager_loop_deal+0x140>
            }     
            else
            {
                break;
            }
        }

        if (g_test_share_info.ap_switch_flag == TRUE)
410392ec:	a7c1      	lbu	a2,1(a3)
410392ee:	7601      	cmpi	a2,1
410392f0:	6026      	bteqz	4103933e <test_bt_manager_loop_deal+0xae>
410392f2:	b339      	lw	v1,410393d4 <test_bt_manager_loop_deal+0x144>
        {
            if(g_att_version == 0)
            {
                sys_os_sched_lock();
            }
            
            libc_print("ap quit, test over", 0, 0);
            g_test_share_info.ap_switch_flag = FALSE;
            break;
        }

        if (tick_cnt >= total_tick)
410392f4:	9ba0      	lw	a1,0(v1)
410392f6:	5d64      	sltiu	a1,100
410392f8:	6107      	btnez	41039308 <test_bt_manager_loop_deal+0x78>
410392fa:	6e00      	li	a2,0
        {
            tick_cnt = 0;
410392fc:	1802 e490 	jal	41039240 <bt_connect_proc>

            loop_exit = bt_connect_proc();
41039300:	dbc0      	sw	a2,0(v1)
41039302:	7201      	cmpi	v0,1

            if (loop_exit == TRUE)
41039304:	d206      	sw	v0,24(sp)
41039306:	6026      	bteqz	41039354 <test_bt_manager_loop_deal+0xc4>
41039308:	6d00      	li	a1,0
            {
                break;
            }

        }
        loop_cnt++;
        sys_os_time_dly(1);
4103930a:	41e1      	addiu	a3,s1,1
4103930c:	b02f      	lw	s0,410393c8 <test_bt_manager_loop_deal+0x138>
4103930e:	6727      	move	s1,a3
41039310:	6c01      	li	a0,1
41039312:	67c5      	move	a2,a1
41039314:	6f31      	li	a3,49
41039316:	e840      	jalr	s0
41039318:	e911      	zeb	s1
4103931a:	7132      	cmpi	s1,50
4103931c:	61cc      	btnez	410392b6 <test_bt_manager_loop_deal+0x26>
4103931e:	940c      	lw	a0,48(sp)
41039320:	950d      	lw	a1,52(sp)
41039322:	1802 e46c 	jal	410391b0 <test_bstack_status_deal>
41039326:	0604      	addiu	a2,sp,16
41039328:	7201      	cmpi	v0,1
4103932a:	6798      	move	a0,t8
4103932c:	5c01      	sltiu	a0,1
4103932e:	6718      	move	s0,t8
41039330:	d206      	sw	v0,24(sp)
41039332:	6900      	li	s1,0
41039334:	20c9      	beqz	s0,410392c8 <test_bt_manager_loop_deal+0x38>
41039336:	1802 e49b 	jal	4103926c <switch_app>
4103933a:	6791      	move	a0,s1
4103933c:	17c1      	b	410392c0 <test_bt_manager_loop_deal+0x30>
4103933e:	b224      	lw	v0,410393cc <test_bt_manager_loop_deal+0x13c>
41039340:	a2c0      	lbu	a2,0(v0)
41039342:	261c      	beqz	a2,4103937c <test_bt_manager_loop_deal+0xec>
41039344:	6d00      	li	a1,0
41039346:	0c11      	la	a0,41039388 <test_bt_manager_loop_deal+0xf8>
41039348:	67c5      	move	a2,a1
4103934a:	e840      	jalr	s0
4103934c:	6f4b      	li	a3,75
4103934e:	b421      	lw	a0,410393d0 <test_bt_manager_loop_deal+0x140>
41039350:	6b00      	li	v1,0
41039352:	c461      	sb	v1,1(a0)
41039354:	b221      	lw	v0,410393d8 <test_bt_manager_loop_deal+0x148>
    }

    tick_ISR_uninstall(timer_id);
41039356:	ea40      	jalr	v0
41039358:	9405      	lw	a0,20(sp)
4103935a:	9604      	lw	a2,16(sp)
   
    if (ret_val == FALSE)
4103935c:	2e07      	bnez	a2,4103936c <test_bt_manager_loop_deal+0xdc>
4103935e:	b320      	lw	v1,410393dc <test_bt_manager_loop_deal+0x14c>
    {       
        att_write_test_info("btplay test failed", 0, 0);
    }
    else
    {        
        att_write_test_info("btplay test ok", 0, 0);
41039360:	0c0f      	la	a0,4103939c <test_bt_manager_loop_deal+0x10c>
41039362:	eb40      	jalr	v1
41039364:	67a6      	move	a1,a2
41039366:	9204      	lw	v0,16(sp)
    }
    
    return ret_val;
}
41039368:	6476      	restore	48,ra,s0-s1
4103936a:	e8a0      	jrc	ra
4103936c:	6d00      	li	a1,0
4103936e:	b31c      	lw	v1,410393dc <test_bt_manager_loop_deal+0x14c>
41039370:	0c10      	la	a0,410393b0 <test_bt_manager_loop_deal+0x120>
41039372:	eb40      	jalr	v1
41039374:	67c5      	move	a2,a1
41039376:	9204      	lw	v0,16(sp)
41039378:	6476      	restore	48,ra,s0-s1
4103937a:	e8a0      	jrc	ra
4103937c:	6786      	move	a0,a2
4103937e:	67a6      	move	a1,a2
41039380:	e840      	jalr	s0
41039382:	6f33      	li	a3,51
41039384:	17df      	b	41039344 <test_bt_manager_loop_deal+0xb4>
41039386:	0000      	addiu	s0,sp,0
41039388:	7061      	cmpi	s0,97
4103938a:	7120      	cmpi	s1,32
4103938c:	6975      	li	s1,117
4103938e:	2c74      	bnez	a0,41039478 <.L59+0x52>
41039390:	7420      	cmpi	a0,32
41039392:	7365      	cmpi	v1,101
41039394:	2074      	beqz	s0,4103947e <act_test_bt_test+0x2>
41039396:	766f      	cmpi	a2,111
41039398:	7265      	cmpi	v0,101
4103939a:	0000      	addiu	s0,sp,0
4103939c:	7462      	cmpi	a0,98
4103939e:	6c70      	li	a0,112
410393a0:	7961      	sd	v1,8(s1)
410393a2:	7420      	cmpi	a0,32
410393a4:	7365      	cmpi	v1,101
410393a6:	2074      	beqz	s0,41039490 <act_test_bt_test+0x14>
410393a8:	6166      	btnez	41039476 <.L59+0x50>
410393aa:	6c69      	li	a0,105
410393ac:	6465      	restore	40,ra,s0
410393ae:	0000      	addiu	s0,sp,0
410393b0:	7462      	cmpi	a0,98
410393b2:	6c70      	li	a0,112
410393b4:	7961      	sd	v1,8(s1)
410393b6:	7420      	cmpi	a0,32
410393b8:	7365      	cmpi	v1,101
410393ba:	2074      	beqz	s0,410394a4 <act_test_bt_test+0x28>
410393bc:	6b6f      	li	v1,111
410393be:	0000      	addiu	s0,sp,0
410393c0:	8f74      	lh	v1,40(a3)
410393c2:	bfc3      	lwu	a2,12(a3)
410393c4:	90a1      	lw	s0,644(sp)
410393c6:	4103      	addiu	s0,s1,3
410393c8:	88dd      	lh	a2,58(s0)
410393ca:	bfc3      	lwu	a2,12(a3)
410393cc:	8dc8      	lh	a2,16(a1)
410393ce:	bfc3      	lwu	a2,12(a3)
410393d0:	8dd0      	lh	a2,32(a1)
410393d2:	bfc3      	lwu	a2,12(a3)
410393d4:	8db8      	lh	a1,48(a1)
410393d6:	bfc3      	lwu	a2,12(a3)
410393d8:	90c9      	lw	s0,804(sp)
410393da:	4103      	addiu	s0,s1,3
410393dc:	8b89      	lh	a0,18(v1)
410393de:	bfc3      	lwu	a2,12(a3)

410393e0 <act_test_btstack_install>:
410393e0:	64fd      	save	104,ra,s0-s1

void act_test_btstack_install(btplay_test_arg_t *btplay_test_arg)
{
410393e2:	b024      	lw	s0,41039470 <.L59+0x4a>
410393e4:	6724      	move	s1,a0
410393e6:	1006      	b	410393f4 <act_test_btstack_install+0x14>
410393e8:	6d00      	li	a1,0
    int i;

    bool ret;

    msg_apps_t msg;

    bt_paired_dev_info_t bt_paired_dev;

    bt_paired_dev_info2_t bt_paired_dev2;

    while (1)
    {
        if (g_test_share_info.front_ap_id == APP_ID_BTCALL)
        {
            g_test_share_info.ap_switch_flag = FALSE;
            break;
        }

        sys_os_time_dly(1);
410393ea:	b223      	lw	v0,41039474 <.L59+0x4e>
410393ec:	6c01      	li	a0,1
410393ee:	67c5      	move	a2,a1
410393f0:	ea40      	jalr	v0
410393f2:	6f31      	li	a3,49
410393f4:	a040      	lbu	v0,0(s0)
410393f6:	7203      	cmpi	v0,3
410393f8:	61f7      	btnez	410393e8 <act_test_btstack_install+0x8>
410393fa:	6b00      	li	v1,0
410393fc:	c061      	sb	v1,1(s0)
410393fe:	6d00      	li	a1,0
    }

    while (1)
    {
        DEBUG_ATT_PRINT("send install msg", 0, 0);
41039400:	b21d      	lw	v0,41039474 <.L59+0x4e>
41039402:	67c5      	move	a2,a1
41039404:	0c16      	la	a0,4103945c <.L59+0x36>
41039406:	ea40      	jalr	v0
41039408:	6f4b      	li	a3,75
4103940a:	f400 6c07 	li	a0,1031

        //等待BTSTACK加载
        msg.type = MSG_AUTOTEST_QUERY_BTSTACK_WORK_SYNC;
4103940e:	b21b      	lw	v0,41039478 <.L59+0x52>

        ret = send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 100);
41039410:	d404      	sw	a0,16(sp)
41039412:	0504      	addiu	a1,sp,16
41039414:	6c03      	li	a0,3
41039416:	6e00      	li	a2,0
41039418:	ea40      	jalr	v0
4103941a:	6f64      	li	a3,100
4103941c:	ea11      	zeb	v0
4103941e:	7201      	cmpi	v0,1

        if (ret == TRUE)
41039420:	61ee      	btnez	410393fe <act_test_btstack_install+0x1e>
41039422:	6d00      	li	a1,0
        {
            break;
        }

        //sys_os_time_dly(1);
    }

    //DEBUG_ATT_PRINT("btstack install", 0, 0);

    //if ((g_att_version == 1) && (g_support_norflash_wp == TRUE))
   // {
   //     btplay_test_arg->bt_fast_mode = TRUE;    
   // }
   // else
    {
        btplay_test_arg->bt_fast_mode = FALSE;
41039424:	c1a7      	sb	a1,7(s1)

41039426 <.L59>:
41039426:	6791      	move	a0,s1
41039428:	0304      	addiu	v1,sp,16
4103942a:	41a6      	addiu	a1,s1,6
4103942c:	a4c0      	lbu	a2,0(a0)
    }

    if(btplay_test_arg->bt_fast_mode == FALSE)
    {
retry:
        for (i = 0; i < 6; i++)
        {
            bt_paired_dev.remote_addr[i] = btplay_test_arg->bt_transmitter_addr[i];
4103942e:	4481      	addiu	a0,a0,1
41039430:	eca2      	slt	a0,a1
41039432:	c3c8      	sb	a2,8(v1)
41039434:	4361      	addiu	v1,v1,1
41039436:	61fa      	btnez	4103942c <.L59+0x6>
41039438:	6d3e      	li	a1,62
            //DEBUG_ATT_PRINT("remote addr: ", bt_paired_dev.remote_addr[i], 2);
        }

        bt_paired_dev.support_profile = (uint8)(A2DP_SUPPORTED | LINKKEY_VALID | PROFILE_VALID);
4103943a:	edab      	neg	a1
4103943c:	679d      	move	a0,sp
4103943e:	f400 6b02 	li	v1,1026
        
        msg.type = MSG_AUTOTEST_SET_PAIRED_DEV_SYNC;
41039442:	0706      	addiu	a3,sp,24
        msg.content.addr = &bt_paired_dev;
41039444:	c4be      	sb	a1,30(a0)
41039446:	d304      	sw	v1,16(sp)
41039448:	d705      	sw	a3,20(sp)
4103944a:	6c03      	li	a0,3
    }
    else
    {
        for (i = 0; i < 6; i++)
        {
            bt_paired_dev2.remote_addr[i] = btplay_test_arg->bt_transmitter_addr[i];
            //DEBUG_ATT_PRINT("remote addr: ", bt_paired_dev2.remote_addr[i], 2);
        }

        ret = test_btstack_read_paired_dev_info(&bt_paired_dev2);

        //配对列表不存在，使用之前的连接方式
        if(ret == FALSE)
        {
            DEBUG_ATT_PRINT("no found pair list ", 0, 0);
            goto retry;    
        }
    
        msg.type = MSG_AUTOTEST_SET_PAIRED_DEV2_SYNC;
        msg.content.addr = &bt_paired_dev2;
    }
    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);
4103944c:	6e00      	li	a2,0
4103944e:	b20b      	lw	v0,41039478 <.L59+0x52>
41039450:	0504      	addiu	a1,sp,16
41039452:	ea40      	jalr	v0
41039454:	67e6      	move	a3,a2
41039456:	647d      	restore	104,ra,s0-s1
41039458:	e8a0      	jrc	ra
4103945a:	0000      	addiu	s0,sp,0
4103945c:	6573      	move	s3,v1
4103945e:	646e      	restore	112,ra,s0
41039460:	6920      	li	s1,32
41039462:	736e      	cmpi	v1,110
41039464:	6174      	btnez	4103954e <act_test_bt_test+0xd2>
41039466:	6c6c      	li	a0,108
41039468:	6d20      	li	a1,32
4103946a:	6773      	move	v1,s3
4103946c:	0000      	addiu	s0,sp,0
4103946e:	0000      	addiu	s0,sp,0
41039470:	8dd0      	lh	a2,32(a1)
41039472:	bfc3      	lwu	a2,12(a3)
41039474:	88dd      	lh	a2,58(s0)
41039476:	bfc3      	lwu	a2,12(a3)
41039478:	8e4d      	lh	v0,26(a2)
4103947a:	bfc3      	lwu	a2,12(a3)

4103947c <act_test_bt_test>:
4103947c:	f004 64fe 	save	a0,112,ra,s0-s1

    //DEBUG_ATT_PRINT("set pair list", 0, 0);

}

test_result_e act_test_bt_test(void *arg_buffer)
{
41039480:	6d00      	li	a1,0
    int32 ret_val;
    return_result_t *return_data;
    uint16 trans_bytes = 0;
41039482:	679d      	move	a0,sp
41039484:	b064      	lw	s0,41039614 <.LBB7+0x8>

    bt_paired_dev_info2_t bt_paired_dev2;

    libc_memset(&bt_paired_dev2, 0, sizeof(bt_paired_dev_info2_t));
41039486:	ccac      	sh	a1,24(a0)
41039488:	6e34      	li	a2,52
4103948a:	0408      	addiu	a0,sp,32
4103948c:	6d00      	li	a1,0
4103948e:	e840      	jalr	s0
41039490:	6f01      	li	a3,1
41039492:	b362      	lw	v1,41039618 <.LBB7+0xc>

    btplay_test_arg_t *btplay_test_arg = (btplay_test_arg_t *) arg_buffer;
    
    if (g_att_version == 1)
41039494:	a340      	lbu	v0,0(v1)
41039496:	7201      	cmpi	v0,1
41039498:	6104      	btnez	410394a2 <act_test_bt_test+0x26>
4103949a:	b161      	lw	s1,4103961c <.LBB7+0x10>
    {
        /* config 应用继续运行并启动其它程序;
         */
        g_p_test_ap_info_bak->test_stage = 1;
4103949c:	6f01      	li	a3,1
4103949e:	99c0      	lw	a2,0(s1)
410394a0:	c6e1      	sb	a3,1(a2)
410394a2:	6c00      	li	a0,0
    }

    sys_os_sched_unlock(); 
410394a4:	b25f      	lw	v0,41039620 <.LBB7+0x14>
410394a6:	67a4      	move	a1,a0
410394a8:	67c4      	move	a2,a0
410394aa:	ea40      	jalr	v0
410394ac:	6f34      	li	a3,52
410394ae:	1802 e4f8 	jal	410393e0 <act_test_btstack_install>
    
    act_test_btstack_install(btplay_test_arg);
410394b2:	941c      	lw	a0,112(sp)
410394b4:	b15c      	lw	s1,41039624 <.LBB7+0x18>
    
    if (g_test_mode == TEST_MODE_CARD) 
410394b6:	a1e0      	lbu	a3,0(s1)
410394b8:	f080 271a 	beqz	a3,410395f0 <.LBB6>
410394bc:	941c      	lw	a0,112(sp)
    {
        vfs_file_close(g_file_sys_id, g_test_file_handle);
        
        _config_fs_deinit(DISK_H, &g_file_sys_id);    
    }     

    ret_val = test_bt_manager_loop_deal(btplay_test_arg, &bt_paired_dev2);
410394be:	1802 e4a4 	jal	41039290 <test_bt_manager_loop_deal>
410394c2:	0508      	addiu	a1,sp,32
410394c4:	a100      	lbu	s0,0(s1)
    
    if (g_test_mode == TEST_MODE_CARD) 
410394c6:	d216      	sw	v0,88(sp)
410394c8:	f080 2002 	beqz	s0,410395d0 <.LBE5+0x18>
410394cc:	961c      	lw	a2,112(sp)
    {
        g_file_sys_id = _config_fs_init(DISK_H);  
        
        g_test_file_handle = vfs_file_open(g_file_sys_id, g_ap_name, R_NORMAL_SEEK);  
    } 

    if ((btplay_test_arg->bt_fast_mode == TRUE) && (ret_val == TRUE))
410394ce:	a667      	lbu	v1,7(a2)
410394d0:	7301      	cmpi	v1,1
410394d2:	6104      	btnez	410394dc <act_test_bt_test+0x60>
410394d4:	9416      	lw	a0,88(sp)
410394d6:	7401      	cmpi	a0,1
410394d8:	f080 6018 	bteqz	4103960c <.LBB7>
410394dc:	b752      	lw	a3,41039624 <.LBB7+0x18>
    {
        test_btstack_save_paired_dev_info(&bt_paired_dev2);    
    }

    if (g_test_mode != TEST_MODE_CARD)
410394de:	a7a0      	lbu	a1,0(a3)
410394e0:	2567      	beqz	a1,410395b0 <.LBB5>
410394e2:	b14e      	lw	s1,41039618 <.LBB7+0xc>
    { 
        if (g_att_version == 0)
410394e4:	a1c0      	lbu	a2,0(s1)
410394e6:	265e      	beqz	a2,410395a4 <act_test_bt_test+0x128>
410394e8:	67dd      	move	a2,sp
        {
           stub_ioctrl_set(SWITCH_URAM, STUB_USE_URAM1, 0);    
        }
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = TESTID_BT_TEST;

        return_data->test_result = ret_val;
410394ea:	b156      	lw	s1,41039640 <.LBB7+0x34>
410394ec:	f040 a618 	lbu	s0,88(a2)
410394f0:	6cc1      	li	a0,193
410394f2:	c108      	sb	s0,8(s1)
410394f4:	c983      	sh	a0,6(s1)
410394f6:	0006      	addiu	s0,sp,24

        bytes_to_unicode(btplay_test_arg->bt_transmitter_addr, 5, 6, return_data->return_arg, &trans_bytes);
410394f8:	941c      	lw	a0,112(sp)
410394fa:	67f1      	move	a3,s1
410394fc:	6d05      	li	a1,5
410394fe:	6e06      	li	a2,6
41039500:	4f0a      	addiu	a3,10
41039502:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
41039506:	d004      	sw	s0,16(sp)
41039508:	67fd      	move	a3,sp

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;
4103950a:	afac      	lhu	a1,24(a3)
4103950c:	6b2c      	li	v1,44
4103950e:	45c1      	addiu	a2,a1,1
41039510:	cfcc      	sh	a2,24(a3)
41039512:	ee31      	zeh	a2

        bytes_to_unicode(&(btplay_test_arg->bt_test_mode), 0, 1, &(return_data->return_arg[trans_bytes]), &trans_bytes);
41039514:	32a4      	sll	v0,a1,1
41039516:	37c4      	sll	a3,a2,1
41039518:	951c      	lw	a1,112(sp)
4103951a:	e231      	addu	a0,v0,s1
4103951c:	e73d      	addu	a3,s1
4103951e:	cc65      	sh	v1,10(a0)
41039520:	6e01      	li	a2,1
41039522:	4586      	addiu	a0,a1,6
41039524:	4f0a      	addiu	a3,10
41039526:	6d00      	li	a1,0
41039528:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
4103952c:	d004      	sw	s0,16(sp)
4103952e:	67dd      	move	a2,sp

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;
41039530:	ae4c      	lhu	v0,24(a2)
41039532:	6c2c      	li	a0,44
41039534:	42a1      	addiu	a1,v0,1
41039536:	ceac      	sh	a1,24(a2)
41039538:	3344      	sll	v1,v0,1
4103953a:	ed31      	zeh	a1

        bytes_to_unicode(&(btplay_test_arg->bt_fast_mode), 0, 1, &(return_data->return_arg[trans_bytes]), &trans_bytes);
4103953c:	e33d      	addu	a3,v1,s1
4103953e:	36a4      	sll	a2,a1,1
41039540:	921c      	lw	v0,112(sp)
41039542:	cf85      	sh	a0,10(a3)
41039544:	e63d      	addu	a3,a2,s1
41039546:	4287      	addiu	a0,v0,7
41039548:	6d00      	li	a1,0
4103954a:	6e01      	li	a2,1
4103954c:	4f0a      	addiu	a3,10
4103954e:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
41039552:	d004      	sw	s0,16(sp)
41039554:	677d      	move	v1,sp

        //添加结束符
        return_data->return_arg[trans_bytes++] = 0x0000;
41039556:	abac      	lhu	a1,24(v1)
41039558:	6a01      	li	v0,1

        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
4103955a:	4561      	addiu	v1,a1,1
4103955c:	34a4      	sll	a0,a1,1
4103955e:	e439      	addu	a2,a0,s1
41039560:	6783      	move	a0,v1
41039562:	ec31      	zeh	a0
41039564:	67fd      	move	a3,sp
41039566:	6d00      	li	a1,0
41039568:	ea8c      	and	v0,a0
4103956a:	cf6c      	sh	v1,24(a3)
4103956c:	cea5      	sh	a1,10(a2)
4103956e:	2206      	beqz	v0,4103957c <act_test_bt_test+0x100>
41039570:	3284      	sll	v0,a0,1
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
41039572:	43c1      	addiu	a2,v1,1
41039574:	67fd      	move	a3,sp
41039576:	e22d      	addu	v1,v0,s1
41039578:	cfcc      	sh	a2,24(a3)
4103957a:	cba5      	sh	a1,10(v1)
4103957c:	679d      	move	a0,sp
        }
       
        act_test_report_result(return_data, trans_bytes * 2 + 4);
4103957e:	ac6c      	lhu	v1,24(a0)
41039580:	b231      	lw	v0,41039644 <.LBB7+0x38>
41039582:	3564      	sll	a1,v1,1
41039584:	45a4      	addiu	a1,a1,4
41039586:	6791      	move	a0,s1
41039588:	ea40      	jalr	v0
4103958a:	ed31      	zeh	a1
4103958c:	6c00      	li	a0,0
    }
    else
    {
        act_test_report_test_log(ret_val, TESTID_BT_TEST);
    }

    sys_os_sched_lock();
4103958e:	b225      	lw	v0,41039620 <.LBB7+0x14>
41039590:	67a4      	move	a1,a0
41039592:	67c4      	move	a2,a0
41039594:	ea40      	jalr	v0
41039596:	6f33      	li	a3,51
41039598:	67fd      	move	a3,sp
    
    return ret_val;
}
4103959a:	f040 a758 	lbu	v0,88(a3)
4103959e:	ea11      	zeb	v0
410395a0:	647e      	restore	112,ra,s0-s1
410395a2:	e8a0      	jrc	ra
410395a4:	6c02      	li	a0,2
410395a6:	b026      	lw	s0,4103963c <.LBB7+0x30>
410395a8:	6d01      	li	a1,1
410395aa:	e840      	jalr	s0
410395ac:	67e4      	move	a3,a0
410395ae:	179c      	b	410394e8 <act_test_bt_test+0x6c>

410395b0 <.LBB5>:
410395b0:	9416      	lw	a0,88(sp)
410395b2:	1802 e437 	jal	410390dc <act_test_report_test_log>
410395b6:	6dc1      	li	a1,193

410395b8 <.LBE5>:
410395b8:	6c00      	li	a0,0
410395ba:	b21a      	lw	v0,41039620 <.LBB7+0x14>
410395bc:	67a4      	move	a1,a0
410395be:	67c4      	move	a2,a0
410395c0:	ea40      	jalr	v0
410395c2:	6f33      	li	a3,51
410395c4:	67fd      	move	a3,sp
410395c6:	f040 a758 	lbu	v0,88(a3)
410395ca:	ea11      	zeb	v0
410395cc:	647e      	restore	112,ra,s0-s1
410395ce:	e8a0      	jrc	ra
410395d0:	b219      	lw	v0,41039630 <.LBB7+0x24>
410395d2:	ea40      	jalr	v0
410395d4:	6c10      	li	a0,16
410395d6:	b715      	lw	a3,41039628 <.LBB7+0x1c>
410395d8:	6d05      	li	a1,5
410395da:	df40      	sw	v0,0(a3)
410395dc:	6782      	move	a0,v0
410395de:	d504      	sw	a1,16(sp)
410395e0:	b214      	lw	v0,41039630 <.LBB7+0x24>
410395e2:	b516      	lw	a1,41039638 <.LBB7+0x2c>
410395e4:	67d0      	move	a2,s0
410395e6:	ea40      	jalr	v0
410395e8:	67f0      	move	a3,s0
410395ea:	b411      	lw	a0,4103962c <.LBB7+0x20>
410395ec:	dc40      	sw	v0,0(a0)
410395ee:	176e      	b	410394cc <act_test_bt_test+0x50>

410395f0 <.LBB6>:
410395f0:	b00e      	lw	s0,41039628 <.LBB7+0x1c>
410395f2:	b60f      	lw	a2,4103962c <.LBB7+0x20>
410395f4:	9880      	lw	a0,0(s0)
410395f6:	9ea0      	lw	a1,0(a2)
410395f8:	6b07      	li	v1,7
410395fa:	b20e      	lw	v0,41039630 <.LBB7+0x24>
410395fc:	d304      	sw	v1,16(sp)
410395fe:	ea40      	jalr	v0
41039600:	67c7      	move	a2,a3
41039602:	6c10      	li	a0,16
41039604:	1802 e413 	jal	4103904c <_config_fs_deinit>
41039608:	67b0      	move	a1,s0
4103960a:	1758      	b	410394bc <act_test_bt_test+0x40>

4103960c <.LBB7>:
4103960c:	1802 e619 	jal	41039864 <test_btstack_save_paired_dev_info>
41039610:	0408      	addiu	a0,sp,32
41039612:	1764      	b	410394dc <act_test_bt_test+0x60>
41039614:	88d5      	lh	a2,42(s0)
41039616:	bfc3      	lwu	a2,12(a3)
41039618:	8dc8      	lh	a2,16(a1)
4103961a:	bfc3      	lwu	a2,12(a3)
4103961c:	8dfc      	lh	a3,56(a1)
4103961e:	bfc3      	lwu	a2,12(a3)
41039620:	88dd      	lh	a2,58(s0)
41039622:	bfc3      	lwu	a2,12(a3)
41039624:	8dc9      	lh	a2,18(a1)
41039626:	bfc3      	lwu	a2,12(a3)
41039628:	8de8      	lh	a3,16(a1)
4103962a:	bfc3      	lwu	a2,12(a3)
4103962c:	8dec      	lh	a3,24(a1)
4103962e:	bfc3      	lwu	a2,12(a3)
41039630:	88e1      	lh	a3,2(s0)
41039632:	bfc3      	lwu	a2,12(a3)
41039634:	9001      	lw	s0,4(sp)
41039636:	4103      	addiu	s0,s1,3
41039638:	8e18      	lh	s0,48(a2)
4103963a:	bfc3      	lwu	a2,12(a3)
4103963c:	8fd9      	lh	a2,50(a3)
4103963e:	bfc3      	lwu	a2,12(a3)
41039640:	a100      	lbu	s0,0(s1)
41039642:	9fc3      	lw	a2,12(a3)
41039644:	9b41      	lw	v0,4(v1)
41039646:	41cb      	addiu	a2,s1,-5

41039648 <att_test_open_file>:
41039648:	f004 64fa 	save	a0,80,ra,s0-s1
 *******************************************************************************/
#include <ap_manager_test.h>

int32 att_test_open_file(bt_paired_dev_info2_t *paired_dev_info, uint8 open_mode)
{
4103964c:	b037      	lw	s0,41039728 <att_test_open_file+0xe0>
    uint8 *pdata;
    int32 trans_bytes;
    int32 file_length;
    uint8 temp_data[32];

    att_fopen_arg_t *att_fopen;

    uint32 random_val;

    trans_bytes = 0;

    file_length = 0;

    att_fopen = (att_fopen_arg_t *) STUB_ATT_RW_TEMP_BUFFER;
4103964e:	ed11      	zeb	a1
41039650:	6900      	li	s1,0
41039652:	b237      	lw	v0,4103972c <att_test_open_file+0xe4>

    libc_memset(att_fopen, 0, 128);
41039654:	d50f      	sw	a1,60(sp)
41039656:	d10e      	sw	s1,56(sp)
41039658:	6790      	move	a0,s0
4103965a:	67b1      	move	a1,s1
4103965c:	6e80      	li	a2,128
4103965e:	ea40      	jalr	v0
41039660:	6f01      	li	a3,1
41039662:	920f      	lw	v0,60(sp)

    if(open_mode == FILE_OPEN_MODE_RB)
41039664:	2a59      	bnez	v0,41039718 <att_test_open_file+0xd0>
41039666:	6972      	li	s1,114
    {
        att_fopen->open_mode[0] = 'r';
41039668:	c026      	sb	s1,6(s0)
4103966a:	67fd      	move	a3,sp
        att_fopen->open_mode[1] = 0x00;
4103966c:	f020 a7dc 	lbu	a2,60(a3)
41039670:	6d62      	li	a1,98
        att_fopen->open_mode[2] = 'b';
41039672:	c0c7      	sb	a2,7(s0)
41039674:	c0a8      	sb	a1,8(s0)
41039676:	679d      	move	a0,sp
        att_fopen->open_mode[3] = 0x00;
41039678:	f020 a47c 	lbu	v1,60(a0)
4103967c:	c069      	sb	v1,9(s0)
4103967e:	050e      	addiu	a1,sp,56
    }
    else
    {
        att_fopen->open_mode[0] = 'w';
        att_fopen->open_mode[1] = 0x00;
        att_fopen->open_mode[2] = 'b';
        att_fopen->open_mode[3] = 0x00;        
    }
    
    bytes_to_unicode(paired_dev_info->remote_addr, 5, 12, &(att_fopen->file_name[0]), &trans_bytes);
41039680:	9414      	lw	a0,80(sp)
41039682:	67f0      	move	a3,s0
41039684:	d504      	sw	a1,16(sp)
41039686:	6e0c      	li	a2,12
41039688:	6d05      	li	a1,5
4103968a:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
4103968e:	4f0e      	addiu	a3,14
41039690:	950e      	lw	a1,56(sp)
    
    att_fopen->file_name[trans_bytes++] = '.';
41039692:	6c2e      	li	a0,46
41039694:	e51d      	addu	a3,a1,s0
41039696:	4563      	addiu	v1,a1,3
    att_fopen->file_name[trans_bytes++] = 0;

    att_fopen->file_name[trans_bytes++] = 'b';
41039698:	6a62      	li	v0,98
4103969a:	c78e      	sb	a0,14(a3)
4103969c:	c750      	sb	v0,16(a3)
4103969e:	6c00      	li	a0,0
410396a0:	e305      	addu	s1,v1,s0
    att_fopen->file_name[trans_bytes++] = 0;
410396a2:	4545      	addiu	v0,a1,5

    att_fopen->file_name[trans_bytes++] = 'i';
410396a4:	6e69      	li	a2,105
410396a6:	c78f      	sb	a0,15(a3)
410396a8:	e20d      	addu	v1,v0,s0
    att_fopen->file_name[trans_bytes++] = 0;
410396aa:	c18e      	sb	a0,14(s1)
410396ac:	c7d2      	sb	a2,18(a3)
410396ae:	696e      	li	s1,110

    att_fopen->file_name[trans_bytes++] = 'n';
410396b0:	45c7      	addiu	a2,a1,7
410396b2:	4d08      	addiu	a1,8
    att_fopen->file_name[trans_bytes++] = 0;
410396b4:	c38e      	sb	a0,14(v1)
410396b6:	c734      	sb	s1,20(a3)
410396b8:	45e1      	addiu	a3,a1,1

    att_fopen->file_name[trans_bytes++] = 0;
410396ba:	e609      	addu	v0,a2,s0
410396bc:	e50d      	addu	v1,a1,s0
410396be:	47a1      	addiu	a1,a3,1
    att_fopen->file_name[trans_bytes++] = 0;    
410396c0:	c28e      	sb	a0,14(v0)
410396c2:	e705      	addu	s1,a3,s0
410396c4:	c38e      	sb	a0,14(v1)
410396c6:	e519      	addu	a2,a1,s0
    
    att_fopen->file_name[trans_bytes++] = 0;
410396c8:	4561      	addiu	v1,a1,1
410396ca:	c18e      	sb	a0,14(s1)
410396cc:	e309      	addu	v0,v1,s0
    att_fopen->file_name[trans_bytes++] = 0; 
410396ce:	c68e      	sb	a0,14(a2)
410396d0:	43a1      	addiu	a1,v1,1
410396d2:	b616      	lw	a2,41039728 <att_test_open_file+0xe0>

    att_write_data(STUB_CMD_ATT_FILE_OPEN, trans_bytes + 8, STUB_ATT_RW_TEMP_BUFFER);
410396d4:	b017      	lw	s0,41039730 <att_test_open_file+0xe8>
410396d6:	c28e      	sb	a0,14(v0)
410396d8:	d50e      	sw	a1,56(sp)
410396da:	f480 6c00 	li	a0,1152
410396de:	e840      	jalr	s0
410396e0:	4d08      	addiu	a1,8
410396e2:	b115      	lw	s1,41039734 <att_test_open_file+0xec>

    att_read_data(STUB_CMD_ATT_FILE_OPEN, 4, temp_data);
410396e4:	f480 6c00 	li	a0,1152
410396e8:	6d04      	li	a1,4
410396ea:	e940      	jalr	s1
410396ec:	0606      	addiu	a2,sp,24
410396ee:	67fd      	move	a3,sp

    pdata = (uint8 *) temp_data;

    file_length = (pdata[6]) | (pdata[7] << 8);
410396f0:	a7df      	lbu	a2,31(a3)
410396f2:	a73e      	lbu	s1,30(a3)
410396f4:	35c0      	sll	a1,a2,8
410396f6:	b60d      	lw	a2,41039728 <att_test_open_file+0xe0>

    att_write_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);
410396f8:	f4e0 6c1e 	li	a0,1278
410396fc:	e9ad      	or	s1,a1
410396fe:	e840      	jalr	s0
41039700:	6d00      	li	a1,0
41039702:	940f      	lw	a0,60(sp)

    //print_log("file len: %d open_mode %d", file_length, open_mode);    

    if(open_mode == FILE_OPEN_MODE_RB)
41039704:	6a00      	li	v0,0
    {
        if ((file_length != 0) && (file_length != 0xffff))
        {
            return file_length;
        }
        else
        {
            return 0;
        }
    }
    else
    {
        return 0;                
41039706:	2c06      	bnez	a0,41039714 <att_test_open_file+0xcc>
41039708:	2104      	beqz	s1,41039712 <att_test_open_file+0xca>
4103970a:	f7ff 711f 	cmpi	s1,65535
4103970e:	6751      	move	v0,s1
41039710:	6101      	btnez	41039714 <att_test_open_file+0xcc>
41039712:	6a00      	li	v0,0
41039714:	647a      	restore	80,ra,s0-s1
    }
       
}
41039716:	e8a0      	jrc	ra
41039718:	6b77      	li	v1,119
4103971a:	6a62      	li	v0,98
4103971c:	c066      	sb	v1,6(s0)
4103971e:	c027      	sb	s1,7(s0)
41039720:	c048      	sb	v0,8(s0)
41039722:	c029      	sb	s1,9(s0)
41039724:	17ac      	b	4103967e <att_test_open_file+0x36>
41039726:	0000      	addiu	s0,sp,0
41039728:	a000      	lbu	s0,0(s0)
4103972a:	9fc3      	lw	a2,12(a3)
4103972c:	88d5      	lh	a2,42(s0)
4103972e:	bfc3      	lwu	a2,12(a3)
41039730:	88e5      	lh	a3,10(s0)
41039732:	bfc3      	lwu	a2,12(a3)
41039734:	890d      	lh	s0,26(s1)
41039736:	bfc3      	lwu	a2,12(a3)

41039738 <att_test_open_record_file>:
41039738:	64f5      	save	40,ra,s0-s1

int32 att_test_open_record_file(bt_paired_dev_info2_t *paired_dev_info)
{
4103973a:	d404      	sw	a0,16(sp)
    uint32 file_len;

    uint32 read_len;

    uint8 *pdata;
    
    att_fread_arg_t *att_fread_arg = (att_fread_arg_t *) STUB_ATT_RW_TEMP_BUFFER;

    file_len = att_test_open_file(paired_dev_info, FILE_OPEN_MODE_RB);
4103973c:	b119      	lw	s1,410397a0 <att_test_open_record_file+0x68>
4103973e:	1802 e592 	jal	41039648 <att_test_open_file>
41039742:	6d00      	li	a1,0
41039744:	6702      	move	s0,v0
41039746:	651a      	move	t8,v0
    
    //先判断文件是否存在
    if(file_len != 0)
    {     
        att_fread_arg->offsetl = 0;
        att_fread_arg->offseth = 0;
        att_fread_arg->lengthl = file_len & 0xffff;
        att_fread_arg->lengthh = (file_len >> 16);
        
        att_write_data(STUB_CMD_ATT_FILE_READ, 8, (uint8 *)STUB_ATT_RW_TEMP_BUFFER);

        att_read_data(STUB_CMD_ATT_FILE_READ, file_len, STUB_ATT_RW_TEMP_BUFFER);

        pdata = (uint8 *) STUB_ATT_RW_TEMP_BUFFER;

        read_len = (pdata[6]) | (pdata[7] << 8);

        libc_memcpy(paired_dev_info, (uint8 *)(STUB_ATT_RW_TEMP_BUFFER + 6), sizeof(bt_paired_dev_info2_t));

        att_write_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);

        return read_len;
    }
    else
    {
        return 0;
41039748:	2a03      	bnez	v0,41039750 <att_test_open_record_file+0x18>
4103974a:	6758      	move	v0,t8
    }
}
4103974c:	6475      	restore	40,ra,s0-s1
4103974e:	e8a0      	jrc	ra
41039750:	3702      	srl	a3,s0,8
41039752:	36e2      	srl	a2,a3,8
41039754:	b314      	lw	v1,410397a4 <att_test_open_record_file+0x6c>
41039756:	6a00      	li	v0,0
41039758:	c905      	sh	s0,10(s1)
4103975a:	c9c6      	sh	a2,12(s1)
4103975c:	c943      	sh	v0,6(s1)
4103975e:	67d1      	move	a2,s1
41039760:	c944      	sh	v0,8(s1)
41039762:	f480 6c01 	li	a0,1153
41039766:	eb40      	jalr	v1
41039768:	6d08      	li	a1,8
4103976a:	67b0      	move	a1,s0
4103976c:	b00f      	lw	s0,410397a8 <att_test_open_record_file+0x70>
4103976e:	f480 6c01 	li	a0,1153
41039772:	e840      	jalr	s0
41039774:	67d1      	move	a2,s1
41039776:	a1a7      	lbu	a1,7(s1)
41039778:	a106      	lbu	s0,6(s1)
4103977a:	34a0      	sll	a0,a1,8
4103977c:	e88d      	or	s0,a0
4103977e:	b50c      	lw	a1,410397ac <att_test_open_record_file+0x74>
41039780:	9404      	lw	a0,16(sp)
41039782:	b20c      	lw	v0,410397b0 <att_test_open_record_file+0x78>
41039784:	6f00      	li	a3,0
41039786:	ea40      	jalr	v0
41039788:	6e34      	li	a2,52
4103978a:	b307      	lw	v1,410397a4 <att_test_open_record_file+0x6c>
4103978c:	f4e0 6c1e 	li	a0,1278
41039790:	6d00      	li	a1,0
41039792:	eb40      	jalr	v1
41039794:	67d1      	move	a2,s1
41039796:	6518      	move	t8,s0
41039798:	6758      	move	v0,t8
4103979a:	6475      	restore	40,ra,s0-s1
4103979c:	e8a0      	jrc	ra
4103979e:	0000      	addiu	s0,sp,0
410397a0:	a000      	lbu	s0,0(s0)
410397a2:	9fc3      	lw	a2,12(a3)
410397a4:	88e5      	lh	a3,10(s0)
410397a6:	bfc3      	lwu	a2,12(a3)
410397a8:	890d      	lh	s0,26(s1)
410397aa:	bfc3      	lwu	a2,12(a3)
410397ac:	a006      	lbu	s0,6(s0)
410397ae:	9fc3      	lw	a2,12(a3)
410397b0:	88d5      	lh	a2,42(s0)
410397b2:	bfc3      	lwu	a2,12(a3)

410397b4 <att_test_close_file>:
410397b4:	64e3      	save	24,ra,s0

int32 att_test_close_file(void)
{
410397b6:	b009      	lw	s0,410397d8 <att_test_close_file+0x24>
    att_write_data(STUB_CMD_ATT_FILE_CLOSE, 0, STUB_ATT_RW_TEMP_BUFFER);
410397b8:	b209      	lw	v0,410397dc <att_test_close_file+0x28>
410397ba:	67d0      	move	a2,s0
410397bc:	f480 6c03 	li	a0,1155
410397c0:	ea40      	jalr	v0
410397c2:	6d00      	li	a1,0
410397c4:	b207      	lw	v0,410397e0 <att_test_close_file+0x2c>

    att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);
410397c6:	f4e0 6c1e 	li	a0,1278
410397ca:	6d00      	li	a1,0
410397cc:	ea40      	jalr	v0
410397ce:	67d0      	move	a2,s0
410397d0:	6a01      	li	v0,1

    return TRUE;

}
410397d2:	6463      	restore	24,ra,s0
410397d4:	e8a0      	jrc	ra
410397d6:	0000      	addiu	s0,sp,0
410397d8:	a000      	lbu	s0,0(s0)
410397da:	9fc3      	lw	a2,12(a3)
410397dc:	88e5      	lh	a3,10(s0)
410397de:	bfc3      	lwu	a2,12(a3)
410397e0:	890d      	lh	s0,26(s1)
410397e2:	bfc3      	lwu	a2,12(a3)

410397e4 <test_btstack_read_paired_dev_info>:
410397e4:	f004 64f4 	save	a0,32,ra,s0-s1



//从文件读取配对信息
uint32 test_btstack_read_paired_dev_info(bt_paired_dev_info2_t *paired_dev_info)
{
410397e8:	b215      	lw	v0,4103983c <test_btstack_read_paired_dev_info+0x58>
    uint32 i;

    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) LOG_FILE_BUFFER;
    
    if(g_test_mode == TEST_MODE_CARD)
410397ea:	a220      	lbu	s1,0(v0)
410397ec:	2910      	bnez	s1,4103980e <test_btstack_read_paired_dev_info+0x2a>
410397ee:	18c2 e4fd 	jal	411b93f4 <act_open_att_record_file>
    {      
        act_open_att_record_file();
410397f2:	6500      	nop
410397f4:	b011      	lw	s0,41039838 <test_btstack_read_paired_dev_info+0x54>
        
        if(libc_memcmp(&(btaddr_log->bt_paired_dev_info.remote_addr), paired_dev_info->remote_addr, 6) == 0)
410397f6:	b313      	lw	v1,41039840 <test_btstack_read_paired_dev_info+0x5c>
410397f8:	4818      	addiu	s0,24
410397fa:	9508      	lw	a1,32(sp)
410397fc:	6790      	move	a0,s0
410397fe:	6e06      	li	a2,6
41039800:	eb40      	jalr	v1
41039802:	6f02      	li	a3,2
41039804:	6771      	move	v1,s1
        {
            libc_memcpy(paired_dev_info, &(btaddr_log->bt_paired_dev_info), sizeof(bt_paired_dev_info2_t));
        }
        else
        {
            return FALSE;      
41039806:	220f      	beqz	v0,41039826 <test_btstack_read_paired_dev_info+0x42>
41039808:	6743      	move	v0,v1
        }
    }
    else
    {
        if(att_test_open_record_file(paired_dev_info) != 0)
        {
            att_test_close_file();           
        }
        else
        {
            return FALSE;
        }
    }

    return TRUE;     
}
4103980a:	6474      	restore	32,ra,s0-s1
4103980c:	e8a0      	jrc	ra
4103980e:	1802 e5ce 	jal	41039738 <att_test_open_record_file>
41039812:	9408      	lw	a0,32(sp)
41039814:	6762      	move	v1,v0
41039816:	22f8      	beqz	v0,41039808 <test_btstack_read_paired_dev_info+0x24>
41039818:	1802 e5ed 	jal	410397b4 <att_test_close_file>
4103981c:	6500      	nop
4103981e:	6b01      	li	v1,1
41039820:	6743      	move	v0,v1
41039822:	6474      	restore	32,ra,s0-s1
41039824:	e8a0      	jrc	ra
41039826:	b307      	lw	v1,41039840 <test_btstack_read_paired_dev_info+0x5c>
41039828:	9408      	lw	a0,32(sp)
4103982a:	67b0      	move	a1,s0
4103982c:	6e34      	li	a2,52
4103982e:	eb40      	jalr	v1
41039830:	67e2      	move	a3,v0
41039832:	6b01      	li	v1,1
41039834:	17f5      	b	41039820 <test_btstack_read_paired_dev_info+0x3c>
41039836:	0000      	addiu	s0,sp,0
41039838:	b800      	lwu	s0,0(s0)
4103983a:	9fc3      	lw	a2,12(a3)
4103983c:	8dc9      	lh	a2,18(a1)
4103983e:	bfc3      	lwu	a2,12(a3)
41039840:	88d5      	lh	a2,42(s0)
41039842:	bfc3      	lwu	a2,12(a3)

41039844 <test_btstack_get_paired_dev_info>:
41039844:	64c4      	save	32,ra

void test_btstack_get_paired_dev_info(bt_paired_dev_info2_t *bt_paired_dev2)
{
41039846:	f400 6b0c 	li	v1,1036
    msg_apps_t msg;
    
    msg.type = MSG_AUTOTEST_GET_PAIRED_DEV2_SYNC;
4103984a:	6e00      	li	a2,0
    msg.content.addr = bt_paired_dev2;
    
    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);     
4103984c:	b205      	lw	v0,41039860 <test_btstack_get_paired_dev_info+0x1c>
4103984e:	d405      	sw	a0,20(sp)
41039850:	d304      	sw	v1,16(sp)
41039852:	6c03      	li	a0,3
41039854:	0504      	addiu	a1,sp,16
41039856:	ea40      	jalr	v0
41039858:	67e6      	move	a3,a2
4103985a:	6444      	restore	32,ra
4103985c:	e8a0      	jrc	ra
4103985e:	0000      	addiu	s0,sp,0
41039860:	8e4d      	lh	v0,26(a2)
41039862:	bfc3      	lwu	a2,12(a3)

41039864 <test_btstack_save_paired_dev_info>:
41039864:	f004 64fb 	save	a0,88,ra,s0-s1

}

//从btstack获取配对信息并更新到文件中
void test_btstack_save_paired_dev_info(bt_paired_dev_info2_t *bt_paired_dev2)
{
41039868:	9516      	lw	a1,88(sp)
    uint32 i;
    
    uint32 file_len;

    bt_paired_dev_info2_t old_paired_dev;

    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) LOG_FILE_BUFFER;
    
    att_fwrite_arg_t *att_fwrite_arg = (att_fwrite_arg_t *) STUB_ATT_RW_TEMP_BUFFER;

    libc_memcpy(&(old_paired_dev.remote_addr), bt_paired_dev2->remote_addr, 6);
4103986a:	b12a      	lw	s1,41039910 <.LBE4+0x78>
4103986c:	0404      	addiu	a0,sp,16
4103986e:	6e06      	li	a2,6
41039870:	e940      	jalr	s1
41039872:	6f00      	li	a3,0
41039874:	1802 e5f9 	jal	410397e4 <test_btstack_read_paired_dev_info>
    
    if(test_btstack_read_paired_dev_info(&old_paired_dev) == TRUE)
41039878:	0404      	addiu	a0,sp,16
4103987a:	7201      	cmpi	v0,1
4103987c:	6034      	bteqz	410398e6 <.LBE4+0x4e>
4103987e:	b226      	lw	v0,41039914 <.LBE4+0x7c>
    {
        if(libc_memcmp(&old_paired_dev, bt_paired_dev2, sizeof(bt_paired_dev_info2_t)) == 0)
        {
            return;
        }
    }
    
    if(g_test_mode == TEST_MODE_CARD)
41039880:	a200      	lbu	s0,0(v0)
41039882:	280c      	bnez	s0,4103989c <.LBE4+0x4>

41039884 <.LBB4>:
41039884:	b325      	lw	v1,41039918 <.LBE4+0x80>
    {    
        att_write_test_info("pair list update", 0, 0);
41039886:	67b0      	move	a1,s0
41039888:	0c1c      	la	a0,410398f8 <.LBE4+0x60>
4103988a:	eb40      	jalr	v1
4103988c:	67d0      	move	a2,s0
4103988e:	9416      	lw	a0,88(sp)
        act_test_write_att_record_file(bt_paired_dev2, 0, 2);
41039890:	67b0      	move	a1,s0
41039892:	18c2 e41f 	jal	411b907c <act_test_write_att_record_file>
41039896:	6e02      	li	a2,2

41039898 <.LBE4>:
41039898:	647b      	restore	88,ra,s0-s1
    }
    else
    {
        print_log("pair list update");
        
        //不存在则创建
        att_test_open_file(bt_paired_dev2, FILE_OPEN_MODE_WB);

        file_len = sizeof(bt_paired_dev_info2_t);
        
        libc_memcpy((uint8 *)(STUB_ATT_RW_TEMP_BUFFER + 14), bt_paired_dev2, file_len);
       
        att_fwrite_arg->offsetl = 0;
        att_fwrite_arg->offseth = 0;
        att_fwrite_arg->lengthl = file_len & 0xffff;
        att_fwrite_arg->lengthh = (file_len >> 16); 

        att_write_data(STUB_CMD_ATT_FILE_WRITE, file_len + 8, (uint8 *)STUB_ATT_RW_TEMP_BUFFER);
        
        att_read_data(STUB_CMD_ATT_FILE_WRITE, 4, STUB_ATT_RW_TEMP_BUFFER);      
     
        //关闭配对文件
        att_test_close_file();
    }  

    return;
}
4103989a:	e8a0      	jrc	ra
4103989c:	b020      	lw	s0,41039918 <.LBE4+0x80>
4103989e:	0c17      	la	a0,410398f8 <.LBE4+0x60>
410398a0:	e8c0      	jalrc	s0
410398a2:	9416      	lw	a0,88(sp)
410398a4:	1802 e592 	jal	41039648 <att_test_open_file>
410398a8:	6d01      	li	a1,1
410398aa:	6834      	li	s0,52
410398ac:	9516      	lw	a1,88(sp)
410398ae:	b41d      	lw	a0,41039920 <.LBE4+0x88>
410398b0:	67d0      	move	a2,s0
410398b2:	e940      	jalr	s1
410398b4:	6f00      	li	a3,0
410398b6:	b716      	lw	a3,4103990c <.LBE4+0x74>
410398b8:	6d00      	li	a1,0
410398ba:	6c00      	li	a0,0
410398bc:	b21a      	lw	v0,41039924 <.LBE4+0x8c>
410398be:	cfa3      	sh	a1,6(a3)
410398c0:	cfa4      	sh	a1,8(a3)
410398c2:	cf86      	sh	a0,12(a3)
410398c4:	67c7      	move	a2,a3
410398c6:	cf05      	sh	s0,10(a3)
410398c8:	f480 6c02 	li	a0,1154
410398cc:	ea40      	jalr	v0
410398ce:	6d3c      	li	a1,60
410398d0:	b60f      	lw	a2,4103990c <.LBE4+0x74>
410398d2:	b216      	lw	v0,41039928 <.LBE4+0x90>
410398d4:	f480 6c02 	li	a0,1154
410398d8:	ea40      	jalr	v0
410398da:	6d04      	li	a1,4
410398dc:	1802 e5ed 	jal	410397b4 <att_test_close_file>
410398e0:	6500      	nop
410398e2:	647b      	restore	88,ra,s0-s1
410398e4:	e8a0      	jrc	ra
410398e6:	9516      	lw	a1,88(sp)
410398e8:	0404      	addiu	a0,sp,16
410398ea:	6e34      	li	a2,52
410398ec:	e940      	jalr	s1
410398ee:	6f02      	li	a3,2
410398f0:	2ac6      	bnez	v0,4103987e <test_btstack_save_paired_dev_info+0x1a>
410398f2:	647b      	restore	88,ra,s0-s1
410398f4:	e8a0      	jrc	ra
410398f6:	0000      	addiu	s0,sp,0
410398f8:	6170      	btnez	410399da <.LBE4+0x142>
410398fa:	7269      	cmpi	v0,105
410398fc:	6c20      	li	a0,32
410398fe:	7369      	cmpi	v1,105
41039900:	2074      	beqz	s0,410399ea <.LBE4+0x152>
41039902:	7075      	cmpi	s0,117
41039904:	6164      	btnez	410399ce <.LBE4+0x136>
41039906:	6574      	move	s3,a0
41039908:	0000      	addiu	s0,sp,0
4103990a:	0000      	addiu	s0,sp,0
4103990c:	a000      	lbu	s0,0(s0)
4103990e:	9fc3      	lw	a2,12(a3)
41039910:	88d5      	lh	a2,42(s0)
41039912:	bfc3      	lwu	a2,12(a3)
41039914:	8dc9      	lh	a2,18(a1)
41039916:	bfc3      	lwu	a2,12(a3)
41039918:	8b89      	lh	a0,18(v1)
4103991a:	bfc3      	lwu	a2,12(a3)
4103991c:	9b59      	lw	v0,100(v1)
4103991e:	41cf      	addiu	a2,s1,-1
41039920:	a00e      	lbu	s0,14(s0)
41039922:	9fc3      	lw	a2,12(a3)
41039924:	88e5      	lh	a3,10(s0)
41039926:	bfc3      	lwu	a2,12(a3)
41039928:	890d      	lh	s0,26(s1)
4103992a:	bfc3      	lwu	a2,12(a3)
	...
Disassembly of section BANK_CONTROL_1_1:

41079000 <read_bt_addr>:
41079000:	f014 64f5 	save	a0,168,ra,s0-s1
#include "ap_manager_test.h"
#include <sys_info.h>

void read_bt_addr(uint8 *byte_buffer, uint32 read_mode)
{
41079004:	b231      	lw	v0,410790c8 <read_bt_addr+0xc8>
    int ret_val;
    nvram_param_rw_t param_rw;
    bt_addr_vram_t bt_addr_vram;
    uint32 i;
    
    if(g_support_norflash_wp == FALSE)
41079006:	a200      	lbu	s0,0(v0)
41079008:	6725      	move	s1,a1
4107900a:	281e      	bnez	s0,41079048 <read_bt_addr+0x48>
4107900c:	67dd      	move	a2,sp
    {
        param_rw.logical_index = PARAM_BT_ADDR;
4107900e:	6d06      	li	a1,6
        param_rw.rw_len = 6;
41079010:	679d      	move	a0,sp
41079012:	f000 031a 	addiu	v1,sp,26
        param_rw.rw_buffer = bt_addr_vram.bt_addr;
41079016:	b22e      	lw	v0,410790cc <read_bt_addr+0xcc>

        ret_val = base_param_read(&param_rw);
41079018:	c4b1      	sb	a1,17(a0)
4107901a:	c610      	sb	s0,16(a2)
4107901c:	d305      	sw	v1,20(sp)
4107901e:	6c0c      	li	a0,12
41079020:	0504      	addiu	a1,sp,16
41079022:	67d0      	move	a2,s0
41079024:	ea40      	jalr	v0
41079026:	6f06      	li	a3,6
41079028:	2a3c      	bnez	v0,410790a2 <read_bt_addr+0xa2>

        if (ret_val != 0)
4107902a:	292f      	bnez	s1,4107908a <read_bt_addr+0x8a>
        {
            sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
        
            if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
            { 
                //没读到蓝牙地址，则设置log文件名为默认文件名
                bt_addr_vram.bt_addr[0] = 0;
                bt_addr_vram.bt_addr[1] = 0;
                bt_addr_vram.bt_addr[2] = 0;
                bt_addr_vram.bt_addr[3] = 0;
                bt_addr_vram.bt_addr[4] = 0;
                bt_addr_vram.bt_addr[5] = 0;                            
            }       
        }        
    }
    else
    {
        sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
    
        if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
        { 
            param_rw.logical_index = PARAM_BT_ADDR;
            param_rw.rw_len = 6;
            param_rw.rw_buffer = bt_addr_vram.bt_addr;
    
            ret_val = base_param_read(&param_rw);
    
            if (ret_val != 0)
            {
                //没读到蓝牙地址，则设置log文件名为默认文件名
                bt_addr_vram.bt_addr[0] = 0;
                bt_addr_vram.bt_addr[1] = 0;
                bt_addr_vram.bt_addr[2] = 0;
                bt_addr_vram.bt_addr[3] = 0;
                bt_addr_vram.bt_addr[4] = 0;
                bt_addr_vram.bt_addr[5] = 0;                      
            }                
        }            
    }

    if (read_mode == 0)
4107902c:	942a      	lw	a0,168(sp)
4107902e:	f000 0515 	addiu	a1,sp,21
41079032:	6b05      	li	v1,5
41079034:	a5ea      	lbu	a3,10(a1)
    {
        for(i = 0; i < 6; i++)
        {
            byte_buffer[i] = bt_addr_vram.bt_addr[5 - i];
41079036:	436f      	addiu	v1,v1,-1
41079038:	5300      	slti	v1,0
4107903a:	c4e0      	sb	a3,0(a0)
4107903c:	45af      	addiu	a1,a1,-1
4107903e:	4481      	addiu	a0,a0,1
41079040:	60f9      	bteqz	41079034 <read_bt_addr+0x34>
41079042:	f010 6475 	restore	168,ra,s0-s1
        }
    }
    else
    {
        for(i = 0; i < 6; i++)
        {
            byte_buffer[i] = bt_addr_vram.bt_addr[i];
        }        
    }
}
41079046:	e8a0      	jrc	ra
41079048:	b222      	lw	v0,410790cc <read_bt_addr+0xcc>
4107904a:	0406      	addiu	a0,sp,24
4107904c:	6d00      	li	a1,0
4107904e:	6e80      	li	a2,128
41079050:	ea40      	jalr	v0
41079052:	6f12      	li	a3,18
41079054:	677d      	move	v1,sp
41079056:	ab8c      	lhu	a0,24(v1)
41079058:	f5aa 740a 	cmpi	a0,21930
4107905c:	60e6      	bteqz	4107902a <read_bt_addr+0x2a>
4107905e:	6d06      	li	a1,6
41079060:	6800      	li	s0,0
41079062:	c3b1      	sb	a1,17(v1)
41079064:	c310      	sb	s0,16(v1)
41079066:	b21a      	lw	v0,410790cc <read_bt_addr+0xcc>
41079068:	f000 031a 	addiu	v1,sp,26
4107906c:	d305      	sw	v1,20(sp)
4107906e:	6c0c      	li	a0,12
41079070:	0504      	addiu	a1,sp,16
41079072:	6e00      	li	a2,0
41079074:	ea40      	jalr	v0
41079076:	6f06      	li	a3,6
41079078:	22d8      	beqz	v0,4107902a <read_bt_addr+0x2a>
4107907a:	67dd      	move	a2,sp
4107907c:	c61a      	sb	s0,26(a2)
4107907e:	c61b      	sb	s0,27(a2)
41079080:	c61c      	sb	s0,28(a2)
41079082:	c61d      	sb	s0,29(a2)
41079084:	c61e      	sb	s0,30(a2)
41079086:	c61f      	sb	s0,31(a2)
41079088:	21d1      	beqz	s1,4107902c <read_bt_addr+0x2c>
4107908a:	942a      	lw	a0,168(sp)
4107908c:	0304      	addiu	v1,sp,16
4107908e:	44a6      	addiu	a1,a0,6
41079090:	a34a      	lbu	v0,10(v1)
41079092:	4361      	addiu	v1,v1,1
41079094:	c440      	sb	v0,0(a0)
41079096:	4481      	addiu	a0,a0,1
41079098:	eca3      	sltu	a0,a1
4107909a:	61fa      	btnez	41079090 <read_bt_addr+0x90>
4107909c:	f010 6475 	restore	168,ra,s0-s1
410790a0:	e8a0      	jrc	ra
410790a2:	b20c      	lw	v0,410790d0 <read_bt_addr+0xd0>
410790a4:	6f12      	li	a3,18
410790a6:	0406      	addiu	a0,sp,24
410790a8:	67b0      	move	a1,s0
410790aa:	ea40      	jalr	v0
410790ac:	6e80      	li	a2,128
410790ae:	677d      	move	v1,sp
410790b0:	abec      	lhu	a3,24(v1)
410790b2:	f5aa 770a 	cmpi	a3,21930
410790b6:	60b9      	bteqz	4107902a <read_bt_addr+0x2a>
410790b8:	c31a      	sb	s0,26(v1)
410790ba:	c31b      	sb	s0,27(v1)
410790bc:	c31c      	sb	s0,28(v1)
410790be:	c31d      	sb	s0,29(v1)
410790c0:	c31e      	sb	s0,30(v1)
410790c2:	c31f      	sb	s0,31(v1)
410790c4:	17b2      	b	4107902a <read_bt_addr+0x2a>
410790c6:	0000      	addiu	s0,sp,0
410790c8:	8dc0      	lh	a2,0(a1)
410790ca:	bfc3      	lwu	a2,12(a3)
410790cc:	8fdd      	lh	a2,58(a3)
410790ce:	bfc3      	lwu	a2,12(a3)
410790d0:	88dd      	lh	a2,58(s0)
410790d2:	bfc3      	lwu	a2,12(a3)

410790d4 <get_sdk_version>:
410790d4:	a440      	lbu	v0,0(a0)

uint32 get_sdk_version(uint8 *sdk_version_buffer)
{
    uint32 sdk_version;

    sdk_version = ((sdk_version_buffer[0] - '0') << 8);
410790d6:	a4c2      	lbu	a2,2(a0)
    sdk_version |= ((sdk_version_buffer[2] - '0') << 4);
410790d8:	a463      	lbu	v1,3(a0)
    sdk_version |= ((sdk_version_buffer[3] - '0'));
410790da:	4ed0      	addiu	a2,-48
410790dc:	4ad0      	addiu	v0,-48
410790de:	35d0      	sll	a1,a2,4
410790e0:	3240      	sll	v0,8
410790e2:	eaad      	or	v0,a1
410790e4:	4bd0      	addiu	v1,-48
410790e6:	e820      	jr	ra

    return sdk_version;
}
410790e8:	ea6d      	or	v0,v1
	...

410790ec <act_test_start_deal>:
410790ec:	64e4      	save	32,ra,s0

int32 act_test_start_deal(void)
{
410790ee:	6d04      	li	a1,4
    int32 ret_val;
    uint8 sdk_version[4];
    att_start_arg_t *att_start_arg;
    att_pc_test_info_t *att_pc_test_info;
       
    sys_get_fw_info((void*) sdk_version, FW_INFO_SDK_VERSION_ADDR, FW_INFO_SDK_VERSION_LEN);
410790f0:	b231      	lw	v0,410791b4 <.LBE2+0x12>
410790f2:	0404      	addiu	a0,sp,16
410790f4:	67c5      	move	a2,a1
410790f6:	ea40      	jalr	v0
410790f8:	6f1b      	li	a3,27
410790fa:	1822 e435 	jal	410790d4 <get_sdk_version>
    
    if(get_sdk_version(sdk_version) == 0x360)
410790fe:	0404      	addiu	a0,sp,16
41079100:	f360 7200 	cmpi	v0,864
41079104:	6b01      	li	v1,1
    {
        g_support_norflash_wp = TRUE;    
41079106:	6001      	bteqz	4107910a <act_test_start_deal+0x1e>
41079108:	6b00      	li	v1,0
    }    
    else
    {
        g_support_norflash_wp = FALSE;    
4107910a:	b62c      	lw	a2,410791b8 <.LBE2+0x16>
4107910c:	6c00      	li	a0,0
    }
    
    g_test_base_time = sys_get_ab_timer();
4107910e:	b22a      	lw	v0,410791b4 <.LBE2+0x12>
41079110:	c660      	sb	v1,0(a2)
41079112:	67a4      	move	a1,a0
41079114:	67c4      	move	a2,a0
41079116:	ea40      	jalr	v0
41079118:	6f1c      	li	a3,28
4107911a:	b32a      	lw	v1,410791c0 <.LBE2+0x1e>
    
    if (g_test_mode == TEST_MODE_CARD) // 卡模式?
4107911c:	b528      	lw	a1,410791bc <.LBE2+0x1a>
4107911e:	a380      	lbu	a0,0(v1)
41079120:	dd40      	sw	v0,0(a1)
41079122:	6b01      	li	v1,1
        return TRUE;
41079124:	2c03      	bnez	a0,4107912c <act_test_start_deal+0x40>
41079126:	6743      	move	v0,v1

    att_start_arg = (att_start_arg_t *) STUB_ATT_RW_TEMP_BUFFER;

    att_pc_test_info = (att_pc_test_info_t *) STUB_ATT_RW_TEMP_BUFFER;

    ret_val = att_write_data(STUB_CMD_ATT_READ_TESTINFO, 0, STUB_ATT_RW_TEMP_BUFFER);

    if (ret_val == 0)
    {
        ret_val = att_read_data(STUB_CMD_ATT_ACK, sizeof(pc_test_info_t), STUB_ATT_RW_TEMP_BUFFER);
    }

    //如果上一项是量产测试，则说明是由量产重启，直接进行下一项测试
    //测试成功不发送START命令
    if (att_pc_test_info->pc_test_info.last_test_id == TESTID_PRODUCT_TEST)
    {
        /* 上报量产成功结果
         */
        return_result_t *return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = TESTID_PRODUCT_TEST;
        return_data->test_result = 1;

        act_test_report_result(return_data, 4);

        return TRUE;
    }

    if (g_att_version == 1)
    {
        if (g_test_ap_info->stub_phy_type == STUB_PHY_USB)
        {
            //测试通过USB线连接，PC与DUT直接连接
            att_start_arg->dut_connect_mode = DUT_CONNECT_MODE_DIRECT;
        }
        else
        {
            //测试通过转接板连接，PC与DUT不直接连接
            att_start_arg->dut_connect_mode = DUT_CONNECT_MODE_UDA;
        }
    }
    else
    {
        att_start_arg->dut_connect_mode = DUT_CONNECT_MODE_UDA;
    }
    
    read_bt_addr(att_start_arg->bdaddr, 0);

    att_start_arg->dut_work_mode = DUT_WORK_MODE_NORMAL;
    //att_start_arg->dut_work_mode = DUT_WORK_MODE_SPECIAL;

    att_start_arg->timeout = 5; // 获取测试项超时
    att_start_arg->reserved = 0;

    ret_val = att_write_data(STUB_CMD_ATT_START, 32, STUB_ATT_RW_TEMP_BUFFER);

    if (ret_val == 0)
    {
        ret_val = att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);

        return TRUE;
    }

    return FALSE;
}
41079128:	6464      	restore	32,ra,s0
4107912a:	e8a0      	jrc	ra
4107912c:	b026      	lw	s0,410791c0 <.LBE2+0x1e>
4107912e:	b227      	lw	v0,410791c8 <.LBE2+0x26>
41079130:	f400 6c09 	li	a0,1033
41079134:	6d00      	li	a1,0
41079136:	ea40      	jalr	v0
41079138:	67d0      	move	a2,s0
4107913a:	2235      	beqz	v0,410791a6 <.LBE2+0x4>
4107913c:	a8e3      	lhu	a3,6(s0)
4107913e:	770e      	cmpi	a3,14
41079140:	6028      	bteqz	41079192 <.LBB2>
41079142:	b626      	lw	a2,410791d8 <.LBE2+0x36>
41079144:	a680      	lbu	a0,0(a2)
41079146:	7401      	cmpi	a0,1
41079148:	601f      	bteqz	41079188 <act_test_start_deal+0x9c>
4107914a:	6a01      	li	v0,1
4107914c:	6790      	move	a0,s0
4107914e:	c046      	sb	v0,6(s0)
41079150:	4c0a      	addiu	a0,10
41079152:	1822 e400 	jal	41079000 <read_bt_addr>
41079156:	6d00      	li	a1,0
41079158:	6d00      	li	a1,0
4107915a:	6b05      	li	v1,5
4107915c:	c0a7      	sb	a1,7(s0)
4107915e:	c068      	sb	v1,8(s0)
41079160:	c0a9      	sb	a1,9(s0)
41079162:	b019      	lw	s0,410791c4 <.LBE2+0x22>
41079164:	b219      	lw	v0,410791c8 <.LBE2+0x26>
41079166:	f400 6c00 	li	a0,1024
4107916a:	6d20      	li	a1,32
4107916c:	ea40      	jalr	v0
4107916e:	67d0      	move	a2,s0
41079170:	6b00      	li	v1,0
41079172:	2ad9      	bnez	v0,41079126 <act_test_start_deal+0x3a>
41079174:	67a2      	move	a1,v0
41079176:	b216      	lw	v0,410791cc <.LBE2+0x2a>
41079178:	f4e0 6c1e 	li	a0,1278
4107917c:	ea40      	jalr	v0
4107917e:	67d0      	move	a2,s0
41079180:	6b01      	li	v1,1
41079182:	6743      	move	v0,v1
41079184:	6464      	restore	32,ra,s0
41079186:	e8a0      	jrc	ra
41079188:	b215      	lw	v0,410791d8 <.LBE2+0x36>
4107918a:	9ae0      	lw	a3,0(v0)
4107918c:	a743      	lbu	v0,3(a3)
4107918e:	22de      	beqz	v0,4107914c <act_test_start_deal+0x60>
41079190:	17dc      	b	4107914a <act_test_start_deal+0x5e>

41079192 <.LBB2>:
41079192:	b410      	lw	a0,410791d0 <.LBE2+0x2e>
41079194:	6b01      	li	v1,1
41079196:	6d0e      	li	a1,14
41079198:	b20f      	lw	v0,410791d4 <.LBE2+0x32>
4107919a:	cca3      	sh	a1,6(a0)
4107919c:	c468      	sb	v1,8(a0)
4107919e:	ea40      	jalr	v0
410791a0:	6d04      	li	a1,4

410791a2 <.LBE2>:
410791a2:	6b01      	li	v1,1
410791a4:	17ee      	b	41079182 <act_test_start_deal+0x96>
410791a6:	b20a      	lw	v0,410791cc <.LBE2+0x2a>
410791a8:	f4e0 6c1e 	li	a0,1278
410791ac:	6d20      	li	a1,32
410791ae:	ea40      	jalr	v0
410791b0:	67d0      	move	a2,s0
410791b2:	17c4      	b	4107913c <act_test_start_deal+0x50>
410791b4:	88dd      	lh	a2,58(s0)
410791b6:	bfc3      	lwu	a2,12(a3)
410791b8:	8dc0      	lh	a2,0(a1)
410791ba:	bfc3      	lwu	a2,12(a3)
410791bc:	8dc4      	lh	a2,8(a1)
410791be:	bfc3      	lwu	a2,12(a3)
410791c0:	8dc9      	lh	a2,18(a1)
410791c2:	bfc3      	lwu	a2,12(a3)
410791c4:	a000      	lbu	s0,0(s0)
410791c6:	9fc3      	lw	a2,12(a3)
410791c8:	88e5      	lh	a3,10(s0)
410791ca:	bfc3      	lwu	a2,12(a3)
410791cc:	890d      	lh	s0,26(s1)
410791ce:	bfc3      	lwu	a2,12(a3)
410791d0:	a100      	lbu	s0,0(s1)
410791d2:	9fc3      	lw	a2,12(a3)
410791d4:	9b41      	lw	v0,4(v1)
410791d6:	41cb      	addiu	a2,s1,-5
410791d8:	8dc8      	lh	a2,16(a1)
410791da:	bfc3      	lwu	a2,12(a3)
410791dc:	8df4      	lh	a3,40(a1)
410791de:	bfc3      	lwu	a2,12(a3)
	...
Disassembly of section BANK_CONTROL_1_2:

410b9000 <test_gpio_short>:
410b9000:	f00e 64fb 	save	a0-a3,88,ra,s0-s1
 * \note
 *******************************************************************************/
int32 test_gpio_short(uint32 reg_valA, uint32 reg_baseA, uint32 reg_valB, uint32 reg_baseB, uint32 reg_valSIO,
        uint32 reg_baseSIO, int *index)
{
410b9004:	ea8f      	not	v0,a0
    uint8 i;
    uint32 reg_value;
    uint32 gpio_dat;

    gpio_ret_t *gpio_regA = (gpio_ret_t *) reg_baseA;

    gpio_ret_t *gpio_regB = (gpio_ret_t *) reg_baseB;

    gpio_ret_t *gpio_regSIO = (gpio_ret_t *) reg_baseSIO;

    //取消上下拉电阻
    gpio_regA->pu_en &= (~reg_valA);
410b9006:	d20b      	sw	v0,44(sp)
410b9008:	9d63      	lw	v1,12(a1)
410b900a:	910b      	lw	s1,44(sp)
410b900c:	eb2c      	and	v1,s1
410b900e:	dd63      	sw	v1,12(a1)
410b9010:	9617      	lw	a2,92(sp)

    gpio_regA->pd_en &= (~reg_valA);
410b9012:	9ee4      	lw	a3,16(a2)
410b9014:	ef2c      	and	a3,s1
410b9016:	dee4      	sw	a3,16(a2)
410b9018:	9518      	lw	a1,96(sp)

    gpio_regB->pu_en &= (~reg_valB);
410b901a:	9719      	lw	a3,100(sp)
410b901c:	ecaf      	not	a0,a1
410b901e:	d40c      	sw	a0,48(sp)
410b9020:	9f43      	lw	v0,12(a3)
410b9022:	9f24      	lw	s1,16(a3)

    gpio_regB->pd_en &= (~reg_valB);
410b9024:	930c      	lw	v1,48(sp)
410b9026:	ea6c      	and	v0,v1
410b9028:	e96c      	and	s1,v1
410b902a:	df43      	sw	v0,12(a3)
410b902c:	df24      	sw	s1,16(a3)
410b902e:	961a      	lw	a2,104(sp)

    gpio_regSIO->pu_en &= (~reg_valSIO);
410b9030:	911b      	lw	s1,108(sp)
410b9032:	edcf      	not	a1,a2
410b9034:	d50d      	sw	a1,52(sp)
410b9036:	9983      	lw	a0,12(s1)
410b9038:	9944      	lw	v0,16(s1)

    gpio_regSIO->pd_en &= (~reg_valSIO);
410b903a:	930d      	lw	v1,52(sp)
410b903c:	b6d7      	lw	a2,410b9398 <test_gpio_short+0x398>

    //A0默认输出高电平，IO口接下拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);
410b903e:	ec6c      	and	a0,v1
410b9040:	ea6c      	and	v0,v1
410b9042:	d983      	sw	a0,12(s1)
410b9044:	d944      	sw	v0,16(s1)
410b9046:	9ee0      	lw	a3,0(a2)
410b9048:	6d01      	li	a1,1
410b904a:	b3d5      	lw	v1,410b939c <test_gpio_short+0x39c>
    act_writel(act_readl(GPIOADAT) | (1 << 0), GPIOADAT);
410b904c:	efad      	or	a3,a1
410b904e:	dee0      	sw	a3,0(a2)
410b9050:	9b80      	lw	a0,0(v1)
410b9052:	ecad      	or	a0,a1
410b9054:	db80      	sw	a0,0(v1)
410b9056:	921a      	lw	v0,104(sp)

    //如果不测试VRO(SIO_7), 将其配置为控制口  默认输出高电平，IO口接下拉电阻
    if (!(reg_valSIO & (1 << 7)))
410b9058:	6c80      	li	a0,128
410b905a:	ea8c      	and	v0,a0
410b905c:	2a08      	bnez	v0,410b906e <test_gpio_short+0x6e>
410b905e:	b7d1      	lw	a3,410b93a0 <test_gpio_short+0x3a0>
    {
        act_writel(act_readl(SIO_OUTEN) | (1 << 7), SIO_OUTEN);
410b9060:	b5d1      	lw	a1,410b93a4 <test_gpio_short+0x3a4>
        act_writel(act_readl(SIO_DAT) | (1 << 7), SIO_DAT);
410b9062:	9f20      	lw	s1,0(a3)
410b9064:	e98d      	or	s1,a0
410b9066:	df20      	sw	s1,0(a3)
410b9068:	9dc0      	lw	a2,0(a1)
410b906a:	ee8d      	or	a2,a0
410b906c:	ddc0      	sw	a2,0(a1)
410b906e:	6c00      	li	a0,0
    }

    for (i = 0; i < 31; i++)
410b9070:	d404      	sw	a0,16(sp)
410b9072:	1006      	b	410b9080 <test_gpio_short+0x80>
410b9074:	9404      	lw	a0,16(sp)
410b9076:	4421      	addiu	s1,a0,1
410b9078:	e911      	zeb	s1
410b907a:	591f      	sltiu	s1,31
410b907c:	d104      	sw	s1,16(sp)
410b907e:	605f      	bteqz	410b913e <test_gpio_short+0x13e>
410b9080:	9204      	lw	v0,16(sp)
    {
        reg_value = (1 << i);
410b9082:	6901      	li	s1,1
410b9084:	9316      	lw	v1,88(sp)

        if ((reg_valA & reg_value) != 0)
410b9086:	ea24      	sllv	s1,v0
410b9088:	eb2c      	and	v1,s1
410b908a:	23f4      	beqz	v1,410b9074 <test_gpio_short+0x74>
410b908c:	9617      	lw	a2,92(sp)
        {
            //测试管脚为输入状态
            gpio_regA->out_en &= (~reg_value);
410b908e:	eb2f      	not	v1,s1
410b9090:	9e80      	lw	a0,0(a2)
410b9092:	9ee1      	lw	a3,4(a2)

            gpio_regA->in_en |= reg_value;
410b9094:	ec6c      	and	a0,v1
410b9096:	6d00      	li	a1,0

            sys_mdelay(1);
410b9098:	ef2d      	or	a3,s1
410b909a:	b0c4      	lw	s0,410b93a8 <test_gpio_short+0x3a8>
410b909c:	de80      	sw	a0,0(a2)
410b909e:	dee1      	sw	a3,4(a2)
410b90a0:	6c01      	li	a0,1
410b90a2:	67c5      	move	a2,a1
410b90a4:	e840      	jalr	s0
410b90a6:	6f1d      	li	a3,29
410b90a8:	9717      	lw	a3,92(sp)

            //使能其它管脚为输出状态
            gpio_regA->out_en |= (reg_valA - reg_value);
410b90aa:	9216      	lw	v0,88(sp)
410b90ac:	9fa0      	lw	a1,0(a3)
410b90ae:	9f62      	lw	v1,8(a3)

            //其它管脚输出高电平
            gpio_regA->dat |= (reg_valA - reg_value);
410b90b0:	e233      	subu	a0,v0,s1
410b90b2:	ed8d      	or	a1,a0
410b90b4:	eb8d      	or	v1,a0
410b90b6:	dfa0      	sw	a1,0(a3)
410b90b8:	df62      	sw	v1,8(a3)
410b90ba:	9519      	lw	a1,100(sp)

            gpio_regB->out_en |= (reg_valB);
410b90bc:	9018      	lw	s0,96(sp)
410b90be:	9dc0      	lw	a2,0(a1)
410b90c0:	9d42      	lw	v0,8(a1)

            gpio_regB->dat |= reg_valB;
410b90c2:	ee0d      	or	a2,s0
410b90c4:	ea0d      	or	v0,s0
410b90c6:	ddc0      	sw	a2,0(a1)
410b90c8:	dd42      	sw	v0,8(a1)
410b90ca:	961b      	lw	a2,108(sp)

            gpio_regSIO->out_en |= reg_valSIO;
410b90cc:	931a      	lw	v1,104(sp)
410b90ce:	9ee2      	lw	a3,8(a2)
            gpio_regSIO->dat |= reg_valSIO;
410b90d0:	d405      	sw	a0,20(sp)
410b90d2:	9e80      	lw	a0,0(a2)
410b90d4:	ef6d      	or	a3,v1
410b90d6:	ec6d      	or	a0,v1
410b90d8:	6d00      	li	a1,0

            sys_mdelay(1);
410b90da:	b0b4      	lw	s0,410b93a8 <test_gpio_short+0x3a8>
410b90dc:	de80      	sw	a0,0(a2)
410b90de:	dee2      	sw	a3,8(a2)
410b90e0:	6c01      	li	a0,1
410b90e2:	67c5      	move	a2,a1
410b90e4:	e840      	jalr	s0
410b90e6:	6f1d      	li	a3,29
410b90e8:	9717      	lw	a3,92(sp)

            gpio_dat = (gpio_regA->dat & reg_value);
410b90ea:	9505      	lw	a1,20(sp)

            //其它管脚输出低电平
            gpio_regA->dat &= (~(reg_valA - reg_value));
410b90ec:	9f82      	lw	a0,8(a3)
410b90ee:	eaaf      	not	v0,a1
410b90f0:	6704      	move	s0,a0
410b90f2:	ec4c      	and	a0,v0
410b90f4:	df82      	sw	a0,8(a3)
410b90f6:	9519      	lw	a1,100(sp)

            gpio_regB->dat &= (~reg_valB);
410b90f8:	930c      	lw	v1,48(sp)
410b90fa:	9dc2      	lw	a2,8(a1)
410b90fc:	d206      	sw	v0,24(sp)
410b90fe:	ee6c      	and	a2,v1
410b9100:	ddc2      	sw	a2,8(a1)
410b9102:	971b      	lw	a3,108(sp)

            gpio_regSIO->dat &= (~reg_valSIO);
410b9104:	920d      	lw	v0,52(sp)
410b9106:	9f82      	lw	a0,8(a3)
410b9108:	6d00      	li	a1,0

            sys_mdelay(1);
410b910a:	ec4c      	and	a0,v0
410b910c:	b3a7      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b910e:	df82      	sw	a0,8(a3)
410b9110:	67c5      	move	a2,a1
410b9112:	6c01      	li	a0,1
410b9114:	eb40      	jalr	v1
410b9116:	6f1d      	li	a3,29
410b9118:	9617      	lw	a2,92(sp)

            //测试管脚输入电平有变化，说明存在短路
            if ((gpio_regA->dat & reg_value) != gpio_dat)
410b911a:	e82c      	and	s0,s1
410b911c:	9ea2      	lw	a1,8(a2)
410b911e:	ed2c      	and	a1,s1
410b9120:	ed0e      	xor	a1,s0
410b9122:	f0e0 2d03 	bnez	a1,410b92ec <test_gpio_short+0x2ec>
410b9126:	20a6      	beqz	s0,410b9074 <test_gpio_short+0x74>
            {
                att_write_test_info("GPIOA err short:", i, 1);
                *index = i;
                return TEST_GPIOA_SHORT;
            }
            else
            {
                //一直检测到高电平，说明VCC短路
                if (gpio_dat != 0)
410b9128:	9504      	lw	a1,16(sp)
                {
                    att_write_test_info("GPIOA err short vcc:", i, 1);
410b912a:	b2a1      	lw	v0,410b93ac <test_gpio_short+0x3ac>
410b912c:	0c82      	la	a0,410b9334 <test_gpio_short+0x334>
410b912e:	ea40      	jalr	v0
410b9130:	6e01      	li	a2,1
410b9132:	9704      	lw	a3,16(sp)
                    *index = i;
410b9134:	961c      	lw	a2,112(sp)
410b9136:	6a08      	li	v0,8
                    return TEST_GPIOA_SHORT_VCC;
410b9138:	dee0      	sw	a3,0(a2)
410b913a:	647b      	restore	88,ra,s0-s1
                }
            }
        }
    }

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valB & reg_value) != 0)
        {
            //测试管脚为输入状态
            gpio_regB->out_en &= (~reg_value);

            gpio_regB->in_en |= reg_value;

            sys_mdelay(1);

            //使能其它管脚为输出状态
            gpio_regB->out_en |= (reg_valB - reg_value);

            //其它管脚输出高电平
            gpio_regB->dat |= (reg_valB - reg_value);

            gpio_regA->out_en |= (reg_valA);

            gpio_regA->dat |= reg_valA;

            gpio_regSIO->out_en |= (reg_valSIO);

            gpio_regSIO->dat |= reg_valSIO;

            sys_mdelay(1);

            gpio_dat = (gpio_regB->dat & reg_value);

            //其它管脚输出低电平
            gpio_regB->dat &= (~(reg_valB - reg_value));

            gpio_regA->dat &= (~reg_valA);

            gpio_regSIO->dat &= (~reg_valSIO);

            sys_mdelay(1);

            //测试管脚输入电平有变化，说明存在短路
            if ((gpio_regB->dat & reg_value) != gpio_dat)
            {
                att_write_test_info("GPIOB err short:", i, 1);
                *index = i;
                return TEST_GPIOB_SHORT;
            }
            else
            {
                //一直检测到高电平，说明VCC短路
                if (gpio_dat != 0)
                {
                    att_write_test_info("SIO err short vcc:", i, 1);
                    *index = i;
                    return TEST_GPIOB_SHORT_VCC;
                }
            }
        }
    }

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valSIO & reg_value) != 0)
        {
            //测试管脚为输入状态
            gpio_regSIO->out_en &= (~reg_value);

            gpio_regSIO->in_en |= reg_value;

            sys_mdelay(1);

            //使能其它管脚为输出状态
            gpio_regSIO->out_en |= (reg_valSIO - reg_value);

            //其它管脚输出高电平
            gpio_regSIO->dat |= (reg_valSIO - reg_value);

            gpio_regA->out_en |= (reg_valA);

            gpio_regA->dat |= reg_valA;

            gpio_regB->out_en |= (reg_valB);

            gpio_regB->dat |= reg_valB;

            sys_mdelay(1);

            gpio_dat = (gpio_regSIO->dat & reg_value);

            //其它管脚输出低电平
            gpio_regSIO->dat &= (~(reg_valSIO - reg_value));

            gpio_regA->dat &= (~reg_valA);

            gpio_regB->dat &= (~reg_valB);

            sys_mdelay(1);

            //测试管脚输入电平有变化，说明存在短路
            if ((gpio_regSIO->dat & reg_value) != gpio_dat)
            {
                att_write_test_info("SIO err short:", i, 1);
                *index = i;
                return TEST_GPIOSIO_SHORT;
            }
            else
            {
                //一直检测到高电平，说明VCC短路
                if (gpio_dat != 0)
                {
                    att_write_test_info("SIO err short vcc:", i, 1);
                    *index = i;
                    return TEST_GPIOSIO_SHORT_VCC;
                }
            }
        }
    }

    return TEST_PASS;
}
410b913c:	e8a0      	jrc	ra
410b913e:	6d00      	li	a1,0
410b9140:	d50e      	sw	a1,56(sp)
410b9142:	1006      	b	410b9150 <test_gpio_short+0x150>
410b9144:	940e      	lw	a0,56(sp)
410b9146:	4421      	addiu	s1,a0,1
410b9148:	e911      	zeb	s1
410b914a:	591f      	sltiu	s1,31
410b914c:	d10e      	sw	s1,56(sp)
410b914e:	6063      	bteqz	410b9216 <test_gpio_short+0x216>
410b9150:	960e      	lw	a2,56(sp)
410b9152:	6901      	li	s1,1
410b9154:	9318      	lw	v1,96(sp)
410b9156:	ee24      	sllv	s1,a2
410b9158:	eb2c      	and	v1,s1
410b915a:	23f4      	beqz	v1,410b9144 <test_gpio_short+0x144>
410b915c:	9619      	lw	a2,100(sp)
410b915e:	ec2f      	not	a0,s1
410b9160:	9ea0      	lw	a1,0(a2)
410b9162:	9ee1      	lw	a3,4(a2)
410b9164:	ed8c      	and	a1,a0
410b9166:	dea0      	sw	a1,0(a2)
410b9168:	ef2d      	or	a3,s1
410b916a:	6d00      	li	a1,0
410b916c:	b38f      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b916e:	dee1      	sw	a3,4(a2)
410b9170:	6c01      	li	a0,1
410b9172:	67c5      	move	a2,a1
410b9174:	eb40      	jalr	v1
410b9176:	6f1d      	li	a3,29
410b9178:	9719      	lw	a3,100(sp)
410b917a:	9318      	lw	v1,96(sp)
410b917c:	9f40      	lw	v0,0(a3)
410b917e:	9fa2      	lw	a1,8(a3)
410b9180:	e333      	subu	a0,v1,s1
410b9182:	ea8d      	or	v0,a0
410b9184:	ed8d      	or	a1,a0
410b9186:	df40      	sw	v0,0(a3)
410b9188:	dfa2      	sw	a1,8(a3)
410b918a:	9517      	lw	a1,92(sp)
410b918c:	9316      	lw	v1,88(sp)
410b918e:	9dc0      	lw	a2,0(a1)
410b9190:	9d42      	lw	v0,8(a1)
410b9192:	ee6d      	or	a2,v1
410b9194:	ea6d      	or	v0,v1
410b9196:	ddc0      	sw	a2,0(a1)
410b9198:	dd42      	sw	v0,8(a1)
410b919a:	951b      	lw	a1,108(sp)
410b919c:	971a      	lw	a3,104(sp)
410b919e:	9dc2      	lw	a2,8(a1)
410b91a0:	d407      	sw	a0,28(sp)
410b91a2:	9d80      	lw	a0,0(a1)
410b91a4:	eeed      	or	a2,a3
410b91a6:	eced      	or	a0,a3
410b91a8:	dd80      	sw	a0,0(a1)
410b91aa:	ddc2      	sw	a2,8(a1)
410b91ac:	b37f      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b91ae:	6d00      	li	a1,0
410b91b0:	67c5      	move	a2,a1
410b91b2:	6c01      	li	a0,1
410b91b4:	eb40      	jalr	v1
410b91b6:	6f1d      	li	a3,29
410b91b8:	9319      	lw	v1,100(sp)
410b91ba:	9407      	lw	a0,28(sp)
410b91bc:	9bc2      	lw	a2,8(v1)
410b91be:	9519      	lw	a1,100(sp)
410b91c0:	ef8f      	not	a3,a0
410b91c2:	6746      	move	v0,a2
410b91c4:	eeec      	and	a2,a3
410b91c6:	ddc2      	sw	a2,8(a1)
410b91c8:	9417      	lw	a0,92(sp)
410b91ca:	ea2c      	and	v0,s1
410b91cc:	930b      	lw	v1,44(sp)
410b91ce:	d20f      	sw	v0,60(sp)
410b91d0:	9c42      	lw	v0,8(a0)
410b91d2:	d708      	sw	a3,32(sp)
410b91d4:	ea6c      	and	v0,v1
410b91d6:	dc42      	sw	v0,8(a0)
410b91d8:	951b      	lw	a1,108(sp)
410b91da:	970d      	lw	a3,52(sp)
410b91dc:	9dc2      	lw	a2,8(a1)
410b91de:	b373      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b91e0:	eeec      	and	a2,a3
410b91e2:	ddc2      	sw	a2,8(a1)
410b91e4:	6d00      	li	a1,0
410b91e6:	6c01      	li	a0,1
410b91e8:	6f1d      	li	a3,29
410b91ea:	eb40      	jalr	v1
410b91ec:	67c5      	move	a2,a1
410b91ee:	9419      	lw	a0,100(sp)
410b91f0:	920f      	lw	v0,60(sp)
410b91f2:	9ce2      	lw	a3,8(a0)
410b91f4:	ef2c      	and	a3,s1
410b91f6:	ef4e      	xor	a3,v0
410b91f8:	f080 2f03 	bnez	a3,410b9302 <test_gpio_short+0x302>
410b91fc:	960f      	lw	a2,60(sp)
410b91fe:	26a2      	beqz	a2,410b9144 <test_gpio_short+0x144>
410b9200:	950e      	lw	a1,56(sp)
410b9202:	b26b      	lw	v0,410b93ac <test_gpio_short+0x3ac>
410b9204:	0c52      	la	a0,410b934c <test_gpio_short+0x34c>
410b9206:	ea40      	jalr	v0
410b9208:	6e01      	li	a2,1
410b920a:	950e      	lw	a1,56(sp)
410b920c:	971c      	lw	a3,112(sp)
410b920e:	6a0c      	li	v0,12
410b9210:	dfa0      	sw	a1,0(a3)
410b9212:	647b      	restore	88,ra,s0-s1
410b9214:	e8a0      	jrc	ra
410b9216:	6b00      	li	v1,0
410b9218:	d310      	sw	v1,64(sp)
410b921a:	1006      	b	410b9228 <test_gpio_short+0x228>
410b921c:	9310      	lw	v1,64(sp)
410b921e:	4381      	addiu	a0,v1,1
410b9220:	ec11      	zeb	a0
410b9222:	5c1f      	sltiu	a0,31
410b9224:	d410      	sw	a0,64(sp)
410b9226:	6078      	bteqz	410b9318 <test_gpio_short+0x318>
410b9228:	9710      	lw	a3,64(sp)
410b922a:	6901      	li	s1,1
410b922c:	961a      	lw	a2,104(sp)
410b922e:	ef24      	sllv	s1,a3
410b9230:	ee2c      	and	a2,s1
410b9232:	26f4      	beqz	a2,410b921c <test_gpio_short+0x21c>
410b9234:	971b      	lw	a3,108(sp)
410b9236:	ec2f      	not	a0,s1
410b9238:	9fa1      	lw	a1,4(a3)
410b923a:	9fc0      	lw	a2,0(a3)
410b923c:	ed2d      	or	a1,s1
410b923e:	ee8c      	and	a2,a0
410b9240:	dfa1      	sw	a1,4(a3)
410b9242:	b35a      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b9244:	6d00      	li	a1,0
410b9246:	dfc0      	sw	a2,0(a3)
410b9248:	6c01      	li	a0,1
410b924a:	67c5      	move	a2,a1
410b924c:	eb40      	jalr	v1
410b924e:	6f1d      	li	a3,29
410b9250:	951b      	lw	a1,108(sp)
410b9252:	931a      	lw	v1,104(sp)
410b9254:	9d40      	lw	v0,0(a1)
410b9256:	9dc2      	lw	a2,8(a1)
410b9258:	e333      	subu	a0,v1,s1
410b925a:	ea8d      	or	v0,a0
410b925c:	ee8d      	or	a2,a0
410b925e:	dd40      	sw	v0,0(a1)
410b9260:	ddc2      	sw	a2,8(a1)
410b9262:	9617      	lw	a2,92(sp)
410b9264:	9316      	lw	v1,88(sp)
410b9266:	9ee0      	lw	a3,0(a2)
410b9268:	9e42      	lw	v0,8(a2)
410b926a:	ef6d      	or	a3,v1
410b926c:	ea6d      	or	v0,v1
410b926e:	dee0      	sw	a3,0(a2)
410b9270:	de42      	sw	v0,8(a2)
410b9272:	9619      	lw	a2,100(sp)
410b9274:	9518      	lw	a1,96(sp)
410b9276:	9ee2      	lw	a3,8(a2)
410b9278:	d409      	sw	a0,36(sp)
410b927a:	9e80      	lw	a0,0(a2)
410b927c:	efad      	or	a3,a1
410b927e:	ecad      	or	a0,a1
410b9280:	b34a      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b9282:	6d00      	li	a1,0
410b9284:	de80      	sw	a0,0(a2)
410b9286:	dee2      	sw	a3,8(a2)
410b9288:	6c01      	li	a0,1
410b928a:	67c5      	move	a2,a1
410b928c:	eb40      	jalr	v1
410b928e:	6f1d      	li	a3,29
410b9290:	931b      	lw	v1,108(sp)
410b9292:	9409      	lw	a0,36(sp)
410b9294:	9be2      	lw	a3,8(v1)
410b9296:	961b      	lw	a2,108(sp)
410b9298:	ed8f      	not	a1,a0
410b929a:	6747      	move	v0,a3
410b929c:	efac      	and	a3,a1
410b929e:	dee2      	sw	a3,8(a2)
410b92a0:	9417      	lw	a0,92(sp)
410b92a2:	ea2c      	and	v0,s1
410b92a4:	930b      	lw	v1,44(sp)
410b92a6:	d211      	sw	v0,68(sp)
410b92a8:	9c42      	lw	v0,8(a0)
410b92aa:	d50a      	sw	a1,40(sp)
410b92ac:	ea6c      	and	v0,v1
410b92ae:	dc42      	sw	v0,8(a0)
410b92b0:	9619      	lw	a2,100(sp)
410b92b2:	950c      	lw	a1,48(sp)
410b92b4:	9ee2      	lw	a3,8(a2)
410b92b6:	b33d      	lw	v1,410b93a8 <test_gpio_short+0x3a8>
410b92b8:	efac      	and	a3,a1
410b92ba:	6d00      	li	a1,0
410b92bc:	dee2      	sw	a3,8(a2)
410b92be:	6c01      	li	a0,1
410b92c0:	67c5      	move	a2,a1
410b92c2:	eb40      	jalr	v1
410b92c4:	6f1d      	li	a3,29
410b92c6:	941b      	lw	a0,108(sp)
410b92c8:	9211      	lw	v0,68(sp)
410b92ca:	9ca2      	lw	a1,8(a0)
410b92cc:	ed2c      	and	a1,s1
410b92ce:	ed4e      	xor	a1,v0
410b92d0:	2d26      	bnez	a1,410b931e <test_gpio_short+0x31e>
410b92d2:	9711      	lw	a3,68(sp)
410b92d4:	27a3      	beqz	a3,410b921c <test_gpio_short+0x21c>
410b92d6:	9510      	lw	a1,64(sp)
410b92d8:	b235      	lw	v0,410b93ac <test_gpio_short+0x3ac>
410b92da:	0c1d      	la	a0,410b934c <test_gpio_short+0x34c>
410b92dc:	ea40      	jalr	v0
410b92de:	6e01      	li	a2,1
410b92e0:	9610      	lw	a2,64(sp)
410b92e2:	951c      	lw	a1,112(sp)
410b92e4:	6a10      	li	v0,16
410b92e6:	ddc0      	sw	a2,0(a1)
410b92e8:	647b      	restore	88,ra,s0-s1
410b92ea:	e8a0      	jrc	ra
410b92ec:	9504      	lw	a1,16(sp)
410b92ee:	b330      	lw	v1,410b93ac <test_gpio_short+0x3ac>
410b92f0:	0c1c      	la	a0,410b9360 <test_gpio_short+0x360>
410b92f2:	eb40      	jalr	v1
410b92f4:	6e01      	li	a2,1
410b92f6:	9204      	lw	v0,16(sp)
410b92f8:	951c      	lw	a1,112(sp)
410b92fa:	dd40      	sw	v0,0(a1)
410b92fc:	6a07      	li	v0,7
410b92fe:	647b      	restore	88,ra,s0-s1
410b9300:	e8a0      	jrc	ra
410b9302:	950e      	lw	a1,56(sp)
410b9304:	b32a      	lw	v1,410b93ac <test_gpio_short+0x3ac>
410b9306:	0c1c      	la	a0,410b9374 <test_gpio_short+0x374>
410b9308:	eb40      	jalr	v1
410b930a:	6e01      	li	a2,1
410b930c:	920e      	lw	v0,56(sp)
410b930e:	931c      	lw	v1,112(sp)
410b9310:	db40      	sw	v0,0(v1)
410b9312:	6a0b      	li	v0,11
410b9314:	647b      	restore	88,ra,s0-s1
410b9316:	e8a0      	jrc	ra
410b9318:	6a00      	li	v0,0
410b931a:	647b      	restore	88,ra,s0-s1
410b931c:	e8a0      	jrc	ra
410b931e:	9510      	lw	a1,64(sp)
410b9320:	b323      	lw	v1,410b93ac <test_gpio_short+0x3ac>
410b9322:	0c1a      	la	a0,410b9388 <test_gpio_short+0x388>
410b9324:	eb40      	jalr	v1
410b9326:	6e01      	li	a2,1
410b9328:	9210      	lw	v0,64(sp)
410b932a:	931c      	lw	v1,112(sp)
410b932c:	db40      	sw	v0,0(v1)
410b932e:	6a0f      	li	v0,15
410b9330:	647b      	restore	88,ra,s0-s1
410b9332:	e8a0      	jrc	ra
410b9334:	5047      	slti	s0,71
410b9336:	4f49      	addiu	a3,73
410b9338:	2041      	beqz	s0,410b93bc <test_gpio_short_gnd+0xc>
410b933a:	7265      	cmpi	v0,101
410b933c:	2072      	beqz	s0,410b9422 <test_gpio_short_gnd+0x72>
410b933e:	6873      	li	s0,115
410b9340:	726f      	cmpi	v0,111
410b9342:	2074      	beqz	s0,410b942c <test_gpio_short_gnd+0x7c>
410b9344:	6376      	addiu	sp,944
410b9346:	3a63      	ld	v1,24(v0)
410b9348:	0000      	addiu	s0,sp,0
410b934a:	0000      	addiu	s0,sp,0
410b934c:	4953      	addiu	s1,83
410b934e:	204f      	beqz	s0,410b93ee <test_gpio_short_gnd+0x3e>
410b9350:	7265      	cmpi	v0,101
410b9352:	2072      	beqz	s0,410b9438 <test_gpio_short_gnd+0x88>
410b9354:	6873      	li	s0,115
410b9356:	726f      	cmpi	v0,111
410b9358:	2074      	beqz	s0,410b9442 <test_gpio_short_gnd+0x92>
410b935a:	6376      	addiu	sp,944
410b935c:	3a63      	ld	v1,24(v0)
410b935e:	0000      	addiu	s0,sp,0
410b9360:	5047      	slti	s0,71
410b9362:	4f49      	addiu	a3,73
410b9364:	2041      	beqz	s0,410b93e8 <test_gpio_short_gnd+0x38>
410b9366:	7265      	cmpi	v0,101
410b9368:	2072      	beqz	s0,410b944e <test_gpio_short_gnd+0x9e>
410b936a:	6873      	li	s0,115
410b936c:	726f      	cmpi	v0,111
410b936e:	3a74      	ld	v1,160(v0)
410b9370:	0000      	addiu	s0,sp,0
410b9372:	0000      	addiu	s0,sp,0
410b9374:	5047      	slti	s0,71
410b9376:	4f49      	addiu	a3,73
410b9378:	2042      	beqz	s0,410b93fe <test_gpio_short_gnd+0x4e>
410b937a:	7265      	cmpi	v0,101
410b937c:	2072      	beqz	s0,410b9462 <test_gpio_short_gnd+0xb2>
410b937e:	6873      	li	s0,115
410b9380:	726f      	cmpi	v0,111
410b9382:	3a74      	ld	v1,160(v0)
410b9384:	0000      	addiu	s0,sp,0
410b9386:	0000      	addiu	s0,sp,0
410b9388:	4953      	addiu	s1,83
410b938a:	204f      	beqz	s0,410b942a <test_gpio_short_gnd+0x7a>
410b938c:	7265      	cmpi	v0,101
410b938e:	2072      	beqz	s0,410b9474 <test_gpio_short_gnd+0xc4>
410b9390:	6873      	li	s0,115
410b9392:	726f      	cmpi	v0,111
410b9394:	3a74      	ld	v1,160(v0)
410b9396:	0000      	addiu	s0,sp,0
410b9398:	0000      	addiu	s0,sp,0
410b939a:	c009      	sb	s0,9(s0)
410b939c:	0008      	addiu	s0,sp,32
410b939e:	c009      	sb	s0,9(s0)
410b93a0:	0028      	addiu	s0,sp,160
410b93a2:	c009      	sb	s0,9(s0)
410b93a4:	0030      	addiu	s0,sp,192
410b93a6:	c009      	sb	s0,9(s0)
410b93a8:	88dd      	lh	a2,58(s0)
410b93aa:	bfc3      	lwu	a2,12(a3)
410b93ac:	8b89      	lh	a0,18(v1)
410b93ae:	bfc3      	lwu	a2,12(a3)

410b93b0 <test_gpio_short_gnd>:
410b93b0:	f00e 64f5 	save	a0-a3,40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *	  gpio测试子函数，测试GPIO是否存在短路
 * \param[in]    reg_val   测试配置值
 * \param[in]    reg_base  gpio寄存器基地址，分为GPIOA和GPIOB
 * \param[out]   the result TRUE/FALSE
 * \return       none
 * \ingroup      music_test
 * \note
 *******************************************************************************/
int32 test_gpio_short_gnd(uint32 reg_valA, uint32 reg_baseA, uint32 reg_valB, uint32 reg_baseB, uint32 reg_valSIO,
        uint32 reg_baseSIO, int *index)
{
410b93b4:	b776      	lw	a3,410b958c <test_gpio_short_gnd+0x1dc>
    uint8 i;
    uint32 reg_value;
    uint32 gpio_dat;
    gpio_ret_t *gpio_regA = (gpio_ret_t *) reg_baseA;
    gpio_ret_t *gpio_regB = (gpio_ret_t *) reg_baseB;
    gpio_ret_t *gpio_regSIO = (gpio_ret_t *) reg_baseSIO;

    //A0默认输出低电平，IO口接上拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);
410b93b6:	9f00      	lw	s0,0(a3)
410b93b8:	6901      	li	s1,1
410b93ba:	b476      	lw	a0,410b9590 <test_gpio_short_gnd+0x1e0>
    act_writel(act_readl(GPIOADAT) & (~(1 << 0)), GPIOADAT);
410b93bc:	e82d      	or	s0,s1
410b93be:	df00      	sw	s0,0(a3)
410b93c0:	9ca0      	lw	a1,0(a0)
410b93c2:	6e02      	li	a2,2
410b93c4:	ebcb      	neg	v1,a2
410b93c6:	ed6c      	and	a1,v1
410b93c8:	dca0      	sw	a1,0(a0)
410b93ca:	920e      	lw	v0,56(sp)

    //如果不测试VRO(SIO_7), 将其配置为控制口  默认输出低电平，IO口接上拉电阻
    if (!(reg_valSIO & (1 << 7)))
410b93cc:	6c80      	li	a0,128
410b93ce:	ea8c      	and	v0,a0
410b93d0:	2a0a      	bnez	v0,410b93e6 <test_gpio_short_gnd+0x36>
410b93d2:	b671      	lw	a2,410b9594 <test_gpio_short_gnd+0x1e4>
    {
        act_writel(act_readl(SIO_OUTEN) | (1 << 7), SIO_OUTEN);
410b93d4:	6b81      	li	v1,129
        act_writel(act_readl(SIO_DAT) & (~(1 << 7)), SIO_DAT);
410b93d6:	9ee0      	lw	a3,0(a2)
410b93d8:	ed6b      	neg	a1,v1
410b93da:	ef8d      	or	a3,a0
410b93dc:	b46f      	lw	a0,410b9598 <test_gpio_short_gnd+0x1e8>
410b93de:	dee0      	sw	a3,0(a2)
410b93e0:	9c40      	lw	v0,0(a0)
410b93e2:	eaac      	and	v0,a1
410b93e4:	dc40      	sw	v0,0(a0)
410b93e6:	910b      	lw	s1,44(sp)
    }

    //取消上下拉电阻
    gpio_regA->pu_en &= (~reg_valA);
410b93e8:	930a      	lw	v1,40(sp)
410b93ea:	9943      	lw	v0,12(s1)
410b93ec:	9984      	lw	a0,16(s1)

    gpio_regA->pd_en &= (~reg_valA);
410b93ee:	ed6f      	not	a1,v1
410b93f0:	eaac      	and	v0,a1
410b93f2:	ecac      	and	a0,a1
410b93f4:	d943      	sw	v0,12(s1)
410b93f6:	d984      	sw	a0,16(s1)
410b93f8:	900c      	lw	s0,48(sp)

    gpio_regB->pu_en &= (~reg_valB);
410b93fa:	960d      	lw	a2,52(sp)
410b93fc:	ef0f      	not	a3,s0
410b93fe:	d704      	sw	a3,16(sp)
410b9400:	9e43      	lw	v0,12(a2)
410b9402:	9304      	lw	v1,16(sp)
410b9404:	940d      	lw	a0,52(sp)
410b9406:	ea6c      	and	v0,v1
410b9408:	dc43      	sw	v0,12(a0)
410b940a:	9c04      	lw	s0,16(a0)

    gpio_regB->pd_en &= (~reg_valB);
410b940c:	9104      	lw	s1,16(sp)
410b940e:	970d      	lw	a3,52(sp)
410b9410:	e82c      	and	s0,s1
410b9412:	df04      	sw	s0,16(a3)
410b9414:	960e      	lw	a2,56(sp)

    gpio_regSIO->pu_en &= (~reg_valSIO);
410b9416:	920f      	lw	v0,60(sp)
410b9418:	ebcf      	not	v1,a2
410b941a:	d305      	sw	v1,20(sp)
410b941c:	9a23      	lw	s1,12(v0)
410b941e:	9405      	lw	a0,20(sp)
410b9420:	900f      	lw	s0,60(sp)
410b9422:	e98c      	and	s1,a0
410b9424:	d823      	sw	s1,12(s0)
410b9426:	98c4      	lw	a2,16(s0)

    gpio_regSIO->pd_en &= (~reg_valSIO);
410b9428:	9705      	lw	a3,20(sp)
410b942a:	930f      	lw	v1,60(sp)
410b942c:	eeec      	and	a2,a3
410b942e:	dbc4      	sw	a2,16(v1)
410b9430:	900b      	lw	s0,44(sp)

    //测试管脚为输入状态
    gpio_regA->out_en &= (~reg_valA);
410b9432:	9840      	lw	v0,0(s0)
410b9434:	9821      	lw	s1,4(s0)

    gpio_regA->in_en |= reg_valA;
410b9436:	eaac      	and	v0,a1
410b9438:	d840      	sw	v0,0(s0)
410b943a:	940a      	lw	a0,40(sp)
410b943c:	e98d      	or	s1,a0
410b943e:	d821      	sw	s1,4(s0)
410b9440:	6900      	li	s1,0

    for (i = 0; i < 31; i++)
410b9442:	1005      	b	410b944e <test_gpio_short_gnd+0x9e>
410b9444:	4101      	addiu	s0,s1,1
410b9446:	6730      	move	s1,s0
410b9448:	e911      	zeb	s1
410b944a:	591f      	sltiu	s1,31
410b944c:	6019      	bteqz	410b9480 <test_gpio_short_gnd+0xd0>
410b944e:	6801      	li	s0,1
    {
        reg_value = (1 << i);
410b9450:	950a      	lw	a1,40(sp)

        if ((reg_valA & reg_value) != 0)
410b9452:	e904      	sllv	s0,s1
410b9454:	ed0c      	and	a1,s0
410b9456:	25f6      	beqz	a1,410b9444 <test_gpio_short_gnd+0x94>
410b9458:	6d00      	li	a1,0
        {
            sys_mdelay(2);
410b945a:	b251      	lw	v0,410b959c <test_gpio_short_gnd+0x1ec>
410b945c:	67c5      	move	a2,a1
410b945e:	6f1d      	li	a3,29
410b9460:	ea40      	jalr	v0
410b9462:	6c02      	li	a0,2
410b9464:	970b      	lw	a3,44(sp)

            //测试管脚输入电平为0，说明短接到地
            if ((gpio_regA->dat & reg_value) == 0)
410b9466:	9fc2      	lw	a2,8(a3)
410b9468:	ee0c      	and	a2,s0
410b946a:	2eec      	bnez	a2,410b9444 <test_gpio_short_gnd+0x94>
410b946c:	b34d      	lw	v1,410b95a0 <test_gpio_short_gnd+0x1f0>
            {
                att_write_test_info("GPIOA err short gnd:", i, 1);
410b946e:	0c34      	la	a0,410b953c <test_gpio_short_gnd+0x18c>
410b9470:	67b1      	move	a1,s1
410b9472:	eb40      	jalr	v1
410b9474:	6e01      	li	a2,1
410b9476:	9410      	lw	a0,64(sp)

                *index = i;
410b9478:	6a09      	li	v0,9

                return TEST_GPIOA_SHORT_GND;
410b947a:	dc20      	sw	s1,0(a0)
410b947c:	6475      	restore	40,ra,s0-s1
            }
        }
    }

    //测试管脚为输入状态
    gpio_regB->out_en &= (~reg_valB);

    gpio_regB->in_en |= reg_valB;

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valB & reg_value) != 0)
        {
            sys_mdelay(2);

            //测试管脚输入电平为0，说明短接到地
            if ((gpio_regB->dat & reg_value) == 0)
            {
                att_write_test_info("GPIOB err short gnd:", i, 1);

                *index = i;

                return TEST_GPIOB_SHORT_GND;
            }
        }
    }

    DEBUG_ATT_PRINT("SIO REG:", reg_valSIO, 2);

    //测试管脚为输入状态
    gpio_regSIO->out_en &= (~reg_valSIO);

    gpio_regSIO->in_en |= reg_valSIO;

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valSIO & reg_value) != 0)
        {
            sys_mdelay(2);

            //测试管脚输入电平为0，说明短接到地
            if ((gpio_regSIO->dat & reg_value) == 0)
            {
                att_write_test_info("SIO err short gnd:", i, 1);

                *index = i;

                return TEST_GPIOSIO_SHORT_GND;
            }
        }
    }

    return TEST_PASS;
}
410b947e:	e8a0      	jrc	ra
410b9480:	970d      	lw	a3,52(sp)
410b9482:	9404      	lw	a0,16(sp)
410b9484:	9f40      	lw	v0,0(a3)
410b9486:	9fa1      	lw	a1,4(a3)
410b9488:	ea8c      	and	v0,a0
410b948a:	df40      	sw	v0,0(a3)
410b948c:	960c      	lw	a2,48(sp)
410b948e:	910d      	lw	s1,52(sp)
410b9490:	edcd      	or	a1,a2
410b9492:	d9a1      	sw	a1,4(s1)
410b9494:	6900      	li	s1,0
410b9496:	1005      	b	410b94a2 <test_gpio_short_gnd+0xf2>
410b9498:	4101      	addiu	s0,s1,1
410b949a:	6730      	move	s1,s0
410b949c:	e911      	zeb	s1
410b949e:	591f      	sltiu	s1,31
410b94a0:	6019      	bteqz	410b94d4 <test_gpio_short_gnd+0x124>
410b94a2:	6801      	li	s0,1
410b94a4:	930c      	lw	v1,48(sp)
410b94a6:	e904      	sllv	s0,s1
410b94a8:	eb0c      	and	v1,s0
410b94aa:	23f6      	beqz	v1,410b9498 <test_gpio_short_gnd+0xe8>
410b94ac:	6d00      	li	a1,0
410b94ae:	b23c      	lw	v0,410b959c <test_gpio_short_gnd+0x1ec>
410b94b0:	67c5      	move	a2,a1
410b94b2:	6c02      	li	a0,2
410b94b4:	ea40      	jalr	v0
410b94b6:	6f1d      	li	a3,29
410b94b8:	960d      	lw	a2,52(sp)
410b94ba:	9ea2      	lw	a1,8(a2)
410b94bc:	ed0c      	and	a1,s0
410b94be:	2dec      	bnez	a1,410b9498 <test_gpio_short_gnd+0xe8>
410b94c0:	b338      	lw	v1,410b95a0 <test_gpio_short_gnd+0x1f0>
410b94c2:	0c25      	la	a0,410b9554 <test_gpio_short_gnd+0x1a4>
410b94c4:	67b1      	move	a1,s1
410b94c6:	eb40      	jalr	v1
410b94c8:	6e01      	li	a2,1
410b94ca:	9710      	lw	a3,64(sp)
410b94cc:	6a0d      	li	v0,13
410b94ce:	df20      	sw	s1,0(a3)
410b94d0:	6475      	restore	40,ra,s0-s1
410b94d2:	e8a0      	jrc	ra
410b94d4:	950e      	lw	a1,56(sp)
410b94d6:	b032      	lw	s0,410b959c <test_gpio_short_gnd+0x1ec>
410b94d8:	0c25      	la	a0,410b956c <test_gpio_short_gnd+0x1bc>
410b94da:	6e02      	li	a2,2
410b94dc:	e840      	jalr	s0
410b94de:	6f4b      	li	a3,75
410b94e0:	960f      	lw	a2,60(sp)
410b94e2:	9705      	lw	a3,20(sp)
410b94e4:	9e40      	lw	v0,0(a2)
410b94e6:	9e81      	lw	a0,4(a2)
410b94e8:	eaec      	and	v0,a3
410b94ea:	de40      	sw	v0,0(a2)
410b94ec:	950e      	lw	a1,56(sp)
410b94ee:	910f      	lw	s1,60(sp)
410b94f0:	ecad      	or	a0,a1
410b94f2:	d981      	sw	a0,4(s1)
410b94f4:	6900      	li	s1,0
410b94f6:	1005      	b	410b9502 <test_gpio_short_gnd+0x152>
410b94f8:	41e1      	addiu	a3,s1,1
410b94fa:	6727      	move	s1,a3
410b94fc:	e911      	zeb	s1
410b94fe:	591f      	sltiu	s1,31
410b9500:	6019      	bteqz	410b9534 <test_gpio_short_gnd+0x184>
410b9502:	6801      	li	s0,1
410b9504:	930e      	lw	v1,56(sp)
410b9506:	e904      	sllv	s0,s1
410b9508:	eb0c      	and	v1,s0
410b950a:	23f6      	beqz	v1,410b94f8 <test_gpio_short_gnd+0x148>
410b950c:	6d00      	li	a1,0
410b950e:	b224      	lw	v0,410b959c <test_gpio_short_gnd+0x1ec>
410b9510:	6c02      	li	a0,2
410b9512:	67c5      	move	a2,a1
410b9514:	ea40      	jalr	v0
410b9516:	6f1d      	li	a3,29
410b9518:	950f      	lw	a1,60(sp)
410b951a:	9d82      	lw	a0,8(a1)
410b951c:	ec0c      	and	a0,s0
410b951e:	2cec      	bnez	a0,410b94f8 <test_gpio_short_gnd+0x148>
410b9520:	b320      	lw	v1,410b95a0 <test_gpio_short_gnd+0x1f0>
410b9522:	0c16      	la	a0,410b9578 <test_gpio_short_gnd+0x1c8>
410b9524:	67b1      	move	a1,s1
410b9526:	eb40      	jalr	v1
410b9528:	6e01      	li	a2,1
410b952a:	9610      	lw	a2,64(sp)
410b952c:	6a11      	li	v0,17
410b952e:	de20      	sw	s1,0(a2)
410b9530:	6475      	restore	40,ra,s0-s1
410b9532:	e8a0      	jrc	ra
410b9534:	6a00      	li	v0,0
410b9536:	6475      	restore	40,ra,s0-s1
410b9538:	e8a0      	jrc	ra
410b953a:	0000      	addiu	s0,sp,0
410b953c:	5047      	slti	s0,71
410b953e:	4f49      	addiu	a3,73
410b9540:	2041      	beqz	s0,410b95c4 <test_gpio_open+0x20>
410b9542:	7265      	cmpi	v0,101
410b9544:	2072      	beqz	s0,410b962a <test_gpio_open+0x86>
410b9546:	6873      	li	s0,115
410b9548:	726f      	cmpi	v0,111
410b954a:	2074      	beqz	s0,410b9634 <test_gpio_open+0x90>
410b954c:	6e67      	li	a2,103
410b954e:	3a64      	ld	v1,32(v0)
410b9550:	0000      	addiu	s0,sp,0
410b9552:	0000      	addiu	s0,sp,0
410b9554:	5047      	slti	s0,71
410b9556:	4f49      	addiu	a3,73
410b9558:	2042      	beqz	s0,410b95de <test_gpio_open+0x3a>
410b955a:	7265      	cmpi	v0,101
410b955c:	2072      	beqz	s0,410b9642 <test_gpio_open+0x9e>
410b955e:	6873      	li	s0,115
410b9560:	726f      	cmpi	v0,111
410b9562:	2074      	beqz	s0,410b964c <test_gpio_open+0xa8>
410b9564:	6e67      	li	a2,103
410b9566:	3a64      	ld	v1,32(v0)
410b9568:	0000      	addiu	s0,sp,0
410b956a:	0000      	addiu	s0,sp,0
410b956c:	4953      	addiu	s1,83
410b956e:	204f      	beqz	s0,410b960e <test_gpio_open+0x6a>
410b9570:	4552      	daddiu	v0,a1,2
410b9572:	3a47      	ld	v0,56(v0)
410b9574:	0000      	addiu	s0,sp,0
410b9576:	0000      	addiu	s0,sp,0
410b9578:	4953      	addiu	s1,83
410b957a:	204f      	beqz	s0,410b961a <test_gpio_open+0x76>
410b957c:	7265      	cmpi	v0,101
410b957e:	2072      	beqz	s0,410b9664 <test_gpio_open+0xc0>
410b9580:	6873      	li	s0,115
410b9582:	726f      	cmpi	v0,111
410b9584:	2074      	beqz	s0,410b966e <test_gpio_open+0xca>
410b9586:	6e67      	li	a2,103
410b9588:	3a64      	ld	v1,32(v0)
410b958a:	0000      	addiu	s0,sp,0
410b958c:	0000      	addiu	s0,sp,0
410b958e:	c009      	sb	s0,9(s0)
410b9590:	0008      	addiu	s0,sp,32
410b9592:	c009      	sb	s0,9(s0)
410b9594:	0028      	addiu	s0,sp,160
410b9596:	c009      	sb	s0,9(s0)
410b9598:	0030      	addiu	s0,sp,192
410b959a:	c009      	sb	s0,9(s0)
410b959c:	88dd      	lh	a2,58(s0)
410b959e:	bfc3      	lwu	a2,12(a3)
410b95a0:	8b89      	lh	a0,18(v1)
410b95a2:	bfc3      	lwu	a2,12(a3)

410b95a4 <test_gpio_open>:
410b95a4:	f00e 64f4 	save	a0-a3,32,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *	  gpio测试子函数，测试GPIO是否存在断路
 * \param[in]    reg_val   测试配置值
 * \param[in]    reg_base  gpio寄存器基地址，分为GPIOA和GPIOB
 * \param[out]   the result TRUE/FALSE
 * \return       none
 * \ingroup      music_test
 * \note
 *******************************************************************************/
bool test_gpio_open(uint32 reg_valA, uint32 reg_baseA, uint32 reg_valB, uint32 reg_baseB, uint32 reg_valSIO,
        uint32 reg_baseSIO, int32 *index)
{
410b95a8:	b569      	lw	a1,410b974c <test_gpio_open+0x1a8>
    uint8 i;
    uint32 reg_value;
    gpio_ret_t *gpio_regA = (gpio_ret_t *) reg_baseA;
    gpio_ret_t *gpio_regB = (gpio_ret_t *) reg_baseB;
    gpio_ret_t *gpio_regSIO = (gpio_ret_t *) reg_baseSIO;

    //A0默认输出高电平，IO口接下拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);
410b95aa:	9de0      	lw	a3,0(a1)
410b95ac:	6e01      	li	a2,1
410b95ae:	b369      	lw	v1,410b9750 <test_gpio_open+0x1ac>
    act_writel(act_readl(GPIOADAT) | (1 << 0), GPIOADAT);
410b95b0:	efcd      	or	a3,a2
410b95b2:	dde0      	sw	a3,0(a1)
410b95b4:	9b80      	lw	a0,0(v1)
410b95b6:	eccd      	or	a0,a2
410b95b8:	db80      	sw	a0,0(v1)
410b95ba:	920c      	lw	v0,48(sp)

    //如果不测试VRO(SIO_7), 将其配置为控制口  默认输出高电平，IO口接下拉电阻
    if (!(reg_valSIO & (1 << 7)))
410b95bc:	6c80      	li	a0,128
410b95be:	ea8c      	and	v0,a0
410b95c0:	2a08      	bnez	v0,410b95d2 <test_gpio_open+0x2e>
410b95c2:	b365      	lw	v1,410b9754 <test_gpio_open+0x1b0>
    {
        act_writel(act_readl(SIO_OUTEN) | (1 << 7), SIO_OUTEN);
410b95c4:	b065      	lw	s0,410b9758 <test_gpio_open+0x1b4>
        act_writel(act_readl(SIO_DAT) | (1 << 7), SIO_DAT);
410b95c6:	9b40      	lw	v0,0(v1)
410b95c8:	ea8d      	or	v0,a0
410b95ca:	db40      	sw	v0,0(v1)
410b95cc:	9820      	lw	s1,0(s0)
410b95ce:	e98d      	or	s1,a0
410b95d0:	d820      	sw	s1,0(s0)
410b95d2:	9409      	lw	a0,36(sp)
    }

    //取消上下拉电阻
    gpio_regA->pu_en &= (~reg_valA);
410b95d4:	9008      	lw	s0,32(sp)
410b95d6:	9cc3      	lw	a2,12(a0)
410b95d8:	9c24      	lw	s1,16(a0)

    gpio_regA->pd_en &= (~reg_valA);
410b95da:	ed0f      	not	a1,s0
410b95dc:	eeac      	and	a2,a1
410b95de:	e9ac      	and	s1,a1
410b95e0:	dc24      	sw	s1,16(a0)
410b95e2:	dcc3      	sw	a2,12(a0)
410b95e4:	900b      	lw	s0,44(sp)

    gpio_regB->pu_en &= (~reg_valB);
410b95e6:	920a      	lw	v0,40(sp)
410b95e8:	98e3      	lw	a3,12(s0)
410b95ea:	9864      	lw	v1,16(s0)

    gpio_regB->pd_en &= (~reg_valB);
410b95ec:	ec4f      	not	a0,v0
410b95ee:	ef8c      	and	a3,a0
410b95f0:	eb8c      	and	v1,a0
410b95f2:	d864      	sw	v1,16(s0)
410b95f4:	d8e3      	sw	a3,12(s0)
410b95f6:	970d      	lw	a3,52(sp)

    gpio_regSIO->pu_en &= (~reg_valSIO);
410b95f8:	960c      	lw	a2,48(sp)
410b95fa:	9f23      	lw	s1,12(a3)
410b95fc:	9f44      	lw	v0,16(a3)

    gpio_regSIO->pd_en &= (~reg_valSIO);
410b95fe:	e8cf      	not	s0,a2
410b9600:	e90c      	and	s1,s0
410b9602:	ea0c      	and	v0,s0
410b9604:	df23      	sw	s1,12(a3)
410b9606:	df44      	sw	v0,16(a3)
410b9608:	9609      	lw	a2,36(sp)

    gpio_regA->out_en &= (~reg_valA);
410b960a:	9e60      	lw	v1,0(a2)
410b960c:	ebac      	and	v1,a1
410b960e:	de60      	sw	v1,0(a2)
410b9610:	960b      	lw	a2,44(sp)

    gpio_regB->out_en &= (~reg_valB);
410b9612:	9e20      	lw	s1,0(a2)
410b9614:	e98c      	and	s1,a0
410b9616:	de20      	sw	s1,0(a2)
410b9618:	940d      	lw	a0,52(sp)

    gpio_regSIO->out_en &= (~reg_valSIO);
410b961a:	9ce0      	lw	a3,0(a0)
410b961c:	ef0c      	and	a3,s0
410b961e:	dce0      	sw	a3,0(a0)
410b9620:	9309      	lw	v1,36(sp)

    //使能管脚输入
    gpio_regA->in_en |= reg_valA;
410b9622:	9508      	lw	a1,32(sp)
410b9624:	9b41      	lw	v0,4(v1)
410b9626:	eaad      	or	v0,a1
410b9628:	db41      	sw	v0,4(v1)
410b962a:	9e01      	lw	s0,4(a2)

    gpio_regB->in_en |= reg_valB;
410b962c:	910a      	lw	s1,40(sp)
410b962e:	970b      	lw	a3,44(sp)
410b9630:	e82d      	or	s0,s1
410b9632:	df01      	sw	s0,4(a3)
410b9634:	960d      	lw	a2,52(sp)

    gpio_regSIO->in_en |= reg_valSIO;
410b9636:	940c      	lw	a0,48(sp)
410b9638:	9ea1      	lw	a1,4(a2)
410b963a:	6900      	li	s1,0

    for (i = 0; i < 31; i++)
410b963c:	ed8d      	or	a1,a0
410b963e:	dea1      	sw	a1,4(a2)
410b9640:	1005      	b	410b964c <test_gpio_open+0xa8>
410b9642:	4101      	addiu	s0,s1,1
410b9644:	6730      	move	s1,s0
410b9646:	e911      	zeb	s1
410b9648:	591f      	sltiu	s1,31
410b964a:	601d      	bteqz	410b9686 <test_gpio_open+0xe2>
410b964c:	6801      	li	s0,1
    {
        reg_value = (1 << i);
410b964e:	9508      	lw	a1,32(sp)

        if ((reg_valA & reg_value) != 0)
410b9650:	e904      	sllv	s0,s1
410b9652:	ed0c      	and	a1,s0
410b9654:	25f6      	beqz	a1,410b9642 <test_gpio_open+0x9e>
410b9656:	9409      	lw	a0,36(sp)
        {
            //使能内部上拉
            gpio_regA->pu_en |= reg_value;
410b9658:	6d00      	li	a1,0

            //等待上拉稳定
            sys_mdelay(2);
410b965a:	9cc3      	lw	a2,12(a0)
410b965c:	b240      	lw	v0,410b975c <test_gpio_open+0x1b8>
410b965e:	ee0d      	or	a2,s0
410b9660:	dcc3      	sw	a2,12(a0)
410b9662:	6f1d      	li	a3,29
410b9664:	6c02      	li	a0,2
410b9666:	ea40      	jalr	v0
410b9668:	67c5      	move	a2,a1
410b966a:	9709      	lw	a3,36(sp)

            //读取gpio数值
            if ((gpio_regA->dat & reg_value) != 0)
410b966c:	9f62      	lw	v1,8(a3)
410b966e:	eb0c      	and	v1,s0
410b9670:	23e8      	beqz	v1,410b9642 <test_gpio_open+0x9e>
410b9672:	b33c      	lw	v1,410b9760 <test_gpio_open+0x1bc>
            {
                att_write_test_info("GPIOA err open:", i, 1);
410b9674:	67b1      	move	a1,s1
410b9676:	0c2a      	la	a0,410b971c <test_gpio_open+0x178>
410b9678:	eb40      	jalr	v1
410b967a:	6e01      	li	a2,1
410b967c:	950e      	lw	a1,56(sp)
                *index = i;
410b967e:	6a0a      	li	v0,10
                return TEST_GPIOA_OPEN;
410b9680:	dd20      	sw	s1,0(a1)
410b9682:	6474      	restore	32,ra,s0-s1
            }
        }
    }

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valB & reg_value) != 0)
        {
            //使能内部上拉
            gpio_regB->pu_en |= reg_value;

            //等待上拉稳定
            sys_mdelay(2);

            //读取gpio数值
            if ((gpio_regB->dat & reg_value) != 0)
            {
                att_write_test_info("GPIOB err open:", i, 1);
                *index = i;
                return TEST_GPIOB_OPEN;
            }
        }
    }

    for (i = 0; i < 31; i++)
    {
        reg_value = (1 << i);

        if ((reg_valSIO & reg_value) != 0)
        {
            //使能内部上拉
            gpio_regSIO->pu_en |= reg_value;

            //等待上拉稳定
            sys_mdelay(2);

            //读取gpio数值
            if ((gpio_regSIO->dat & reg_value) != 0)
            {
                att_write_test_info("SIO err open:", i, 1);
                *index = i;
                return TEST_GPIOSIO_OPEN;
            }
        }
    }

    return TEST_PASS;
}
410b9684:	e8a0      	jrc	ra
410b9686:	6900      	li	s1,0
410b9688:	1005      	b	410b9694 <test_gpio_open+0xf0>
410b968a:	4101      	addiu	s0,s1,1
410b968c:	6730      	move	s1,s0
410b968e:	e911      	zeb	s1
410b9690:	591f      	sltiu	s1,31
410b9692:	601d      	bteqz	410b96ce <test_gpio_open+0x12a>
410b9694:	6801      	li	s0,1
410b9696:	970a      	lw	a3,40(sp)
410b9698:	e904      	sllv	s0,s1
410b969a:	ef0c      	and	a3,s0
410b969c:	27f6      	beqz	a3,410b968a <test_gpio_open+0xe6>
410b969e:	960b      	lw	a2,44(sp)
410b96a0:	b22f      	lw	v0,410b975c <test_gpio_open+0x1b8>
410b96a2:	9ea3      	lw	a1,12(a2)
410b96a4:	6c02      	li	a0,2
410b96a6:	ed0d      	or	a1,s0
410b96a8:	dea3      	sw	a1,12(a2)
410b96aa:	6d00      	li	a1,0
410b96ac:	67c5      	move	a2,a1
410b96ae:	ea40      	jalr	v0
410b96b0:	6f1d      	li	a3,29
410b96b2:	940b      	lw	a0,44(sp)
410b96b4:	9c42      	lw	v0,8(a0)
410b96b6:	ea0c      	and	v0,s0
410b96b8:	22e8      	beqz	v0,410b968a <test_gpio_open+0xe6>
410b96ba:	b22a      	lw	v0,410b9760 <test_gpio_open+0x1bc>
410b96bc:	0c1c      	la	a0,410b972c <test_gpio_open+0x188>
410b96be:	67b1      	move	a1,s1
410b96c0:	ea40      	jalr	v0
410b96c2:	6e01      	li	a2,1
410b96c4:	930e      	lw	v1,56(sp)
410b96c6:	6a0e      	li	v0,14
410b96c8:	db20      	sw	s1,0(v1)
410b96ca:	6474      	restore	32,ra,s0-s1
410b96cc:	e8a0      	jrc	ra
410b96ce:	6900      	li	s1,0
410b96d0:	1005      	b	410b96dc <test_gpio_open+0x138>
410b96d2:	4181      	addiu	a0,s1,1
410b96d4:	6724      	move	s1,a0
410b96d6:	e911      	zeb	s1
410b96d8:	591f      	sltiu	s1,31
410b96da:	601d      	bteqz	410b9716 <test_gpio_open+0x172>
410b96dc:	6801      	li	s0,1
410b96de:	970c      	lw	a3,48(sp)
410b96e0:	e904      	sllv	s0,s1
410b96e2:	ef0c      	and	a3,s0
410b96e4:	27f6      	beqz	a3,410b96d2 <test_gpio_open+0x12e>
410b96e6:	950d      	lw	a1,52(sp)
410b96e8:	b21d      	lw	v0,410b975c <test_gpio_open+0x1b8>
410b96ea:	9d63      	lw	v1,12(a1)
410b96ec:	6c02      	li	a0,2
410b96ee:	eb0d      	or	v1,s0
410b96f0:	dd63      	sw	v1,12(a1)
410b96f2:	6d00      	li	a1,0
410b96f4:	67c5      	move	a2,a1
410b96f6:	ea40      	jalr	v0
410b96f8:	6f1d      	li	a3,29
410b96fa:	960d      	lw	a2,52(sp)
410b96fc:	9e82      	lw	a0,8(a2)
410b96fe:	ec0c      	and	a0,s0
410b9700:	24e8      	beqz	a0,410b96d2 <test_gpio_open+0x12e>
410b9702:	b218      	lw	v0,410b9760 <test_gpio_open+0x1bc>
410b9704:	0c0e      	la	a0,410b973c <test_gpio_open+0x198>
410b9706:	67b1      	move	a1,s1
410b9708:	ea40      	jalr	v0
410b970a:	6e01      	li	a2,1
410b970c:	970e      	lw	a3,56(sp)
410b970e:	6a12      	li	v0,18
410b9710:	df20      	sw	s1,0(a3)
410b9712:	6474      	restore	32,ra,s0-s1
410b9714:	e8a0      	jrc	ra
410b9716:	6a00      	li	v0,0
410b9718:	6474      	restore	32,ra,s0-s1
410b971a:	e8a0      	jrc	ra
410b971c:	5047      	slti	s0,71
410b971e:	4f49      	addiu	a3,73
410b9720:	2041      	beqz	s0,410b97a4 <test_gpio_open+0x200>
410b9722:	7265      	cmpi	v0,101
410b9724:	2072      	beqz	s0,410b980a <test_gpio_open+0x266>
410b9726:	706f      	cmpi	s0,111
410b9728:	6e65      	li	a2,101
410b972a:	003a      	addiu	s0,sp,232
410b972c:	5047      	slti	s0,71
410b972e:	4f49      	addiu	a3,73
410b9730:	2042      	beqz	s0,410b97b6 <test_gpio_open+0x212>
410b9732:	7265      	cmpi	v0,101
410b9734:	2072      	beqz	s0,410b981a <test_gpio_open+0x276>
410b9736:	706f      	cmpi	s0,111
410b9738:	6e65      	li	a2,101
410b973a:	003a      	addiu	s0,sp,232
410b973c:	4953      	addiu	s1,83
410b973e:	204f      	beqz	s0,410b97de <test_gpio_open+0x23a>
410b9740:	7265      	cmpi	v0,101
410b9742:	2072      	beqz	s0,410b9828 <test_gpio_open+0x284>
410b9744:	706f      	cmpi	s0,111
410b9746:	6e65      	li	a2,101
410b9748:	003a      	addiu	s0,sp,232
410b974a:	0000      	addiu	s0,sp,0
410b974c:	0000      	addiu	s0,sp,0
410b974e:	c009      	sb	s0,9(s0)
410b9750:	0008      	addiu	s0,sp,32
410b9752:	c009      	sb	s0,9(s0)
410b9754:	0028      	addiu	s0,sp,160
410b9756:	c009      	sb	s0,9(s0)
410b9758:	0030      	addiu	s0,sp,192
410b975a:	c009      	sb	s0,9(s0)
410b975c:	88dd      	lh	a2,58(s0)
410b975e:	bfc3      	lwu	a2,12(a3)
410b9760:	8b89      	lh	a0,18(v1)
410b9762:	bfc3      	lwu	a2,12(a3)
	...
Disassembly of section BANK_CONTROL_1_3:

410f9000 <music_test_fs_init>:
410f9000:	64f5      	save	40,ra,s0-s1
};

//装载物理介质和文件系统
int32 music_test_fs_init(uint8 disk_type, uint8 drv_mode)
{
410f9002:	ec11      	zeb	a0
410f9004:	6901      	li	s1,1
    uint8 drv_type;
    uint8 *drv_name;
    int32 vfs_mount = -1;
410f9006:	7410      	cmpi	a0,16

    if (disk_type == DISK_H)
410f9008:	d404      	sw	a0,16(sp)
410f900a:	ed11      	zeb	a1
410f900c:	e92b      	neg	s1
410f900e:	6118      	btnez	410f9040 <music_test_fs_init+0x40>
410f9010:	6a01      	li	v0,1
    {
        drv_type = DRV_GROUP_STG_CARD;
410f9012:	b614      	lw	a2,410f9060 <music_test_fs_init+0x60>
        drv_name = (uint8*) card_drv_name;
410f9014:	d205      	sw	v0,20(sp)
410f9016:	b015      	lw	s0,410f9068 <music_test_fs_init+0x68>
    }
    else if (disk_type == DISK_U)
    {
        drv_type = DRV_GROUP_STG_UHOST;
        drv_name = (uint8*) uhost_drv_name;
    }
    else
    {
        return -1;
    }

    //安装存储驱动
    if (sys_drv_install(drv_type, (uint32) drv_mode, drv_name) != 0)
410f9018:	9405      	lw	a0,20(sp)
410f901a:	e840      	jalr	s0
410f901c:	6f0a      	li	a3,10
410f901e:	6702      	move	s0,v0
410f9020:	6d01      	li	a1,1
    {
        return -1;
410f9022:	eaab      	neg	v0,a1
410f9024:	280b      	bnez	s0,410f903c <music_test_fs_init+0x3c>
410f9026:	b111      	lw	s1,410f9068 <music_test_fs_init+0x68>
    }

    //挂载FS
    vfs_mount = sys_mount_fs(drv_type, disk_type, 0);
410f9028:	9405      	lw	a0,20(sp)
410f902a:	9504      	lw	a1,16(sp)
410f902c:	67d0      	move	a2,s0
410f902e:	e940      	jalr	s1
410f9030:	6f29      	li	a3,41
410f9032:	6722      	move	s1,v0
410f9034:	e991      	seb	s1
410f9036:	ee2f      	not	a2,s1

    if (vfs_mount == -1)
410f9038:	260b      	beqz	a2,410f9050 <music_test_fs_init+0x50>
410f903a:	6751      	move	v0,s1
    {
        sys_drv_uninstall(drv_type);
    }

    return vfs_mount;
410f903c:	6475      	restore	40,ra,s0-s1
}
410f903e:	e8a0      	jrc	ra
410f9040:	9304      	lw	v1,16(sp)
410f9042:	6751      	move	v0,s1
410f9044:	7320      	cmpi	v1,32
410f9046:	61fa      	btnez	410f903c <music_test_fs_init+0x3c>
410f9048:	b607      	lw	a2,410f9064 <music_test_fs_init+0x64>
410f904a:	6c02      	li	a0,2
410f904c:	d405      	sw	a0,20(sp)
410f904e:	17e3      	b	410f9016 <music_test_fs_init+0x16>
410f9050:	9405      	lw	a0,20(sp)
410f9052:	b306      	lw	v1,410f9068 <music_test_fs_init+0x68>
410f9054:	67b0      	move	a1,s0
410f9056:	67d0      	move	a2,s0
410f9058:	eb40      	jalr	v1
410f905a:	6f0b      	li	a3,11
410f905c:	6751      	move	v0,s1
410f905e:	17ee      	b	410f903c <music_test_fs_init+0x3c>
410f9060:	9320      	lw	v1,128(sp)
410f9062:	410f      	addiu	s0,s1,-1
410f9064:	9314      	lw	v1,80(sp)
410f9066:	410f      	addiu	s0,s1,-1
410f9068:	88dd      	lh	a2,58(s0)
410f906a:	bfc3      	lwu	a2,12(a3)

410f906c <music_test_fs_exit>:
410f906c:	64f4      	save	32,ra,s0-s1

//卸载物理介质和文件系统
bool music_test_fs_exit(uint8 disk_type, int32 file_sys_id)
{
410f906e:	6724      	move	s1,a0
410f9070:	eaaf      	not	v0,a1
    int32 ret_val = 0;

    uint8 drv_type;

    if (file_sys_id != -1)
410f9072:	e911      	zeb	s1
410f9074:	6800      	li	s0,0
410f9076:	2a03      	bnez	v0,410f907e <music_test_fs_exit+0x12>
410f9078:	6a01      	li	v0,1
    {
        ret_val = sys_unmount_fs(file_sys_id);
        file_sys_id = -1;
        if (ret_val == 0)
        {
            if (disk_type == DISK_H)
            {
                drv_type = DRV_GROUP_STG_CARD;
            }
            else if (disk_type == DISK_U)
            {
                drv_type = DRV_GROUP_STG_UHOST;
            }
            else
            {
                return FALSE;
            }

            ret_val = sys_drv_uninstall(drv_type);
        }
    }
    if (0 > ret_val)
    {
        return FALSE;
    }

    return TRUE;
410f907a:	6474      	restore	32,ra,s0-s1
}
410f907c:	e8a0      	jrc	ra
410f907e:	b20d      	lw	v0,410f90b0 <music_test_fs_exit+0x44>
410f9080:	6785      	move	a0,a1
410f9082:	67d0      	move	a2,s0
410f9084:	67b0      	move	a1,s0
410f9086:	ea40      	jalr	v0
410f9088:	6f2a      	li	a3,42
410f908a:	2a0c      	bnez	v0,410f90a4 <music_test_fs_exit+0x38>
410f908c:	7110      	cmpi	s1,16
410f908e:	6c01      	li	a0,1
410f9090:	6004      	bteqz	410f909a <music_test_fs_exit+0x2e>
410f9092:	7120      	cmpi	s1,32
410f9094:	4481      	addiu	a0,a0,1
410f9096:	6750      	move	v0,s0
410f9098:	61f0      	btnez	410f907a <music_test_fs_exit+0xe>
410f909a:	6d00      	li	a1,0
410f909c:	b205      	lw	v0,410f90b0 <music_test_fs_exit+0x44>
410f909e:	67c5      	move	a2,a1
410f90a0:	ea40      	jalr	v0
410f90a2:	6f0b      	li	a3,11
410f90a4:	5200      	slti	v0,0
410f90a6:	6a00      	li	v0,0
410f90a8:	61e8      	btnez	410f907a <music_test_fs_exit+0xe>
410f90aa:	6a01      	li	v0,1
410f90ac:	17e6      	b	410f907a <music_test_fs_exit+0xe>
410f90ae:	0000      	addiu	s0,sp,0
410f90b0:	88dd      	lh	a2,58(s0)
410f90b2:	bfc3      	lwu	a2,12(a3)

410f90b4 <act_test_report_music_test_result>:
410f90b4:	64c3      	save	24,ra

void act_test_report_music_test_result(uint16 test_id, uint32 ret_val)
{
410f90b6:	6765      	move	v1,a1
410f90b8:	67a4      	move	a1,a0
410f90ba:	b409      	lw	a0,410f90dc <.LBE2+0x4>
    return_result_t *return_data;
    uint16 trans_bytes = 0;

    if (g_test_mode != TEST_MODE_CARD)
410f90bc:	ed31      	zeh	a1
410f90be:	a440      	lbu	v0,0(a0)
410f90c0:	2208      	beqz	v0,410f90d2 <.LBB2>
410f90c2:	b408      	lw	a0,410f90e0 <.LBE2+0x8>
    {
        return_data = (return_result_t *) (STUB_ATT_RW_TEMP_BUFFER);
410f90c4:	b208      	lw	v0,410f90e4 <.LBE2+0xc>
        return_data->test_id = test_id;
        return_data->test_result = ret_val;

        act_test_report_result(return_data, 4);
410f90c6:	cca3      	sh	a1,6(a0)
410f90c8:	c468      	sb	v1,8(a0)
410f90ca:	ea40      	jalr	v0
410f90cc:	6d04      	li	a1,4
410f90ce:	6443      	restore	24,ra
    }
    else
    {
        act_test_report_test_log(ret_val, test_id);
    }
}
410f90d0:	e8a0      	jrc	ra

410f90d2 <.LBB2>:
410f90d2:	1802 e437 	jal	410390dc <act_test_report_test_log>
410f90d6:	6783      	move	a0,v1

410f90d8 <.LBE2>:
410f90d8:	6443      	restore	24,ra
410f90da:	e8a0      	jrc	ra
410f90dc:	8dc9      	lh	a2,18(a1)
410f90de:	bfc3      	lwu	a2,12(a3)
410f90e0:	a000      	lbu	s0,0(s0)
410f90e2:	9fc3      	lw	a2,12(a3)
410f90e4:	9b41      	lw	v0,4(v1)
410f90e6:	41cb      	addiu	a2,s1,-5

410f90e8 <act_test_uhost_play_test>:
410f90e8:	64f5      	save	40,ra,s0-s1

test_result_e act_test_uhost_play_test(void *arg_buffer)
{
410f90ea:	6d00      	li	a1,0
    // uint32 ra = (uint32)test_dispatch;
    uint32  ret_val;
    int32 fs;

    DEBUG_ATT_PRINT("start uhost test", 0, 0);
410f90ec:	b343      	lw	v1,410f91f8 <act_test_uhost_play_test+0x110>
410f90ee:	67c5      	move	a2,a1
410f90f0:	0c2b      	la	a0,410f919c <act_test_uhost_play_test+0xb4>
410f90f2:	eb40      	jalr	v1
410f90f4:	6f4b      	li	a3,75
410f90f6:	b142      	lw	s1,410f91fc <act_test_uhost_play_test+0x114>

    if (g_test_mode == TEST_MODE_CARD)
410f90f8:	a1a0      	lbu	a1,0(s1)
410f90fa:	254c      	beqz	a1,410f9194 <act_test_uhost_play_test+0xac>
410f90fc:	6c20      	li	a0,32
    {
        fs = music_test_fs_exit(DISK_H, 0);
    }
    
    fs = music_test_fs_init(DISK_U, 0);
410f90fe:	1862 e400 	jal	410f9000 <music_test_fs_init>
410f9102:	6d00      	li	a1,0
410f9104:	6702      	move	s0,v0
410f9106:	a140      	lbu	v0,0(s1)

    if (g_test_mode == TEST_MODE_CARD)
410f9108:	2a1c      	bnez	v0,410f9142 <act_test_uhost_play_test+0x5a>
410f910a:	b13c      	lw	s1,410f91f8 <act_test_uhost_play_test+0x110>
    {
        DEBUG_ATT_PRINT("uhost test FS:", fs, 2);
410f910c:	0c29      	la	a0,410f91b0 <act_test_uhost_play_test+0xc8>
410f910e:	67b0      	move	a1,s0
410f9110:	6e02      	li	a2,2
410f9112:	e940      	jalr	s1
410f9114:	6f4b      	li	a3,75
410f9116:	ec0f      	not	a0,s0
    }
    else
    {
        print_log("uhost test FS: %d", fs);
    }
    
    if (fs != -1)
410f9118:	241a      	beqz	a0,410f914e <act_test_uhost_play_test+0x66>
410f911a:	6d00      	li	a1,0
    {
        ret_val = 1;
        att_write_test_info("uhost test ok", 0, 0);
410f911c:	b33a      	lw	v1,410f9204 <act_test_uhost_play_test+0x11c>
    }
    else
    {
        ret_val = 0;
        att_write_test_info("uhost test failed", 0, 0);
410f911e:	0c29      	la	a0,410f91c0 <act_test_uhost_play_test+0xd8>
410f9120:	eb40      	jalr	v1
410f9122:	67c5      	move	a2,a1
410f9124:	67b0      	move	a1,s0
    }
    
    music_test_fs_exit(DISK_U, fs);  
410f9126:	1862 e41b 	jal	410f906c <music_test_fs_exit>
410f912a:	6c20      	li	a0,32
410f912c:	b534      	lw	a1,410f91fc <act_test_uhost_play_test+0x114>
    
    if (g_test_mode == TEST_MODE_CARD)
410f912e:	6901      	li	s1,1
410f9130:	a500      	lbu	s0,0(a1)
410f9132:	201a      	beqz	s0,410f9168 <act_test_uhost_play_test+0x80>
410f9134:	6c0b      	li	a0,11
    {
        music_test_fs_init(DISK_H, 0);
        g_test_file_handle = vfs_file_open(g_file_sys_id, g_ap_name, R_NORMAL_SEEK);
    }

    act_test_report_music_test_result(TESTID_UHOST_TEST, ret_val);    
410f9136:	1862 e42d 	jal	410f90b4 <act_test_report_music_test_result>
410f913a:	67b1      	move	a1,s1
410f913c:	6a00      	li	v0,0

    return TEST_PASS;
}
410f913e:	6475      	restore	40,ra,s0-s1
410f9140:	e8a0      	jrc	ra
410f9142:	b230      	lw	v0,410f9200 <act_test_uhost_play_test+0x118>
410f9144:	0c23      	la	a0,410f91d0 <act_test_uhost_play_test+0xe8>
410f9146:	ea40      	jalr	v0
410f9148:	67b0      	move	a1,s0
410f914a:	ec0f      	not	a0,s0
410f914c:	2ce6      	bnez	a0,410f911a <act_test_uhost_play_test+0x32>
410f914e:	6900      	li	s1,0
410f9150:	b32d      	lw	v1,410f9204 <act_test_uhost_play_test+0x11c>
410f9152:	0c25      	la	a0,410f91e4 <act_test_uhost_play_test+0xfc>
410f9154:	67b1      	move	a1,s1
410f9156:	eb40      	jalr	v1
410f9158:	67d1      	move	a2,s1
410f915a:	67b0      	move	a1,s0
410f915c:	1862 e41b 	jal	410f906c <music_test_fs_exit>
410f9160:	6c20      	li	a0,32
410f9162:	b527      	lw	a1,410f91fc <act_test_uhost_play_test+0x114>
410f9164:	a500      	lbu	s0,0(a1)
410f9166:	28e6      	bnez	s0,410f9134 <act_test_uhost_play_test+0x4c>
410f9168:	67b0      	move	a1,s0
410f916a:	1862 e400 	jal	410f9000 <music_test_fs_init>
410f916e:	6c10      	li	a0,16
410f9170:	b527      	lw	a1,410f920c <act_test_uhost_play_test+0x124>
410f9172:	6f05      	li	a3,5
410f9174:	9d80      	lw	a0,0(a1)
410f9176:	b228      	lw	v0,410f9214 <act_test_uhost_play_test+0x12c>
410f9178:	b526      	lw	a1,410f9210 <act_test_uhost_play_test+0x128>
410f917a:	d704      	sw	a3,16(sp)
410f917c:	67d0      	move	a2,s0
410f917e:	ea40      	jalr	v0
410f9180:	67f0      	move	a3,s0
410f9182:	b622      	lw	a2,410f9208 <act_test_uhost_play_test+0x120>
410f9184:	6c0b      	li	a0,11
410f9186:	de40      	sw	v0,0(a2)
410f9188:	1862 e42d 	jal	410f90b4 <act_test_report_music_test_result>
410f918c:	67b1      	move	a1,s1
410f918e:	6a00      	li	v0,0
410f9190:	6475      	restore	40,ra,s0-s1
410f9192:	e8a0      	jrc	ra
410f9194:	1862 e41b 	jal	410f906c <music_test_fs_exit>
410f9198:	6c10      	li	a0,16
410f919a:	17b0      	b	410f90fc <act_test_uhost_play_test+0x14>
410f919c:	7473      	cmpi	a0,115
410f919e:	7261      	cmpi	v0,97
410f91a0:	2074      	beqz	s0,410f928a <act_test_sdcard_play_test+0x72>
410f91a2:	6875      	li	s0,117
410f91a4:	736f      	cmpi	v1,111
410f91a6:	2074      	beqz	s0,410f9290 <act_test_sdcard_play_test+0x78>
410f91a8:	6574      	move	s3,a0
410f91aa:	7473      	cmpi	a0,115
410f91ac:	0000      	addiu	s0,sp,0
410f91ae:	0000      	addiu	s0,sp,0
410f91b0:	6875      	li	s0,117
410f91b2:	736f      	cmpi	v1,111
410f91b4:	2074      	beqz	s0,410f929e <act_test_sdcard_play_test+0x86>
410f91b6:	6574      	move	s3,a0
410f91b8:	7473      	cmpi	a0,115
410f91ba:	4620      	addiu	s1,a2,0
410f91bc:	3a53      	ld	v0,152(v0)
410f91be:	0000      	addiu	s0,sp,0
410f91c0:	6875      	li	s0,117
410f91c2:	736f      	cmpi	v1,111
410f91c4:	2074      	beqz	s0,410f92ae <act_test_sdcard_play_test+0x96>
410f91c6:	6574      	move	s3,a0
410f91c8:	7473      	cmpi	a0,115
410f91ca:	6f20      	li	a3,32
410f91cc:	006b      	addiu	s0,sp,428
410f91ce:	0000      	addiu	s0,sp,0
410f91d0:	6875      	li	s0,117
410f91d2:	736f      	cmpi	v1,111
410f91d4:	2074      	beqz	s0,410f92be <act_test_sdcard_play_test+0xa6>
410f91d6:	6574      	move	s3,a0
410f91d8:	7473      	cmpi	a0,115
410f91da:	4620      	addiu	s1,a2,0
410f91dc:	3a53      	ld	v0,152(v0)
410f91de:	2520      	beqz	a1,410f9220 <act_test_sdcard_play_test+0x8>
410f91e0:	0064      	addiu	s0,sp,400
410f91e2:	0000      	addiu	s0,sp,0
410f91e4:	6875      	li	s0,117
410f91e6:	736f      	cmpi	v1,111
410f91e8:	2074      	beqz	s0,410f92d2 <act_test_sdcard_play_test+0xba>
410f91ea:	6574      	move	s3,a0
410f91ec:	7473      	cmpi	a0,115
410f91ee:	6620      	0x6620
410f91f0:	6961      	li	s1,97
410f91f2:	656c      	move	t3,a0
410f91f4:	0064      	addiu	s0,sp,400
410f91f6:	0000      	addiu	s0,sp,0
410f91f8:	88dd      	lh	a2,58(s0)
410f91fa:	bfc3      	lwu	a2,12(a3)
410f91fc:	8dc9      	lh	a2,18(a1)
410f91fe:	bfc3      	lwu	a2,12(a3)
410f9200:	9b59      	lw	v0,100(v1)
410f9202:	41cf      	addiu	a2,s1,-1
410f9204:	8b89      	lh	a0,18(v1)
410f9206:	bfc3      	lwu	a2,12(a3)
410f9208:	8dec      	lh	a3,24(a1)
410f920a:	bfc3      	lwu	a2,12(a3)
410f920c:	8de8      	lh	a3,16(a1)
410f920e:	bfc3      	lwu	a2,12(a3)
410f9210:	92f0      	lw	v0,960(sp)
410f9212:	410f      	addiu	s0,s1,-1
410f9214:	88e1      	lh	a3,2(s0)
410f9216:	bfc3      	lwu	a2,12(a3)

410f9218 <act_test_sdcard_play_test>:
410f9218:	64f5      	save	40,ra,s0-s1

test_result_e act_test_sdcard_play_test(void *arg_buffer)
{
410f921a:	6d00      	li	a1,0
    uint32  ret_val;
    int32 fs;

    DEBUG_ATT_PRINT("start sdcard test", 0, 0);
410f921c:	b231      	lw	v0,410f92e0 <act_test_sdcard_play_test+0xc8>
410f921e:	0c1a      	la	a0,410f9284 <act_test_sdcard_play_test+0x6c>
410f9220:	67c5      	move	a2,a1
410f9222:	ea40      	jalr	v0
410f9224:	6f4b      	li	a3,75
410f9226:	b330      	lw	v1,410f92e4 <act_test_sdcard_play_test+0xcc>

    if (g_test_mode == TEST_MODE_CARD)
410f9228:	a340      	lbu	v0,0(v1)
410f922a:	2a07      	bnez	v0,410f923a <act_test_sdcard_play_test+0x22>
410f922c:	6c0a      	li	a0,10
    {
        act_test_report_music_test_result(TESTID_SDCARD_TEST, 1); 
410f922e:	1862 e42d 	jal	410f90b4 <act_test_report_music_test_result>
410f9232:	6d01      	li	a1,1
410f9234:	6a00      	li	v0,0

        return TEST_PASS;
    }
    
    fs = music_test_fs_init(DISK_H, 0);

    print_log("sdcard test FS: %d", fs);
    
    if (fs != -1)
    {
        ret_val = 1;
        print_log("sdcard test ok");
    }
    else
    {
        ret_val = 0;
        print_log("sdcard test failed");
    }
    
    music_test_fs_exit(DISK_H, fs);  
    
    act_test_report_music_test_result(TESTID_SDCARD_TEST, ret_val);
    
    DEBUG_ATT_PRINT("uhost test end ", 0, 0);

    return TEST_PASS;
}
410f9236:	6475      	restore	40,ra,s0-s1
410f9238:	e8a0      	jrc	ra
410f923a:	6c10      	li	a0,16
410f923c:	1862 e400 	jal	410f9000 <music_test_fs_init>
410f9240:	6d00      	li	a1,0
410f9242:	b12a      	lw	s1,410f92e8 <act_test_sdcard_play_test+0xd0>
410f9244:	6702      	move	s0,v0
410f9246:	0c15      	la	a0,410f9298 <act_test_sdcard_play_test+0x80>
410f9248:	e940      	jalr	s1
410f924a:	67a2      	move	a1,v0
410f924c:	ec0f      	not	a0,s0
410f924e:	2c15      	bnez	a0,410f927a <act_test_sdcard_play_test+0x62>
410f9250:	6e00      	li	a2,0
410f9252:	d604      	sw	a2,16(sp)
410f9254:	0c16      	la	a0,410f92ac <act_test_sdcard_play_test+0x94>
410f9256:	e9c0      	jalrc	s1
410f9258:	67b0      	move	a1,s0
410f925a:	1862 e41b 	jal	410f906c <music_test_fs_exit>
410f925e:	6c10      	li	a0,16
410f9260:	9504      	lw	a1,16(sp)
410f9262:	1862 e42d 	jal	410f90b4 <act_test_report_music_test_result>
410f9266:	6c0a      	li	a0,10
410f9268:	6d00      	li	a1,0
410f926a:	b21e      	lw	v0,410f92e0 <act_test_sdcard_play_test+0xc8>
410f926c:	0c15      	la	a0,410f92c0 <act_test_sdcard_play_test+0xa8>
410f926e:	67c5      	move	a2,a1
410f9270:	ea40      	jalr	v0
410f9272:	6f4b      	li	a3,75
410f9274:	6a00      	li	v0,0
410f9276:	6475      	restore	40,ra,s0-s1
410f9278:	e8a0      	jrc	ra
410f927a:	6d01      	li	a1,1
410f927c:	0c15      	la	a0,410f92d0 <act_test_sdcard_play_test+0xb8>
410f927e:	d504      	sw	a1,16(sp)
410f9280:	17ea      	b	410f9256 <act_test_sdcard_play_test+0x3e>
410f9282:	0000      	addiu	s0,sp,0
410f9284:	7473      	cmpi	a0,115
410f9286:	7261      	cmpi	v0,97
410f9288:	2074      	beqz	s0,410f9372 <card_drv_name+0x52>
410f928a:	6473      	restore	24,ra,s0-s1
410f928c:	6163      	btnez	410f9354 <card_drv_name+0x34>
410f928e:	6472      	restore	16,ra,s0-s1
410f9290:	7420      	cmpi	a0,32
410f9292:	7365      	cmpi	v1,101
410f9294:	0074      	addiu	s0,sp,464
410f9296:	0000      	addiu	s0,sp,0
410f9298:	6473      	restore	24,ra,s0-s1
410f929a:	6163      	btnez	410f9362 <card_drv_name+0x42>
410f929c:	6472      	restore	16,ra,s0-s1
410f929e:	7420      	cmpi	a0,32
410f92a0:	7365      	cmpi	v1,101
410f92a2:	2074      	beqz	s0,410f938c <card_drv_name+0x6c>
410f92a4:	5346      	slti	v1,70
410f92a6:	203a      	beqz	s0,410f931c <uhost_drv_name+0x8>
410f92a8:	6425      	restore	40,s0
410f92aa:	0000      	addiu	s0,sp,0
410f92ac:	6473      	restore	24,ra,s0-s1
410f92ae:	6163      	btnez	410f9376 <card_drv_name+0x56>
410f92b0:	6472      	restore	16,ra,s0-s1
410f92b2:	7420      	cmpi	a0,32
410f92b4:	7365      	cmpi	v1,101
410f92b6:	2074      	beqz	s0,410f93a0 <card_drv_name+0x80>
410f92b8:	6166      	btnez	410f9386 <card_drv_name+0x66>
410f92ba:	6c69      	li	a0,105
410f92bc:	6465      	restore	40,ra,s0
410f92be:	0000      	addiu	s0,sp,0
410f92c0:	6875      	li	s0,117
410f92c2:	736f      	cmpi	v1,111
410f92c4:	2074      	beqz	s0,410f93ae <card_drv_name+0x8e>
410f92c6:	6574      	move	s3,a0
410f92c8:	7473      	cmpi	a0,115
410f92ca:	6520      	move	at,s0
410f92cc:	646e      	restore	112,ra,s0
410f92ce:	0020      	addiu	s0,sp,128
410f92d0:	6473      	restore	24,ra,s0-s1
410f92d2:	6163      	btnez	410f939a <card_drv_name+0x7a>
410f92d4:	6472      	restore	16,ra,s0-s1
410f92d6:	7420      	cmpi	a0,32
410f92d8:	7365      	cmpi	v1,101
410f92da:	2074      	beqz	s0,410f93c4 <card_drv_name+0xa4>
410f92dc:	6b6f      	li	v1,111
410f92de:	0000      	addiu	s0,sp,0
410f92e0:	88dd      	lh	a2,58(s0)
410f92e2:	bfc3      	lwu	a2,12(a3)
410f92e4:	8dc9      	lh	a2,18(a1)
410f92e6:	bfc3      	lwu	a2,12(a3)
410f92e8:	9b59      	lw	v0,100(v1)
410f92ea:	41cf      	addiu	a2,s1,-1

410f92ec <act_test_linein_play_test>:
410f92ec:	e820      	jr	ra


test_result_e act_test_linein_play_test(void *arg_buffer)
{
    test_result_e result = TEST_PASS;

    return result;
}
410f92ee:	6a00      	li	v0,0

410f92f0 <g_ap_name>:
410f92f0:	feff 0061 0063 0074 0069 006f 006e 0073     ..a.c.t.i.o.n.s.
410f9300:	0074 0065 0073 0074 002e 0061 0074 0066     t.e.s.t...a.t.f.
410f9310:	0000 0000                                   ....

410f9314 <uhost_drv_name>:
410f9314:	6875 736f 2e74 7264 0076 0000               uhost.drv...

410f9320 <card_drv_name>:
410f9320:	6163 6472 642e 7672 0000 0000 0000 0000     card.drv........
	...
Disassembly of section BANK_CONTROL_1_4:

41139000 <create_record_file>:
41139000:	64f5      	save	40,ra,s0-s1
    file_name[i++] = 0x0;    
}

int32 create_record_file(void)
{
41139002:	b133      	lw	s1,411390cc <create_record_file+0xcc>
    int ret_val;
    int32 file_handle;
    uint8 *file_buffer = (uint8 *)LOG_FILE_BUFFER;

    //定位到根目录
    //vfs_cd(g_file_sys_id, CD_ROOT, 0);

    ret_val = vfs_file_dir_exist(g_file_sys_id, file_name_buffer, 1);
41139004:	6d11      	li	a1,17
41139006:	9980      	lw	a0,0(s1)
41139008:	b333      	lw	v1,411390d4 <create_record_file+0xd4>
4113900a:	d504      	sw	a1,16(sp)
4113900c:	b531      	lw	a1,411390d0 <create_record_file+0xd0>
4113900e:	6e01      	li	a2,1
41139010:	eb40      	jalr	v1
41139012:	6f00      	li	a3,0
41139014:	6702      	move	s0,v0
41139016:	b42d      	lw	a0,411390c8 <create_record_file+0xc8>

    libc_memset(file_buffer, 0, LOG_FILE_LEN);
41139018:	b230      	lw	v0,411390d8 <create_record_file+0xd8>
4113901a:	6d00      	li	a1,0
4113901c:	f001 6e00 	li	a2,2048
41139020:	ea40      	jalr	v0
41139022:	6f01      	li	a3,1
41139024:	2812      	bnez	s0,4113904a <create_record_file+0x4a>

    if(ret_val == 0)
41139026:	9980      	lw	a0,0(s1)
    {
        file_handle = vfs_file_create(g_file_sys_id, file_name_buffer, LOG_FILE_LEN);
41139028:	6e06      	li	a2,6
4113902a:	67f0      	move	a3,s0
4113902c:	b529      	lw	a1,411390d0 <create_record_file+0xd0>
4113902e:	b02a      	lw	s0,411390d4 <create_record_file+0xd4>
41139030:	d604      	sw	a2,16(sp)
41139032:	f001 6e00 	li	a2,2048
41139036:	e8c0      	jalrc	s0
41139038:	6722      	move	s1,v0
4113903a:	2a18      	bnez	v0,4113906c <create_record_file+0x6c>

        if(file_handle == 0)
4113903c:	b128      	lw	s1,411390dc <create_record_file+0xdc>
        {
            libc_print("create recrod file error!\n", 0, 0);
4113903e:	0c17      	la	a0,41139098 <create_record_file+0x98>
41139040:	67a2      	move	a1,v0
41139042:	67c2      	move	a2,v0
41139044:	e940      	jalr	s1
41139046:	6f4b      	li	a3,75
41139048:	17ff      	b	41139048 <create_record_file+0x48>
4113904a:	9980      	lw	a0,0(s1)

            while(1);
        }

        vfs_file_write(g_file_sys_id, file_buffer, LOG_FILE_LEN, file_handle);

        vfs_file_close(g_file_sys_id, file_handle);
    }
    else
    {
        file_handle = vfs_file_open(g_file_sys_id, file_name_buffer, OPEN_MODIFY);
4113904c:	6f05      	li	a3,5
4113904e:	b521      	lw	a1,411390d0 <create_record_file+0xd0>
41139050:	b321      	lw	v1,411390d4 <create_record_file+0xd4>
41139052:	d704      	sw	a3,16(sp)
41139054:	6e02      	li	a2,2
41139056:	eb40      	jalr	v1
41139058:	6f00      	li	a3,0
4113905a:	6722      	move	s1,v0
4113905c:	2a07      	bnez	v0,4113906c <create_record_file+0x6c>

        if(file_handle == 0)
4113905e:	67a2      	move	a1,v0
        {
            libc_print("open file error!\n", 0, 0);
41139060:	67c2      	move	a2,v0
41139062:	b21f      	lw	v0,411390dc <create_record_file+0xdc>
41139064:	0c14      	la	a0,411390b4 <create_record_file+0xb4>
41139066:	ea40      	jalr	v0
41139068:	6f4b      	li	a3,75
4113906a:	17ff      	b	4113906a <create_record_file+0x6a>
4113906c:	b018      	lw	s0,411390cc <create_record_file+0xcc>

            while(1);
        }

        vfs_file_write(g_file_sys_id, file_buffer, LOG_FILE_LEN, file_handle);
4113906e:	6e0e      	li	a2,14
41139070:	9880      	lw	a0,0(s0)
41139072:	b516      	lw	a1,411390c8 <create_record_file+0xc8>
41139074:	b318      	lw	v1,411390d4 <create_record_file+0xd4>
41139076:	d604      	sw	a2,16(sp)
41139078:	f001 6e00 	li	a2,2048
4113907c:	eb40      	jalr	v1
4113907e:	67f1      	move	a3,s1
41139080:	9880      	lw	a0,0(s0)

        vfs_file_close(g_file_sys_id, file_handle);
41139082:	6e00      	li	a2,0
41139084:	6d07      	li	a1,7
41139086:	b314      	lw	v1,411390d4 <create_record_file+0xd4>
41139088:	d504      	sw	a1,16(sp)
4113908a:	67e6      	move	a3,a2
4113908c:	eb40      	jalr	v1
4113908e:	67b1      	move	a1,s1
41139090:	6751      	move	v0,s1
    }

    return file_handle;
}
41139092:	6475      	restore	40,ra,s0-s1
41139094:	e8a0      	jrc	ra
41139096:	0000      	addiu	s0,sp,0
41139098:	7263      	cmpi	v0,99
4113909a:	6165      	btnez	41139166 <make_log_dir+0x2>
4113909c:	6574      	move	s3,a0
4113909e:	7220      	cmpi	v0,32
411390a0:	6365      	addiu	sp,808
411390a2:	6f72      	li	a3,114
411390a4:	2064      	beqz	s0,4113916e <make_log_dir+0xa>
411390a6:	6966      	li	s1,102
411390a8:	656c      	move	t3,a0
411390aa:	6520      	move	at,s0
411390ac:	7272      	cmpi	v0,114
411390ae:	726f      	cmpi	v0,111
411390b0:	0a21      	la	v0,41139134 <close_log_file+0x54>
411390b2:	0000      	addiu	s0,sp,0
411390b4:	706f      	cmpi	s0,111
411390b6:	6e65      	li	a2,101
411390b8:	6620      	0x6620
411390ba:	6c69      	li	a0,105
411390bc:	2065      	beqz	s0,41139188 <make_log_dir+0x24>
411390be:	7265      	cmpi	v0,101
411390c0:	6f72      	li	a3,114
411390c2:	2172      	beqz	s1,411391a8 <make_log_dir+0x44>
411390c4:	000a      	addiu	s0,sp,40
411390c6:	0000      	addiu	s0,sp,0
411390c8:	b800      	lwu	s0,0(s0)
411390ca:	9fc3      	lw	a2,12(a3)
411390cc:	8de8      	lh	a3,16(a1)
411390ce:	bfc3      	lwu	a2,12(a3)
411390d0:	9740      	lw	a3,256(sp)
411390d2:	4113      	daddiu	s0,s1,3
411390d4:	88e1      	lh	a3,2(s0)
411390d6:	bfc3      	lwu	a2,12(a3)
411390d8:	88d5      	lh	a2,42(s0)
411390da:	bfc3      	lwu	a2,12(a3)
411390dc:	88dd      	lh	a2,58(s0)
411390de:	bfc3      	lwu	a2,12(a3)

411390e0 <close_log_file>:
411390e0:	f004 64f5 	save	a0,40,ra,s0-s1

void close_log_file(uint32 file_handle)
{
411390e4:	b113      	lw	s1,41139130 <close_log_file+0x50>
    uint8 *file_buffer = (uint8 *)ATT_LOG_FILE_BUFFER;

    vfs_file_write(g_file_sys_id, file_buffer, g_write_file_len, file_handle);
411390e6:	b514      	lw	a1,41139134 <close_log_file+0x54>
411390e8:	6b0e      	li	v1,14
411390ea:	9980      	lw	a0,0(s1)
411390ec:	9dc0      	lw	a2,0(a1)
411390ee:	970a      	lw	a3,40(sp)
411390f0:	b012      	lw	s0,41139138 <close_log_file+0x58>
411390f2:	b50f      	lw	a1,4113912c <close_log_file+0x4c>
411390f4:	e840      	jalr	s0
411390f6:	d304      	sw	v1,16(sp)
411390f8:	6d00      	li	a1,0

    DEBUG_ATT_PRINT("write file over!\n", 0, 0);
411390fa:	b211      	lw	v0,4113913c <close_log_file+0x5c>
411390fc:	67c5      	move	a2,a1
411390fe:	0c07      	la	a0,41139118 <close_log_file+0x38>
41139100:	ea40      	jalr	v0
41139102:	6f4b      	li	a3,75
41139104:	9980      	lw	a0,0(s1)

    vfs_file_close(g_file_sys_id, file_handle);
41139106:	6e00      	li	a2,0
41139108:	6a07      	li	v0,7
4113910a:	950a      	lw	a1,40(sp)
4113910c:	d204      	sw	v0,16(sp)
4113910e:	e840      	jalr	s0
41139110:	67e6      	move	a3,a2
41139112:	6475      	restore	40,ra,s0-s1

    return;
41139114:	e8a0      	jrc	ra
41139116:	0000      	addiu	s0,sp,0
41139118:	7277      	cmpi	v0,119
4113911a:	7469      	cmpi	a0,105
4113911c:	2065      	beqz	s0,411391e8 <make_log_dir+0x84>
4113911e:	6966      	li	s1,102
41139120:	656c      	move	t3,a0
41139122:	6f20      	li	a3,32
41139124:	6576      	move	s3,a2
41139126:	2172      	beqz	s1,4113920c <make_log_dir+0xa8>
41139128:	000a      	addiu	s0,sp,40
4113912a:	0000      	addiu	s0,sp,0
4113912c:	b000      	lw	s0,4113912c <close_log_file+0x4c>
4113912e:	0003      	addiu	s0,sp,12
41139130:	8de8      	lh	a3,16(a1)
41139132:	bfc3      	lwu	a2,12(a3)
41139134:	8de4      	lh	a3,8(a1)
41139136:	bfc3      	lwu	a2,12(a3)
41139138:	88e1      	lh	a3,2(s0)
4113913a:	bfc3      	lwu	a2,12(a3)
4113913c:	88dd      	lh	a2,58(s0)
4113913e:	bfc3      	lwu	a2,12(a3)

41139140 <read_att_test_info>:
41139140:	64e3      	save	24,ra,s0
}

uint32 read_att_test_info(log_test_info_t *test_info)
{
41139142:	18c2 e4fd 	jal	411b93f4 <act_open_att_record_file>
    btaddr_log_file_t *btaddr_log = (log_test_info_t *) LOG_FILE_BUFFER;

    act_open_att_record_file();
41139146:	6704      	move	s0,a0
41139148:	b505      	lw	a1,4113915c <read_att_test_info+0x1c>
4113914a:	b206      	lw	v0,41139160 <read_att_test_info+0x20>

    libc_memcpy(test_info, &(btaddr_log->record_cnt), sizeof(log_test_info_t));
4113914c:	6790      	move	a0,s0
4113914e:	4d0c      	addiu	a1,12
41139150:	6e0c      	li	a2,12
41139152:	ea40      	jalr	v0
41139154:	6f00      	li	a3,0
41139156:	6463      	restore	24,ra,s0
}
41139158:	e8a0      	jrc	ra
4113915a:	0000      	addiu	s0,sp,0
4113915c:	b800      	lwu	s0,0(s0)
4113915e:	9fc3      	lw	a2,12(a3)
41139160:	88d5      	lh	a2,42(s0)
41139162:	bfc3      	lwu	a2,12(a3)

41139164 <make_log_dir>:
41139164:	64b1      	save	8,s0-s1

void make_log_dir(uint8 *dir_name, uint32 record_cnt)
{
41139166:	6f41      	li	a3,65
    uint32 i;
    uint32 min_num, max_num;

    i = 0;
    dir_name[i++] = 0xff;
    dir_name[i++] = 0xfe;

    dir_name[i++] = 'A';
41139168:	c4e2      	sb	a3,2(a0)
4113916a:	b78f      	lw	a3,411393a4 <make_log_dir+0x240>
    dir_name[i++] = 0;
    dir_name[i++] = 'T';
    dir_name[i++] = 0;
    dir_name[i++] = 'T';
    dir_name[i++] = 0; 

    //每1000个日志文件一个目录
    max_num = (record_cnt + 999)/1000 * 1000;
4113916c:	f3e0 4d07 	addiu	a1,999
41139170:	edf9      	multu	a1,a3
41139172:	6901      	li	s1,1
41139174:	e92b      	neg	s1
41139176:	ed10      	mfhi	a1
41139178:	6800      	li	s0,0
4113917a:	c420      	sb	s1,0(a0)
4113917c:	4443      	addiu	v0,a0,3
4113917e:	6954      	li	s1,84
41139180:	4465      	addiu	v1,a0,5
41139182:	6e02      	li	a2,2
41139184:	eecb      	neg	a2
41139186:	c4c1      	sb	a2,1(a0)
41139188:	c200      	sb	s0,0(v0)
4113918a:	c424      	sb	s1,4(a0)
4113918c:	c300      	sb	s0,0(v1)
4113918e:	c426      	sb	s1,6(a0)
41139190:	31ba      	srl	s1,a1,6
41139192:	3234      	sll	v0,s1,5
41139194:	e22f      	subu	v1,v0,s1
41139196:	44c7      	addiu	a2,a0,7
41139198:	c600      	sb	s0,0(a2)
4113919a:	3668      	sll	a2,v1,2
4113919c:	e63d      	addu	a3,a2,s1
4113919e:	37ec      	sll	a3,3
411391a0:	b582      	lw	a1,411393a8 <make_log_dir+0x244>

    min_num = max_num - 999;

    dir_name[i++] = (min_num/1000000) + '0';
411391a2:	f41f 47c9 	addiu	a2,a3,-999
411391a6:	eeb9      	multu	a2,a1
411391a8:	6724      	move	s1,a0
    dir_name[i++] = 0x0;
411391aa:	ea10      	mfhi	v0
411391ac:	4909      	addiu	s1,9
411391ae:	f480 3542 	srl	a1,v0,18
411391b2:	6765      	move	v1,a1
411391b4:	32b4      	sll	v0,a1,5

    dir_name[i++] = ((min_num%1000000)/100000) + '0';
411391b6:	4b30      	addiu	v1,48
411391b8:	c468      	sb	v1,8(a0)
411391ba:	e2af      	subu	v1,v0,a1
411391bc:	c100      	sb	s0,0(s1)
411391be:	3178      	sll	s1,v1,6
411391c0:	e16b      	subu	v0,s1,v1
411391c2:	314c      	sll	s1,v0,3
411391c4:	e1ad      	addu	v1,s1,a1
411391c6:	3578      	sll	a1,v1,6
411391c8:	e6ab      	subu	v0,a2,a1
411391ca:	b379      	lw	v1,411393ac <make_log_dir+0x248>
411391cc:	3156      	srl	s1,v0,5
411391ce:	e979      	multu	s1,v1
411391d0:	33d6      	srl	v1,a2,5
    dir_name[i++] = 0x0;

    dir_name[i++] = ((min_num%100000)/10000) + '0';
411391d2:	ed10      	mfhi	a1
411391d4:	6724      	move	s1,a0
411391d6:	32be      	srl	v0,a1,7
411391d8:	b575      	lw	a1,411393ac <make_log_dir+0x248>
411391da:	4a30      	addiu	v0,48
411391dc:	ebb9      	multu	v1,a1
411391de:	c44a      	sb	v0,10(a0)
411391e0:	ea10      	mfhi	v0
411391e2:	490b      	addiu	s1,11
411391e4:	355e      	srl	a1,v0,7
411391e6:	c100      	sb	s0,0(s1)
411391e8:	31a4      	sll	s1,a1,1
411391ea:	e1a9      	addu	v0,s1,a1
411391ec:	3358      	sll	v1,v0,6
411391ee:	e265      	addu	s1,v0,v1
411391f0:	3228      	sll	v0,s1,2
411391f2:	e2a5      	addu	s1,v0,a1
411391f4:	3328      	sll	v1,s1,2
411391f6:	e3a9      	addu	v0,v1,a1
411391f8:	3154      	sll	s1,v0,5
411391fa:	e637      	subu	a1,a2,s1
411391fc:	b16d      	lw	s1,411393b0 <make_log_dir+0x24c>
411391fe:	ed39      	multu	a1,s1
41139200:	eb10      	mfhi	v1
41139202:	ee39      	multu	a2,s1
    dir_name[i++] = 0x0;

    dir_name[i++] = ((min_num%10000)/1000) + '0';
41139204:	3262      	srl	v0,v1,8
41139206:	3556      	srl	a1,v0,5
41139208:	eb10      	mfhi	v1
4113920a:	4d30      	addiu	a1,48
4113920c:	6744      	move	v0,a0
4113920e:	c4ac      	sb	a1,12(a0)
41139210:	4a0d      	addiu	v0,13
41139212:	3562      	srl	a1,v1,8
41139214:	c200      	sb	s0,0(v0)
41139216:	32b6      	srl	v0,a1,5
41139218:	f704 6d10 	li	a1,10000
4113921c:	eab8      	mult	v0,a1
4113921e:	b562      	lw	a1,411393a4 <make_log_dir+0x240>
41139220:	eb12      	mflo	v1
41139222:	e66b      	subu	v0,a2,v1
41139224:	eab9      	multu	v0,a1
41139226:	6744      	move	v0,a0
    dir_name[i++] = 0x0;
41139228:	eb10      	mfhi	v1
4113922a:	4a0f      	addiu	v0,15
4113922c:	357a      	srl	a1,v1,6
4113922e:	b35e      	lw	v1,411393a4 <make_log_dir+0x240>
    

    dir_name[i++] = ((min_num%1000)/100) + '0';
41139230:	4d30      	addiu	a1,48
41139232:	ee79      	multu	a2,v1
41139234:	c4ae      	sb	a1,14(a0)
41139236:	ed10      	mfhi	a1
41139238:	c200      	sb	s0,0(v0)
4113923a:	33ba      	srl	v1,a1,6
4113923c:	3274      	sll	v0,v1,5
4113923e:	e277      	subu	a1,v0,v1
41139240:	32a8      	sll	v0,a1,2
41139242:	e275      	addu	a1,v0,v1
41139244:	33ac      	sll	v1,a1,3
41139246:	b55c      	lw	a1,411393b4 <make_log_dir+0x250>
41139248:	e66b      	subu	v0,a2,v1
4113924a:	eab9      	multu	v0,a1
4113924c:	653d      	move	t9,a1
4113924e:	eb10      	mfhi	v1
41139250:	6744      	move	v0,a0
    dir_name[i++] = 0x0;
41139252:	3576      	srl	a1,v1,5
41139254:	6779      	move	v1,t9

    dir_name[i++] = ((min_num%100)/10) + '0';
41139256:	ee79      	multu	a2,v1
41139258:	4d30      	addiu	a1,48
4113925a:	c4b0      	sb	a1,16(a0)
4113925c:	ed10      	mfhi	a1
4113925e:	4a11      	addiu	v0,17
41139260:	33b6      	srl	v1,a1,5
41139262:	c200      	sb	s0,0(v0)
41139264:	3264      	sll	v0,v1,1
41139266:	e275      	addu	a1,v0,v1
41139268:	32ac      	sll	v0,a1,3
4113926a:	e275      	addu	a1,v0,v1
4113926c:	32a8      	sll	v0,a1,2
4113926e:	b353      	lw	v1,411393b8 <make_log_dir+0x254>
41139270:	e657      	subu	a1,a2,v0
41139272:	ed79      	multu	a1,v1
41139274:	651b      	move	t8,v1
41139276:	ea10      	mfhi	v0
41139278:	6764      	move	v1,a0
    dir_name[i++] = 0x0;
4113927a:	354e      	srl	a1,v0,3
4113927c:	6758      	move	v0,t8

    dir_name[i++] = (min_num%10) + '0';
4113927e:	ee59      	multu	a2,v0
41139280:	4d30      	addiu	a1,48
41139282:	c4b2      	sb	a1,18(a0)
41139284:	ed10      	mfhi	a1
41139286:	4b13      	addiu	v1,19
41139288:	c300      	sb	s0,0(v1)
4113928a:	33ae      	srl	v1,a1,3
4113928c:	3268      	sll	v0,v1,2
4113928e:	e275      	addu	a1,v0,v1
41139290:	32a4      	sll	v0,a1,1
41139292:	e65b      	subu	a2,v0
41139294:	4e30      	addiu	a2,48
41139296:	c4d4      	sb	a2,20(a0)
41139298:	b644      	lw	a2,411393a8 <make_log_dir+0x244>
    dir_name[i++] = 0x0;

    dir_name[i++] = '~';
    dir_name[i++] = 0; 

    dir_name[i++] = (max_num/1000000) + '0';
4113929a:	67a4      	move	a1,a0
4113929c:	efd9      	multu	a3,a2
4113929e:	4d15      	addiu	a1,21
411392a0:	c500      	sb	s0,0(a1)
411392a2:	ed10      	mfhi	a1
411392a4:	6b7e      	li	v1,126
411392a6:	f480 36a2 	srl	a2,a1,18
411392aa:	6744      	move	v0,a0
411392ac:	c476      	sb	v1,22(a0)
411392ae:	4a17      	addiu	v0,23
411392b0:	6766      	move	v1,a2
411392b2:	c200      	sb	s0,0(v0)
411392b4:	35d4      	sll	a1,a2,5
    dir_name[i++] = 0x0;

    dir_name[i++] = ((max_num%1000000)/100000) + '0';
411392b6:	4b30      	addiu	v1,48
411392b8:	6744      	move	v0,a0
411392ba:	c478      	sb	v1,24(a0)
411392bc:	4a19      	addiu	v0,25
411392be:	e5cf      	subu	v1,a1,a2
411392c0:	c200      	sb	s0,0(v0)
411392c2:	3278      	sll	v0,v1,6
411392c4:	e277      	subu	a1,v0,v1
411392c6:	32ac      	sll	v0,a1,3
411392c8:	e2cd      	addu	v1,v0,a2
411392ca:	3578      	sll	a1,v1,6
411392cc:	e7bb      	subu	a2,a3,a1
411392ce:	b338      	lw	v1,411393ac <make_log_dir+0x248>
411392d0:	32d6      	srl	v0,a2,5
411392d2:	ea79      	multu	v0,v1
411392d4:	33f6      	srl	v1,a3,5
    dir_name[i++] = 0x0;

    dir_name[i++] = ((max_num%100000)/10000) + '0';
411392d6:	ed10      	mfhi	a1
411392d8:	6744      	move	v0,a0
411392da:	36be      	srl	a2,a1,7
411392dc:	b534      	lw	a1,411393ac <make_log_dir+0x248>
411392de:	4e30      	addiu	a2,48
411392e0:	ebb9      	multu	v1,a1
411392e2:	c4da      	sb	a2,26(a0)
411392e4:	ee10      	mfhi	a2
411392e6:	4a1b      	addiu	v0,27
411392e8:	35de      	srl	a1,a2,7
411392ea:	c200      	sb	s0,0(v0)
411392ec:	32a4      	sll	v0,a1,1
411392ee:	e2b9      	addu	a2,v0,a1
411392f0:	33d8      	sll	v1,a2,6
411392f2:	e669      	addu	v0,a2,v1
411392f4:	3648      	sll	a2,v0,2
411392f6:	e6a9      	addu	v0,a2,a1
411392f8:	3348      	sll	v1,v0,2
411392fa:	e3b9      	addu	a2,v1,a1
411392fc:	32d4      	sll	v0,a2,5
411392fe:	e74f      	subu	v1,a3,v0
41139300:	eb39      	multu	v1,s1
41139302:	6764      	move	v1,a0
    dir_name[i++] = 0x0;
41139304:	ee10      	mfhi	a2
41139306:	ef39      	multu	a3,s1

    dir_name[i++] = ((max_num%10000)/1000) + '0';
41139308:	35c2      	srl	a1,a2,8
4113930a:	ee10      	mfhi	a2
4113930c:	32b6      	srl	v0,a1,5
4113930e:	4a30      	addiu	v0,48
41139310:	35c2      	srl	a1,a2,8
41139312:	4b1d      	addiu	v1,29
41139314:	c45c      	sb	v0,28(a0)
41139316:	c300      	sb	s0,0(v1)
41139318:	32b6      	srl	v0,a1,5
4113931a:	f704 6b10 	li	v1,10000
4113931e:	ea78      	mult	v0,v1
41139320:	b321      	lw	v1,411393a4 <make_log_dir+0x240>
41139322:	ee12      	mflo	a2
41139324:	e7d7      	subu	a1,a3,a2
41139326:	ed79      	multu	a1,v1
41139328:	b31f      	lw	v1,411393a4 <make_log_dir+0x240>
    dir_name[i++] = 0x0;
    

    dir_name[i++] = ((max_num%1000)/100) + '0';
4113932a:	ea10      	mfhi	v0
4113932c:	ef79      	multu	a3,v1
4113932e:	365a      	srl	a2,v0,6
41139330:	ea10      	mfhi	v0
41139332:	4e30      	addiu	a2,48
41139334:	335a      	srl	v1,v0,6
41139336:	67a4      	move	a1,a0
41139338:	c4de      	sb	a2,30(a0)
4113933a:	4d1f      	addiu	a1,31
4113933c:	3674      	sll	a2,v1,5
4113933e:	c500      	sb	s0,0(a1)
41139340:	e677      	subu	a1,a2,v1
41139342:	32a8      	sll	v0,a1,2
41139344:	e279      	addu	a2,v0,v1
41139346:	35cc      	sll	a1,a2,3
41139348:	e7ab      	subu	v0,a3,a1
4113934a:	6779      	move	v1,t9
4113934c:	ea79      	multu	v0,v1
4113934e:	6779      	move	v1,t9
    dir_name[i++] = 0x0;

    dir_name[i++] = ((max_num%100)/10) + '0';
41139350:	ee10      	mfhi	a2
41139352:	ef79      	multu	a3,v1
41139354:	35d6      	srl	a1,a2,5
41139356:	ee10      	mfhi	a2
41139358:	4d30      	addiu	a1,48
4113935a:	33d6      	srl	v1,a2,5
4113935c:	6744      	move	v0,a0
4113935e:	f020 c4a0 	sb	a1,32(a0)
41139362:	4a21      	addiu	v0,33
41139364:	3564      	sll	a1,v1,1
41139366:	c200      	sb	s0,0(v0)
41139368:	e569      	addu	v0,a1,v1
4113936a:	364c      	sll	a2,v0,3
4113936c:	e675      	addu	a1,a2,v1
4113936e:	32a8      	sll	v0,a1,2
41139370:	e75b      	subu	a2,a3,v0
41139372:	67b8      	move	a1,t8
41139374:	eeb9      	multu	a2,a1
41139376:	67b8      	move	a1,t8
    dir_name[i++] = 0x0;

    dir_name[i++] = (max_num%10) + '0';
41139378:	eb10      	mfhi	v1
4113937a:	efb9      	multu	a3,a1
4113937c:	326e      	srl	v0,v1,3
4113937e:	4a30      	addiu	v0,48
41139380:	f020 c442 	sb	v0,34(a0)
41139384:	ea10      	mfhi	v0
41139386:	67c4      	move	a2,a0
41139388:	334e      	srl	v1,v0,3
4113938a:	4e23      	addiu	a2,35
4113938c:	c600      	sb	s0,0(a2)
4113938e:	3668      	sll	a2,v1,2
41139390:	e675      	addu	a1,a2,v1
41139392:	32a4      	sll	v0,a1,1
41139394:	e75f      	subu	a3,v0
41139396:	4f30      	addiu	a3,48
41139398:	f020 c4e4 	sb	a3,36(a0)
4113939c:	4c25      	addiu	a0,37
    dir_name[i++] = 0x0;
4113939e:	c400      	sb	s0,0(a0)
411393a0:	6431      	restore	8,s0-s1

    return;
411393a2:	e8a0      	jrc	ra
411393a4:	4dd3      	addiu	a1,-45
411393a6:	1062      	b	4113946c <write_log_file+0x54>
411393a8:	de83      	sw	a0,12(a2)
411393aa:	431b      	daddiu	s0,v1,-5
411393ac:	5ac5      	sltiu	v0,197
411393ae:	0a7c      	la	v0,4113959c <.LBB2+0x11c>
411393b0:	1759      	b	41139264 <make_log_dir+0x100>
411393b2:	d1b7      	sw	s1,732(sp)
411393b4:	851f      	lb	s0,31(a1)
411393b6:	51eb      	slti	s1,235
411393b8:	cccd      	sh	a2,26(a0)
411393ba:	cccc      	sh	a2,24(a0)

411393bc <enter_log_dir>:
411393bc:	f010 64fd 	save	232,ra,s0-s1
}

void enter_log_dir(uint32 record_cnt)
{
411393c0:	67a4      	move	a1,a0
411393c2:	1882 e459 	jal	41139164 <make_log_dir>
    uint32 dir_name[48];

    make_log_dir(dir_name, record_cnt);
411393c6:	0406      	addiu	a0,sp,24
411393c8:	b112      	lw	s1,41139410 <enter_log_dir+0x54>

    if(vfs_file_dir_exist(g_file_sys_id, dir_name, 0) == 0)
411393ca:	6a11      	li	v0,17
411393cc:	9980      	lw	a0,0(s1)
411393ce:	6e00      	li	a2,0
411393d0:	b011      	lw	s0,41139414 <enter_log_dir+0x58>
411393d2:	67e6      	move	a3,a2
411393d4:	d204      	sw	v0,16(sp)
411393d6:	e840      	jalr	s0
411393d8:	0506      	addiu	a1,sp,24
411393da:	67e2      	move	a3,v0
411393dc:	2209      	beqz	v0,411393f0 <enter_log_dir+0x34>
411393de:	9980      	lw	a0,0(s1)
    {
        vfs_make_dir(g_file_sys_id, dir_name);
    }

    vfs_cd(g_file_sys_id, CD_SUB, dir_name);
411393e0:	6f00      	li	a3,0
411393e2:	d704      	sw	a3,16(sp)
411393e4:	6d2f      	li	a1,47
411393e6:	e840      	jalr	s0
411393e8:	0606      	addiu	a2,sp,24
411393ea:	f010 647d 	restore	232,ra,s0-s1
411393ee:	e8a0      	jrc	ra
411393f0:	9980      	lw	a0,0(s1)
411393f2:	6b04      	li	v1,4
411393f4:	d304      	sw	v1,16(sp)
411393f6:	0506      	addiu	a1,sp,24
411393f8:	e840      	jalr	s0
411393fa:	67c2      	move	a2,v0
411393fc:	9980      	lw	a0,0(s1)
411393fe:	6f00      	li	a3,0
41139400:	d704      	sw	a3,16(sp)
41139402:	6d2f      	li	a1,47
41139404:	e840      	jalr	s0
41139406:	0606      	addiu	a2,sp,24
41139408:	f010 647d 	restore	232,ra,s0-s1
4113940c:	e8a0      	jrc	ra
4113940e:	0000      	addiu	s0,sp,0
41139410:	8de8      	lh	a3,16(a1)
41139412:	bfc3      	lwu	a2,12(a3)
41139414:	88e1      	lh	a3,2(s0)
41139416:	bfc3      	lwu	a2,12(a3)

41139418 <write_log_file>:
41139418:	64fb      	save	88,ra,s0-s1
}

void write_log_file(uint32 mode)
{
4113941a:	6704      	move	s0,a0
4113941c:	b1bd      	lw	s1,41139710 <.LBE2+0xb2>
    int32 file_handle;
    log_test_info_t test_info;

    sys_os_sched_lock();
4113941e:	6c00      	li	a0,0
41139420:	67a4      	move	a1,a0
41139422:	67c4      	move	a2,a0
41139424:	e940      	jalr	s1
41139426:	6f33      	li	a3,51
41139428:	1882 e450 	jal	41139140 <read_att_test_info>

    read_att_test_info(&test_info);
4113942c:	0406      	addiu	a0,sp,24
4113942e:	6b01      	li	v1,1

    if(mode == TRUE)
41139430:	e86e      	xor	s0,v1
41139432:	e863      	sltu	s0,v1
41139434:	6758      	move	v0,t8
41139436:	d211      	sw	v0,68(sp)
41139438:	f120 2219 	beqz	v0,411396ae <.LBE2+0x50>
4113943c:	9507      	lw	a1,28(sp)
    {
        test_info.succeed_cnt++;
4113943e:	4581      	addiu	a0,a1,1
41139440:	d407      	sw	a0,28(sp)
41139442:	9706      	lw	a3,24(sp)
    }
    else
    {
        test_info.failed_cnt++;
    }

    test_info.record_cnt++;
41139444:	b1b4      	lw	s1,41139714 <.LBE2+0xb6>

    att_write_test_info("test count: ", test_info.record_cnt,1);
41139446:	47a1      	addiu	a1,a3,1
41139448:	d506      	sw	a1,24(sp)
4113944a:	0ca0      	la	a0,411396c8 <.LBE2+0x6a>
4113944c:	e940      	jalr	s1
4113944e:	6e01      	li	a2,1
41139450:	9507      	lw	a1,28(sp)

    att_write_test_info("succeed: ", test_info.succeed_cnt, 1);
41139452:	0ca2      	la	a0,411396d8 <.LBE2+0x7a>
41139454:	e940      	jalr	s1
41139456:	6e01      	li	a2,1
41139458:	9508      	lw	a1,32(sp)

    att_write_test_info("failed: ", test_info.failed_cnt, 1);
4113945a:	0ca3      	la	a0,411396e4 <.LBE2+0x86>
4113945c:	e940      	jalr	s1
4113945e:	6e01      	li	a2,1
41139460:	6c00      	li	a0,0

    att_write_test_info("Test time: ", sys_get_ab_timer() - g_test_base_time, 1);
41139462:	b2ac      	lw	v0,41139710 <.LBE2+0xb2>
41139464:	6f1c      	li	a3,28
41139466:	67a4      	move	a1,a0
41139468:	ea40      	jalr	v0
4113946a:	67c4      	move	a2,a0
4113946c:	b4ab      	lw	a0,41139718 <.LBE2+0xba>
4113946e:	6e01      	li	a2,1
41139470:	9ca0      	lw	a1,0(a0)
41139472:	0ca0      	la	a0,411396f0 <.LBE2+0x92>
41139474:	e940      	jalr	s1
41139476:	e2b7      	subu	a1,v0,a1
41139478:	9406      	lw	a0,24(sp)

    enter_log_dir(test_info.record_cnt);
4113947a:	1882 e4ef 	jal	411393bc <enter_log_dir>
4113947e:	6800      	li	s0,0

41139480 <.LBB2>:
41139480:	040e      	addiu	a0,sp,56
41139482:	6d01      	li	a1,1
41139484:	b1a6      	lw	s1,4113971c <.LBE2+0xbe>
41139486:	d010      	sw	s0,64(sp)
41139488:	1822 e400 	jal	41079000 <read_bt_addr>
4113948c:	9006      	lw	s0,24(sp)
4113948e:	9710      	lw	a3,64(sp)
41139490:	6e01      	li	a2,1
41139492:	eecb      	neg	a2
41139494:	47a1      	addiu	a1,a3,1
41139496:	e72d      	addu	v1,a3,s1
41139498:	c3c0      	sb	a2,0(v1)
4113949a:	e531      	addu	a0,a1,s1
4113949c:	4561      	addiu	v1,a1,1
4113949e:	6a02      	li	v0,2
411394a0:	ea4b      	neg	v0
411394a2:	0610      	addiu	a2,sp,64
411394a4:	c440      	sb	v0,0(a0)
411394a6:	e33d      	addu	a3,v1,s1
411394a8:	d604      	sw	a2,16(sp)
411394aa:	040e      	addiu	a0,sp,56
411394ac:	6d05      	li	a1,5
411394ae:	6e0c      	li	a2,12
411394b0:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
411394b4:	d310      	sw	v1,64(sp)
411394b6:	9410      	lw	a0,64(sp)
411394b8:	6e5f      	li	a2,95
411394ba:	e43d      	addu	a3,a0,s1
411394bc:	c7c0      	sb	a2,0(a3)
411394be:	44e1      	addiu	a3,a0,1
411394c0:	b498      	lw	a0,41139720 <.LBE2+0xc2>
411394c2:	e729      	addu	v0,a3,s1
411394c4:	e899      	multu	s0,a0
411394c6:	6d00      	li	a1,0
411394c8:	c2a0      	sb	a1,0(v0)
411394ca:	ed10      	mfhi	a1
411394cc:	4761      	addiu	v1,a3,1
411394ce:	f480 34a2 	srl	a0,a1,18
411394d2:	6744      	move	v0,a0
411394d4:	e32d      	addu	v1,s1
411394d6:	4a30      	addiu	v0,48
411394d8:	47a2      	addiu	a1,a3,2
411394da:	c340      	sb	v0,0(v1)
411394dc:	e529      	addu	v0,a1,s1
411394de:	6b00      	li	v1,0
411394e0:	c260      	sb	v1,0(v0)
411394e2:	3294      	sll	v0,a0,5
411394e4:	e28f      	subu	v1,v0,a0
411394e6:	3278      	sll	v0,v1,6
411394e8:	e26b      	subu	v0,v1
411394ea:	334c      	sll	v1,v0,3
411394ec:	e389      	addu	v0,v1,a0
411394ee:	3458      	sll	a0,v0,6
411394f0:	e08f      	subu	v1,s0,a0
411394f2:	3276      	srl	v0,v1,5
411394f4:	b38c      	lw	v1,41139724 <.LBE2+0xc6>
411394f6:	47a3      	addiu	a1,a3,3
411394f8:	ea79      	multu	v0,v1
411394fa:	e535      	addu	a1,s1
411394fc:	ec10      	mfhi	a0
411394fe:	329e      	srl	v0,a0,7
41139500:	4a30      	addiu	v0,48
41139502:	c540      	sb	v0,0(a1)
41139504:	47a4      	addiu	a1,a3,4
41139506:	e529      	addu	v0,a1,s1
41139508:	6c00      	li	a0,0
4113950a:	c280      	sb	a0,0(v0)
4113950c:	3416      	srl	a0,s0,5
4113950e:	ec79      	multu	a0,v1
41139510:	47a5      	addiu	a1,a3,5
41139512:	eb10      	mfhi	v1
41139514:	e535      	addu	a1,s1
41139516:	347e      	srl	a0,v1,7
41139518:	3284      	sll	v0,a0,1
4113951a:	e289      	addu	v0,a0
4113951c:	3358      	sll	v1,v0,6
4113951e:	e269      	addu	v0,v1
41139520:	3348      	sll	v1,v0,2
41139522:	e389      	addu	v0,v1,a0
41139524:	3348      	sll	v1,v0,2
41139526:	e389      	addu	v0,v1,a0
41139528:	3354      	sll	v1,v0,5
4113952a:	e06b      	subu	v0,s0,v1
4113952c:	b37f      	lw	v1,41139728 <.LBE2+0xca>
4113952e:	ea79      	multu	v0,v1
41139530:	ec10      	mfhi	a0
41139532:	e879      	multu	s0,v1
41139534:	3282      	srl	v0,a0,8
41139536:	3256      	srl	v0,5
41139538:	4a30      	addiu	v0,48
4113953a:	4786      	addiu	a0,a3,6
4113953c:	c540      	sb	v0,0(a1)
4113953e:	e429      	addu	v0,a0,s1
41139540:	6d00      	li	a1,0
41139542:	c2a0      	sb	a1,0(v0)
41139544:	ed10      	mfhi	a1
41139546:	4787      	addiu	a0,a3,7
41139548:	33a2      	srl	v1,a1,8
4113954a:	3276      	srl	v0,v1,5
4113954c:	f704 6d10 	li	a1,10000
41139550:	eab8      	mult	v0,a1
41139552:	e431      	addu	a0,s1
41139554:	eb12      	mflo	v1
41139556:	e06b      	subu	v0,s0,v1
41139558:	b375      	lw	v1,4113972c <.LBE2+0xce>
4113955a:	ea79      	multu	v0,v1
4113955c:	ed10      	mfhi	a1
4113955e:	e879      	multu	s0,v1
41139560:	32ba      	srl	v0,a1,6
41139562:	4a30      	addiu	v0,48
41139564:	c440      	sb	v0,0(a0)
41139566:	6787      	move	a0,a3
41139568:	4c08      	addiu	a0,8
4113956a:	e429      	addu	v0,a0,s1
4113956c:	6d00      	li	a1,0
4113956e:	c2a0      	sb	a1,0(v0)
41139570:	ed10      	mfhi	a1
41139572:	6787      	move	a0,a3
41139574:	33ba      	srl	v1,a1,6
41139576:	3274      	sll	v0,v1,5
41139578:	e277      	subu	a1,v0,v1
4113957a:	32a8      	sll	v0,a1,2
4113957c:	e275      	addu	a1,v0,v1
4113957e:	33ac      	sll	v1,a1,3
41139580:	e06b      	subu	v0,s0,v1
41139582:	b36c      	lw	v1,41139730 <.LBE2+0xd2>
41139584:	4c09      	addiu	a0,9
41139586:	ea79      	multu	v0,v1
41139588:	e431      	addu	a0,s1
4113958a:	ed10      	mfhi	a1
4113958c:	e879      	multu	s0,v1
4113958e:	32b6      	srl	v0,a1,5
41139590:	4a30      	addiu	v0,48
41139592:	c440      	sb	v0,0(a0)
41139594:	6787      	move	a0,a3
41139596:	4c0a      	addiu	a0,10
41139598:	e429      	addu	v0,a0,s1
4113959a:	6d00      	li	a1,0
4113959c:	c2a0      	sb	a1,0(v0)
4113959e:	ed10      	mfhi	a1
411395a0:	6787      	move	a0,a3
411395a2:	33b6      	srl	v1,a1,5
411395a4:	3264      	sll	v0,v1,1
411395a6:	e275      	addu	a1,v0,v1
411395a8:	32ac      	sll	v0,a1,3
411395aa:	e275      	addu	a1,v0,v1
411395ac:	33a8      	sll	v1,a1,2
411395ae:	e06b      	subu	v0,s0,v1
411395b0:	b361      	lw	v1,41139734 <.LBE2+0xd6>
411395b2:	4c0b      	addiu	a0,11
411395b4:	ea79      	multu	v0,v1
411395b6:	e431      	addu	a0,s1
411395b8:	ed10      	mfhi	a1
411395ba:	e879      	multu	s0,v1
411395bc:	32ae      	srl	v0,a1,3
411395be:	4a30      	addiu	v0,48
411395c0:	c440      	sb	v0,0(a0)
411395c2:	6787      	move	a0,a3
411395c4:	4c0c      	addiu	a0,12
411395c6:	e429      	addu	v0,a0,s1
411395c8:	6d00      	li	a1,0
411395ca:	c2a0      	sb	a1,0(v0)
411395cc:	ed10      	mfhi	a1
411395ce:	6787      	move	a0,a3
411395d0:	33ae      	srl	v1,a1,3
411395d2:	3268      	sll	v0,v1,2
411395d4:	e275      	addu	a1,v0,v1
411395d6:	32a4      	sll	v0,a1,1
411395d8:	e057      	subu	a1,s0,v0
411395da:	4c0d      	addiu	a0,13
411395dc:	e431      	addu	a0,s1
411395de:	4d30      	addiu	a1,48
411395e0:	6767      	move	v1,a3
411395e2:	c4a0      	sb	a1,0(a0)
411395e4:	4b0e      	addiu	v1,14
411395e6:	6707      	move	s0,a3
411395e8:	6787      	move	a0,a3
411395ea:	e329      	addu	v0,v1,s1
411395ec:	480f      	addiu	s0,15
411395ee:	6b00      	li	v1,0
411395f0:	4c10      	addiu	a0,16
411395f2:	c260      	sb	v1,0(v0)
411395f4:	e035      	addu	a1,s0,s1
411395f6:	e429      	addu	v0,a0,s1
411395f8:	c5c0      	sb	a2,0(a1)
411395fa:	c260      	sb	v1,0(v0)
411395fc:	9011      	lw	s0,68(sp)
411395fe:	6747      	move	v0,a3
41139600:	4a11      	addiu	v0,17
41139602:	d210      	sw	v0,64(sp)
41139604:	2058      	beqz	s0,411396b6 <.LBE2+0x58>
41139606:	4f12      	addiu	a3,18
41139608:	e221      	addu	s0,v0,s1
4113960a:	6d50      	li	a1,80
4113960c:	e72d      	addu	v1,a3,s1
4113960e:	6e00      	li	a2,0
41139610:	c0a0      	sb	a1,0(s0)
41139612:	c3c0      	sb	a2,0(v1)
41139614:	4701      	addiu	s0,a3,1
41139616:	e031      	addu	a0,s0,s1
41139618:	40c1      	addiu	a2,s0,1
4113961a:	4042      	addiu	v0,s0,2
4113961c:	6d2e      	li	a1,46
4113961e:	d010      	sw	s0,64(sp)
41139620:	e63d      	addu	a3,a2,s1
41139622:	c4a0      	sb	a1,0(a0)
41139624:	6e00      	li	a2,0
41139626:	e235      	addu	a1,v0,s1
41139628:	4083      	addiu	a0,s0,3
4113962a:	4044      	addiu	v0,s0,4
4113962c:	6b4c      	li	v1,76
4113962e:	c7c0      	sb	a2,0(a3)
41139630:	c560      	sb	v1,0(a1)
41139632:	e43d      	addu	a3,a0,s1
41139634:	e235      	addu	a1,v0,s1
41139636:	4085      	addiu	a0,s0,5
41139638:	4046      	addiu	v0,s0,6
4113963a:	6b4f      	li	v1,79
4113963c:	c7c0      	sb	a2,0(a3)
4113963e:	c560      	sb	v1,0(a1)
41139640:	e43d      	addu	a3,a0,s1
41139642:	e235      	addu	a1,v0,s1
41139644:	4087      	addiu	a0,s0,7
41139646:	6b47      	li	v1,71
41139648:	4808      	addiu	s0,8
4113964a:	c7c0      	sb	a2,0(a3)
4113964c:	c560      	sb	v1,0(a1)
4113964e:	40a1      	addiu	a1,s0,1
41139650:	e02d      	addu	v1,s0,s1
41139652:	e43d      	addu	a3,a0,s1
41139654:	e529      	addu	v0,a1,s1
41139656:	c7c0      	sb	a2,0(a3)
41139658:	4581      	addiu	a0,a1,1
4113965a:	c3c0      	sb	a2,0(v1)
4113965c:	c2c0      	sb	a2,0(v0)

4113965e <.LBE2>:
4113965e:	1882 e400 	jal	41139000 <create_record_file>

    //创建文件名
    create_file_name(file_name_buffer, &test_info, mode);

    create_record_file();
41139662:	d410      	sw	a0,64(sp)
41139664:	b035      	lw	s0,41139738 <.LBE2+0xda>

    file_handle = vfs_file_open(g_file_sys_id, file_name_buffer, OPEN_MODIFY);
41139666:	b52e      	lw	a1,4113971c <.LBE2+0xbe>
41139668:	9880      	lw	a0,0(s0)
4113966a:	b135      	lw	s1,4113973c <.LBE2+0xde>
4113966c:	6f05      	li	a3,5
4113966e:	d704      	sw	a3,16(sp)
41139670:	6e02      	li	a2,2
41139672:	e940      	jalr	s1
41139674:	6f00      	li	a3,0
41139676:	1882 e438 	jal	411390e0 <close_log_file>

    close_log_file(file_handle);
4113967a:	6782      	move	a0,v0
4113967c:	9880      	lw	a0,0(s0)

    vfs_cd(g_file_sys_id, CD_ROOT, 0);
4113967e:	6800      	li	s0,0
41139680:	67f0      	move	a3,s0
41139682:	67d0      	move	a2,s0
41139684:	d004      	sw	s0,16(sp)
41139686:	e940      	jalr	s1
41139688:	6d3a      	li	a1,58
4113968a:	6790      	move	a0,s0

    act_test_write_att_record_file(0, &test_info, 1);  
4113968c:	0506      	addiu	a1,sp,24
4113968e:	18c2 e41f 	jal	411b907c <act_test_write_att_record_file>
41139692:	6e01      	li	a2,1
41139694:	b11f      	lw	s1,41139710 <.LBE2+0xb2>

    DEBUG_ATT_PRINT("write log file ok!\n", 0, 0);
41139696:	67b0      	move	a1,s0
41139698:	67d0      	move	a2,s0
4113969a:	0c19      	la	a0,411396fc <.LBE2+0x9e>
4113969c:	e940      	jalr	s1
4113969e:	6f4b      	li	a3,75
411396a0:	6790      	move	a0,s0

    sys_os_sched_unlock();
411396a2:	67b0      	move	a1,s0
411396a4:	67d0      	move	a2,s0
411396a6:	e940      	jalr	s1
411396a8:	6f34      	li	a3,52
411396aa:	647b      	restore	88,ra,s0-s1

    return;
411396ac:	e8a0      	jrc	ra
411396ae:	9708      	lw	a3,32(sp)
411396b0:	47c1      	addiu	a2,a3,1
411396b2:	d608      	sw	a2,32(sp)
411396b4:	16c6      	b	41139442 <write_log_file+0x2a>
411396b6:	4f12      	addiu	a3,18
411396b8:	e239      	addu	a2,v0,s1
411396ba:	6b46      	li	v1,70
411396bc:	e731      	addu	a0,a3,s1
411396be:	6a00      	li	v0,0
411396c0:	c660      	sb	v1,0(a2)
411396c2:	c440      	sb	v0,0(a0)
411396c4:	17a7      	b	41139614 <.LBB2+0x194>
411396c6:	0000      	addiu	s0,sp,0
411396c8:	6574      	move	s3,a0
411396ca:	7473      	cmpi	a0,115
411396cc:	6320      	addiu	sp,256
411396ce:	756f      	cmpi	a1,111
411396d0:	746e      	cmpi	a0,110
411396d2:	203a      	beqz	s0,41139748 <file_name_buffer+0x8>
411396d4:	0000      	addiu	s0,sp,0
411396d6:	0000      	addiu	s0,sp,0
411396d8:	7573      	cmpi	a1,115
411396da:	6363      	addiu	sp,792
411396dc:	6565      	move	v1,a1
411396de:	3a64      	ld	v1,32(v0)
411396e0:	0020      	addiu	s0,sp,128
411396e2:	0000      	addiu	s0,sp,0
411396e4:	6166      	btnez	411397b2 <file_name_buffer+0x72>
411396e6:	6c69      	li	a0,105
411396e8:	6465      	restore	40,ra,s0
411396ea:	203a      	beqz	s0,41139760 <file_name_buffer+0x20>
411396ec:	0000      	addiu	s0,sp,0
411396ee:	0000      	addiu	s0,sp,0
411396f0:	6554      	move	s2,a0
411396f2:	7473      	cmpi	a0,115
411396f4:	7420      	cmpi	a0,32
411396f6:	6d69      	li	a1,105
411396f8:	3a65      	ld	v1,40(v0)
411396fa:	0020      	addiu	s0,sp,128
411396fc:	7277      	cmpi	v0,119
411396fe:	7469      	cmpi	a0,105
41139700:	2065      	beqz	s0,411397cc <file_name_buffer+0x8c>
41139702:	6f6c      	li	a3,108
41139704:	2067      	beqz	s0,411397d4 <file_name_buffer+0x94>
41139706:	6966      	li	s1,102
41139708:	656c      	move	t3,a0
4113970a:	6f20      	li	a3,32
4113970c:	216b      	beqz	s1,411397e4 <file_name_buffer+0xa4>
4113970e:	000a      	addiu	s0,sp,40
41139710:	88dd      	lh	a2,58(s0)
41139712:	bfc3      	lwu	a2,12(a3)
41139714:	8b89      	lh	a0,18(v1)
41139716:	bfc3      	lwu	a2,12(a3)
41139718:	8dc4      	lh	a2,8(a1)
4113971a:	bfc3      	lwu	a2,12(a3)
4113971c:	9740      	lw	a3,256(sp)
4113971e:	4113      	daddiu	s0,s1,3
41139720:	de83      	sw	a0,12(a2)
41139722:	431b      	daddiu	s0,v1,-5
41139724:	5ac5      	sltiu	v0,197
41139726:	0a7c      	la	v0,41139914 <file_name_buffer+0x1d4>
41139728:	1759      	b	411395dc <.LBB2+0x15c>
4113972a:	d1b7      	sw	s1,732(sp)
4113972c:	4dd3      	addiu	a1,-45
4113972e:	1062      	b	411397f4 <file_name_buffer+0xb4>
41139730:	851f      	lb	s0,31(a1)
41139732:	51eb      	slti	s1,235
41139734:	cccd      	sh	a2,26(a0)
41139736:	cccc      	sh	a2,24(a0)
41139738:	8de8      	lh	a3,16(a1)
4113973a:	bfc3      	lwu	a2,12(a3)
4113973c:	88e1      	lh	a3,2(s0)
4113973e:	bfc3      	lwu	a2,12(a3)

41139740 <file_name_buffer>:
	...
Disassembly of section BANK_CONTROL_1_5:

41179000 <act_test_read_cfg_file>:
41179000:	f004 64f5 	save	a0,40,ra,s0-s1

#pragma __PRQA_IGNORE_START__

uint16 *act_test_read_cfg_file(uint32 line_number)
{
41179004:	b424      	lw	a0,41179094 <act_test_read_cfg_file+0x94>
    uint16 *cur;
    uint16 *start;
    uint16 *begin;
    uint32 cur_line;
    uint16 *cfg_file_buffer = (uint16 *) CFG_FILE_BUFFER;

    if (g_test_ap_info->cfg_file_len > MAX_CFG_FILE_LENGTH)
41179006:	b123      	lw	s1,41179090 <act_test_read_cfg_file+0x90>
41179008:	9c60      	lw	v1,0(a0)
4117900a:	9b43      	lw	v0,12(v1)
4117900c:	f001 5a01 	sltiu	v0,2049
41179010:	6a00      	li	v0,0
    {
        //DEBUG_ATT_PRINT("cfg file length error!", 0, 0);

        return FALSE;
41179012:	6038      	bteqz	41179084 <act_test_read_cfg_file+0x84>
41179014:	b521      	lw	a1,41179098 <act_test_read_cfg_file+0x98>
    }

    vfs_file_seek(g_file_sys_id, g_test_ap_info->cfg_file_offset, SEEK_SET, g_test_file_handle);
41179016:	680b      	li	s0,11
41179018:	9d80      	lw	a0,0(a1)
4117901a:	9ba2      	lw	a1,8(v1)
4117901c:	b320      	lw	v1,4117909c <act_test_read_cfg_file+0x9c>
4117901e:	9be0      	lw	a3,0(v1)
41179020:	d004      	sw	s0,16(sp)
41179022:	b020      	lw	s0,411790a0 <act_test_read_cfg_file+0xa0>
41179024:	e840      	jalr	s0
41179026:	6e00      	li	a2,0
41179028:	b61b      	lw	a2,41179094 <act_test_read_cfg_file+0x94>

    vfs_file_read(g_file_sys_id, cfg_file_buffer, g_test_ap_info->cfg_file_len, g_test_file_handle);
4117902a:	b51d      	lw	a1,4117909c <act_test_read_cfg_file+0x9c>
4117902c:	9ee0      	lw	a3,0(a2)
4117902e:	b21b      	lw	v0,41179098 <act_test_read_cfg_file+0x98>
41179030:	9fc3      	lw	a2,12(a3)
41179032:	9a80      	lw	a0,0(v0)
41179034:	9de0      	lw	a3,0(a1)
41179036:	6b0d      	li	v1,13
41179038:	d304      	sw	v1,16(sp)
4117903a:	e840      	jalr	s0
4117903c:	67b1      	move	a1,s1
4117903e:	6791      	move	a0,s1

    cur = cfg_file_buffer;
41179040:	6e00      	li	a2,0

    cur_line = 0;
41179042:	ac40      	lhu	v0,0(a0)

    while (1)
    {
        start = cur;

        begin = cur;

        //搜索结束标志 00 0d 00 0a
        while (*cur != 0x000a)
        {
            cur++;
41179044:	6764      	move	v1,a0
41179046:	720a      	cmpi	v0,10
41179048:	67a4      	move	a1,a0
4117904a:	6004      	bteqz	41179054 <act_test_read_cfg_file+0x54>
4117904c:	4482      	addiu	a0,a0,2
4117904e:	ac40      	lhu	v0,0(a0)
41179050:	720a      	cmpi	v0,10
41179052:	61fc      	btnez	4117904c <act_test_read_cfg_file+0x4c>
41179054:	ab40      	lhu	v0,0(v1)
        }

        while ((*start != 0x003d) && (start != cur))
        {
            start++;
41179056:	723d      	cmpi	v0,61
41179058:	6006      	bteqz	41179066 <act_test_read_cfg_file+0x66>
4117905a:	eb8a      	cmp	v1,a0
4117905c:	6004      	bteqz	41179066 <act_test_read_cfg_file+0x66>
4117905e:	4362      	addiu	v1,v1,2
41179060:	ab40      	lhu	v0,0(v1)
41179062:	723d      	cmpi	v0,61
41179064:	61fa      	btnez	4117905a <act_test_read_cfg_file+0x5a>
41179066:	723d      	cmpi	v0,61
        }

        //搜索到'='，说明是有效的数据行，否则过滤该行数据
        if (*start == 0x003d)
41179068:	6101      	btnez	4117906c <act_test_read_cfg_file+0x6c>
4117906a:	46c1      	addiu	a2,a2,1
        {
            cur_line++;
4117906c:	970a      	lw	a3,40(sp)
        }

        //搜索到指定行数，退出
        if (cur_line == line_number)
4117906e:	eeea      	cmp	a2,a3
41179070:	600b      	bteqz	41179088 <act_test_read_cfg_file+0x88>
41179072:	b709      	lw	a3,41179094 <act_test_read_cfg_file+0x94>
        {
            break;
        }
        else
        {
            cur++;

            if ((uint32)(cur - cfg_file_buffer) > g_test_ap_info->cfg_file_len)
41179074:	4482      	addiu	a0,a0,2
41179076:	9fa0      	lw	a1,0(a3)
41179078:	e42f      	subu	v1,a0,s1
4117907a:	9d43      	lw	v0,12(a1)
4117907c:	3367      	sra	v1,1
4117907e:	ea63      	sltu	v0,v1
41179080:	60e0      	bteqz	41179042 <act_test_read_cfg_file+0x42>
41179082:	6a00      	li	v0,0
            {
                return 0;
41179084:	6475      	restore	40,ra,s0-s1
            }
        }
    }

    return begin;
}
41179086:	e8a0      	jrc	ra
41179088:	6745      	move	v0,a1
4117908a:	6475      	restore	40,ra,s0-s1
4117908c:	e8a0      	jrc	ra
4117908e:	0000      	addiu	s0,sp,0
41179090:	a800      	lhu	s0,0(s0)
41179092:	0003      	addiu	s0,sp,12
41179094:	8df4      	lh	a3,40(a1)
41179096:	bfc3      	lwu	a2,12(a3)
41179098:	8de8      	lh	a3,16(a1)
4117909a:	bfc3      	lwu	a2,12(a3)
4117909c:	8dec      	lh	a3,24(a1)
4117909e:	bfc3      	lwu	a2,12(a3)
411790a0:	88e1      	lh	a3,2(s0)
411790a2:	bfc3      	lwu	a2,12(a3)

411790a4 <unicode_to_uint8>:
411790a4:	6744      	move	v0,a0

static uint8 unicode_to_uint8(uint16 widechar)
{
    uint8 temp_value;

    if ((widechar >= '0') && (widechar <= '9'))
411790a6:	4ad0      	addiu	v0,-48
411790a8:	6762      	move	v1,v0
411790aa:	eb31      	zeh	v1
411790ac:	5b0a      	sltiu	v1,10
411790ae:	ea11      	zeb	v0
    {
        temp_value = (widechar - '0');
411790b0:	6110      	btnez	411790d2 <unicode_to_uint8+0x2e>
411790b2:	6744      	move	v0,a0
    }
    else if ((widechar >= 'A') && (widechar <= 'F'))
411790b4:	4abf      	addiu	v0,-65
411790b6:	5a06      	sltiu	v0,6
411790b8:	6004      	bteqz	411790c2 <unicode_to_uint8+0x1e>
411790ba:	4cc9      	addiu	a0,-55
    {
        temp_value = widechar + 10 - 'A';
411790bc:	6744      	move	v0,a0
411790be:	e820      	jr	ra
411790c0:	ea11      	zeb	v0
411790c2:	67a4      	move	a1,a0
    }
    else if ((widechar >= 'a') && (widechar <= 'f'))
411790c4:	4d9f      	addiu	a1,-97
411790c6:	5d06      	sltiu	a1,6
411790c8:	6a00      	li	v0,0
    {
        temp_value = widechar + 10 - 'a';
    }
    else
    {
        return 0;
411790ca:	6003      	bteqz	411790d2 <unicode_to_uint8+0x2e>
411790cc:	4ca9      	addiu	a0,-87
411790ce:	6744      	move	v0,a0
411790d0:	ea11      	zeb	v0
411790d2:	e8a0      	jrc	ra

411790d4 <unicode_to_int>:
    }

    return temp_value;
}
411790d4:	f00c 64f5 	save	a0-a2,40,ra,s0-s1

static int32 unicode_to_int(uint16 *start, uint16 *end, uint32 base)
{
411790d8:	ecaa      	cmp	a0,a1
    uint32 minus_flag;
    int32 temp_value = 0;

    minus_flag = FALSE;

    while (start != end)
    {
        if (*start == '-')
        {
            minus_flag = TRUE;
        }
        else
        {
            temp_value *= base;

            temp_value += unicode_to_uint8(*start);
        }
        start++;
411790da:	6800      	li	s0,0
411790dc:	6724      	move	s1,a0
411790de:	d004      	sw	s0,16(sp)
411790e0:	6009      	bteqz	411790f4 <unicode_to_int+0x20>
411790e2:	a980      	lhu	a0,0(s1)
411790e4:	742d      	cmpi	a0,45
411790e6:	610c      	btnez	41179100 <unicode_to_int+0x2c>
411790e8:	940b      	lw	a0,44(sp)
411790ea:	6a01      	li	v0,1
411790ec:	4122      	addiu	s1,s1,2
411790ee:	d204      	sw	v0,16(sp)
411790f0:	e98a      	cmp	s1,a0
411790f2:	61f7      	btnez	411790e2 <unicode_to_int+0xe>
411790f4:	9504      	lw	a1,16(sp)
    }

    if (minus_flag == TRUE)
411790f6:	2501      	beqz	a1,411790fa <unicode_to_int+0x26>
411790f8:	e80b      	neg	s0
    {
        temp_value = 0 - temp_value;
411790fa:	6750      	move	v0,s0
    }

    return temp_value;
}
411790fc:	6475      	restore	40,ra,s0-s1
411790fe:	e8a0      	jrc	ra
41179100:	930c      	lw	v1,48(sp)
41179102:	4122      	addiu	s1,s1,2
41179104:	e878      	mult	s0,v1
41179106:	18a2 e429 	jal	411790a4 <unicode_to_uint8>
4117910a:	e812      	mflo	s0
4117910c:	940b      	lw	a0,44(sp)
4117910e:	e041      	addu	s0,v0
41179110:	e98a      	cmp	s1,a0
41179112:	17ef      	b	411790f2 <unicode_to_int+0x1e>

41179114 <unicode_to_utf8_str>:
41179114:	f00e 64b1 	save	a0-a3,8,s0-s1

static int32 unicode_encode_utf8(uint8 *s, uint16 widechar)
{
    int32 encode_len;

    if (widechar & 0xF800)
    {
        encode_len = 3;
    }
    else if (widechar & 0xFF80)
    {
        encode_len = 2;
    }
    else
    {
        encode_len = 1;
    }

    switch (encode_len)
    {
        case 1:
        *s = (char) widechar;
        break;

        case 2:
        *s++ = 0xC0 | (widechar >> 6);
        *s = 0x80 | (widechar & 0x3F);
        break;

        case 3:
        *s++ = 0xE0 | (widechar >> 12);
        *s++ = 0x80 | ((widechar >> 6) & 0x3F);
        *s = 0x80 | (widechar & 0x3F);
        break;
    }

    return encode_len;
}

static int32 unicode_to_utf8_str(uint16 *start, uint16 *end, uint8 *utf8_buffer, uint32 utf8_buffer_len)
{
41179118:	ecaa      	cmp	a0,a1
    int32 encode_len;
    int32 encode_total_len;

    encode_len = 0;
    encode_total_len = 0;

    while (start != end)
    {
        encode_len = unicode_encode_utf8(utf8_buffer, *start);

        start++;

        if (encode_len + encode_total_len > utf8_buffer_len)
        {
            return FALSE;
        }

        encode_total_len += encode_len;

        utf8_buffer += encode_len;
4117911a:	6704      	move	s0,a0
4117911c:	6f00      	li	a3,0
4117911e:	6022      	bteqz	41179164 <.LBE2+0x14>
41179120:	6a3f      	li	v0,63
41179122:	6980      	li	s1,128
41179124:	653a      	move	t9,v0
41179126:	e92b      	neg	s1

41179128 <.LBB2>:
41179128:	a880      	lhu	a0,0(s0)
4117912a:	f01f 6b00 	li	v1,63488
4117912e:	eb8c      	and	v1,a0
41179130:	6d03      	li	a1,3
41179132:	2b07      	bnez	v1,41179142 <.LBB2+0x1a>
41179134:	f79f 6d00 	li	a1,65408
41179138:	ed8c      	and	a1,a0
4117913a:	5d01      	sltiu	a1,1
4117913c:	6758      	move	v0,t8
4117913e:	6b02      	li	v1,2
41179140:	e357      	subu	a1,v1,v0
41179142:	7502      	cmpi	a1,2
41179144:	6014      	bteqz	4117916e <.LBE2+0x1e>
41179146:	5503      	slti	a1,3
41179148:	6023      	bteqz	41179190 <.LBE2+0x40>
4117914a:	7501      	cmpi	a1,1
4117914c:	6101      	btnez	41179150 <.LBE2>
4117914e:	c680      	sb	a0,0(a2)

41179150 <.LBE2>:
41179150:	9405      	lw	a0,20(sp)
41179152:	e5e9      	addu	v0,a1,a3
41179154:	ec43      	sltu	a0,v0
41179156:	4002      	addiu	s0,s0,2
41179158:	6118      	btnez	4117918a <.LBE2+0x3a>
4117915a:	e6b9      	addu	a2,a1
4117915c:	9503      	lw	a1,12(sp)
4117915e:	67e2      	move	a3,v0
41179160:	e8aa      	cmp	s0,a1
41179162:	61e2      	btnez	41179128 <.LBB2>
41179164:	6f00      	li	a3,0
    }

    //末尾添加结束符
    *utf8_buffer = 0;
41179166:	6a01      	li	v0,1

    return TRUE;
41179168:	c6e0      	sb	a3,0(a2)
4117916a:	6431      	restore	8,s0-s1
}
4117916c:	e8a0      	jrc	ra
4117916e:	6b40      	li	v1,64
41179170:	329a      	srl	v0,a0,6
41179172:	eb6b      	neg	v1
41179174:	ea6d      	or	v0,v1
41179176:	c640      	sb	v0,0(a2)
41179178:	6759      	move	v0,t9
4117917a:	ec4c      	and	a0,v0
4117917c:	ec2d      	or	a0,s1
4117917e:	c681      	sb	a0,1(a2)
41179180:	9405      	lw	a0,20(sp)
41179182:	e5e9      	addu	v0,a1,a3
41179184:	ec43      	sltu	a0,v0
41179186:	4002      	addiu	s0,s0,2
41179188:	60e8      	bteqz	4117915a <.LBE2+0xa>
4117918a:	6a00      	li	v0,0
4117918c:	6431      	restore	8,s0-s1
4117918e:	e8a0      	jrc	ra
41179190:	7503      	cmpi	a1,3
41179192:	61de      	btnez	41179150 <.LBE2>
41179194:	3282      	srl	v0,a0,8
41179196:	6b20      	li	v1,32
41179198:	eb6b      	neg	v1
4117919a:	3252      	srl	v0,4
4117919c:	ea6d      	or	v0,v1
4117919e:	c640      	sb	v0,0(a2)
411791a0:	6779      	move	v1,t9
411791a2:	329a      	srl	v0,a0,6
411791a4:	ea6c      	and	v0,v1
411791a6:	ec6c      	and	a0,v1
411791a8:	ea2d      	or	v0,s1
411791aa:	ec2d      	or	a0,s1
411791ac:	c641      	sb	v0,1(a2)
411791ae:	c682      	sb	a0,2(a2)
411791b0:	17cf      	b	41179150 <.LBE2>
	...

411791b4 <unicode_to_uint8_bytes>:
411791b4:	f00c 64f6 	save	a0-a2,48,ra,s0-s1

static int32 unicode_to_uint8_bytes(uint16 *start, uint16 *end, uint8 *byte_buffer, uint8 byte_index, uint8 byte_len)
{
411791b8:	677d      	move	v1,sp
411791ba:	f040 a340 	lbu	v0,64(v1)
411791be:	ecaa      	cmp	a0,a1
    while (start != end)
    {
        byte_buffer[byte_index] = (unicode_to_uint8(*start) << 4);

        byte_buffer[byte_index] |= unicode_to_uint8(*(start + 1));

        byte_index--;

        byte_len--;

        if (byte_len == 0)
        {
            break;
        }

        start += 2;
411791c0:	6724      	move	s1,a0
411791c2:	d704      	sw	a3,16(sp)
411791c4:	d205      	sw	v0,20(sp)
411791c6:	601d      	bteqz	41179202 <unicode_to_uint8_bytes+0x4e>
411791c8:	950e      	lw	a1,56(sp)
411791ca:	9404      	lw	a0,16(sp)
411791cc:	e4a1      	addu	s0,a0,a1
411791ce:	a980      	lhu	a0,0(s1)
411791d0:	18a2 e429 	jal	411790a4 <unicode_to_uint8>
411791d4:	d006      	sw	s0,24(sp)
411791d6:	9306      	lw	v1,24(sp)
411791d8:	3050      	sll	s0,v0,4
411791da:	c300      	sb	s0,0(v1)
411791dc:	18a2 e429 	jal	411790a4 <unicode_to_uint8>
411791e0:	a981      	lhu	a0,2(s1)
411791e2:	e84d      	or	s0,v0
411791e4:	9206      	lw	v0,24(sp)
411791e6:	c200      	sb	s0,0(v0)
411791e8:	9704      	lw	a3,16(sp)
411791ea:	9505      	lw	a1,20(sp)
411791ec:	47cf      	addiu	a2,a3,-1
411791ee:	458f      	addiu	a0,a1,-1
411791f0:	ee11      	zeb	a2
411791f2:	ec11      	zeb	a0
411791f4:	d604      	sw	a2,16(sp)
411791f6:	d405      	sw	a0,20(sp)
411791f8:	2404      	beqz	a0,41179202 <unicode_to_uint8_bytes+0x4e>
411791fa:	960d      	lw	a2,52(sp)
411791fc:	4124      	addiu	s1,s1,4
411791fe:	e9ca      	cmp	s1,a2
41179200:	61e3      	btnez	411791c8 <unicode_to_uint8_bytes+0x14>
41179202:	6a01      	li	v0,1
    }

    return TRUE;
}
41179204:	6476      	restore	48,ra,s0-s1
41179206:	e8a0      	jrc	ra

41179208 <act_test_read_test_id>:
41179208:	64c3      	save	24,ra

uint32 act_test_read_test_id(uint16 *line_buffer)
{
4117920a:	67a4      	move	a1,a0
    uint16 *start;
    uint16 *cur;
    uint32 test_id;

    start = line_buffer;
4117920c:	1001      	b	41179210 <act_test_read_test_id+0x8>
4117920e:	45a2      	addiu	a1,a1,2
    cur = start;

    while (*cur != 0x003d)
    {
        cur++;
41179210:	ad40      	lhu	v0,0(a1)
41179212:	723d      	cmpi	v0,61
41179214:	61fc      	btnez	4117920e <act_test_read_test_id+0x6>
41179216:	18a2 e435 	jal	411790d4 <unicode_to_int>
    }

    //test id都是十进制的字符串
    test_id = unicode_to_int(start, cur, 10);
4117921a:	6e0a      	li	a2,10
4117921c:	6443      	restore	24,ra

    return test_id;
}
4117921e:	e8a0      	jrc	ra

41179220 <act_test_parse_test_arg>:
41179220:	b30f      	lw	v1,41179258 <act_test_parse_test_arg+0x38>

static uint8 *act_test_parse_test_arg(uint16 *line_buffer, uint8 arg_number, uint16 **start, uint16 **end)
{
    uint16 *cur;
    //uint32 test_id;
    uint8 cur_arg_num;

    cur = line_buffer;

    //卡模式需要过滤包括'='的前面字符
    //USB模式直接截取字符串即可
    if (g_test_mode == TEST_MODE_CARD)
41179222:	a340      	lbu	v0,0(v1)
41179224:	2a06      	bnez	v0,41179232 <act_test_parse_test_arg+0x12>
41179226:	1001      	b	4117922a <act_test_parse_test_arg+0xa>
41179228:	4482      	addiu	a0,a0,2
    {
        while (*cur != 0x003d)
        {
            cur++;
4117922a:	ac40      	lhu	v0,0(a0)
4117922c:	723d      	cmpi	v0,61
4117922e:	61fc      	btnez	41179228 <act_test_parse_test_arg+0x8>
41179230:	4482      	addiu	a0,a0,2
        }

        //skip '='
        cur++;
41179232:	6a00      	li	v0,0
    }

    cur_arg_num = 0;

    while (cur_arg_num < arg_number)
    {
        *start = cur;

        //遇到','表明解析一个参数，遇到0x0d0a表示一行结束
        while ((*cur != 0x002c) && (*cur != 0x000d) && (*cur != 0x0000))
        {
            cur++;
        }

        *end = cur;

        cur_arg_num++;

        cur++;
41179234:	2511      	beqz	a1,41179258 <act_test_parse_test_arg+0x38>
41179236:	ac60      	lhu	v1,0(a0)
41179238:	de80      	sw	a0,0(a2)
4117923a:	732c      	cmpi	v1,44
4117923c:	6007      	bteqz	4117924c <act_test_parse_test_arg+0x2c>
4117923e:	730d      	cmpi	v1,13
41179240:	6005      	bteqz	4117924c <act_test_parse_test_arg+0x2c>
41179242:	2304      	beqz	v1,4117924c <act_test_parse_test_arg+0x2c>
41179244:	4482      	addiu	a0,a0,2
41179246:	ac60      	lhu	v1,0(a0)
41179248:	732c      	cmpi	v1,44
4117924a:	61f9      	btnez	4117923e <act_test_parse_test_arg+0x1e>
4117924c:	4241      	addiu	v0,v0,1
4117924e:	ea11      	zeb	v0
41179250:	eaa3      	sltu	v0,a1
41179252:	df80      	sw	a0,0(a3)
41179254:	4482      	addiu	a0,a0,2
41179256:	61ef      	btnez	41179236 <act_test_parse_test_arg+0x16>
41179258:	e820      	jr	ra
    }

    return 0;
}
4117925a:	6a00      	li	v0,0
4117925c:	8dc9      	lh	a2,18(a1)
4117925e:	bfc3      	lwu	a2,12(a3)

41179260 <act_test_read_bt_name_arg>:
41179260:	64e4      	save	32,ra,s0

static int32 act_test_read_bt_name_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
41179262:	6705      	move	s0,a1
41179264:	0604      	addiu	a2,sp,16
    uint16 *start;
    uint16 *end;

    bt_name_arg_t *bt_name_arg = (bt_name_arg_t *) arg_buffer;

    //if(arg_len < sizeof(bt_name_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    act_test_parse_test_arg(line_buffer, 1, &start, &end);
41179266:	0705      	addiu	a3,sp,20
41179268:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117926c:	6d01      	li	a1,1
4117926e:	9404      	lw	a0,16(sp)

    unicode_to_utf8_str(start, end, bt_name_arg->bt_name, TEST_BTNAME_MAX_LEN);
41179270:	9505      	lw	a1,20(sp)
41179272:	67d0      	move	a2,s0
41179274:	18a2 e445 	jal	41179114 <unicode_to_utf8_str>
41179278:	6f38      	li	a3,56
4117927a:	6a01      	li	v0,1

    //DEBUG_ATT_PRINT(bt_name_arg->bt_name, 0, 0);

    return TRUE;
}
4117927c:	6464      	restore	32,ra,s0
4117927e:	e8a0      	jrc	ra

41179280 <act_test_read_ble_name_arg>:
41179280:	64e4      	save	32,ra,s0

static int32 act_test_read_ble_name_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
41179282:	6705      	move	s0,a1
41179284:	0604      	addiu	a2,sp,16
    uint16 *start;
    uint16 *end;

    ble_name_arg_t *ble_name_arg = (ble_name_arg_t *) arg_buffer;

    //if(arg_len < sizeof(ble_name_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    act_test_parse_test_arg(line_buffer, 1, &start, &end);
41179286:	0705      	addiu	a3,sp,20
41179288:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117928c:	6d01      	li	a1,1
4117928e:	9404      	lw	a0,16(sp)

    unicode_to_utf8_str(start, end, ble_name_arg->bt_ble_name, TEST_BTBLENAME_MAX_LEN);
41179290:	9505      	lw	a1,20(sp)
41179292:	67d0      	move	a2,s0
41179294:	18a2 e445 	jal	41179114 <unicode_to_utf8_str>
41179298:	6f1e      	li	a3,30
4117929a:	6a01      	li	v0,1

    //DEBUG_ATT_PRINT(ble_name_arg->bt_ble_name, 0, 0);

    return TRUE;
}
4117929c:	6464      	restore	32,ra,s0
4117929e:	e8a0      	jrc	ra

411792a0 <act_test_read_bt_addr_arg>:
411792a0:	f008 64f6 	save	a0-a1,48,ra,s0-s1

static int32 act_test_read_bt_addr_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411792a4:	0606      	addiu	a2,sp,24
    uint16 *start;
    uint16 *end;

    bt_addr_arg_t *bt_addr_arg = (bt_addr_arg_t *) arg_buffer;

    //if(arg_len < sizeof(bt_addr_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    act_test_parse_test_arg(line_buffer, 1, &start, &end);
411792a6:	6d01      	li	a1,1
411792a8:	0707      	addiu	a3,sp,28
411792aa:	6704      	move	s0,a0
411792ac:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411792b0:	6903      	li	s1,3
411792b2:	9406      	lw	a0,24(sp)

    //读取byte5, byte4, byte3数据，一般为蓝牙地址固定字节
    unicode_to_uint8_bytes(start, end, bt_addr_arg->bt_addr, 5, 3);
411792b4:	9507      	lw	a1,28(sp)
411792b6:	960d      	lw	a2,52(sp)
411792b8:	d104      	sw	s1,16(sp)
411792ba:	18a2 e46d 	jal	411791b4 <unicode_to_uint8_bytes>
411792be:	6f05      	li	a3,5
411792c0:	b321      	lw	v1,41179344 <act_test_read_bt_addr_arg+0xa4>

    //对于卡测试模式，首先从创建的bt_addr.log文件读取蓝牙地址，如果没有
    //再从配置文件读取
    if (g_test_mode == TEST_MODE_CARD)
411792c2:	a340      	lbu	v0,0(v1)
411792c4:	2a21      	bnez	v0,41179308 <act_test_read_bt_addr_arg+0x68>
411792c6:	b221      	lw	v0,41179348 <act_test_read_bt_addr_arg+0xa8>
    {
        //读取byte2, byte1, byte0数据，一般为会修改的字节
        if (act_test_read_bt_addr_from_log(bt_addr_arg->bt_addr) == FALSE)
411792c8:	ea40      	jalr	v0
411792ca:	940d      	lw	a0,52(sp)
411792cc:	222d      	beqz	v0,41179328 <act_test_read_bt_addr_arg+0x88>
411792ce:	0707      	addiu	a3,sp,28
        {
            act_test_parse_test_arg(line_buffer, 2, &start, &end);

            unicode_to_uint8_bytes(start, end, bt_addr_arg->bt_addr, 2, 3);
        }

        act_test_parse_test_arg(line_buffer, 4, &start, &end);
411792d0:	6790      	move	a0,s0
411792d2:	0606      	addiu	a2,sp,24
411792d4:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411792d8:	6d04      	li	a1,4
411792da:	9406      	lw	a0,24(sp)

        bt_addr_arg->bt_addr_add_mode = unicode_to_int(start, end, 16);
411792dc:	9507      	lw	a1,28(sp)
411792de:	18a2 e435 	jal	411790d4 <unicode_to_int>
411792e2:	6e10      	li	a2,16
411792e4:	950d      	lw	a1,52(sp)
411792e6:	6790      	move	a0,s0

        act_test_parse_test_arg(line_buffer, 5, &start, &end);
411792e8:	0606      	addiu	a2,sp,24
411792ea:	0707      	addiu	a3,sp,28
411792ec:	c546      	sb	v0,6(a1)
411792ee:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411792f2:	6d05      	li	a1,5
411792f4:	9406      	lw	a0,24(sp)

        bt_addr_arg->bt_burn_mode = unicode_to_int(start, end, 16);        
411792f6:	9507      	lw	a1,28(sp)
411792f8:	18a2 e435 	jal	411790d4 <unicode_to_int>
411792fc:	6e10      	li	a2,16
411792fe:	940d      	lw	a0,52(sp)
41179300:	c447      	sb	v0,7(a0)
41179302:	6a01      	li	v0,1
    }
    else
    {
        //非卡测试方案，直接解析pc发过来的数据
        act_test_parse_test_arg(line_buffer, 2, &start, &end);

        unicode_to_uint8_bytes(start, end, bt_addr_arg->bt_addr, 2, 3);
    }

    return TRUE;
}
41179304:	6476      	restore	48,ra,s0-s1
41179306:	e8a0      	jrc	ra
41179308:	6790      	move	a0,s0
4117930a:	0606      	addiu	a2,sp,24
4117930c:	0707      	addiu	a3,sp,28
4117930e:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179312:	6d02      	li	a1,2
41179314:	9406      	lw	a0,24(sp)
41179316:	9507      	lw	a1,28(sp)
41179318:	960d      	lw	a2,52(sp)
4117931a:	d104      	sw	s1,16(sp)
4117931c:	18a2 e46d 	jal	411791b4 <unicode_to_uint8_bytes>
41179320:	6f02      	li	a3,2
41179322:	6a01      	li	v0,1
41179324:	6476      	restore	48,ra,s0-s1
41179326:	e8a0      	jrc	ra
41179328:	6790      	move	a0,s0
4117932a:	0606      	addiu	a2,sp,24
4117932c:	0707      	addiu	a3,sp,28
4117932e:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179332:	6d02      	li	a1,2
41179334:	9406      	lw	a0,24(sp)
41179336:	9507      	lw	a1,28(sp)
41179338:	960d      	lw	a2,52(sp)
4117933a:	d104      	sw	s1,16(sp)
4117933c:	18a2 e46d 	jal	411791b4 <unicode_to_uint8_bytes>
41179340:	6f02      	li	a3,2
41179342:	17c5      	b	411792ce <act_test_read_bt_addr_arg+0x2e>
41179344:	8dc9      	lh	a2,18(a1)
41179346:	bfc3      	lwu	a2,12(a3)
41179348:	9571      	lw	a1,452(sp)
4117934a:	411b      	daddiu	s0,s1,-5

4117934c <act_test_read_bt_addr_arg2>:
4117934c:	64f6      	save	48,ra,s0-s1

static int32 act_test_read_bt_addr_arg2(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
4117934e:	b20d      	lw	v0,41179380 <act_test_read_bt_addr_arg2+0x34>
    uint16 *start;
    uint16 *end;

    bt_addr_arg_t *bt_addr_arg = (bt_addr_arg_t *) arg_buffer;
    
    libc_memset(bt_addr_arg, 0, sizeof(bt_addr_arg_t));
41179350:	6704      	move	s0,a0
41179352:	6725      	move	s1,a1
41179354:	6785      	move	a0,a1
41179356:	6e09      	li	a2,9
41179358:	6d00      	li	a1,0
4117935a:	ea40      	jalr	v0
4117935c:	6f01      	li	a3,1
4117935e:	6790      	move	a0,s0

    act_test_parse_test_arg(line_buffer, 1, &start, &end);
41179360:	0606      	addiu	a2,sp,24
41179362:	0707      	addiu	a3,sp,28
41179364:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179368:	6d01      	li	a1,1
4117936a:	9406      	lw	a0,24(sp)

    //读取byte5, byte4, byte3数据，一般为蓝牙地址固定字节
    unicode_to_uint8_bytes(start, end, bt_addr_arg->bt_addr, 5, 6);
4117936c:	9507      	lw	a1,28(sp)
4117936e:	6a06      	li	v0,6
41179370:	67d1      	move	a2,s1
41179372:	6f05      	li	a3,5
41179374:	18a2 e46d 	jal	411791b4 <unicode_to_uint8_bytes>
41179378:	d204      	sw	v0,16(sp)
4117937a:	6a01      	li	v0,1
    
    return TRUE;
}
4117937c:	6476      	restore	48,ra,s0-s1
4117937e:	e8a0      	jrc	ra
41179380:	88d5      	lh	a2,42(s0)
41179382:	bfc3      	lwu	a2,12(a3)

41179384 <act_test_read_btplay_arg>:
41179384:	f008 64f7 	save	a0-a1,56,ra,s0-s1

static int32 act_test_read_btplay_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
41179388:	6e00      	li	a2,0
    uint16 *start = 0;
4117938a:	46a2      	addiu	a1,a2,2
    uint16 *end = 0;
    uint8 arg_num = 1;

    btplay_test_arg_t *btplay_arg = (btplay_test_arg_t *) arg_buffer;

    //if(arg_len < sizeof(btplay_test_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117938c:	d606      	sw	a2,24(sp)
4117938e:	d607      	sw	a2,28(sp)
41179390:	d508      	sw	a1,32(sp)
41179392:	0606      	addiu	a2,sp,24
41179394:	6d01      	li	a1,1
41179396:	0707      	addiu	a3,sp,28
41179398:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117939c:	6704      	move	s0,a0
4117939e:	6b06      	li	v1,6

    //读取6字节的蓝牙地址
    unicode_to_uint8_bytes(start, end, btplay_arg->bt_transmitter_addr, 5, 6);
411793a0:	9406      	lw	a0,24(sp)
411793a2:	9507      	lw	a1,28(sp)
411793a4:	960f      	lw	a2,60(sp)
411793a6:	d304      	sw	v1,16(sp)
411793a8:	18a2 e46d 	jal	411791b4 <unicode_to_uint8_bytes>
411793ac:	6f05      	li	a3,5
411793ae:	b10f      	lw	s1,411793e8 <act_test_read_btplay_arg+0x64>

    //卡测试模式需要略过后面的5个蓝牙地址参数，取最后一个测试模式参数
    //PC测试模式，参数由PC分配，不需要进行处理
    if (g_test_mode == TEST_MODE_CARD)
411793b0:	a140      	lbu	v0,0(s1)
411793b2:	2a02      	bnez	v0,411793b8 <act_test_read_btplay_arg+0x34>
411793b4:	6c07      	li	a0,7
    {
        arg_num += 5;
411793b6:	d408      	sw	a0,32(sp)
411793b8:	9508      	lw	a1,32(sp)

        //DEBUG_ATT_PRINT("byte0", btplay_arg->bt_transmitter_addr[0], 2);
        //DEBUG_ATT_PRINT("byte1", btplay_arg->bt_transmitter_addr[1], 2);
        //DEBUG_ATT_PRINT("byte2", btplay_arg->bt_transmitter_addr[2], 2);
        //DEBUG_ATT_PRINT("byte3", btplay_arg->bt_transmitter_addr[3], 2);
        //DEBUG_ATT_PRINT("byte4", btplay_arg->bt_transmitter_addr[4], 2);
        //DEBUG_ATT_PRINT("byte5", btplay_arg->bt_transmitter_addr[5], 2);
    }
    else
    {
        //    print_log("bt addr: %02x:%02x:%02x:%02x:%02x:%02x\n",  btplay_arg->bt_transmitter_addr[5], \
    //        btplay_arg->bt_transmitter_addr[4], btplay_arg->bt_transmitter_addr[3], \
    //        btplay_arg->bt_transmitter_addr[2], btplay_arg->bt_transmitter_addr[1], \
    //        btplay_arg->bt_transmitter_addr[0]);
    }

    //读取测试模式
    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411793ba:	0707      	addiu	a3,sp,28
411793bc:	6790      	move	a0,s0
411793be:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411793c2:	0606      	addiu	a2,sp,24
411793c4:	9406      	lw	a0,24(sp)

    btplay_arg->bt_test_mode = unicode_to_int(start, end, 16);  
411793c6:	9507      	lw	a1,28(sp)
411793c8:	18a2 e435 	jal	411790d4 <unicode_to_int>
411793cc:	6e10      	li	a2,16
411793ce:	930f      	lw	v1,60(sp)
411793d0:	c346      	sb	v0,6(v1)
411793d2:	a1e0      	lbu	a3,0(s1)

    if (g_test_mode != TEST_MODE_CARD)
411793d4:	2f03      	bnez	a3,411793dc <act_test_read_btplay_arg+0x58>
411793d6:	6a01      	li	v0,1
    {
        //if (btplay_arg->bt_test_mode == 0)
        //{
            //测试时间90s
            act_test_change_test_timeout(90);    
        //} 
        //else   
        //{
        //    //测试时间90s
        //    act_test_change_test_timeout(90);
        //}
    }

    return TRUE;
}
411793d8:	6477      	restore	56,ra,s0-s1
411793da:	e8a0      	jrc	ra
411793dc:	b204      	lw	v0,411793e8 <act_test_read_btplay_arg+0x64>
411793de:	ea40      	jalr	v0
411793e0:	6c5a      	li	a0,90
411793e2:	6a01      	li	v0,1
411793e4:	6477      	restore	56,ra,s0-s1
411793e6:	e8a0      	jrc	ra
411793e8:	8dc9      	lh	a2,18(a1)
411793ea:	bfc3      	lwu	a2,12(a3)
411793ec:	9b85      	lw	a0,20(v1)
411793ee:	41cb      	addiu	a2,s1,-5

411793f0 <act_test_read_gpio_arg>:
411793f0:	64f5      	save	40,ra,s0-s1

static int32 act_test_read_gpio_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411793f2:	6705      	move	s0,a1
411793f4:	0705      	addiu	a3,sp,20
    uint16 *start = 0;
    uint16 *end = 0;

    gpio_test_arg_t *gpio_arg = (gpio_test_arg_t *) arg_buffer;

    //if(arg_len < sizeof(gpio_test_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    act_test_parse_test_arg(line_buffer, 1, &start, &end);
411793f6:	6a00      	li	v0,0
411793f8:	0604      	addiu	a2,sp,16
411793fa:	6d01      	li	a1,1
411793fc:	6724      	move	s1,a0
411793fe:	d204      	sw	v0,16(sp)
41179400:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179404:	d205      	sw	v0,20(sp)
41179406:	9404      	lw	a0,16(sp)

    gpio_arg->gpioA_value = unicode_to_int(start, end, 16);
41179408:	9505      	lw	a1,20(sp)
4117940a:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117940e:	6e10      	li	a2,16
41179410:	d840      	sw	v0,0(s0)
41179412:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, 2, &start, &end);
41179414:	6791      	move	a0,s1
41179416:	0604      	addiu	a2,sp,16
41179418:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117941c:	6d02      	li	a1,2
4117941e:	9404      	lw	a0,16(sp)

    gpio_arg->gpioB_value = unicode_to_int(start, end, 16);
41179420:	9505      	lw	a1,20(sp)
41179422:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179426:	6e10      	li	a2,16
41179428:	d841      	sw	v0,4(s0)
4117942a:	6791      	move	a0,s1

    act_test_parse_test_arg(line_buffer, 3, &start, &end);
4117942c:	0604      	addiu	a2,sp,16
4117942e:	0705      	addiu	a3,sp,20
41179430:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179434:	6d03      	li	a1,3
41179436:	9404      	lw	a0,16(sp)

    gpio_arg->gpioSIO_value = unicode_to_int(start, end, 16);
41179438:	9505      	lw	a1,20(sp)
4117943a:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117943e:	6e10      	li	a2,16
41179440:	d842      	sw	v0,8(s0)
41179442:	6a01      	li	v0,1

    return TRUE;
}
41179444:	6475      	restore	40,ra,s0-s1
41179446:	e8a0      	jrc	ra

41179448 <act_test_read_mptest_arg>:
41179448:	f008 64f5 	save	a0-a1,40,ra,s0-s1

int32 act_test_read_mptest_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
4117944c:	0705      	addiu	a3,sp,20
    uint16 *start = 0;
    uint16 *end = 0;
    uint8 arg_num;

    mp_test_arg_t *mp_arg = (mp_test_arg_t *) arg_buffer;

    //if(arg_len < sizeof(mp_test_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    arg_num = 1;

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117944e:	6a00      	li	v0,0
41179450:	0604      	addiu	a2,sp,16
41179452:	6d01      	li	a1,1
41179454:	6724      	move	s1,a0
41179456:	d204      	sw	v0,16(sp)
41179458:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117945c:	d205      	sw	v0,20(sp)
4117945e:	9404      	lw	a0,16(sp)

    mp_arg->cfo_channel_low = (uint8) unicode_to_int(start, end, 10);
41179460:	9505      	lw	a1,20(sp)
41179462:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179466:	6e0a      	li	a2,10
41179468:	940b      	lw	a0,44(sp)
4117946a:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117946c:	0604      	addiu	a2,sp,16
4117946e:	c440      	sb	v0,0(a0)
41179470:	6d02      	li	a1,2
41179472:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179476:	6791      	move	a0,s1
41179478:	9404      	lw	a0,16(sp)

    mp_arg->cfo_channel_mid = (uint8) unicode_to_int(start, end, 10);
4117947a:	9505      	lw	a1,20(sp)
4117947c:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179480:	6e0a      	li	a2,10
41179482:	900b      	lw	s0,44(sp)
41179484:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179486:	6791      	move	a0,s1
41179488:	0604      	addiu	a2,sp,16
4117948a:	c041      	sb	v0,1(s0)
4117948c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179490:	6d03      	li	a1,3
41179492:	9404      	lw	a0,16(sp)

    mp_arg->cfo_channel_high = (uint8) unicode_to_int(start, end, 10);
41179494:	9505      	lw	a1,20(sp)
41179496:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117949a:	6e0a      	li	a2,10
4117949c:	930b      	lw	v1,44(sp)
4117949e:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411794a0:	c342      	sb	v0,2(v1)
411794a2:	6791      	move	a0,s1
411794a4:	0604      	addiu	a2,sp,16
411794a6:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411794aa:	6d04      	li	a1,4
411794ac:	9404      	lw	a0,16(sp)

    mp_arg->cfo_test = (uint8) unicode_to_int(start, end, 10);
411794ae:	9505      	lw	a1,20(sp)
411794b0:	18a2 e435 	jal	411790d4 <unicode_to_int>
411794b4:	6e0a      	li	a2,10
411794b6:	970b      	lw	a3,44(sp)
411794b8:	6791      	move	a0,s1

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411794ba:	0604      	addiu	a2,sp,16
411794bc:	c743      	sb	v0,3(a3)
411794be:	6d05      	li	a1,5
411794c0:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411794c4:	0705      	addiu	a3,sp,20
411794c6:	9404      	lw	a0,16(sp)

    mp_arg->cfo_index_low = (uint8) unicode_to_int(start, end, 10);
411794c8:	9505      	lw	a1,20(sp)
411794ca:	18a2 e435 	jal	411790d4 <unicode_to_int>
411794ce:	6e0a      	li	a2,10
411794d0:	960b      	lw	a2,44(sp)
411794d2:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411794d4:	6791      	move	a0,s1
411794d6:	c644      	sb	v0,4(a2)
411794d8:	6d06      	li	a1,6
411794da:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411794de:	0604      	addiu	a2,sp,16
411794e0:	9404      	lw	a0,16(sp)

    mp_arg->cfo_index_high = (uint8) unicode_to_int(start, end, 10);
411794e2:	9505      	lw	a1,20(sp)
411794e4:	18a2 e435 	jal	411790d4 <unicode_to_int>
411794e8:	6e0a      	li	a2,10
411794ea:	950b      	lw	a1,44(sp)
411794ec:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411794ee:	6791      	move	a0,s1
411794f0:	0604      	addiu	a2,sp,16
411794f2:	c545      	sb	v0,5(a1)
411794f4:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411794f8:	6d07      	li	a1,7
411794fa:	9404      	lw	a0,16(sp)

    mp_arg->cfo_index_changed = (uint8) unicode_to_int(start, end, 10);
411794fc:	9505      	lw	a1,20(sp)
411794fe:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179502:	6e0a      	li	a2,10
41179504:	940b      	lw	a0,44(sp)
41179506:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179508:	0604      	addiu	a2,sp,16
4117950a:	c446      	sb	v0,6(a0)
4117950c:	6d08      	li	a1,8
4117950e:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179512:	6791      	move	a0,s1
41179514:	9404      	lw	a0,16(sp)

    mp_arg->cfo_threshold_low = (int8) unicode_to_int(start, end, 10);
41179516:	9505      	lw	a1,20(sp)
41179518:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117951c:	6e0a      	li	a2,10
4117951e:	900b      	lw	s0,44(sp)
41179520:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179522:	6791      	move	a0,s1
41179524:	0604      	addiu	a2,sp,16
41179526:	c047      	sb	v0,7(s0)
41179528:	6d09      	li	a1,9
4117952a:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117952e:	680a      	li	s0,10
41179530:	9404      	lw	a0,16(sp)

    mp_arg->cfo_threshold_high = (int8) unicode_to_int(start, end, 10);
41179532:	9505      	lw	a1,20(sp)
41179534:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179538:	67d0      	move	a2,s0
4117953a:	930b      	lw	v1,44(sp)
4117953c:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117953e:	c348      	sb	v0,8(v1)
41179540:	6791      	move	a0,s1
41179542:	67b0      	move	a1,s0
41179544:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179548:	0604      	addiu	a2,sp,16
4117954a:	9404      	lw	a0,16(sp)

    mp_arg->cfo_write_mode = (uint8) unicode_to_int(start, end, 10);
4117954c:	9505      	lw	a1,20(sp)
4117954e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179552:	67d0      	move	a2,s0
41179554:	970b      	lw	a3,44(sp)
41179556:	6791      	move	a0,s1

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179558:	0604      	addiu	a2,sp,16
4117955a:	c749      	sb	v0,9(a3)
4117955c:	6d0b      	li	a1,11
4117955e:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179562:	0705      	addiu	a3,sp,20
41179564:	9404      	lw	a0,16(sp)

    mp_arg->cfo_upt_offset = (int32) unicode_to_int(start, end, 10);
41179566:	9505      	lw	a1,20(sp)
41179568:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117956c:	67d0      	move	a2,s0
4117956e:	960b      	lw	a2,44(sp)
41179570:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179572:	6791      	move	a0,s1
41179574:	de43      	sw	v0,12(a2)
41179576:	6d0c      	li	a1,12
41179578:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117957c:	0604      	addiu	a2,sp,16
4117957e:	9404      	lw	a0,16(sp)

    mp_arg->pwr_test = (uint8) unicode_to_int(start, end, 10);
41179580:	9505      	lw	a1,20(sp)
41179582:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179586:	67d0      	move	a2,s0
41179588:	950b      	lw	a1,44(sp)
4117958a:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117958c:	6791      	move	a0,s1
4117958e:	0604      	addiu	a2,sp,16
41179590:	c550      	sb	v0,16(a1)
41179592:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179596:	6d0d      	li	a1,13
41179598:	9404      	lw	a0,16(sp)

    mp_arg->pwr_threshold_low = (int8) unicode_to_int(start, end, 10);
4117959a:	9505      	lw	a1,20(sp)
4117959c:	18a2 e435 	jal	411790d4 <unicode_to_int>
411795a0:	67d0      	move	a2,s0
411795a2:	940b      	lw	a0,44(sp)
411795a4:	0604      	addiu	a2,sp,16

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411795a6:	0705      	addiu	a3,sp,20
411795a8:	c451      	sb	v0,17(a0)
411795aa:	6d0e      	li	a1,14
411795ac:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411795b0:	6791      	move	a0,s1
411795b2:	9404      	lw	a0,16(sp)

    mp_arg->pwr_threshold_high = (int8) unicode_to_int(start, end, 10);
411795b4:	9505      	lw	a1,20(sp)
411795b6:	18a2 e435 	jal	411790d4 <unicode_to_int>
411795ba:	67d0      	move	a2,s0
411795bc:	930b      	lw	v1,44(sp)
411795be:	c352      	sb	v0,18(v1)
411795c0:	6a01      	li	v0,1

    return TRUE;
}
411795c2:	6475      	restore	40,ra,s0-s1
411795c4:	e8a0      	jrc	ra
	...

411795c8 <act_test_read_btname_arg>:
411795c8:	64f5      	save	40,ra,s0-s1

int32 act_test_read_btname_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411795ca:	6725      	move	s1,a1
411795cc:	0705      	addiu	a3,sp,20
    uint16 *start = 0;
    uint16 *end = 0;
    uint8 arg_num;

    read_btname_test_arg_t *read_btname_arg = (read_btname_test_arg_t *) arg_buffer;

    //if(arg_len < sizeof(mp_test_arg_t))
    //{
    //    DEBUG_ATT_PRINT("argument too long", 0, 0);
    //    while(1);
    //}

    arg_num = 1;

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411795ce:	6a00      	li	v0,0
411795d0:	0604      	addiu	a2,sp,16
411795d2:	6d01      	li	a1,1
411795d4:	6704      	move	s0,a0
411795d6:	d204      	sw	v0,16(sp)
411795d8:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411795dc:	d205      	sw	v0,20(sp)
411795de:	9404      	lw	a0,16(sp)

    read_btname_arg->cmp_btname_flag = (uint8) unicode_to_int(start, end, 10);
411795e0:	9505      	lw	a1,20(sp)
411795e2:	18a2 e435 	jal	411790d4 <unicode_to_int>
411795e6:	6e0a      	li	a2,10
411795e8:	c140      	sb	v0,0(s1)
411795ea:	6790      	move	a0,s0

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411795ec:	0604      	addiu	a2,sp,16
411795ee:	0705      	addiu	a3,sp,20
411795f0:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411795f4:	6d02      	li	a1,2
411795f6:	9404      	lw	a0,16(sp)

    unicode_to_utf8_str(start, end, read_btname_arg->cmp_btname, TEST_BTNAME_MAX_LEN);
411795f8:	9505      	lw	a1,20(sp)
411795fa:	41c1      	addiu	a2,s1,1
411795fc:	18a2 e445 	jal	41179114 <unicode_to_utf8_str>
41179600:	6f38      	li	a3,56
41179602:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179604:	6790      	move	a0,s0
41179606:	0604      	addiu	a2,sp,16
41179608:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117960c:	6d03      	li	a1,3
4117960e:	9404      	lw	a0,16(sp)

    read_btname_arg->cmp_blename_flag = (uint8) unicode_to_int(start, end, 10);
41179610:	9505      	lw	a1,20(sp)
41179612:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179616:	6e0a      	li	a2,10
41179618:	f020 c159 	sb	v0,57(s1)
4117961c:	6790      	move	a0,s0

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117961e:	0604      	addiu	a2,sp,16
41179620:	0705      	addiu	a3,sp,20
41179622:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179626:	6d04      	li	a1,4
41179628:	9404      	lw	a0,16(sp)

    unicode_to_utf8_str(start, end, read_btname_arg->cmp_blename, TEST_BTBLENAME_MAX_LEN);
4117962a:	9505      	lw	a1,20(sp)
4117962c:	67d1      	move	a2,s1
4117962e:	4e3a      	addiu	a2,58
41179630:	18a2 e445 	jal	41179114 <unicode_to_utf8_str>
41179634:	6f1e      	li	a3,30
41179636:	6a01      	li	v0,1

    return TRUE;
}
41179638:	6475      	restore	40,ra,s0-s1
4117963a:	e8a0      	jrc	ra

4117963c <act_test_read_ber_test_arg>:
4117963c:	64f5      	save	40,ra,s0-s1

int32 act_test_read_ber_test_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
4117963e:	6705      	move	s0,a1
41179640:	0705      	addiu	a3,sp,20
    uint16*  start = NULL;
    uint16*  end   = NULL;
    uint8 arg_num;
    ber_test_arg_t *ber_arg = (ber_test_arg_t *)arg_buffer;

    arg_num = 1;
    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179642:	6a00      	li	v0,0
41179644:	0604      	addiu	a2,sp,16
41179646:	6d01      	li	a1,1
41179648:	6724      	move	s1,a0
4117964a:	d204      	sw	v0,16(sp)
4117964c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179650:	d205      	sw	v0,20(sp)
41179652:	9404      	lw	a0,16(sp)

    ber_arg->ber_channel_low = (uint8)unicode_to_int(start, end, 10);
41179654:	9505      	lw	a1,20(sp)
41179656:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117965a:	6e0a      	li	a2,10
4117965c:	c040      	sb	v0,0(s0)
4117965e:	0705      	addiu	a3,sp,20
    //print_log("channel low:%d", ber_arg->ber_channel_low);

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179660:	6791      	move	a0,s1
41179662:	0604      	addiu	a2,sp,16
41179664:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179668:	6d02      	li	a1,2
4117966a:	9404      	lw	a0,16(sp)

    ber_arg->ber_channel_mid = (uint8)unicode_to_int(start, end, 10);    
4117966c:	9505      	lw	a1,20(sp)
4117966e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179672:	6e0a      	li	a2,10
41179674:	c041      	sb	v0,1(s0)
41179676:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179678:	6791      	move	a0,s1
4117967a:	0604      	addiu	a2,sp,16
4117967c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179680:	6d03      	li	a1,3
41179682:	9404      	lw	a0,16(sp)

    ber_arg->ber_channel_high = (uint8)unicode_to_int(start, end, 10);  
41179684:	9505      	lw	a1,20(sp)
41179686:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117968a:	6e0a      	li	a2,10
4117968c:	c042      	sb	v0,2(s0)
4117968e:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179690:	6791      	move	a0,s1
41179692:	0604      	addiu	a2,sp,16
41179694:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179698:	6d04      	li	a1,4
4117969a:	9404      	lw	a0,16(sp)

    ber_arg->ber_thr_low = (int8)unicode_to_int(start, end, 10);  
4117969c:	9505      	lw	a1,20(sp)
4117969e:	18a2 e435 	jal	411790d4 <unicode_to_int>
411796a2:	6e0a      	li	a2,10
411796a4:	c043      	sb	v0,3(s0)
411796a6:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411796a8:	6791      	move	a0,s1
411796aa:	0604      	addiu	a2,sp,16
411796ac:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411796b0:	6d05      	li	a1,5
411796b2:	9404      	lw	a0,16(sp)

    ber_arg->ber_thr_high = (int8)unicode_to_int(start, end, 10); 
411796b4:	9505      	lw	a1,20(sp)
411796b6:	18a2 e435 	jal	411790d4 <unicode_to_int>
411796ba:	6e0a      	li	a2,10
411796bc:	c044      	sb	v0,4(s0)
411796be:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411796c0:	6791      	move	a0,s1
411796c2:	0604      	addiu	a2,sp,16
411796c4:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411796c8:	6d06      	li	a1,6
411796ca:	9404      	lw	a0,16(sp)

    ber_arg->rssi_thr_low = (int8)unicode_to_int(start, end, 10);  
411796cc:	9505      	lw	a1,20(sp)
411796ce:	18a2 e435 	jal	411790d4 <unicode_to_int>
411796d2:	6e0a      	li	a2,10
411796d4:	c045      	sb	v0,5(s0)
411796d6:	6791      	move	a0,s1

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411796d8:	0604      	addiu	a2,sp,16
411796da:	0705      	addiu	a3,sp,20
411796dc:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411796e0:	6d07      	li	a1,7
411796e2:	9404      	lw	a0,16(sp)

    ber_arg->rssi_thr_high = (int8)unicode_to_int(start, end, 10);    
411796e4:	9505      	lw	a1,20(sp)
411796e6:	18a2 e435 	jal	411790d4 <unicode_to_int>
411796ea:	6e0a      	li	a2,10
411796ec:	c046      	sb	v0,6(s0)
411796ee:	6a01      	li	v0,1
    
    return TRUE;
}
411796f0:	6475      	restore	40,ra,s0-s1
411796f2:	e8a0      	jrc	ra

411796f4 <act_test_read_lradc_test_arg>:
411796f4:	64f5      	save	40,ra,s0-s1

int32 act_test_read_lradc_test_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411796f6:	6725      	move	s1,a1
411796f8:	0705      	addiu	a3,sp,20
    uint16*  start = NULL;
    uint16*  end   = NULL;
    uint8 arg_num;
    lradc_test_arg_t *lradc_arg = (lradc_test_arg_t *)arg_buffer;

    arg_num = 1;

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411796fa:	6a00      	li	v0,0
411796fc:	0604      	addiu	a2,sp,16
411796fe:	6d01      	li	a1,1
41179700:	6704      	move	s0,a0
41179702:	d204      	sw	v0,16(sp)
41179704:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179708:	d205      	sw	v0,20(sp)
4117970a:	9404      	lw	a0,16(sp)
    lradc_arg->lradc1_test = (uint8)unicode_to_int(start, end, 10);
4117970c:	9505      	lw	a1,20(sp)
4117970e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179712:	6e0a      	li	a2,10
41179714:	c140      	sb	v0,0(s1)
41179716:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179718:	6790      	move	a0,s0
4117971a:	0604      	addiu	a2,sp,16
4117971c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179720:	6d02      	li	a1,2
41179722:	9404      	lw	a0,16(sp)
    lradc_arg->lradc1_thr_low = (uint8)unicode_to_int(start, end, 10);
41179724:	9505      	lw	a1,20(sp)
41179726:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117972a:	6e0a      	li	a2,10
4117972c:	c141      	sb	v0,1(s1)
4117972e:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179730:	6790      	move	a0,s0
41179732:	0604      	addiu	a2,sp,16
41179734:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179738:	6d03      	li	a1,3
4117973a:	9404      	lw	a0,16(sp)
    lradc_arg->lradc1_thr_high = (uint8)unicode_to_int(start, end, 10);
4117973c:	9505      	lw	a1,20(sp)
4117973e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179742:	6e0a      	li	a2,10
41179744:	c142      	sb	v0,2(s1)
41179746:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179748:	6790      	move	a0,s0
4117974a:	0604      	addiu	a2,sp,16
4117974c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179750:	6d04      	li	a1,4
41179752:	9404      	lw	a0,16(sp)
    lradc_arg->lradc2_test = (uint8)unicode_to_int(start, end, 10);
41179754:	9505      	lw	a1,20(sp)
41179756:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117975a:	6e0a      	li	a2,10
4117975c:	c143      	sb	v0,3(s1)
4117975e:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179760:	6790      	move	a0,s0
41179762:	0604      	addiu	a2,sp,16
41179764:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179768:	6d05      	li	a1,5
4117976a:	9404      	lw	a0,16(sp)
    lradc_arg->lradc2_thr_low = (uint8)unicode_to_int(start, end, 10);
4117976c:	9505      	lw	a1,20(sp)
4117976e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179772:	6e0a      	li	a2,10
41179774:	c144      	sb	v0,4(s1)
41179776:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179778:	6790      	move	a0,s0
4117977a:	0604      	addiu	a2,sp,16
4117977c:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179780:	6d06      	li	a1,6
41179782:	9404      	lw	a0,16(sp)
    lradc_arg->lradc2_thr_high = (uint8)unicode_to_int(start, end, 10);
41179784:	9505      	lw	a1,20(sp)
41179786:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117978a:	6e0a      	li	a2,10
4117978c:	c145      	sb	v0,5(s1)
4117978e:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179790:	6790      	move	a0,s0
41179792:	0604      	addiu	a2,sp,16
41179794:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179798:	6d07      	li	a1,7
4117979a:	9404      	lw	a0,16(sp)
    lradc_arg->lradc4_test = (uint8)unicode_to_int(start, end, 10);
4117979c:	9505      	lw	a1,20(sp)
4117979e:	18a2 e435 	jal	411790d4 <unicode_to_int>
411797a2:	6e0a      	li	a2,10
411797a4:	c146      	sb	v0,6(s1)
411797a6:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411797a8:	6790      	move	a0,s0
411797aa:	0604      	addiu	a2,sp,16
411797ac:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411797b0:	6d08      	li	a1,8
411797b2:	9404      	lw	a0,16(sp)
    lradc_arg->lradc4_thr_low = (uint8)unicode_to_int(start, end, 10);
411797b4:	9505      	lw	a1,20(sp)
411797b6:	18a2 e435 	jal	411790d4 <unicode_to_int>
411797ba:	6e0a      	li	a2,10
411797bc:	c147      	sb	v0,7(s1)
411797be:	6790      	move	a0,s0

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411797c0:	0604      	addiu	a2,sp,16
411797c2:	0705      	addiu	a3,sp,20
411797c4:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411797c8:	6d09      	li	a1,9
411797ca:	9404      	lw	a0,16(sp)
    lradc_arg->lradc4_thr_high = (uint8)unicode_to_int(start, end, 10);    
411797cc:	9505      	lw	a1,20(sp)
411797ce:	18a2 e435 	jal	411790d4 <unicode_to_int>
411797d2:	6e0a      	li	a2,10
411797d4:	c148      	sb	v0,8(s1)
411797d6:	6a01      	li	v0,1
    
    return TRUE;
}
411797d8:	6475      	restore	40,ra,s0-s1
411797da:	e8a0      	jrc	ra

411797dc <act_test_read_channel_test_arg>:
411797dc:	f008 64f5 	save	a0-a1,40,ra,s0-s1

int32 act_test_read_channel_test_arg(uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411797e0:	0705      	addiu	a3,sp,20
    uint16*  start = NULL;
    uint16*  end   = NULL;
    uint8 arg_num;
    channel_test_arg_t *channel_test_arg = (channel_test_arg_t *)arg_buffer;

    arg_num = 1;

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411797e2:	6a00      	li	v0,0
411797e4:	0604      	addiu	a2,sp,16
411797e6:	6d01      	li	a1,1
411797e8:	6724      	move	s1,a0
411797ea:	d204      	sw	v0,16(sp)
411797ec:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411797f0:	d205      	sw	v0,20(sp)
411797f2:	9404      	lw	a0,16(sp)
    channel_test_arg->test_left_ch = (uint8)unicode_to_int(start, end, 10);
411797f4:	9505      	lw	a1,20(sp)
411797f6:	18a2 e435 	jal	411790d4 <unicode_to_int>
411797fa:	6e0a      	li	a2,10
411797fc:	960b      	lw	a2,44(sp)
411797fe:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179800:	6791      	move	a0,s1
41179802:	c640      	sb	v0,0(a2)
41179804:	6d02      	li	a1,2
41179806:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117980a:	0604      	addiu	a2,sp,16
4117980c:	9404      	lw	a0,16(sp)
    channel_test_arg->left_ch_power_threadshold = (uint32)unicode_to_int(start, end, 10);    
4117980e:	9505      	lw	a1,20(sp)
41179810:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179814:	6e0a      	li	a2,10
41179816:	950b      	lw	a1,44(sp)
41179818:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117981a:	6791      	move	a0,s1
4117981c:	0604      	addiu	a2,sp,16
4117981e:	dd41      	sw	v0,4(a1)
41179820:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179824:	6d03      	li	a1,3
41179826:	9404      	lw	a0,16(sp)
    channel_test_arg->test_left_ch_SNR = (uint8)unicode_to_int(start, end, 10);
41179828:	9505      	lw	a1,20(sp)
4117982a:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117982e:	6e0a      	li	a2,10
41179830:	940b      	lw	a0,44(sp)
41179832:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179834:	0604      	addiu	a2,sp,16
41179836:	c442      	sb	v0,2(a0)
41179838:	6d04      	li	a1,4
4117983a:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117983e:	6791      	move	a0,s1
41179840:	9404      	lw	a0,16(sp)
    channel_test_arg->left_ch_SNR_threadshold = (uint32)unicode_to_int(start, end, 10);
41179842:	9505      	lw	a1,20(sp)
41179844:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179848:	6e0a      	li	a2,10
4117984a:	930b      	lw	v1,44(sp)
4117984c:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117984e:	db43      	sw	v0,12(v1)
41179850:	6791      	move	a0,s1
41179852:	0604      	addiu	a2,sp,16
41179854:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179858:	6d05      	li	a1,5
4117985a:	9404      	lw	a0,16(sp)
    channel_test_arg->left_ch_max_sig_point = unicode_to_int(start, end, 10);
4117985c:	9505      	lw	a1,20(sp)
4117985e:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179862:	6e0a      	li	a2,10
41179864:	900b      	lw	s0,44(sp)
41179866:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179868:	6791      	move	a0,s1
4117986a:	0604      	addiu	a2,sp,16
4117986c:	c84a      	sh	v0,20(s0)
4117986e:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
41179872:	6d06      	li	a1,6
41179874:	9404      	lw	a0,16(sp)
    channel_test_arg->test_right_ch = (uint8)unicode_to_int(start, end, 10);
41179876:	9505      	lw	a1,20(sp)
41179878:	18a2 e435 	jal	411790d4 <unicode_to_int>
4117987c:	6e0a      	li	a2,10
4117987e:	970b      	lw	a3,44(sp)
41179880:	6791      	move	a0,s1

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
41179882:	0604      	addiu	a2,sp,16
41179884:	c741      	sb	v0,1(a3)
41179886:	6d07      	li	a1,7
41179888:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
4117988c:	0705      	addiu	a3,sp,20
4117988e:	9404      	lw	a0,16(sp)
    channel_test_arg->right_ch_power_threadshold = (uint32)unicode_to_int(start, end, 10);    
41179890:	9505      	lw	a1,20(sp)
41179892:	18a2 e435 	jal	411790d4 <unicode_to_int>
41179896:	6e0a      	li	a2,10
41179898:	960b      	lw	a2,44(sp)
4117989a:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
4117989c:	6791      	move	a0,s1
4117989e:	de42      	sw	v0,8(a2)
411798a0:	6d08      	li	a1,8
411798a2:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411798a6:	0604      	addiu	a2,sp,16
411798a8:	9404      	lw	a0,16(sp)
    channel_test_arg->test_right_ch_SNR = (uint8)unicode_to_int(start, end, 10);
411798aa:	9505      	lw	a1,20(sp)
411798ac:	18a2 e435 	jal	411790d4 <unicode_to_int>
411798b0:	6e0a      	li	a2,10
411798b2:	950b      	lw	a1,44(sp)
411798b4:	0705      	addiu	a3,sp,20

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411798b6:	6791      	move	a0,s1
411798b8:	0604      	addiu	a2,sp,16
411798ba:	c543      	sb	v0,3(a1)
411798bc:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411798c0:	6d09      	li	a1,9
411798c2:	680a      	li	s0,10
411798c4:	9404      	lw	a0,16(sp)
    channel_test_arg->right_ch_SNR_threadshold = (uint32)unicode_to_int(start, end, 10);
411798c6:	9505      	lw	a1,20(sp)
411798c8:	18a2 e435 	jal	411790d4 <unicode_to_int>
411798cc:	67d0      	move	a2,s0
411798ce:	940b      	lw	a0,44(sp)
411798d0:	67b0      	move	a1,s0

    act_test_parse_test_arg(line_buffer, arg_num++, &start, &end);
411798d2:	0604      	addiu	a2,sp,16
411798d4:	0705      	addiu	a3,sp,20
411798d6:	dc44      	sw	v0,16(a0)
411798d8:	18a2 e488 	jal	41179220 <act_test_parse_test_arg>
411798dc:	6791      	move	a0,s1
411798de:	9404      	lw	a0,16(sp)
    channel_test_arg->right_ch_max_sig_point = (uint8)unicode_to_int(start, end, 10);
411798e0:	9505      	lw	a1,20(sp)
411798e2:	18a2 e435 	jal	411790d4 <unicode_to_int>
411798e6:	67d0      	move	a2,s0
411798e8:	930b      	lw	v1,44(sp)
411798ea:	ea11      	zeb	v0
411798ec:	cb4b      	sh	v0,22(v1)
411798ee:	6a01      	li	v0,1

    return TRUE;
}
411798f0:	6475      	restore	40,ra,s0-s1
411798f2:	e8a0      	jrc	ra

411798f4 <act_test_read_test_arg>:
411798f4:	64c3      	save	24,ra


const att_task_read_arg_t autotest_readarg_ops[] =
{
    { TESTID_MODIFY_BTNAME, act_test_read_bt_name_arg },

    { TESTID_MODIFY_BLENAME, act_test_read_ble_name_arg },

    { TESTID_MODIFY_BTADDR, act_test_read_bt_addr_arg },
    
    { TESTID_MODIFY_BTADDR2, act_test_read_bt_addr_arg2 },

    { TESTID_BT_TEST, act_test_read_btplay_arg },

    { TESTID_GPIO_TEST, act_test_read_gpio_arg },

    { TESTID_GPIO_TEST_ATS2823, act_test_read_gpio_arg },

    { TESTID_MP_TEST, act_test_read_mptest_arg },

    { TESTID_MP_READ_TEST, act_test_read_mptest_arg },

    { TESTID_READ_BTNAME, act_test_read_btname_arg },

    { TESTID_BER_TEST, act_test_read_ber_test_arg},

    { TESTID_LRADC_TEST, act_test_read_lradc_test_arg},

    { TESTID_LINEIN_CH_TEST_ATS2825, act_test_read_channel_test_arg},

    { TESTID_LINEIN_CH_TEST_ATS2823, act_test_read_channel_test_arg},    

    { TESTID_MIC_CH_TEST, act_test_read_channel_test_arg},

    { TESTID_RSSI_TEST, act_test_read_ber_test_arg},    
};

int32 act_test_read_test_arg(uint16 test_id, uint16 *line_buffer, uint8 *arg_buffer, uint32 arg_len)
{
411798f6:	653d      	move	t9,a1
411798f8:	b30b      	lw	v1,41179924 <act_test_read_test_arg+0x30>
411798fa:	67a4      	move	a1,a0
411798fc:	ed31      	zeh	a1
411798fe:	6c00      	li	a0,0
    uint32 i;

    //DEBUG_ATT_PRINT("test id:", test_id, 2);

    for (i = 0; i < sizeof(autotest_readarg_ops) / sizeof(att_task_read_arg_t); i++)
41179900:	ab40      	lhu	v0,0(v1)
    {
        if (autotest_readarg_ops[i].test_id == test_id)
41179902:	eaae      	xor	v0,a1
41179904:	2207      	beqz	v0,41179914 <act_test_read_test_arg+0x20>
41179906:	4481      	addiu	a0,a0,1
41179908:	5c10      	sltiu	a0,16
4117990a:	4b08      	addiu	v1,8
4117990c:	61f9      	btnez	41179900 <act_test_read_test_arg+0xc>
4117990e:	6a00      	li	v0,0
        {
            autotest_readarg_ops[i].read_arg_func(line_buffer, arg_buffer, arg_len);
            return TRUE;
        }
    }

    return FALSE;
41179910:	6443      	restore	24,ra
}
41179912:	e8a0      	jrc	ra
41179914:	9b41      	lw	v0,4(v1)
41179916:	67a6      	move	a1,a2
41179918:	6799      	move	a0,t9
4117991a:	ea40      	jalr	v0
4117991c:	67c7      	move	a2,a3
4117991e:	6a01      	li	v0,1
41179920:	6443      	restore	24,ra
41179922:	e8a0      	jrc	ra
41179924:	9964      	lw	v1,16(s1)
41179926:	4117      	daddiu	s0,s1,7

41179928 <act_test_read_test_info>:
41179928:	f00e 64f4 	save	a0-a3,32,ra,s0-s1

int32 act_test_read_test_info(uint8 read_line, uint8 *test_id, uint8 *arg_buffer, uint32 arg_len)
{
4117992c:	ec11      	zeb	a0
    uint16 *line_buffer;

    line_buffer = act_test_read_cfg_file(read_line);
4117992e:	18a2 e400 	jal	41179000 <act_test_read_cfg_file>
41179932:	6725      	move	s1,a1
41179934:	6702      	move	s0,v0
41179936:	220f      	beqz	v0,41179956 <act_test_read_test_info+0x2e>

    //文件解析完毕，测试完成
    if (line_buffer == 0)
41179938:	18a2 e482 	jal	41179208 <act_test_read_test_id>
    {
        *test_id = 0xff;
        return;
    }

    *test_id = act_test_read_test_id(line_buffer);
4117993c:	6782      	move	a0,v0
4117993e:	c140      	sb	v0,0(s1)
41179940:	6782      	move	a0,v0
41179942:	960a      	lw	a2,40(sp)

    return act_test_read_test_arg(*test_id, line_buffer, arg_buffer, arg_len);
41179944:	970b      	lw	a3,44(sp)
41179946:	ec11      	zeb	a0
41179948:	18a2 e63d 	jal	411798f4 <act_test_read_test_arg>
4117994c:	67b0      	move	a1,s0
4117994e:	651a      	move	t8,v0
41179950:	6758      	move	v0,t8
}
41179952:	6474      	restore	32,ra,s0-s1
41179954:	e8a0      	jrc	ra
41179956:	6a01      	li	v0,1
41179958:	ea4b      	neg	v0
4117995a:	c140      	sb	v0,0(s1)
4117995c:	6758      	move	v0,t8
4117995e:	6474      	restore	32,ra,s0-s1
41179960:	e8a0      	jrc	ra
41179962:	6500      	nop

41179964 <autotest_readarg_ops>:
41179964:	0001 0000 9261 4117 0002 0000 9281 4117     ....a..A.......A
41179974:	00c0 0000 92a1 4117 00c7 0000 934d 4117     .......A....M..A
41179984:	00c1 0000 9385 4117 0006 0000 93f1 4117     .......A.......A
41179994:	0015 0000 93f1 4117 00c2 0000 9449 4117     .......A....I..A
411799a4:	00c3 0000 9449 4117 0016 0000 95c9 4117     ....I..A.......A
411799b4:	00c5 0000 963d 4117 001b 0000 96f5 4117     ....=..A.......A
411799c4:	0007 0000 97dd 4117 001c 0000 97dd 4117     .......A.......A
411799d4:	0008 0000 97dd 4117 00c6 0000 963d 4117     .......A....=..A
	...
Disassembly of section BANK_CONTROL_1_6:

411b9000 <act_test_modify_bt_vram>:
411b9000:	64c3      	save	24,ra
 *******************************************************************************/
#include "ap_manager_test.h"

static void act_test_modify_bt_vram(void)
{
411b9002:	b30b      	lw	v1,411b902c <act_test_modify_bt_vram+0x2c>
    #define ATT_MAGIC  0xABCD

    bt_addr_vram_t*  p = (void*)STUB_ATT_RETURN_DATA_BUFFER;

    if(g_support_norflash_wp == TRUE)
411b9004:	b409      	lw	a0,411b9028 <act_test_modify_bt_vram+0x28>
411b9006:	a340      	lbu	v0,0(v1)
411b9008:	7201      	cmpi	v0,1
411b900a:	6002      	bteqz	411b9010 <act_test_modify_bt_vram+0x10>
411b900c:	6443      	restore	24,ra
    {
        /* 标记蓝牙参数已通过 ATT 修改 */
        p->magic = ATT_MAGIC;
        
        sys_vm_write(p, VM_BTSTACK, 4);
    }
}
411b900e:	e8a0      	jrc	ra
411b9010:	f42a 6d13 	li	a1,21555
411b9014:	edab      	neg	a1
411b9016:	b207      	lw	v0,411b9030 <act_test_modify_bt_vram+0x30>
411b9018:	cca0      	sh	a1,0(a0)
411b901a:	6e04      	li	a2,4
411b901c:	6d00      	li	a1,0
411b901e:	ea40      	jalr	v0
411b9020:	6f13      	li	a3,19
411b9022:	6443      	restore	24,ra
411b9024:	e8a0      	jrc	ra
411b9026:	0000      	addiu	s0,sp,0
411b9028:	a100      	lbu	s0,0(s1)
411b902a:	9fc3      	lw	a2,12(a3)
411b902c:	8dc0      	lh	a2,0(a1)
411b902e:	bfc3      	lwu	a2,12(a3)
411b9030:	88dd      	lh	a2,58(s0)
411b9032:	bfc3      	lwu	a2,12(a3)

411b9034 <cal_att_file_checksum>:
411b9034:	6d00      	li	a1,0

#define BT_ADDR_LOG_FILE_LEN   (512)

#define BT_ADDR_LOG_MAGIC_L    (0x44434241)

#define BT_ADDR_LOG_MAGIC_H    (0x48474645)

static const uint8 att_record_filename[] =
{
    0xff, 0xfe,
    'a',  0x00,
    't',  0x00,
    't',  0x00,
    '_',  0x00,
    'r',  0x00,
    'e',  0x00,
    'c',  0x00,
    'o',  0x00,
    'r',  0x00,
    'd',  0x00,
    '.',  0x00,
    'b',  0x00,
    'i',  0x00,
    'n',  0x00,
    0x00, 0x00
};

static uint32 cal_att_file_checksum(btaddr_log_file_t *btaddr_log_file)
{
    uint32 checksum = 0;
411b9036:	6b12      	li	v1,18
411b9038:	9c40      	lw	v0,0(a0)
    uint32 i;
    uint32 *pdata = (uint32 *) btaddr_log_file;

    for (i = 0; i < ((sizeof(btaddr_log_file_t) - 4) / 4); i++)
    {
        checksum += pdata[i];
411b903a:	436f      	addiu	v1,v1,-1
411b903c:	5300      	slti	v1,0
411b903e:	e555      	addu	a1,v0
411b9040:	4484      	addiu	a0,a0,4
411b9042:	60fa      	bteqz	411b9038 <cal_att_file_checksum+0x4>
411b9044:	e820      	jr	ra
    }

    return checksum;
}
411b9046:	6745      	move	v0,a1

411b9048 <write_param_data>:
411b9048:	64f4      	save	32,ra,s0-s1

static int32 write_param_data(nvram_param_rw_t *param_rw)
{
411b904a:	6724      	move	s1,a0
411b904c:	b00b      	lw	s0,411b9078 <write_param_data+0x30>
    int32 ret_val;

    ret_val = base_param_write(param_rw);
411b904e:	6c0b      	li	a0,11
411b9050:	67b1      	move	a1,s1
411b9052:	6e00      	li	a2,0
411b9054:	e840      	jalr	s0
411b9056:	6f06      	li	a3,6
411b9058:	2a02      	bnez	v0,411b905e <write_param_data+0x16>

    if(ret_val != 0)
411b905a:	6474      	restore	32,ra,s0-s1
    {
        base_param_merge_deal();

        ret_val = base_param_write(param_rw);
    }

    return ret_val;
}
411b905c:	e8a0      	jrc	ra
411b905e:	6d00      	li	a1,0
411b9060:	67c5      	move	a2,a1
411b9062:	6c1f      	li	a0,31
411b9064:	e840      	jalr	s0
411b9066:	6f06      	li	a3,6
411b9068:	6c0b      	li	a0,11
411b906a:	67b1      	move	a1,s1
411b906c:	6e00      	li	a2,0
411b906e:	e840      	jalr	s0
411b9070:	6f06      	li	a3,6
411b9072:	6474      	restore	32,ra,s0-s1
411b9074:	e8a0      	jrc	ra
411b9076:	0000      	addiu	s0,sp,0
411b9078:	8fdd      	lh	a2,58(a3)
411b907a:	bfc3      	lwu	a2,12(a3)

411b907c <act_test_write_att_record_file>:
411b907c:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
int act_test_report_modify_bt_addr_result(bt_addr_arg_t *bt_addr_arg)
{
    uint8 cmd_data[16];
    int ret_val;
    return_result_t *return_data;
    int trans_bytes;

    nvram_param_rw_t param_rw;

    param_rw.logical_index = PARAM_BT_ADDR;

    param_rw.rw_buffer = cmd_data;

    param_rw.rw_len = PARAM_BT_ADDR_LEN;

    base_param_read(&param_rw);

    if (libc_memcmp(bt_addr_arg->bt_addr, cmd_data, param_rw.rw_len) != 0)
    {
        ret_val = 0;
    }
    else
    {
        ret_val = 1;
    }

    if (ret_val == 1)
    {
        att_write_test_info("modify bt addr ok", 0, 0);
    }
    else
    {
        att_write_test_info("modify bt addr failed", 0, 0);
    }

    att_write_test_info("byte 5:", cmd_data[5], 1);
    att_write_test_info("byte 4:", cmd_data[4], 1);
    att_write_test_info("byte 3:", cmd_data[3], 1);
    att_write_test_info("byte 2:", cmd_data[2], 1);
    att_write_test_info("byte 1:", cmd_data[1], 1);
    att_write_test_info("byte 0:", cmd_data[0], 1);

    if (g_test_mode != TEST_MODE_CARD)
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = g_test_info.test_id;

        return_data->test_result = ret_val;

        trans_bytes = 0;

        //蓝牙地址转unicode形式
        bytes_to_unicode(cmd_data, 5, 6, return_data->return_arg, &trans_bytes);

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;

        bytes_to_unicode(&(bt_addr_arg->bt_addr_add_mode), 0, 1, &(return_data->return_arg[trans_bytes]), &trans_bytes);

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;

        bytes_to_unicode(&(bt_addr_arg->bt_burn_mode), 0, 1, &(return_data->return_arg[trans_bytes]), &trans_bytes);

        //添加结束符
        return_data->return_arg[trans_bytes++] = 0x0000;

        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
        }

        act_test_report_result(return_data, trans_bytes * 2 + 4);
    }
    else
    {
        //累加模式
        if (bt_addr_arg->bt_addr_add_mode == 0)
        {
            act_test_write_att_record_file(&(bt_addr_arg->bt_addr[0]), 0, 0);
        }
        
        act_test_report_test_log(ret_val, g_test_info.test_id);
    }

    return ret_val;
}

test_result_e act_test_modify_bt_addr(void *arg_buffer)
{
    int ret_val;

    nvram_param_rw_t param_rw;
    
    if(g_support_norflash_wp == TRUE)
    {
        base_set_disable_write_protect();        
    }

    bt_addr_arg_t *bt_addr_arg = (bt_addr_arg_t *) arg_buffer;

    param_rw.logical_index = PARAM_BT_ADDR;
    param_rw.rw_len = PARAM_BT_ADDR_LEN;
    param_rw.rw_buffer = bt_addr_arg->bt_addr;

    ret_val = write_param_data(&param_rw);

    act_test_report_modify_bt_addr_result(bt_addr_arg);

    act_test_modify_bt_vram();
    
    return ret_val;
}

int32 act_open_att_record_file(void)
{
    int ret_val;
    int32 file_handle;
    int32 file_valid;
    uint32 check_sum;
    uint8 *file_buffer = (uint8 *) LOG_FILE_BUFFER;
    uint32 *pdata = (uint32 *) file_buffer;
    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) file_buffer;

    //定位到根目录
    vfs_cd(g_file_sys_id, CD_ROOT, 0);

    ret_val = vfs_file_dir_exist(g_file_sys_id, att_record_filename, 1);

    libc_memset(file_buffer, 0, BT_ADDR_LOG_FILE_LEN);

    file_valid = TRUE;

    if (ret_val == 0)
    {
        file_valid = FALSE;
    }
    else
    {
        file_handle = vfs_file_open(g_file_sys_id, att_record_filename, OPEN_MODIFY);

        if (file_handle == 0)
        {
            libc_print("open file error!\n", 0, 0);

            while (1)
                ;
        }

        vfs_file_read(g_file_sys_id, file_buffer, BT_ADDR_LOG_FILE_LEN, file_handle);

        if ((btaddr_log->magicl != BT_ADDR_LOG_MAGIC_L) || (btaddr_log->magich != BT_ADDR_LOG_MAGIC_H))
        {
            file_valid = FALSE;
        }

        check_sum = cal_att_file_checksum(btaddr_log);

        if (check_sum != btaddr_log->checksum)
        {
            file_valid = FALSE;
        }
    }

    if (file_valid == TRUE)
    {
        vfs_file_close(g_file_sys_id, file_handle);
        return TRUE;
    }
    else
    {
        file_handle = vfs_file_create(g_file_sys_id, att_record_filename, BT_ADDR_LOG_FILE_LEN);

        if (file_handle == 0)
        {
            libc_print("create bt addr log file error!\n", 0, 0);

            while (1)
                ;
        }

        libc_memset(btaddr_log, 0, sizeof(btaddr_log_file_t));
        
        btaddr_log->magicl = BT_ADDR_LOG_MAGIC_L;
        btaddr_log->magich = BT_ADDR_LOG_MAGIC_H;
        btaddr_log->record_cnt = 0;
        btaddr_log->succeed_cnt = 0;
        btaddr_log->failed_cnt = 0;
        btaddr_log->checksum = cal_att_file_checksum(btaddr_log);

        vfs_file_write(g_file_sys_id, file_buffer, BT_ADDR_LOG_FILE_LEN, file_handle);

        vfs_file_close(g_file_sys_id, file_handle);

        return FALSE;

    }
}

int32 act_test_read_bt_addr_from_log(uint8 *byte_buffer)
{
    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) LOG_FILE_BUFFER;

    if (act_open_att_record_file() == TRUE)
    {
        //按照高位在前的顺序依次读入
        byte_buffer[2] = btaddr_log->addr[0];
        byte_buffer[1] = btaddr_log->addr[1];
        byte_buffer[0] = btaddr_log->addr[2];
    }
}

int32 act_test_write_att_record_file(uint8 *byte_buffer, log_test_info_t *test_info, uint32 mode)
{
411b9080:	b14b      	lw	s1,411b91ac <act_test_write_att_record_file+0x130>
    uint32 i;
    int32 file_handle;
    uint8 *file_buffer = (uint8 *) LOG_FILE_BUFFER;
    uint32 *pdata = (uint32 *) file_buffer;
    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) file_buffer;

    //定位到根目录
    vfs_cd(g_file_sys_id, CD_ROOT, 0);
411b9082:	6b00      	li	v1,0
411b9084:	b04b      	lw	s0,411b91b0 <act_test_write_att_record_file+0x134>
411b9086:	9980      	lw	a0,0(s1)
411b9088:	67e3      	move	a3,v1
411b908a:	d304      	sw	v1,16(sp)
411b908c:	67c3      	move	a2,v1
411b908e:	e840      	jalr	s0
411b9090:	6d3a      	li	a1,58
411b9092:	9980      	lw	a0,0(s1)

    file_handle = vfs_file_open(g_file_sys_id, att_record_filename, OPEN_MODIFY);
411b9094:	6a05      	li	v0,5
411b9096:	b548      	lw	a1,411b91b4 <act_test_write_att_record_file+0x138>
411b9098:	d204      	sw	v0,16(sp)
411b909a:	6e02      	li	a2,2
411b909c:	e840      	jalr	s0
411b909e:	6f00      	li	a3,0
411b90a0:	6722      	move	s1,v0
411b90a2:	2a07      	bnez	v0,411b90b2 <act_test_write_att_record_file+0x36>

    if (file_handle == 0)
411b90a4:	b045      	lw	s0,411b91b8 <act_test_write_att_record_file+0x13c>
    {
        libc_print("open file error!\n", 0, 0);
411b90a6:	0c38      	la	a0,411b9184 <act_test_write_att_record_file+0x108>
411b90a8:	67a2      	move	a1,v0
411b90aa:	67c2      	move	a2,v0
411b90ac:	e840      	jalr	s0
411b90ae:	6f4b      	li	a3,75
411b90b0:	17ff      	b	411b90b0 <act_test_write_att_record_file+0x34>
411b90b2:	b33f      	lw	v1,411b91ac <act_test_write_att_record_file+0x130>

        while (1)
            ;
    }

    vfs_file_read(g_file_sys_id, file_buffer, BT_ADDR_LOG_FILE_LEN, file_handle);
411b90b4:	6f0d      	li	a3,13
411b90b6:	9b80      	lw	a0,0(v1)
411b90b8:	b53c      	lw	a1,411b91a8 <act_test_write_att_record_file+0x12c>
411b90ba:	d704      	sw	a3,16(sp)
411b90bc:	67e2      	move	a3,v0
411b90be:	b23d      	lw	v0,411b91b0 <act_test_write_att_record_file+0x134>
411b90c0:	f200 6e00 	li	a2,512
411b90c4:	eac0      	jalrc	v0
411b90c6:	b639      	lw	a2,411b91a8 <act_test_write_att_record_file+0x12c>

    if ((btaddr_log->magicl != BT_ADDR_LOG_MAGIC_L) || (btaddr_log->magich != BT_ADDR_LOG_MAGIC_H))
411b90c8:	b53d      	lw	a1,411b91bc <act_test_write_att_record_file+0x140>
411b90ca:	9e80      	lw	a0,0(a2)
411b90cc:	ecae      	xor	a0,a1
411b90ce:	2c05      	bnez	a0,411b90da <act_test_write_att_record_file+0x5e>
411b90d0:	b636      	lw	a2,411b91a8 <act_test_write_att_record_file+0x12c>
411b90d2:	b53c      	lw	a1,411b91c0 <act_test_write_att_record_file+0x144>
411b90d4:	9e81      	lw	a0,4(a2)
411b90d6:	ecae      	xor	a0,a1
411b90d8:	2407      	beqz	a0,411b90e8 <act_test_write_att_record_file+0x6c>
411b90da:	6d00      	li	a1,0
    {
        libc_print("file unvalid!\n", 0, 0);
411b90dc:	b137      	lw	s1,411b91b8 <act_test_write_att_record_file+0x13c>
411b90de:	0c2f      	la	a0,411b9198 <act_test_write_att_record_file+0x11c>
411b90e0:	67c5      	move	a2,a1
411b90e2:	e940      	jalr	s1
411b90e4:	6f4b      	li	a3,75
411b90e6:	17ff      	b	411b90e6 <act_test_write_att_record_file+0x6a>
411b90e8:	920c      	lw	v0,48(sp)

        while (1)
            ;
    }

    if (mode == 0)
411b90ea:	2a18      	bnez	v0,411b911c <act_test_write_att_record_file+0xa0>
411b90ec:	67c2      	move	a2,v0
    {
        for (i = 0; i < 3; i++)
411b90ee:	940a      	lw	a0,40(sp)
        {
            byte_buffer[i]++;
411b90f0:	e4dd      	addu	a3,a0,a2
411b90f2:	a760      	lbu	v1,0(a3)
411b90f4:	4341      	addiu	v0,v1,1
411b90f6:	c740      	sb	v0,0(a3)
411b90f8:	ea11      	zeb	v0

            if (byte_buffer[i] != 0)
411b90fa:	2a03      	bnez	v0,411b9102 <act_test_write_att_record_file+0x86>
411b90fc:	46c1      	addiu	a2,a2,1
411b90fe:	5e03      	sltiu	a2,3
411b9100:	61f6      	btnez	411b90ee <act_test_write_att_record_file+0x72>
411b9102:	920a      	lw	v0,40(sp)
            {
                break;
            }
        }

        //按照高位在前的顺序依次写入
        btaddr_log->addr[0] = byte_buffer[2];
411b9104:	b529      	lw	a1,411b91a8 <act_test_write_att_record_file+0x12c>
411b9106:	a2c2      	lbu	a2,2(v0)
411b9108:	b728      	lw	a3,411b91a8 <act_test_write_att_record_file+0x12c>
        btaddr_log->addr[1] = byte_buffer[1];
411b910a:	c5c9      	sb	a2,9(a1)
411b910c:	930a      	lw	v1,40(sp)
411b910e:	b527      	lw	a1,411b91a8 <act_test_write_att_record_file+0x12c>
        btaddr_log->addr[2] = byte_buffer[0];
411b9110:	a381      	lbu	a0,1(v1)
411b9112:	c78a      	sb	a0,10(a3)
411b9114:	920a      	lw	v0,40(sp)
411b9116:	a2c0      	lbu	a2,0(v0)
411b9118:	c5cb      	sb	a2,11(a1)
411b911a:	100a      	b	411b9130 <act_test_write_att_record_file+0xb4>
411b911c:	970c      	lw	a3,48(sp)
    }
    else if(mode == 1)
411b911e:	7701      	cmpi	a3,1
411b9120:	612c      	btnez	411b917a <act_test_write_att_record_file+0xfe>
411b9122:	b422      	lw	a0,411b91a8 <act_test_write_att_record_file+0x12c>
    {
        libc_memcpy(&(btaddr_log->record_cnt), test_info, sizeof(log_test_info_t));
411b9124:	950b      	lw	a1,44(sp)
411b9126:	4c0c      	addiu	a0,12
411b9128:	6e0c      	li	a2,12
411b912a:	b227      	lw	v0,411b91c4 <act_test_write_att_record_file+0x148>
    }
    else
    {        
        libc_memcpy(&(btaddr_log->bt_paired_dev_info), byte_buffer, sizeof(bt_paired_dev_info2_t));
411b912c:	ea40      	jalr	v0
411b912e:	6f00      	li	a3,0
411b9130:	b41e      	lw	a0,411b91a8 <act_test_write_att_record_file+0x12c>
        ;//nothing 已更新配对列表信息，直接计算校验和
    }

    btaddr_log->checksum = cal_att_file_checksum(btaddr_log);
411b9132:	18c2 e40d 	jal	411b9034 <cal_att_file_checksum>
411b9136:	6500      	nop
411b9138:	b41c      	lw	a0,411b91a8 <act_test_write_att_record_file+0x12c>
411b913a:	b61d      	lw	a2,411b91ac <act_test_write_att_record_file+0x130>

    vfs_file_seek(g_file_sys_id, 0, SEEK_SET, file_handle);
411b913c:	dc53      	sw	v0,76(a0)
411b913e:	6d0b      	li	a1,11
411b9140:	9e80      	lw	a0,0(a2)
411b9142:	b31c      	lw	v1,411b91b0 <act_test_write_att_record_file+0x134>
411b9144:	d504      	sw	a1,16(sp)
411b9146:	6d00      	li	a1,0
411b9148:	67c5      	move	a2,a1
411b914a:	eb40      	jalr	v1
411b914c:	67f1      	move	a3,s1
411b914e:	b218      	lw	v0,411b91ac <act_test_write_att_record_file+0x130>

    vfs_file_write(g_file_sys_id, file_buffer, BT_ADDR_LOG_FILE_LEN, file_handle);
411b9150:	6f0e      	li	a3,14
411b9152:	9a80      	lw	a0,0(v0)
411b9154:	b515      	lw	a1,411b91a8 <act_test_write_att_record_file+0x12c>
411b9156:	b317      	lw	v1,411b91b0 <act_test_write_att_record_file+0x134>
411b9158:	d704      	sw	a3,16(sp)
411b915a:	f200 6e00 	li	a2,512
411b915e:	eb40      	jalr	v1
411b9160:	67f1      	move	a3,s1
411b9162:	b613      	lw	a2,411b91ac <act_test_write_att_record_file+0x130>

    vfs_file_close(g_file_sys_id, file_handle);
411b9164:	6d07      	li	a1,7
411b9166:	9e80      	lw	a0,0(a2)
411b9168:	b312      	lw	v1,411b91b0 <act_test_write_att_record_file+0x134>
411b916a:	6e00      	li	a2,0
411b916c:	d504      	sw	a1,16(sp)
411b916e:	67e6      	move	a3,a2
411b9170:	eb40      	jalr	v1
411b9172:	67b1      	move	a1,s1
411b9174:	6a01      	li	v0,1

    return TRUE;
}
411b9176:	6475      	restore	40,ra,s0-s1
411b9178:	e8a0      	jrc	ra
411b917a:	b40c      	lw	a0,411b91a8 <act_test_write_att_record_file+0x12c>
411b917c:	950a      	lw	a1,40(sp)
411b917e:	4c18      	addiu	a0,24
411b9180:	6e34      	li	a2,52
411b9182:	17d3      	b	411b912a <act_test_write_att_record_file+0xae>
411b9184:	706f      	cmpi	s0,111
411b9186:	6e65      	li	a2,101
411b9188:	6620      	0x6620
411b918a:	6c69      	li	a0,105
411b918c:	2065      	beqz	s0,411b9258 <act_test_report_modify_bt_addr_result+0x90>
411b918e:	7265      	cmpi	v0,101
411b9190:	6f72      	li	a3,114
411b9192:	2172      	beqz	s1,411b9278 <.LBB5+0x6>
411b9194:	000a      	addiu	s0,sp,40
411b9196:	0000      	addiu	s0,sp,0
411b9198:	6966      	li	s1,102
411b919a:	656c      	move	t3,a0
411b919c:	7520      	cmpi	a1,32
411b919e:	766e      	cmpi	a2,110
411b91a0:	6c61      	li	a0,97
411b91a2:	6469      	restore	72,ra,s0
411b91a4:	0a21      	la	v0,411b9228 <act_test_report_modify_bt_addr_result+0x60>
411b91a6:	0000      	addiu	s0,sp,0
411b91a8:	b800      	lwu	s0,0(s0)
411b91aa:	9fc3      	lw	a2,12(a3)
411b91ac:	8de8      	lh	a3,16(a1)
411b91ae:	bfc3      	lwu	a2,12(a3)
411b91b0:	88e1      	lh	a3,2(s0)
411b91b2:	bfc3      	lwu	a2,12(a3)
411b91b4:	98c0      	lw	a2,0(s0)
411b91b6:	411b      	daddiu	s0,s1,-5
411b91b8:	88dd      	lh	a2,58(s0)
411b91ba:	bfc3      	lwu	a2,12(a3)
411b91bc:	4241      	addiu	v0,v0,1
411b91be:	4443      	addiu	v0,a0,3
411b91c0:	4645      	addiu	v0,a2,5
411b91c2:	4847      	addiu	s0,71
411b91c4:	88d5      	lh	a2,42(s0)
411b91c6:	bfc3      	lwu	a2,12(a3)

411b91c8 <act_test_report_modify_bt_addr_result>:
411b91c8:	f004 64f9 	save	a0,72,ra,s0-s1
411b91cc:	6e00      	li	a2,0
411b91ce:	679d      	move	a0,sp
411b91d0:	0006      	addiu	s0,sp,24
411b91d2:	6d06      	li	a1,6
411b91d4:	b265      	lw	v0,411b9368 <.LBE5+0x62>
411b91d6:	f020 c4c8 	sb	a2,40(a0)
411b91da:	f020 c4a9 	sb	a1,41(a0)
411b91de:	6e00      	li	a2,0
411b91e0:	6c0c      	li	a0,12
411b91e2:	050a      	addiu	a1,sp,40
411b91e4:	6f06      	li	a3,6
411b91e6:	ea40      	jalr	v0
411b91e8:	d00b      	sw	s0,44(sp)
411b91ea:	67fd      	move	a3,sp
411b91ec:	9412      	lw	a0,72(sp)
411b91ee:	f020 a7c9 	lbu	a2,41(a3)
411b91f2:	b25f      	lw	v0,411b936c <.LBE5+0x66>
411b91f4:	67b0      	move	a1,s0
411b91f6:	ea40      	jalr	v0
411b91f8:	6f02      	li	a3,2
411b91fa:	5a01      	sltiu	v0,1
411b91fc:	6778      	move	v1,t8
411b91fe:	d30d      	sw	v1,52(sp)
411b9200:	0c43      	la	a0,411b930c <.LBE5+0x6>
411b9202:	2201      	beqz	v0,411b9206 <act_test_report_modify_bt_addr_result+0x3e>
411b9204:	0c47      	la	a0,411b9320 <.LBE5+0x1a>
411b9206:	b35b      	lw	v1,411b9370 <.LBE5+0x6a>
411b9208:	6d00      	li	a1,0
411b920a:	67c5      	move	a2,a1
411b920c:	eb40      	jalr	v1
411b920e:	671d      	move	s0,sp
411b9210:	a0bd      	lbu	a1,29(s0)
411b9212:	b058      	lw	s0,411b9370 <.LBE5+0x6a>
411b9214:	0c49      	la	a0,411b9338 <.LBE5+0x32>
411b9216:	e840      	jalr	s0
411b9218:	6e01      	li	a2,1
411b921a:	675d      	move	v0,sp
411b921c:	a2bc      	lbu	a1,28(v0)
411b921e:	0c49      	la	a0,411b9340 <.LBE5+0x3a>
411b9220:	e840      	jalr	s0
411b9222:	6e01      	li	a2,1
411b9224:	67fd      	move	a3,sp
411b9226:	a7bb      	lbu	a1,27(a3)
411b9228:	0c48      	la	a0,411b9348 <.LBE5+0x42>
411b922a:	e840      	jalr	s0
411b922c:	6e01      	li	a2,1
411b922e:	677d      	move	v1,sp
411b9230:	a3ba      	lbu	a1,26(v1)
411b9232:	0c48      	la	a0,411b9350 <.LBE5+0x4a>
411b9234:	e840      	jalr	s0
411b9236:	6e01      	li	a2,1
411b9238:	67dd      	move	a2,sp
411b923a:	a6b9      	lbu	a1,25(a2)
411b923c:	0c47      	la	a0,411b9358 <.LBE5+0x52>
411b923e:	e840      	jalr	s0
411b9240:	6e01      	li	a2,1
411b9242:	675d      	move	v0,sp
411b9244:	a2b8      	lbu	a1,24(v0)
411b9246:	0c47      	la	a0,411b9360 <.LBE5+0x5a>
411b9248:	e840      	jalr	s0
411b924a:	6e01      	li	a2,1
411b924c:	b74a      	lw	a3,411b9374 <.LBE5+0x6e>
411b924e:	a760      	lbu	v1,0(a3)
411b9250:	2b10      	bnez	v1,411b9272 <.LBB5>
411b9252:	9212      	lw	v0,72(sp)
411b9254:	a2c6      	lbu	a2,6(v0)
411b9256:	2608      	beqz	a2,411b9268 <.LBB4>
411b9258:	b349      	lw	v1,411b937c <.LBE5+0x76>
411b925a:	940d      	lw	a0,52(sp)
411b925c:	1802 e437 	jal	410390dc <act_test_report_test_log>
411b9260:	aba1      	lhu	a1,2(v1)
411b9262:	920d      	lw	v0,52(sp)
411b9264:	6479      	restore	72,ra,s0-s1
411b9266:	e8a0      	jrc	ra

411b9268 <.LBB4>:
411b9268:	6782      	move	a0,v0
411b926a:	18c2 e41f 	jal	411b907c <act_test_write_att_record_file>
411b926e:	67a6      	move	a1,a2
411b9270:	17f3      	b	411b9258 <act_test_report_modify_bt_addr_result+0x90>

411b9272 <.LBB5>:
411b9272:	b443      	lw	a0,411b937c <.LBE5+0x76>
411b9274:	67dd      	move	a2,sp
411b9276:	b141      	lw	s1,411b9378 <.LBE5+0x72>
411b9278:	ace1      	lhu	a3,2(a0)
411b927a:	f020 a6b4 	lbu	a1,52(a2)
411b927e:	6800      	li	s0,0
411b9280:	c1a8      	sb	a1,8(s1)
411b9282:	c9e3      	sh	a3,6(s1)
411b9284:	d00c      	sw	s0,48(sp)
411b9286:	67f1      	move	a3,s1
411b9288:	000c      	addiu	s0,sp,48
411b928a:	0406      	addiu	a0,sp,24
411b928c:	6d05      	li	a1,5
411b928e:	6e06      	li	a2,6
411b9290:	4f0a      	addiu	a3,10
411b9292:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
411b9296:	d004      	sw	s0,16(sp)
411b9298:	970c      	lw	a3,48(sp)
411b929a:	6b2c      	li	v1,44
411b929c:	32e4      	sll	v0,a3,1
411b929e:	47c1      	addiu	a2,a3,1
411b92a0:	e231      	addu	a0,v0,s1
411b92a2:	cc65      	sh	v1,10(a0)
411b92a4:	35c4      	sll	a1,a2,1
411b92a6:	9312      	lw	v1,72(sp)
411b92a8:	e53d      	addu	a3,a1,s1
411b92aa:	4386      	addiu	a0,v1,6
411b92ac:	d60c      	sw	a2,48(sp)
411b92ae:	6d00      	li	a1,0
411b92b0:	6e01      	li	a2,1
411b92b2:	4f0a      	addiu	a3,10
411b92b4:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
411b92b8:	d004      	sw	s0,16(sp)
411b92ba:	960c      	lw	a2,48(sp)
411b92bc:	6c2c      	li	a0,44
411b92be:	46a1      	addiu	a1,a2,1
411b92c0:	32c4      	sll	v0,a2,1
411b92c2:	33a4      	sll	v1,a1,1
411b92c4:	e23d      	addu	a3,v0,s1
411b92c6:	9212      	lw	v0,72(sp)
411b92c8:	cf85      	sh	a0,10(a3)
411b92ca:	e33d      	addu	a3,v1,s1
411b92cc:	d50c      	sw	a1,48(sp)
411b92ce:	4287      	addiu	a0,v0,7
411b92d0:	6d00      	li	a1,0
411b92d2:	6e01      	li	a2,1
411b92d4:	4f0a      	addiu	a3,10
411b92d6:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
411b92da:	d004      	sw	s0,16(sp)
411b92dc:	960c      	lw	a2,48(sp)
411b92de:	6d01      	li	a1,1
411b92e0:	34c4      	sll	a0,a2,1
411b92e2:	4661      	addiu	v1,a2,1
411b92e4:	e43d      	addu	a3,a0,s1
411b92e6:	ed6c      	and	a1,v1
411b92e8:	6c00      	li	a0,0
411b92ea:	cf85      	sh	a0,10(a3)
411b92ec:	d30c      	sw	v1,48(sp)
411b92ee:	2505      	beqz	a1,411b92fa <.LBB5+0x88>
411b92f0:	3564      	sll	a1,v1,1
411b92f2:	e529      	addu	v0,a1,s1
411b92f4:	4361      	addiu	v1,v1,1
411b92f6:	ca85      	sh	a0,10(v0)
411b92f8:	d30c      	sw	v1,48(sp)
411b92fa:	3664      	sll	a2,v1,1
411b92fc:	46a4      	addiu	a1,a2,4
411b92fe:	b221      	lw	v0,411b9380 <.LBE5+0x7a>
411b9300:	6791      	move	a0,s1
411b9302:	ea40      	jalr	v0
411b9304:	ed31      	zeh	a1

411b9306 <.LBE5>:
411b9306:	920d      	lw	v0,52(sp)
411b9308:	6479      	restore	72,ra,s0-s1
411b930a:	e8a0      	jrc	ra
411b930c:	6f6d      	li	a3,109
411b930e:	6964      	li	s1,100
411b9310:	7966      	sd	v1,48(s1)
411b9312:	6220      	sw	ra,128(sp)
411b9314:	2074      	beqz	s0,411b93fe <act_open_att_record_file+0xa>
411b9316:	6461      	restore	8,ra,s0
411b9318:	7264      	cmpi	v0,100
411b931a:	6f20      	li	a3,32
411b931c:	006b      	addiu	s0,sp,428
411b931e:	0000      	addiu	s0,sp,0
411b9320:	6f6d      	li	a3,109
411b9322:	6964      	li	s1,100
411b9324:	7966      	sd	v1,48(s1)
411b9326:	6220      	sw	ra,128(sp)
411b9328:	2074      	beqz	s0,411b9412 <act_open_att_record_file+0x1e>
411b932a:	6461      	restore	8,ra,s0
411b932c:	7264      	cmpi	v0,100
411b932e:	6620      	0x6620
411b9330:	6961      	li	s1,97
411b9332:	656c      	move	t3,a0
411b9334:	0064      	addiu	s0,sp,400
411b9336:	0000      	addiu	s0,sp,0
411b9338:	7962      	sd	v1,16(s1)
411b933a:	6574      	move	s3,a0
411b933c:	3520      	sll	a1,s1,8
411b933e:	003a      	addiu	s0,sp,232
411b9340:	7962      	sd	v1,16(s1)
411b9342:	6574      	move	s3,a0
411b9344:	3420      	sll	a0,s1,8
411b9346:	003a      	addiu	s0,sp,232
411b9348:	7962      	sd	v1,16(s1)
411b934a:	6574      	move	s3,a0
411b934c:	3320      	sll	v1,s1,8
411b934e:	003a      	addiu	s0,sp,232
411b9350:	7962      	sd	v1,16(s1)
411b9352:	6574      	move	s3,a0
411b9354:	3220      	sll	v0,s1,8
411b9356:	003a      	addiu	s0,sp,232
411b9358:	7962      	sd	v1,16(s1)
411b935a:	6574      	move	s3,a0
411b935c:	3120      	sll	s1,8
411b935e:	003a      	addiu	s0,sp,232
411b9360:	7962      	sd	v1,16(s1)
411b9362:	6574      	move	s3,a0
411b9364:	3020      	sll	s0,s1,8
411b9366:	003a      	addiu	s0,sp,232
411b9368:	8fdd      	lh	a2,58(a3)
411b936a:	bfc3      	lwu	a2,12(a3)
411b936c:	88d5      	lh	a2,42(s0)
411b936e:	bfc3      	lwu	a2,12(a3)
411b9370:	8b89      	lh	a0,18(v1)
411b9372:	bfc3      	lwu	a2,12(a3)
411b9374:	8dc9      	lh	a2,18(a1)
411b9376:	bfc3      	lwu	a2,12(a3)
411b9378:	a100      	lbu	s0,0(s1)
411b937a:	9fc3      	lw	a2,12(a3)
411b937c:	8dd4      	lh	a2,40(a1)
411b937e:	bfc3      	lwu	a2,12(a3)
411b9380:	9b41      	lw	v0,4(v1)
411b9382:	41cb      	addiu	a2,s1,-5

411b9384 <act_test_modify_bt_addr>:
411b9384:	64f5      	save	40,ra,s0-s1
411b9386:	b31a      	lw	v1,411b93ec <act_test_modify_bt_addr+0x68>
411b9388:	6724      	move	s1,a0
411b938a:	a340      	lbu	v0,0(v1)
411b938c:	7201      	cmpi	v0,1
411b938e:	6014      	bteqz	411b93b8 <act_test_modify_bt_addr+0x34>
411b9390:	6e00      	li	a2,0
411b9392:	6d06      	li	a1,6
411b9394:	679d      	move	a0,sp
411b9396:	c4d0      	sb	a2,16(a0)
411b9398:	c4b1      	sb	a1,17(a0)
411b939a:	d105      	sw	s1,20(sp)
411b939c:	18c2 e412 	jal	411b9048 <write_param_data>
411b93a0:	0404      	addiu	a0,sp,16
411b93a2:	6702      	move	s0,v0
411b93a4:	18c2 e472 	jal	411b91c8 <act_test_report_modify_bt_addr_result>
411b93a8:	6791      	move	a0,s1
411b93aa:	18c2 e400 	jal	411b9000 <act_test_modify_bt_vram>
411b93ae:	6500      	nop
411b93b0:	6750      	move	v0,s0
411b93b2:	ea11      	zeb	v0
411b93b4:	6475      	restore	40,ra,s0-s1
411b93b6:	e8a0      	jrc	ra
411b93b8:	6d00      	li	a1,0
411b93ba:	b00e      	lw	s0,411b93f0 <act_test_modify_bt_addr+0x6c>
411b93bc:	6f06      	li	a3,6
411b93be:	67c5      	move	a2,a1
411b93c0:	e840      	jalr	s0
411b93c2:	6c20      	li	a0,32
411b93c4:	6e00      	li	a2,0
411b93c6:	6d06      	li	a1,6
411b93c8:	679d      	move	a0,sp
411b93ca:	c4d0      	sb	a2,16(a0)
411b93cc:	c4b1      	sb	a1,17(a0)
411b93ce:	d105      	sw	s1,20(sp)
411b93d0:	18c2 e412 	jal	411b9048 <write_param_data>
411b93d4:	0404      	addiu	a0,sp,16
411b93d6:	6702      	move	s0,v0
411b93d8:	18c2 e472 	jal	411b91c8 <act_test_report_modify_bt_addr_result>
411b93dc:	6791      	move	a0,s1
411b93de:	18c2 e400 	jal	411b9000 <act_test_modify_bt_vram>
411b93e2:	6500      	nop
411b93e4:	6750      	move	v0,s0
411b93e6:	ea11      	zeb	v0
411b93e8:	6475      	restore	40,ra,s0-s1
411b93ea:	e8a0      	jrc	ra
411b93ec:	8dc0      	lh	a2,0(a1)
411b93ee:	bfc3      	lwu	a2,12(a3)
411b93f0:	8fdd      	lh	a2,58(a3)
411b93f2:	bfc3      	lwu	a2,12(a3)

411b93f4 <act_open_att_record_file>:
411b93f4:	64f6      	save	48,ra,s0-s1
411b93f6:	b757      	lw	a3,411b9550 <act_open_att_record_file+0x15c>
411b93f8:	6900      	li	s1,0
411b93fa:	9f80      	lw	a0,0(a3)
411b93fc:	b056      	lw	s0,411b9554 <act_open_att_record_file+0x160>
411b93fe:	6d3a      	li	a1,58
411b9400:	67d1      	move	a2,s1
411b9402:	67f1      	move	a3,s1
411b9404:	e840      	jalr	s0
411b9406:	d104      	sw	s1,16(sp)
411b9408:	b652      	lw	a2,411b9550 <act_open_att_record_file+0x15c>
411b940a:	6d11      	li	a1,17
411b940c:	9e80      	lw	a0,0(a2)
411b940e:	b352      	lw	v1,411b9554 <act_open_att_record_file+0x160>
411b9410:	d504      	sw	a1,16(sp)
411b9412:	b552      	lw	a1,411b9558 <act_open_att_record_file+0x164>
411b9414:	6e01      	li	a2,1
411b9416:	eb40      	jalr	v1
411b9418:	67f1      	move	a3,s1
411b941a:	6702      	move	s0,v0
411b941c:	b44c      	lw	a0,411b954c <act_open_att_record_file+0x158>
411b941e:	b250      	lw	v0,411b955c <act_open_att_record_file+0x168>
411b9420:	67b1      	move	a1,s1
411b9422:	f200 6e00 	li	a2,512
411b9426:	ea40      	jalr	v0
411b9428:	6f01      	li	a3,1
411b942a:	6c01      	li	a0,1
411b942c:	d407      	sw	a0,28(sp)
411b942e:	284c      	bnez	s0,411b94c8 <act_open_att_record_file+0xd4>
411b9430:	d007      	sw	s0,28(sp)
411b9432:	9607      	lw	a2,28(sp)
411b9434:	7601      	cmpi	a2,1
411b9436:	610c      	btnez	411b9450 <act_open_att_record_file+0x5c>
411b9438:	b346      	lw	v1,411b9550 <act_open_att_record_file+0x15c>
411b943a:	6e00      	li	a2,0
411b943c:	9b80      	lw	a0,0(v1)
411b943e:	6f07      	li	a3,7
411b9440:	9506      	lw	a1,24(sp)
411b9442:	b245      	lw	v0,411b9554 <act_open_att_record_file+0x160>
411b9444:	d704      	sw	a3,16(sp)
411b9446:	ea40      	jalr	v0
411b9448:	67e6      	move	a3,a2
411b944a:	6a01      	li	v0,1
411b944c:	6476      	restore	48,ra,s0-s1
411b944e:	e8a0      	jrc	ra
411b9450:	b540      	lw	a1,411b954c <act_open_att_record_file+0x158>
411b9452:	6906      	li	s1,6
411b9454:	9d80      	lw	a0,0(a1)
411b9456:	b040      	lw	s0,411b9554 <act_open_att_record_file+0x160>
411b9458:	b540      	lw	a1,411b9558 <act_open_att_record_file+0x164>
411b945a:	d104      	sw	s1,16(sp)
411b945c:	f200 6e00 	li	a2,512
411b9460:	e840      	jalr	s0
411b9462:	6f00      	li	a3,0
411b9464:	6722      	move	s1,v0
411b9466:	2a07      	bnez	v0,411b9476 <act_open_att_record_file+0x82>
411b9468:	67a2      	move	a1,v0
411b946a:	67c2      	move	a2,v0
411b946c:	b23e      	lw	v0,411b9564 <act_open_att_record_file+0x170>
411b946e:	0c30      	la	a0,411b952c <act_open_att_record_file+0x138>
411b9470:	ea40      	jalr	v0
411b9472:	6f4b      	li	a3,75
411b9474:	17ff      	b	411b9474 <act_open_att_record_file+0x80>
411b9476:	b436      	lw	a0,411b954c <act_open_att_record_file+0x158>
411b9478:	b239      	lw	v0,411b955c <act_open_att_record_file+0x168>
411b947a:	6d00      	li	a1,0
411b947c:	6e50      	li	a2,80
411b947e:	ea40      	jalr	v0
411b9480:	6f01      	li	a3,1
411b9482:	b433      	lw	a0,411b954c <act_open_att_record_file+0x158>
411b9484:	b03a      	lw	s0,411b956c <act_open_att_record_file+0x178>
411b9486:	b739      	lw	a3,411b9568 <act_open_att_record_file+0x174>
411b9488:	dc01      	sw	s0,4(a0)
411b948a:	6800      	li	s0,0
411b948c:	dce0      	sw	a3,0(a0)
411b948e:	dc03      	sw	s0,12(a0)
411b9490:	dc04      	sw	s0,16(a0)
411b9492:	18c2 e40d 	jal	411b9034 <cal_att_file_checksum>
411b9496:	dc05      	sw	s0,20(a0)
411b9498:	b62d      	lw	a2,411b954c <act_open_att_record_file+0x158>
411b949a:	6d0e      	li	a1,14
411b949c:	de53      	sw	v0,76(a2)
411b949e:	b22d      	lw	v0,411b9550 <act_open_att_record_file+0x15c>
411b94a0:	b32d      	lw	v1,411b9554 <act_open_att_record_file+0x160>
411b94a2:	9a80      	lw	a0,0(v0)
411b94a4:	d504      	sw	a1,16(sp)
411b94a6:	67a6      	move	a1,a2
411b94a8:	f200 6e00 	li	a2,512
411b94ac:	eb40      	jalr	v1
411b94ae:	67f1      	move	a3,s1
411b94b0:	b728      	lw	a3,411b9550 <act_open_att_record_file+0x15c>
411b94b2:	6e07      	li	a2,7
411b94b4:	9f80      	lw	a0,0(a3)
411b94b6:	b328      	lw	v1,411b9554 <act_open_att_record_file+0x160>
411b94b8:	d604      	sw	a2,16(sp)
411b94ba:	67b1      	move	a1,s1
411b94bc:	67d0      	move	a2,s0
411b94be:	eb40      	jalr	v1
411b94c0:	67f0      	move	a3,s0
411b94c2:	6750      	move	v0,s0
411b94c4:	6476      	restore	48,ra,s0-s1
411b94c6:	e8a0      	jrc	ra
411b94c8:	b522      	lw	a1,411b954c <act_open_att_record_file+0x158>
411b94ca:	6a05      	li	v0,5
411b94cc:	9d80      	lw	a0,0(a1)
411b94ce:	b322      	lw	v1,411b9554 <act_open_att_record_file+0x160>
411b94d0:	b522      	lw	a1,411b9558 <act_open_att_record_file+0x164>
411b94d2:	d204      	sw	v0,16(sp)
411b94d4:	6e02      	li	a2,2
411b94d6:	eb40      	jalr	v1
411b94d8:	67f1      	move	a3,s1
411b94da:	d206      	sw	v0,24(sp)
411b94dc:	2a07      	bnez	v0,411b94ec <act_open_att_record_file+0xf8>
411b94de:	b421      	lw	a0,411b9560 <act_open_att_record_file+0x16c>
411b94e0:	b121      	lw	s1,411b9564 <act_open_att_record_file+0x170>
411b94e2:	67a2      	move	a1,v0
411b94e4:	67c2      	move	a2,v0
411b94e6:	e940      	jalr	s1
411b94e8:	6f4b      	li	a3,75
411b94ea:	17ff      	b	411b94ea <act_open_att_record_file+0xf6>
411b94ec:	b519      	lw	a1,411b9550 <act_open_att_record_file+0x15c>
411b94ee:	6b0d      	li	v1,13
411b94f0:	9d80      	lw	a0,0(a1)
411b94f2:	9706      	lw	a3,24(sp)
411b94f4:	b516      	lw	a1,411b954c <act_open_att_record_file+0x158>
411b94f6:	b218      	lw	v0,411b9554 <act_open_att_record_file+0x160>
411b94f8:	f200 6e00 	li	a2,512
411b94fc:	ea40      	jalr	v0
411b94fe:	d304      	sw	v1,16(sp)
411b9500:	b413      	lw	a0,411b954c <act_open_att_record_file+0x158>
411b9502:	b71a      	lw	a3,411b9568 <act_open_att_record_file+0x174>
411b9504:	9cc0      	lw	a2,0(a0)
411b9506:	eeee      	xor	a2,a3
411b9508:	2e04      	bnez	a2,411b9512 <act_open_att_record_file+0x11e>
411b950a:	9cc1      	lw	a2,4(a0)
411b950c:	b418      	lw	a0,411b956c <act_open_att_record_file+0x178>
411b950e:	ee8e      	xor	a2,a0
411b9510:	2602      	beqz	a2,411b9516 <act_open_att_record_file+0x122>
411b9512:	6f00      	li	a3,0
411b9514:	d707      	sw	a3,28(sp)
411b9516:	b40e      	lw	a0,411b954c <act_open_att_record_file+0x158>
411b9518:	18c2 e40d 	jal	411b9034 <cal_att_file_checksum>
411b951c:	6500      	nop
411b951e:	b50c      	lw	a1,411b954c <act_open_att_record_file+0x158>
411b9520:	9d73      	lw	v1,76(a1)
411b9522:	eb4e      	xor	v1,v0
411b9524:	2386      	beqz	v1,411b9432 <act_open_att_record_file+0x3e>
411b9526:	6a00      	li	v0,0
411b9528:	d207      	sw	v0,28(sp)
411b952a:	1783      	b	411b9432 <act_open_att_record_file+0x3e>
411b952c:	7263      	cmpi	v0,99
411b952e:	6165      	btnez	411b95fa <utf8str_to_unicode+0x52>
411b9530:	6574      	move	s3,a0
411b9532:	6220      	sw	ra,128(sp)
411b9534:	2074      	beqz	s0,411b961e <utf8str_to_unicode+0x76>
411b9536:	6461      	restore	8,ra,s0
411b9538:	7264      	cmpi	v0,100
411b953a:	6c20      	li	a0,32
411b953c:	676f      	move	v1,t7
411b953e:	6620      	0x6620
411b9540:	6c69      	li	a0,105
411b9542:	2065      	beqz	s0,411b960e <utf8str_to_unicode+0x66>
411b9544:	7265      	cmpi	v0,101
411b9546:	6f72      	li	a3,114
411b9548:	2172      	beqz	s1,411b962e <utf8str_to_unicode+0x86>
411b954a:	000a      	addiu	s0,sp,40
411b954c:	b800      	lwu	s0,0(s0)
411b954e:	9fc3      	lw	a2,12(a3)
411b9550:	8de8      	lh	a3,16(a1)
411b9552:	bfc3      	lwu	a2,12(a3)
411b9554:	88e1      	lh	a3,2(s0)
411b9556:	bfc3      	lwu	a2,12(a3)
411b9558:	98c0      	lw	a2,0(s0)
411b955a:	411b      	daddiu	s0,s1,-5
411b955c:	88d5      	lh	a2,42(s0)
411b955e:	bfc3      	lwu	a2,12(a3)
411b9560:	9184      	lw	s1,528(sp)
411b9562:	411b      	daddiu	s0,s1,-5
411b9564:	88dd      	lh	a2,58(s0)
411b9566:	bfc3      	lwu	a2,12(a3)
411b9568:	4241      	addiu	v0,v0,1
411b956a:	4443      	addiu	v0,a0,3
411b956c:	4645      	addiu	v0,a2,5
411b956e:	4847      	addiu	s0,71

411b9570 <act_test_read_bt_addr_from_log>:
411b9570:	64f4      	save	32,ra,s0-s1
411b9572:	b008      	lw	s0,411b9590 <act_test_read_bt_addr_from_log+0x20>
411b9574:	18c2 e4fd 	jal	411b93f4 <act_open_att_record_file>
411b9578:	6724      	move	s1,a0
411b957a:	7201      	cmpi	v0,1
411b957c:	6106      	btnez	411b958a <act_test_read_bt_addr_from_log+0x1a>
411b957e:	a089      	lbu	a0,9(s0)
411b9580:	c182      	sb	a0,2(s1)
411b9582:	a06a      	lbu	v1,10(s0)
411b9584:	c161      	sb	v1,1(s1)
411b9586:	a04b      	lbu	v0,11(s0)
411b9588:	c140      	sb	v0,0(s1)
411b958a:	6474      	restore	32,ra,s0-s1
411b958c:	e8a0      	jrc	ra
411b958e:	0000      	addiu	s0,sp,0
411b9590:	b800      	lwu	s0,0(s0)
411b9592:	9fc3      	lw	a2,12(a3)

411b9594 <read_att_test_count>:
411b9594:	64c3      	save	24,ra

uint32 read_att_test_count(void)
{
411b9596:	18c2 e4fd 	jal	411b93f4 <act_open_att_record_file>
    btaddr_log_file_t *btaddr_log = (btaddr_log_file_t *) LOG_FILE_BUFFER;

    act_open_att_record_file();
411b959a:	6500      	nop
411b959c:	b202      	lw	v0,411b95a4 <read_att_test_count+0x10>
411b959e:	9a43      	lw	v0,12(v0)

    return btaddr_log->record_cnt;
}
411b95a0:	6443      	restore	24,ra
411b95a2:	e8a0      	jrc	ra
411b95a4:	b800      	lwu	s0,0(s0)
411b95a6:	9fc3      	lw	a2,12(a3)

411b95a8 <utf8str_to_unicode>:
411b95a8:	f00e 64b1 	save	a0-a3,8,s0-s1

static int32 utf8str_to_unicode(uint8 *utf8, uint32 utf8Len, uint16 *unicode, uint32 *unicode_len)
{
411b95ac:	6800      	li	s0,0
    int32 count = 0;
411b95ae:	a460      	lbu	v1,0(a0)
    uint8 c0, c1;
    uint32 scalar;

    while (--utf8Len >= 0)
    {
        c0 = *utf8;
411b95b0:	327e      	srl	v0,v1,7
        utf8++;

        if (c0 < 0x80)
411b95b2:	4481      	addiu	a0,a0,1
411b95b4:	2a08      	bnez	v0,411b95c6 <utf8str_to_unicode+0x1e>
411b95b6:	ce60      	sh	v1,0(a2)
        {
            *unicode = c0;
411b95b8:	2321      	beqz	v1,411b95fc <utf8str_to_unicode+0x54>

            if (*unicode == 0x00)
411b95ba:	a460      	lbu	v1,0(a0)
411b95bc:	46c2      	addiu	a2,a2,2
            {
                count += 2;
                break;
            }
            unicode++;
            count += 2;
            continue;
        }

        /*非ascii字符，编码的第一个字节不应该为10xxxxxx*/
        if ((c0 & 0xc0) == 0x80)
        {
            return -1;
        }

        scalar = c0;
        if (--utf8Len < 0)
        {
            return -1;
        }

        c1 = *utf8;
        utf8++;
        /*第2个字节的编码格式应该为10xxxxxx*/
        if ((c1 & 0xc0) != 0x80)
        {
            return -1;
        }
        scalar <<= 6;
        scalar |= (c1 & 0x3f);

        /*如果r0 & 0x20等于0，说明该utf编码长度为2，否则其编码长度大于2*/
        if (!(c0 & 0x20))
        {
            if ((scalar != 0) && (scalar < 0x80))
            {
                /*unicode编码小于0x80，utf8编码长度却为2，over encoding*/
                return -1;
            }
            *unicode = (unsigned short) scalar & 0x7ff;
            if (*unicode == 0x00)
            {
                count += 2;
                break;
            }
            unicode++;
            count += 2;
            continue;
        }

        if (--utf8Len < 0)
        {
            return -1;
        }

        c1 = *utf8;
        utf8++;
        /*第3个字节的编码格式应该为10xxxxxx*/
        if ((c1 & 0xc0) != 0x80)
        {
            return -1;
        }
        scalar <<= 6;
        scalar |= (c1 & 0x3f);

        /*如果r0 & 0x10等于0，说明该utf编码长度为3，否则其编码长度大于3*/
        if (!(c0 & 0x10))
        {
            if (scalar < 0x800)
            {
                return -1;
            }
            if ((scalar >= 0xd800) && (scalar < 0xe000))
            {
                return -1;
            }
            *unicode = (unsigned short) scalar & 0xffff;
            if (*unicode == 0x00)
            {
                count += 2;
                break;
            }
            unicode++;
411b95be:	327e      	srl	v0,v1,7
411b95c0:	4002      	addiu	s0,s0,2
            count += 2;
411b95c2:	4481      	addiu	a0,a0,1
411b95c4:	22f8      	beqz	v0,411b95b6 <utf8str_to_unicode+0xe>
411b95c6:	69c0      	li	s1,192
411b95c8:	67a3      	move	a1,v1
411b95ca:	ed2c      	and	a1,s1
411b95cc:	7580      	cmpi	a1,128
411b95ce:	603d      	bteqz	411b964a <utf8str_to_unicode+0xa2>
411b95d0:	a4a0      	lbu	a1,0(a0)
411b95d2:	4481      	addiu	a0,a0,1
411b95d4:	67e5      	move	a3,a1
411b95d6:	ef2c      	and	a3,s1
411b95d8:	7780      	cmpi	a3,128
411b95da:	6137      	btnez	411b964a <utf8str_to_unicode+0xa2>
411b95dc:	6a3f      	li	v0,63
411b95de:	ed4c      	and	a1,v0
411b95e0:	653a      	move	t9,v0
411b95e2:	4ae1      	addiu	v0,-31
411b95e4:	3778      	sll	a3,v1,6
411b95e6:	ea6c      	and	v0,v1
411b95e8:	efad      	or	a3,a1
411b95ea:	2a14      	bnez	v0,411b9614 <utf8str_to_unicode+0x6c>
411b95ec:	476f      	addiu	v1,a3,-1
411b95ee:	5b7f      	sltiu	v1,127
411b95f0:	612c      	btnez	411b964a <utf8str_to_unicode+0xa2>
411b95f2:	f7e0 6a1f 	li	v0,2047
411b95f6:	eaec      	and	v0,a3
411b95f8:	ce40      	sh	v0,0(a2)
411b95fa:	2adf      	bnez	v0,411b95ba <utf8str_to_unicode+0x12>
411b95fc:	4062      	addiu	v1,s0,2
411b95fe:	6d03      	li	a1,3
            continue;
        }

        return -1;
    }

    //保证字符串四字节对齐
    if ((count % 4) != 0)
411b9600:	ed6c      	and	a1,v1
411b9602:	2503      	beqz	a1,411b960a <utf8str_to_unicode+0x62>
411b9604:	6f00      	li	a3,0
    {
        unicode++;
        count += 2;
        *unicode = 0x00;
411b9606:	4362      	addiu	v1,v1,2
411b9608:	cee1      	sh	a3,2(a2)
411b960a:	9605      	lw	a2,20(sp)
    }

    *unicode_len = count;
411b960c:	6a00      	li	v0,0
    return 0;
411b960e:	de60      	sw	v1,0(a2)
411b9610:	6431      	restore	8,s0-s1
}
411b9612:	e8a0      	jrc	ra
411b9614:	a440      	lbu	v0,0(a0)
411b9616:	4481      	addiu	a0,a0,1
411b9618:	e94c      	and	s1,v0
411b961a:	7180      	cmpi	s1,128
411b961c:	6116      	btnez	411b964a <utf8str_to_unicode+0xa2>
411b961e:	35f8      	sll	a1,a3,6
411b9620:	67f9      	move	a3,t9
411b9622:	eaec      	and	v0,a3
411b9624:	ed4d      	or	a1,v0
411b9626:	6a10      	li	v0,16
411b9628:	ea6c      	and	v0,v1
411b962a:	2a0f      	bnez	v0,411b964a <utf8str_to_unicode+0xa2>
411b962c:	f001 5d00 	sltiu	a1,2048
411b9630:	6110      	btnez	411b9652 <utf8str_to_unicode+0xaa>
411b9632:	f01b 6b00 	li	v1,55296
411b9636:	eb6b      	neg	v1
411b9638:	e569      	addu	v0,a1,v1
411b963a:	f001 5a00 	sltiu	v0,2048
411b963e:	6105      	btnez	411b964a <utf8str_to_unicode+0xa2>
411b9640:	6745      	move	v0,a1
411b9642:	ea31      	zeh	v0
411b9644:	cea0      	sh	a1,0(a2)
411b9646:	2ab9      	bnez	v0,411b95ba <utf8str_to_unicode+0x12>
411b9648:	17d9      	b	411b95fc <utf8str_to_unicode+0x54>
411b964a:	6c01      	li	a0,1
411b964c:	ea8b      	neg	v0,a0
411b964e:	6431      	restore	8,s0-s1
411b9650:	e8a0      	jrc	ra
411b9652:	424f      	addiu	v0,v0,-1
411b9654:	6431      	restore	8,s0-s1
411b9656:	e8a0      	jrc	ra

411b9658 <act_test_report_modify_bt_name_result>:
411b9658:	64fd      	save	104,ra,s0-s1

int act_test_report_modify_bt_name_result(bt_name_arg_t *bt_name_arg, uint16 write_len)
{
411b965a:	677d      	move	v1,sp
    uint8 cmd_data[TEST_BTNAME_MAX_LEN];
    int ret_val;
    return_result_t *return_data;
    nvram_param_rw_t param_rw;
    uint16 trans_bytes = 0;
411b965c:	6704      	move	s0,a0
411b965e:	6725      	move	s1,a1
411b9660:	6f00      	li	a3,0
411b9662:	6e01      	li	a2,1

    param_rw.logical_index = PARAM_BT_NAME;
411b9664:	0504      	addiu	a1,sp,16

    param_rw.rw_buffer = cmd_data;
411b9666:	6c38      	li	a0,56

    param_rw.rw_len = PARAM_BT_NAME_LEN;
411b9668:	b22a      	lw	v0,411b9710 <.LBE6+0x34>

    base_param_read(&param_rw);
411b966a:	f040 cbf0 	sh	a3,80(v1)
411b966e:	f040 c3c8 	sb	a2,72(v1)
411b9672:	f040 c389 	sb	a0,73(v1)
411b9676:	d513      	sw	a1,76(sp)
411b9678:	6c0c      	li	a0,12
411b967a:	0512      	addiu	a1,sp,72
411b967c:	6e00      	li	a2,0
411b967e:	ea40      	jalr	v0
411b9680:	6f06      	li	a3,6
411b9682:	e931      	zeh	s1
411b9684:	9513      	lw	a1,76(sp)

    //以写入的字节数进行比较
    if (libc_memcmp(bt_name_arg->bt_name, param_rw.rw_buffer, write_len) != 0)
411b9686:	b224      	lw	v0,411b9714 <.LBE6+0x38>
411b9688:	6790      	move	a0,s0
411b968a:	67d1      	move	a2,s1
411b968c:	ea40      	jalr	v0
411b968e:	6f02      	li	a3,2
411b9690:	5a01      	sltiu	v0,1
    {
        ret_val = 0;
    }
    else
    {
        ret_val = 1;
    }

    if (ret_val == 1)
411b9692:	6738      	move	s1,t8
411b9694:	0c14      	la	a0,411b96e4 <.LBE6+0x8>
    {
        att_write_test_info("modify bt name ok", 0, 0);
411b9696:	2201      	beqz	v0,411b969a <act_test_report_modify_bt_name_result+0x42>
411b9698:	0c18      	la	a0,411b96f8 <.LBE6+0x1c>
    }
    else
    {
        att_write_test_info("modify bt name failed", 0, 0);
411b969a:	6d00      	li	a1,0
411b969c:	b21f      	lw	v0,411b9718 <.LBE6+0x3c>
411b969e:	ea40      	jalr	v0
411b96a0:	67c5      	move	a2,a1
411b96a2:	b31f      	lw	v1,411b971c <.LBE6+0x40>
    }

    if (g_test_mode != TEST_MODE_CARD)
411b96a4:	a340      	lbu	v0,0(v1)
411b96a6:	2216      	beqz	v0,411b96d4 <.LBB6>
411b96a8:	b01e      	lw	s0,411b9720 <.LBE6+0x44>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
411b96aa:	6e01      	li	a2,1

        return_data->test_id = TESTID_MODIFY_BTNAME;
411b96ac:	c8c3      	sh	a2,6(s0)
411b96ae:	67d0      	move	a2,s0

        return_data->test_result = ret_val;

        //utf8转unicode可能所需的buffer较多，极端情况下是之前字符串buffer的2倍
        //因此需要一个大一点的buffer缓存字符串
        utf8str_to_unicode(cmd_data, sizeof(cmd_data), return_data->return_arg, &trans_bytes);
411b96b0:	0404      	addiu	a0,sp,16
411b96b2:	4e0a      	addiu	a2,10
411b96b4:	0714      	addiu	a3,sp,80
411b96b6:	c028      	sb	s1,8(s0)
411b96b8:	18c2 e56a 	jal	411b95a8 <utf8str_to_unicode>
411b96bc:	6d38      	li	a1,56
411b96be:	67bd      	move	a1,sp

        act_test_report_result(return_data, trans_bytes + 4);
411b96c0:	f040 ad90 	lhu	a0,80(a1)
411b96c4:	b218      	lw	v0,411b9724 <.LBE6+0x48>
411b96c6:	44a4      	addiu	a1,a0,4
411b96c8:	ed31      	zeh	a1
411b96ca:	ea40      	jalr	v0
411b96cc:	6790      	move	a0,s0
411b96ce:	6751      	move	v0,s1
    }
    else
    {
        act_test_report_test_log(ret_val, TESTID_MODIFY_BTNAME);    
    }

    return ret_val;
}
411b96d0:	647d      	restore	104,ra,s0-s1
411b96d2:	e8a0      	jrc	ra

411b96d4 <.LBB6>:
411b96d4:	6791      	move	a0,s1
411b96d6:	1802 e437 	jal	410390dc <act_test_report_test_log>
411b96da:	6d01      	li	a1,1

411b96dc <.LBE6>:
411b96dc:	6751      	move	v0,s1
411b96de:	647d      	restore	104,ra,s0-s1
411b96e0:	e8a0      	jrc	ra
411b96e2:	0000      	addiu	s0,sp,0
411b96e4:	6f6d      	li	a3,109
411b96e6:	6964      	li	s1,100
411b96e8:	7966      	sd	v1,48(s1)
411b96ea:	6220      	sw	ra,128(sp)
411b96ec:	2074      	beqz	s0,411b97d6 <act_test_report_modify_ble_name_result+0x4e>
411b96ee:	616e      	btnez	411b97cc <act_test_report_modify_ble_name_result+0x44>
411b96f0:	656d      	move	t3,a1
411b96f2:	6f20      	li	a3,32
411b96f4:	006b      	addiu	s0,sp,428
411b96f6:	0000      	addiu	s0,sp,0
411b96f8:	6f6d      	li	a3,109
411b96fa:	6964      	li	s1,100
411b96fc:	7966      	sd	v1,48(s1)
411b96fe:	6220      	sw	ra,128(sp)
411b9700:	2074      	beqz	s0,411b97ea <act_test_report_modify_ble_name_result+0x62>
411b9702:	616e      	btnez	411b97e0 <act_test_report_modify_ble_name_result+0x58>
411b9704:	656d      	move	t3,a1
411b9706:	6620      	0x6620
411b9708:	6961      	li	s1,97
411b970a:	656c      	move	t3,a0
411b970c:	0064      	addiu	s0,sp,400
411b970e:	0000      	addiu	s0,sp,0
411b9710:	8fdd      	lh	a2,58(a3)
411b9712:	bfc3      	lwu	a2,12(a3)
411b9714:	88d5      	lh	a2,42(s0)
411b9716:	bfc3      	lwu	a2,12(a3)
411b9718:	8b89      	lh	a0,18(v1)
411b971a:	bfc3      	lwu	a2,12(a3)
411b971c:	8dc9      	lh	a2,18(a1)
411b971e:	bfc3      	lwu	a2,12(a3)
411b9720:	a100      	lbu	s0,0(s1)
411b9722:	9fc3      	lw	a2,12(a3)
411b9724:	9b41      	lw	v0,4(v1)
411b9726:	41cb      	addiu	a2,s1,-5

411b9728 <act_test_modify_bt_name>:
411b9728:	64f5      	save	40,ra,s0-s1

test_result_e act_test_modify_bt_name(void *arg_buffer)
{
411b972a:	b315      	lw	v1,411b977c <act_test_modify_bt_name+0x54>
    int ret_val;

    nvram_param_rw_t param_rw;
    
    if(g_support_norflash_wp == TRUE)
411b972c:	6724      	move	s1,a0
411b972e:	a340      	lbu	v0,0(v1)
411b9730:	7201      	cmpi	v0,1
411b9732:	601d      	bteqz	411b976e <act_test_modify_bt_name+0x46>
411b9734:	6b01      	li	v1,1
    {
        base_set_disable_write_protect();        
    }    

    bt_name_arg_t *bt_name_arg = (bt_name_arg_t *) arg_buffer;

    param_rw.logical_index = PARAM_BT_NAME;
411b9736:	67fd      	move	a3,sp
411b9738:	6d00      	li	a1,0

    //包括结束符在内
    param_rw.rw_len = libc_strlen(bt_name_arg->bt_name) + 1;
411b973a:	b213      	lw	v0,411b9784 <act_test_modify_bt_name+0x5c>
411b973c:	c770      	sb	v1,16(a3)
411b973e:	67c5      	move	a2,a1
411b9740:	6f03      	li	a3,3
411b9742:	ea40      	jalr	v0
411b9744:	6791      	move	a0,s1
411b9746:	42a1      	addiu	a1,v0,1
411b9748:	679d      	move	a0,sp
411b974a:	c4b1      	sb	a1,17(a0)
411b974c:	0404      	addiu	a0,sp,16

    //DEBUG_ATT_PRINT("write bt name len", param_rw.rw_len, 2);

    param_rw.rw_buffer = bt_name_arg->bt_name;

    ret_val = write_param_data(&param_rw);
411b974e:	18c2 e412 	jal	411b9048 <write_param_data>
411b9752:	d105      	sw	s1,20(sp)
411b9754:	67dd      	move	a2,sp

    act_test_report_modify_bt_name_result(bt_name_arg, param_rw.rw_len);
411b9756:	a6b1      	lbu	a1,17(a2)
411b9758:	6702      	move	s0,v0
411b975a:	18c2 e596 	jal	411b9658 <act_test_report_modify_bt_name_result>
411b975e:	6791      	move	a0,s1
411b9760:	18c2 e400 	jal	411b9000 <act_test_modify_bt_vram>

    act_test_modify_bt_vram();
411b9764:	6500      	nop
411b9766:	6750      	move	v0,s0
    
    return ret_val;
}
411b9768:	ea11      	zeb	v0
411b976a:	6475      	restore	40,ra,s0-s1
411b976c:	e8a0      	jrc	ra
411b976e:	6d00      	li	a1,0
411b9770:	b004      	lw	s0,411b9780 <act_test_modify_bt_name+0x58>
411b9772:	6c20      	li	a0,32
411b9774:	67c5      	move	a2,a1
411b9776:	e840      	jalr	s0
411b9778:	6f06      	li	a3,6
411b977a:	17dc      	b	411b9734 <act_test_modify_bt_name+0xc>
411b977c:	8dc0      	lh	a2,0(a1)
411b977e:	bfc3      	lwu	a2,12(a3)
411b9780:	8fdd      	lh	a2,58(a3)
411b9782:	bfc3      	lwu	a2,12(a3)
411b9784:	88d5      	lh	a2,42(s0)
411b9786:	bfc3      	lwu	a2,12(a3)

411b9788 <act_test_report_modify_ble_name_result>:
411b9788:	64fa      	save	80,ra,s0-s1

void act_test_report_modify_ble_name_result(ble_name_arg_t *ble_name_arg, uint16 write_len)
{
411b978a:	677d      	move	v1,sp
    uint8 cmd_data[TEST_BTBLENAME_MAX_LEN];
    int ret_val;
    return_result_t *return_data;
    nvram_param_rw_t param_rw;
    uint16 trans_bytes = 0;
411b978c:	6704      	move	s0,a0
411b978e:	6725      	move	s1,a1
411b9790:	6f00      	li	a3,0
411b9792:	6e02      	li	a2,2

    param_rw.logical_index = PARAM_BT_BLENAME;
411b9794:	0504      	addiu	a1,sp,16

    param_rw.rw_buffer = cmd_data;
411b9796:	6c1e      	li	a0,30

    param_rw.rw_len = PARAM_BT_BLENAME_LEN;
411b9798:	b22a      	lw	v0,411b9840 <.LBE7+0x30>

    base_param_read(&param_rw);
411b979a:	cbfc      	sh	a3,56(v1)
411b979c:	f020 c3d0 	sb	a2,48(v1)
411b97a0:	f020 c391 	sb	a0,49(v1)
411b97a4:	d50d      	sw	a1,52(sp)
411b97a6:	6c0c      	li	a0,12
411b97a8:	050c      	addiu	a1,sp,48
411b97aa:	6e00      	li	a2,0
411b97ac:	ea40      	jalr	v0
411b97ae:	6f06      	li	a3,6
411b97b0:	e931      	zeh	s1
411b97b2:	950d      	lw	a1,52(sp)

    if (libc_memcmp(ble_name_arg->bt_ble_name, param_rw.rw_buffer, write_len) != 0)
411b97b4:	b224      	lw	v0,411b9844 <.LBE7+0x34>
411b97b6:	6790      	move	a0,s0
411b97b8:	67d1      	move	a2,s1
411b97ba:	ea40      	jalr	v0
411b97bc:	6f02      	li	a3,2
411b97be:	5a01      	sltiu	v0,1
    {
        ret_val = 0;
    }
    else
    {
        ret_val = 1;
    }

    if (ret_val == 1)
411b97c0:	6738      	move	s1,t8
411b97c2:	0c15      	la	a0,411b9814 <.LBE7+0x4>
    {
        att_write_test_info("modify ble name ok", 0, 0);
411b97c4:	2201      	beqz	v0,411b97c8 <act_test_report_modify_ble_name_result+0x40>
411b97c6:	0c19      	la	a0,411b9828 <.LBE7+0x18>
    }
    else
    {
        att_write_test_info("modify ble name failed", 0, 0);
411b97c8:	6d00      	li	a1,0
411b97ca:	b320      	lw	v1,411b9848 <.LBE7+0x38>
411b97cc:	eb40      	jalr	v1
411b97ce:	67c5      	move	a2,a1
411b97d0:	6d00      	li	a1,0
    }

    att_write_test_info(cmd_data, 0, 0);
411b97d2:	b21e      	lw	v0,411b9848 <.LBE7+0x38>
411b97d4:	0404      	addiu	a0,sp,16
411b97d6:	ea40      	jalr	v0
411b97d8:	67c5      	move	a2,a1
411b97da:	b31d      	lw	v1,411b984c <.LBE7+0x3c>

    if (g_test_mode != TEST_MODE_CARD)
411b97dc:	a340      	lbu	v0,0(v1)
411b97de:	2214      	beqz	v0,411b9808 <.LBB7>
411b97e0:	b01c      	lw	s0,411b9850 <.LBE7+0x40>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
411b97e2:	6e02      	li	a2,2

        return_data->test_id = TESTID_MODIFY_BLENAME;
411b97e4:	c8c3      	sh	a2,6(s0)
411b97e6:	67d0      	move	a2,s0

        return_data->test_result = ret_val;

        //由于ble名称字符串较多，也需要先转换再缓存
        utf8str_to_unicode(cmd_data, sizeof(cmd_data), return_data->return_arg, &trans_bytes);
411b97e8:	0404      	addiu	a0,sp,16
411b97ea:	4e0a      	addiu	a2,10
411b97ec:	070e      	addiu	a3,sp,56
411b97ee:	c028      	sb	s1,8(s0)
411b97f0:	18c2 e56a 	jal	411b95a8 <utf8str_to_unicode>
411b97f4:	6d1e      	li	a1,30
411b97f6:	67bd      	move	a1,sp

        //按照实际字节数上报结果，比如虽然有30字节数据，但只上报12个有效字节的数据
        act_test_report_result(return_data, trans_bytes + 4);
411b97f8:	ad9c      	lhu	a0,56(a1)
411b97fa:	b217      	lw	v0,411b9854 <.LBE7+0x44>
411b97fc:	44a4      	addiu	a1,a0,4
411b97fe:	ed31      	zeh	a1
411b9800:	ea40      	jalr	v0
411b9802:	6790      	move	a0,s0
411b9804:	647a      	restore	80,ra,s0-s1
    }
    else
    {
        act_test_report_test_log(ret_val, TESTID_MODIFY_BLENAME);    
    }    
}
411b9806:	e8a0      	jrc	ra

411b9808 <.LBB7>:
411b9808:	6791      	move	a0,s1
411b980a:	1802 e437 	jal	410390dc <act_test_report_test_log>
411b980e:	6d02      	li	a1,2

411b9810 <.LBE7>:
411b9810:	647a      	restore	80,ra,s0-s1
411b9812:	e8a0      	jrc	ra
411b9814:	6f6d      	li	a3,109
411b9816:	6964      	li	s1,100
411b9818:	7966      	sd	v1,48(s1)
411b981a:	6220      	sw	ra,128(sp)
411b981c:	656c      	move	t3,a0
411b981e:	6e20      	li	a2,32
411b9820:	6d61      	li	a1,97
411b9822:	2065      	beqz	s0,411b98ee <att_record_filename+0x2e>
411b9824:	6b6f      	li	v1,111
411b9826:	0000      	addiu	s0,sp,0
411b9828:	6f6d      	li	a3,109
411b982a:	6964      	li	s1,100
411b982c:	7966      	sd	v1,48(s1)
411b982e:	6220      	sw	ra,128(sp)
411b9830:	656c      	move	t3,a0
411b9832:	6e20      	li	a2,32
411b9834:	6d61      	li	a1,97
411b9836:	2065      	beqz	s0,411b9902 <att_record_filename+0x42>
411b9838:	6166      	btnez	411b9906 <att_record_filename+0x46>
411b983a:	6c69      	li	a0,105
411b983c:	6465      	restore	40,ra,s0
411b983e:	0000      	addiu	s0,sp,0
411b9840:	8fdd      	lh	a2,58(a3)
411b9842:	bfc3      	lwu	a2,12(a3)
411b9844:	88d5      	lh	a2,42(s0)
411b9846:	bfc3      	lwu	a2,12(a3)
411b9848:	8b89      	lh	a0,18(v1)
411b984a:	bfc3      	lwu	a2,12(a3)
411b984c:	8dc9      	lh	a2,18(a1)
411b984e:	bfc3      	lwu	a2,12(a3)
411b9850:	a100      	lbu	s0,0(s1)
411b9852:	9fc3      	lw	a2,12(a3)
411b9854:	9b41      	lw	v0,4(v1)
411b9856:	41cb      	addiu	a2,s1,-5

411b9858 <act_test_modify_bt_ble_name>:
411b9858:	64f5      	save	40,ra,s0-s1

test_result_e act_test_modify_bt_ble_name(void *arg_buffer)
{
411b985a:	b317      	lw	v1,411b98b4 <act_test_modify_bt_ble_name+0x5c>
    int ret_val;

    nvram_param_rw_t param_rw;
    
    if(g_support_norflash_wp == TRUE)
411b985c:	6724      	move	s1,a0
411b985e:	a340      	lbu	v0,0(v1)
411b9860:	7201      	cmpi	v0,1
411b9862:	6020      	bteqz	411b98a4 <act_test_modify_bt_ble_name+0x4c>
411b9864:	6b02      	li	v1,2
    {
        base_set_disable_write_protect();        
    }    

    ble_name_arg_t *ble_name_arg = (ble_name_arg_t *) arg_buffer;

    param_rw.logical_index = PARAM_BT_BLENAME;
411b9866:	67fd      	move	a3,sp
411b9868:	6d00      	li	a1,0
    param_rw.rw_len = libc_strlen(ble_name_arg->bt_ble_name) + 1;
411b986a:	b015      	lw	s0,411b98bc <act_test_modify_bt_ble_name+0x64>
411b986c:	c770      	sb	v1,16(a3)
411b986e:	6791      	move	a0,s1
411b9870:	67c5      	move	a2,a1
411b9872:	e840      	jalr	s0
411b9874:	6f03      	li	a3,3
411b9876:	42a1      	addiu	a1,v0,1
411b9878:	679d      	move	a0,sp
411b987a:	b210      	lw	v0,411b98b8 <act_test_modify_bt_ble_name+0x60>
    param_rw.rw_buffer = ble_name_arg->bt_ble_name;

    ret_val = base_param_write(&param_rw);
411b987c:	6f06      	li	a3,6
411b987e:	c4b1      	sb	a1,17(a0)
411b9880:	d105      	sw	s1,20(sp)
411b9882:	0504      	addiu	a1,sp,16
411b9884:	6c0b      	li	a0,11
411b9886:	ea40      	jalr	v0
411b9888:	6e00      	li	a2,0
411b988a:	67dd      	move	a2,sp

    act_test_report_modify_ble_name_result(ble_name_arg, param_rw.rw_len);
411b988c:	a6b1      	lbu	a1,17(a2)
411b988e:	6702      	move	s0,v0
411b9890:	18c2 e5e2 	jal	411b9788 <act_test_report_modify_ble_name_result>
411b9894:	6791      	move	a0,s1
411b9896:	18c2 e400 	jal	411b9000 <act_test_modify_bt_vram>

    act_test_modify_bt_vram();
411b989a:	6500      	nop
411b989c:	6750      	move	v0,s0
    
    return ret_val;
}
411b989e:	ea11      	zeb	v0
411b98a0:	6475      	restore	40,ra,s0-s1
411b98a2:	e8a0      	jrc	ra
411b98a4:	6d00      	li	a1,0
411b98a6:	b005      	lw	s0,411b98b8 <act_test_modify_bt_ble_name+0x60>
411b98a8:	6c20      	li	a0,32
411b98aa:	67c5      	move	a2,a1
411b98ac:	e840      	jalr	s0
411b98ae:	6f06      	li	a3,6
411b98b0:	17d9      	b	411b9864 <act_test_modify_bt_ble_name+0xc>
411b98b2:	0000      	addiu	s0,sp,0
411b98b4:	8dc0      	lh	a2,0(a1)
411b98b6:	bfc3      	lwu	a2,12(a3)
411b98b8:	8fdd      	lh	a2,58(a3)
411b98ba:	bfc3      	lwu	a2,12(a3)
411b98bc:	88d5      	lh	a2,42(s0)
411b98be:	bfc3      	lwu	a2,12(a3)

411b98c0 <att_record_filename>:
411b98c0:	feff 0061 0074 0074 005f 0072 0065 0063     ..a.t.t._.r.e.c.
411b98d0:	006f 0072 0064 002e 0062 0069 006e 0000     o.r.d...b.i.n...
	...
Disassembly of section BANK_CONTROL_1_7:

411f9000 <dut_re_trigger_tx>:
411f9000:	64e3      	save	24,ra,s0
//const uint8 update_cmd1[] = {0x01, 0x4a, 0xfd, 0x04, 0x97, 0xf9, 0x01, 0x00};
//const uint8 update_cmd2[] = {0x01, 0x4a, 0xfd, 0x04, 0x97, 0xf8, 0x01, 0x00};

void dut_re_trigger_tx(void)
{
411f9002:	b00b      	lw	s0,411f902c <dut_re_trigger_tx+0x2c>
    //libc_print("update", 0, 0);

    bt_drv_send_data(update_cmd0, sizeof(update_cmd0));
411f9004:	6e00      	li	a2,0
411f9006:	b409      	lw	a0,411f9028 <dut_re_trigger_tx+0x28>
411f9008:	67e6      	move	a3,a2
411f900a:	e840      	jalr	s0
411f900c:	6d08      	li	a1,8
411f900e:	6e00      	li	a2,0

    bt_drv_send_data(update_cmd1, sizeof(update_cmd1));
411f9010:	b408      	lw	a0,411f9030 <dut_re_trigger_tx+0x30>
411f9012:	67e6      	move	a3,a2
411f9014:	e840      	jalr	s0
411f9016:	6d08      	li	a1,8
411f9018:	6e00      	li	a2,0

    bt_drv_send_data(update_cmd2, sizeof(update_cmd2));
411f901a:	b407      	lw	a0,411f9034 <dut_re_trigger_tx+0x34>
411f901c:	6d08      	li	a1,8
411f901e:	e840      	jalr	s0
411f9020:	67e6      	move	a3,a2
411f9022:	6463      	restore	24,ra,s0
411f9024:	e8a0      	jrc	ra
411f9026:	0000      	addiu	s0,sp,0
411f9028:	98cc      	lw	a2,48(s0)
411f902a:	411f      	daddiu	s0,s1,-1
411f902c:	8fd5      	lh	a2,42(a3)
411f902e:	bfc3      	lwu	a2,12(a3)
411f9030:	98c4      	lw	a2,16(s0)
411f9032:	411f      	daddiu	s0,s1,-1
411f9034:	98bc      	lw	a1,112(s0)
411f9036:	411f      	daddiu	s0,s1,-1

411f9038 <put_hci_data_to_ringbuf>:
411f9038:	64f4      	save	32,ra,s0-s1
}
#else
void dut_re_trigger_tx(void)
{
    //libc_print("update", 0, 0);
    att_write_hci_pkt(PKT_CFO_UPDATE_INDEX);
}
#endif

//将数据从hci buffer读取到ringbuf中
void put_hci_data_to_ringbuf(uint16 read_num, uint8 hci_overflow)
{
411f903a:	b00b      	lw	s0,411f9064 <put_hci_data_to_ringbuf+0x2c>
    uint16 data_len = g_hci_deal.get_data_len();
411f903c:	9846      	lw	v0,24(s0)
411f903e:	ea40      	jalr	v0
411f9040:	6730      	move	s1,s0
411f9042:	4918      	addiu	s1,24
411f9044:	67a2      	move	a1,v0
411f9046:	2a02      	bnez	v0,411f904c <put_hci_data_to_ringbuf+0x14>

    //if(data_len == 5)
    //{
    //    while(1);
    //}

    if (data_len > 0)
411f9048:	6474      	restore	32,ra,s0-s1
    {
        //libc_print("rev", data_len, 2);

        g_hci_event_rev_flag = TRUE;

#if 0
        if ((g_ringbuf_rw.write_ptr + data_len) > ATT_RINGBUFFER_LEN)
        {
            g_hci_deal.read_data(&g_ringbuf_rw.read_buffer[g_ringbuf_rw.write_ptr], ATT_RINGBUFFER_LEN
                    - g_ringbuf_rw.write_ptr);

            g_hci_deal.read_data(&g_ringbuf_rw.read_buffer[0], data_len - ATT_RINGBUFFER_LEN + g_ringbuf_rw.write_ptr);

            g_ringbuf_rw.write_ptr = data_len - ATT_RINGBUFFER_LEN + g_ringbuf_rw.write_ptr;
        }
        else
#endif
        {
            g_hci_deal.read_data(&g_ringbuf_rw.read_buffer[g_ringbuf_rw.write_ptr], data_len);
            //PRINT_DATA(&g_ringbuf_rw.read_buffer[g_ringbuf_rw.write_ptr], data_len);
            //g_ringbuf_rw.write_ptr += data_len;
        }

        //g_ringbuf_rw.readable_len += data_len;

        //if (g_ringbuf_rw.readable_len > ATT_RINGBUFFER_LEN)
        //{
        //    PRINT_ERR_STR("ATT buffer overflow!");
        //}
    }
}
411f904a:	e8a0      	jrc	ra
411f904c:	67d0      	move	a2,s0
411f904e:	4e0c      	addiu	a2,12
411f9050:	b706      	lw	a3,411f9068 <put_hci_data_to_ringbuf+0x30>
411f9052:	ae61      	lhu	v1,2(a2)
411f9054:	9e82      	lw	a0,8(a2)
411f9056:	6a01      	li	v0,1
411f9058:	c740      	sb	v0,0(a3)
411f905a:	9941      	lw	v0,4(s1)
411f905c:	ea40      	jalr	v0
411f905e:	e471      	addu	a0,v1
411f9060:	6474      	restore	32,ra,s0-s1
411f9062:	e8a0      	jrc	ra
411f9064:	8f84      	lh	a0,8(a3)
411f9066:	bfc3      	lwu	a2,12(a3)
411f9068:	8f80      	lh	a0,0(a3)
411f906a:	bfc3      	lwu	a2,12(a3)

411f906c <att_write_hci_pkt>:
411f906c:	64f6      	save	48,ra,s0-s1

uint32 att_write_hci_pkt(uint32 pkt_index)
{
411f906e:	b035      	lw	s0,411f9140 <att_write_hci_pkt+0xd4>
    uint32 i;
    cmd_pkt_head_t *cmd_pkt_head;
    uint8 *data_buffer;
    uint8 cmd_len;
    uint32 old_time;

    cmd_pkt_head = (cmd_pkt_head_t *) (ATT_MPDATA_TEMP_BUFFER);
411f9070:	b235      	lw	v0,411f9144 <att_write_hci_pkt+0xd8>

    data_buffer = (uint8 *) cmd_pkt_head;

    g_hci_event_rev_flag = FALSE;
411f9072:	b536      	lw	a1,411f9148 <att_write_hci_pkt+0xdc>
411f9074:	6b00      	li	v1,0
411f9076:	67d0      	move	a2,s0
411f9078:	c260      	sb	v1,0(v0)
411f907a:	1005      	b	411f9086 <att_write_hci_pkt+0x1a>
411f907c:	a861      	lhu	v1,2(s0)

    //write_time = sys_get_ab_timer();

    for (;;)
    {
        if (cmd_pkt_head->pkt_index == pkt_index)
        {
            break;
        }

        if (cmd_pkt_head->next_pkt_offset >= g_mpdata_bin_len)
411f907e:	ad42      	lhu	v0,4(a1)
411f9080:	eb43      	sltu	v1,v0
411f9082:	6015      	bteqz	411f90ae <att_write_hci_pkt+0x42>
411f9084:	e3c1      	addu	s0,v1,a2
        {
            return FALSE;
        }

        cmd_pkt_head = (cmd_pkt_head_t *) ((uint8 *) ATT_MPDATA_TEMP_BUFFER + cmd_pkt_head->next_pkt_offset);
411f9086:	a0e0      	lbu	a3,0(s0)
411f9088:	ef8e      	xor	a3,a0
411f908a:	2ff8      	bnez	a3,411f907c <att_write_hci_pkt+0x10>
411f908c:	a041      	lbu	v0,1(s0)
    }

    data_buffer = (uint8 *) ((uint8 *) cmd_pkt_head + sizeof(cmd_pkt_head_t));

    for (i = 0; i < cmd_pkt_head->total_node; i++)
411f908e:	6c00      	li	a0,0
411f9090:	4024      	addiu	s1,s0,4
411f9092:	d404      	sw	a0,16(sp)
411f9094:	2209      	beqz	v0,411f90a8 <att_write_hci_pkt+0x3c>
411f9096:	a160      	lbu	v1,0(s1)
    {
        cmd_len = *data_buffer;
411f9098:	4121      	addiu	s1,s1,1

        data_buffer++;
411f909a:	d305      	sw	v1,20(sp)
411f909c:	2b0b      	bnez	v1,411f90b4 <att_write_hci_pkt+0x48>

        if (cmd_len != 0)
411f909e:	9704      	lw	a3,16(sp)
411f90a0:	47c1      	addiu	a2,a3,1
411f90a2:	ee43      	sltu	a2,v0
411f90a4:	d604      	sw	a2,16(sp)
411f90a6:	61f7      	btnez	411f9096 <att_write_hci_pkt+0x2a>
411f90a8:	6a01      	li	v0,1
        {
            //PRINT_DATA(data_buffer, cmd_len);
            bt_drv_send_data(data_buffer, cmd_len);

            old_time = sys_get_ab_timer();

            //等待hci事件返回
            while (1)
            {
                if (g_hci_event_rev_flag == TRUE)
                {
                    g_hci_event_rev_flag = FALSE;
                    break;
                }

                if ((sys_get_ab_timer() - old_time) > 1000)
                {
                    libc_print("hci cmd timeout!", 0, 0);

                    PRINT_DATA(data_buffer, cmd_len);

                    while (1)
                        ;

                    //break;
                }
            }

            data_buffer += cmd_len;
        }
    }

    return TRUE;
411f90aa:	6476      	restore	48,ra,s0-s1
}
411f90ac:	e8a0      	jrc	ra
411f90ae:	6a00      	li	v0,0
411f90b0:	6476      	restore	48,ra,s0-s1
411f90b2:	e8a0      	jrc	ra
411f90b4:	6e00      	li	a2,0
411f90b6:	b226      	lw	v0,411f914c <att_write_hci_pkt+0xe0>
411f90b8:	67a3      	move	a1,v1
411f90ba:	67e6      	move	a3,a2
411f90bc:	ea40      	jalr	v0
411f90be:	6791      	move	a0,s1
411f90c0:	6c00      	li	a0,0
411f90c2:	b224      	lw	v0,411f9150 <att_write_hci_pkt+0xe4>
411f90c4:	67a4      	move	a1,a0
411f90c6:	67c4      	move	a2,a0
411f90c8:	ea40      	jalr	v0
411f90ca:	6f1c      	li	a3,28
411f90cc:	d206      	sw	v0,24(sp)
411f90ce:	b61e      	lw	a2,411f9144 <att_write_hci_pkt+0xd8>
411f90d0:	a6a0      	lbu	a1,0(a2)
411f90d2:	ed11      	zeb	a1
411f90d4:	7501      	cmpi	a1,1
411f90d6:	601e      	bteqz	411f9114 <att_write_hci_pkt+0xa8>
411f90d8:	6c00      	li	a0,0
411f90da:	b31e      	lw	v1,411f9150 <att_write_hci_pkt+0xe4>
411f90dc:	6f1c      	li	a3,28
411f90de:	67a4      	move	a1,a0
411f90e0:	eb40      	jalr	v1
411f90e2:	67c4      	move	a2,a0
411f90e4:	9306      	lw	v1,24(sp)
411f90e6:	e27f      	subu	a3,v0,v1
411f90e8:	f3e0 5f09 	sltiu	a3,1001
411f90ec:	61f0      	btnez	411f90ce <att_write_hci_pkt+0x62>
411f90ee:	6d00      	li	a1,0
411f90f0:	b018      	lw	s0,411f9150 <att_write_hci_pkt+0xe4>
411f90f2:	67c5      	move	a2,a1
411f90f4:	0c0c      	la	a0,411f9124 <att_write_hci_pkt+0xb8>
411f90f6:	e840      	jalr	s0
411f90f8:	6f4b      	li	a3,75
411f90fa:	6d00      	li	a1,0
411f90fc:	b315      	lw	v1,411f9150 <att_write_hci_pkt+0xe4>
411f90fe:	67c5      	move	a2,a1
411f9100:	0c0e      	la	a0,411f9138 <att_write_hci_pkt+0xcc>
411f9102:	eb40      	jalr	v1
411f9104:	6f4b      	li	a3,75
411f9106:	9505      	lw	a1,20(sp)
411f9108:	b012      	lw	s0,411f9150 <att_write_hci_pkt+0xe4>
411f910a:	6791      	move	a0,s1
411f910c:	6e03      	li	a2,3
411f910e:	e840      	jalr	s0
411f9110:	6f4b      	li	a3,75
411f9112:	17ff      	b	411f9112 <att_write_hci_pkt+0xa6>
411f9114:	b50c      	lw	a1,411f9144 <att_write_hci_pkt+0xd8>
411f9116:	6a00      	li	v0,0
411f9118:	c540      	sb	v0,0(a1)
411f911a:	9405      	lw	a0,20(sp)
411f911c:	a041      	lbu	v0,1(s0)
411f911e:	e185      	addu	s1,a0
411f9120:	17be      	b	411f909e <att_write_hci_pkt+0x32>
411f9122:	0000      	addiu	s0,sp,0
411f9124:	6368      	addiu	sp,832
411f9126:	2069      	beqz	s0,411f91fa <att_cfo_test_tx_begin+0x9a>
411f9128:	6d63      	li	a1,99
411f912a:	2064      	beqz	s0,411f91f4 <att_cfo_test_tx_begin+0x94>
411f912c:	6974      	li	s1,116
411f912e:	656d      	move	t3,a1
411f9130:	756f      	cmpi	a1,111
411f9132:	2174      	beqz	s1,411f921c <att_cfo_test_tx_begin+0xbc>
411f9134:	0000      	addiu	s0,sp,0
411f9136:	0000      	addiu	s0,sp,0
411f9138:	643c      	restore	96,s0-s1
411f913a:	7461      	cmpi	a0,97
411f913c:	3e61      	ld	v1,8(a2)
411f913e:	0020      	addiu	s0,sp,128
411f9140:	a608      	lbu	s0,8(a2)
411f9142:	9fc3      	lw	a2,12(a3)
411f9144:	8f80      	lh	a0,0(a3)
411f9146:	bfc3      	lwu	a2,12(a3)
411f9148:	8f84      	lh	a0,8(a3)
411f914a:	bfc3      	lwu	a2,12(a3)
411f914c:	8fd5      	lh	a2,42(a3)
411f914e:	bfc3      	lwu	a2,12(a3)
411f9150:	88dd      	lh	a2,58(s0)
411f9152:	bfc3      	lwu	a2,12(a3)

411f9154 <libc_abs>:
411f9154:	5401      	slti	a0,1

static uint32 libc_abs(int32 value)
{
    if (value > 0)
411f9156:	6744      	move	v0,a0
    {
        return value;
411f9158:	6101      	btnez	411f915c <libc_abs+0x8>
411f915a:	e8a0      	jrc	ra
    }
    else
    {
        return (0 - value);
    }
}
411f915c:	e820      	jr	ra
411f915e:	ea8b      	neg	v0,a0

411f9160 <att_cfo_test_tx_begin>:
411f9160:	64f8      	save	64,ra,s0-s1

uint32 att_cfo_test_tx_begin(mp_test_arg_t *mp_arg)
{
411f9162:	b137      	lw	s1,411f923c <att_cfo_test_tx_begin+0xdc>
    uint32 ret_val;

    cfo_param_t cfo_param;

    libc_memset(&cfo_param, 0, sizeof(cfo_param));
411f9164:	6704      	move	s0,a0
411f9166:	6d00      	li	a1,0
411f9168:	0404      	addiu	a0,sp,16
411f916a:	6e20      	li	a2,32
411f916c:	e940      	jalr	s1
411f916e:	6f01      	li	a3,1
411f9170:	6d00      	li	a1,0

    cfo_param.ic_type = MP_ICTYPE;
411f9172:	67dd      	move	a2,sp
411f9174:	c6b0      	sb	a1,16(a2)
411f9176:	a060      	lbu	v1,0(s0)
    cfo_param.channel = mp_arg->cfo_channel_low;
411f9178:	b032      	lw	s0,411f9240 <att_cfo_test_tx_begin+0xe0>
    cfo_param.tx_gain_idx = MP_TX_GAIN_IDX;
    cfo_param.tx_gain_val = MP_TX_GAIN_VAL;
    cfo_param.payload = PAYLOADTYPE_SET;
    cfo_param.pkt_type = PKTTYPE_SET;
    cfo_param.tx_dac = MP_TX_DAC;
    cfo_param.whitening_cv = WHITENCOEFF_SET;
    cfo_param.pkt_header = PKTHEADER_SET;
    cfo_param.hit_target_l = HIT_ADDRESS_SET_L;
411f917a:	679d      	move	a0,sp
411f917c:	d007      	sw	s0,28(sp)
411f917e:	b032      	lw	s0,411f9244 <att_cfo_test_tx_begin+0xe4>
    cfo_param.hit_target_h = HIT_ADDRESS_SET_H;
    cfo_param.sut_state = g_SUT_state;
411f9180:	c471      	sb	v1,17(a0)
411f9182:	6a32      	li	v0,50
411f9184:	ea4b      	neg	v0
411f9186:	679d      	move	a0,sp
411f9188:	6907      	li	s1,7
411f918a:	c453      	sb	v0,19(a0)
411f918c:	6f13      	li	a3,19
411f918e:	6e7f      	li	a2,127
411f9190:	f222 6b14 	li	v1,4660
411f9194:	a040      	lbu	v0,0(s0)
411f9196:	c432      	sb	s1,18(a0)
411f9198:	c434      	sb	s1,20(a0)
411f919a:	c4f6      	sb	a3,22(a0)
411f919c:	c4d7      	sb	a2,23(a0)
411f919e:	cc6c      	sh	v1,24(a0)
411f91a0:	6f00      	li	a3,0
411f91a2:	6b02      	li	v1,2
    cfo_param.report_interval = MP_REPORT_RX_INTERVAL;
    cfo_param.skip_report_count = MP_SKIP_PKT_NUM;
    cfo_param.once_report_pkts = MP_ONCE_REPORT_MIN_PKT_NUM;
    cfo_param.report_timeout = MP_REPORT_TIMEOUT;
411f91a4:	6901      	li	s1,1
411f91a6:	6e08      	li	a2,8
411f91a8:	f020 c444 	sb	v0,36(a0)
411f91ac:	f020 c468 	sb	v1,40(a0)
411f91b0:	c4b5      	sb	a1,21(a0)
411f91b2:	f020 c425 	sb	s1,37(a0)
411f91b6:	f020 c4e6 	sb	a3,38(a0)
411f91ba:	f020 c4c7 	sb	a2,39(a0)
411f91be:	4082      	addiu	a0,s0,2

    if (g_add_cfo_result_flag == TRUE)
411f91c0:	a440      	lbu	v0,0(a0)
411f91c2:	d708      	sw	a3,32(sp)
411f91c4:	7201      	cmpi	v0,1
411f91c6:	4061      	addiu	v1,s0,1
411f91c8:	6106      	btnez	411f91d6 <att_cfo_test_tx_begin+0x76>
411f91ca:	a340      	lbu	v0,0(v1)
    {
        if (g_cfo_return_num < 30)
411f91cc:	5a1e      	sltiu	v0,30
411f91ce:	6002      	bteqz	411f91d4 <att_cfo_test_tx_begin+0x74>
411f91d0:	4a0a      	addiu	v0,10
        {
            //扩大样本点,增加测试的准确度
            g_cfo_return_num += 10;
411f91d2:	c340      	sb	v0,0(v1)
411f91d4:	c4a0      	sb	a1,0(a0)
        }

        g_add_cfo_result_flag = FALSE;
411f91d6:	a3c0      	lbu	a2,0(v1)
    }

    cfo_param.recv_cfo_count = g_cfo_return_num;
411f91d8:	679d      	move	a0,sp
411f91da:	f020 c4c9 	sb	a2,41(a0)
411f91de:	b118      	lw	s1,411f923c <att_cfo_test_tx_begin+0xdc>
    //cfo_param.sut_download_patch = mp_arg->cfo_force_sut_init;

    libc_memcpy((uint8 *) (STUB_ATT_RW_TEMP_BUFFER + sizeof(stub_ext_cmd_t)), &cfo_param, sizeof(cfo_param));
411f91e0:	b41a      	lw	a0,411f9248 <att_cfo_test_tx_begin+0xe8>
411f91e2:	6f00      	li	a3,0
411f91e4:	0504      	addiu	a1,sp,16
411f91e6:	e940      	jalr	s1
411f91e8:	6e20      	li	a2,32
411f91ea:	b619      	lw	a2,411f924c <att_cfo_test_tx_begin+0xec>

    ret_val = att_write_data(STUB_CMD_ATT_CFO_TX_BEGIN, sizeof(cfo_param_t), STUB_ATT_RW_TEMP_BUFFER);
411f91ec:	b219      	lw	v0,411f9250 <att_cfo_test_tx_begin+0xf0>
411f91ee:	f440 6c16 	li	a0,1110
411f91f2:	ea40      	jalr	v0
411f91f4:	6d20      	li	a1,32
411f91f6:	b714      	lw	a3,411f9244 <att_cfo_test_tx_begin+0xe4>

    if (g_SUT_state == 1)
411f91f8:	6722      	move	s1,v0
411f91fa:	a7a0      	lbu	a1,0(a3)
411f91fc:	7501      	cmpi	a1,1
411f91fe:	600f      	bteqz	411f921e <att_cfo_test_tx_begin+0xbe>
411f9200:	2107      	beqz	s1,411f9210 <att_cfo_test_tx_begin+0xb0>
    {
        att_write_hci_pkt(PKT_CFO_BEGINE_INDEX);

        //dut_re_trigger_tx();

        g_update_timer_id = sys_set_irq_timer1(dut_re_trigger_tx, 1000);
    }

    if (ret_val == 0)
411f9202:	a0a0      	lbu	a1,0(s0)
    {
        att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);
    }

    if (g_SUT_state == 0)
411f9204:	2d02      	bnez	a1,411f920a <att_cfo_test_tx_begin+0xaa>
411f9206:	6f01      	li	a3,1
    {
        g_SUT_state = 1;
411f9208:	c0e0      	sb	a3,0(s0)
411f920a:	6a01      	li	v0,1
    }

    //libc_print("--BTTxbegin", 0, 0);

    return TRUE;
}
411f920c:	6478      	restore	64,ra,s0-s1
411f920e:	e8a0      	jrc	ra
411f9210:	b60f      	lw	a2,411f9248 <att_cfo_test_tx_begin+0xe8>
411f9212:	b213      	lw	v0,411f925c <att_cfo_test_tx_begin+0xfc>
411f9214:	f4e0 6c1e 	li	a0,1278
411f9218:	ea40      	jalr	v0
411f921a:	67b1      	move	a1,s1
411f921c:	17f2      	b	411f9202 <att_cfo_test_tx_begin+0xa2>
411f921e:	18e2 e41b 	jal	411f906c <att_write_hci_pkt>
411f9222:	6c00      	li	a0,0
411f9224:	b40c      	lw	a0,411f9254 <att_cfo_test_tx_begin+0xf4>
411f9226:	b20d      	lw	v0,411f9258 <att_cfo_test_tx_begin+0xf8>
411f9228:	f3e0 6d08 	li	a1,1000
411f922c:	6e00      	li	a2,0
411f922e:	ea40      	jalr	v0
411f9230:	6f21      	li	a3,33
411f9232:	b305      	lw	v1,411f9244 <att_cfo_test_tx_begin+0xe4>
411f9234:	ea91      	seb	v0
411f9236:	db42      	sw	v0,8(v1)
411f9238:	29e4      	bnez	s1,411f9202 <att_cfo_test_tx_begin+0xa2>
411f923a:	17ea      	b	411f9210 <att_cfo_test_tx_begin+0xb0>
411f923c:	88d5      	lh	a2,42(s0)
411f923e:	bfc3      	lwu	a2,12(a3)
411f9240:	8b33      	lh	s1,38(v1)
411f9242:	009e      	addiu	s0,sp,632
411f9244:	8f84      	lh	a0,8(a3)
411f9246:	bfc3      	lwu	a2,12(a3)
411f9248:	a006      	lbu	s0,6(s0)
411f924a:	9fc3      	lw	a2,12(a3)
411f924c:	a000      	lbu	s0,0(s0)
411f924e:	9fc3      	lw	a2,12(a3)
411f9250:	88e5      	lh	a3,10(s0)
411f9252:	bfc3      	lwu	a2,12(a3)
411f9254:	9001      	lw	s0,4(sp)
411f9256:	411f      	daddiu	s0,s1,-1
411f9258:	88dd      	lh	a2,58(s0)
411f925a:	bfc3      	lwu	a2,12(a3)
411f925c:	890d      	lh	s0,26(s1)
411f925e:	bfc3      	lwu	a2,12(a3)

411f9260 <att_parse_cfo_result>:
411f9260:	f00e 64fa 	save	a0-a3,80,ra,s0-s1

uint32 att_parse_cfo_result(mp_test_arg_t *mp_arg, cfo_return_arg_t *cfo_return_arg, uint32 result_num,
        int32 *data_buffer)
{
411f9264:	9316      	lw	v1,88(sp)
    int32 i;
    int32 cfo_val;
    int32 pwr_val;
    int32 diff_val;
    int32 cfo_avg_val;
    int32 pwr_avg_val;
    int8 div_val;
    int32 max_cfo_val;
    int32 min_cfo_val;
    int32 cfo_val_total;
    int32 ori_cfo_val;
    int32 max_diff_val;
    int32 max_diff_index;
    int32 invalid_data_flag;

    div_val = 0;

    cfo_avg_val = 0;

    pwr_avg_val = 0;

    max_cfo_val = 0;

    min_cfo_val = 0x7fffffff;

    cfo_val_total = 0;

    //先计算总的平均值
    for (i = 0; i < result_num; i++)
411f9266:	b264      	lw	v0,411f93f4 <att_parse_cfo_result+0x194>
411f9268:	6d00      	li	a1,0
411f926a:	ed63      	sltu	a1,v1
411f926c:	67e5      	move	a3,a1
411f926e:	d505      	sw	a1,20(sp)
411f9270:	d206      	sw	v0,24(sp)
411f9272:	67c5      	move	a2,a1
411f9274:	6725      	move	s1,a1
411f9276:	6061      	bteqz	411f933a <att_parse_cfo_result+0xda>
411f9278:	9017      	lw	s0,92(sp)
411f927a:	9860      	lw	v1,0(s0)
    {
        ori_cfo_val = (int32)(data_buffer[i << 1]);
411f927c:	ec6f      	not	a0,v1

        //-1认为是非法值
        if (ori_cfo_val == -1)
411f927e:	2c03      	bnez	a0,411f9286 <att_parse_cfo_result+0x26>
411f9280:	b25d      	lw	v0,411f93f4 <att_parse_cfo_result+0x194>
        {
            data_buffer[i << 1] = INVALID_CFO_VAL;
411f9282:	d840      	sw	v0,0(s0)
411f9284:	6762      	move	v1,v0
            ori_cfo_val = INVALID_CFO_VAL;
411f9286:	9841      	lw	v0,4(s0)
        }

        pwr_val = (int32)(data_buffer[(i << 1) + 1]);
411f9288:	9414      	lw	a0,80(sp)

        cfo_val = ori_cfo_val + mp_arg->cfo_upt_offset;
411f928a:	d204      	sw	v0,16(sp)
411f928c:	9c43      	lw	v0,12(a0)
411f928e:	e271      	addu	a0,v0,v1
411f9290:	b259      	lw	v0,411f93f4 <att_parse_cfo_result+0x194>

        //print_log("cfo result num[%d]: %d hz, pwr: %d\n", i, cfo_val, pwr_val);

        if (ori_cfo_val != INVALID_CFO_VAL)
411f9292:	ea6e      	xor	v0,v1
411f9294:	2a3b      	bnez	v0,411f930c <att_parse_cfo_result+0xac>
411f9296:	2157      	beqz	s1,411f9346 <att_parse_cfo_result+0xe6>
        {
            cfo_val_total += cfo_val;
            pwr_avg_val += pwr_val;
            div_val++;
        }
        else
        {
            if (i == 0)
411f9298:	9216      	lw	v0,88(sp)
411f929a:	4121      	addiu	s1,s1,1
411f929c:	e943      	sltu	s1,v0
411f929e:	4808      	addiu	s0,8
411f92a0:	61ec      	btnez	411f927a <att_parse_cfo_result+0x1a>
411f92a2:	5505      	slti	a1,5
            {
                //cfo值非法，说明测试出现错误
                return FALSE;
            }
            else
            {
                continue;
            }
        }

        if (libc_abs(cfo_val) > max_cfo_val)
        {
            max_cfo_val = libc_abs(cfo_val);
        }

        if (libc_abs(cfo_val) < min_cfo_val)
        {
            min_cfo_val = libc_abs(cfo_val);
        }
    }

    //至少要有5组记录值
    if (div_val < MIN_RESULT_NUM)
411f92a4:	614a      	btnez	411f933a <att_parse_cfo_result+0xda>
411f92a6:	eeba      	div	zero,a2,a1
    {
        //出现多组cfo异常值，需要扩大采集的样本点
        g_add_cfo_result_flag = TRUE;
        return FALSE;
    }

    cfo_avg_val = (cfo_val_total / div_val);
411f92a8:	ee12      	mflo	a2
411f92aa:	efba      	div	zero,a3,a1
    pwr_avg_val = (pwr_avg_val / div_val);
411f92ac:	e912      	mflo	s1
411f92ae:	d10b      	sw	s1,44(sp)
411f92b0:	264d      	beqz	a2,411f934c <att_parse_cfo_result+0xec>

    //计算得到的cfo平均值不能为0,必须找到一个合适的值
    if (cfo_avg_val == 0)
411f92b2:	6a00      	li	v0,0
    {
        cfo_avg_val = (max_cfo_val + min_cfo_val) / 2;

        if ((cfo_avg_val == 0) && (max_cfo_val != 0))
        {
            cfo_avg_val = max_cfo_val;
        }
    }

    max_diff_val = 0;
411f92b4:	d208      	sw	v0,32(sp)
411f92b6:	67a2      	move	a1,v0

    invalid_data_flag = FALSE;
411f92b8:	9716      	lw	a3,88(sp)

    while (1)
    {
        //判断采样点离散程度,先找出离散程度很大的点
        for (i = 0; i < result_num; i++)
411f92ba:	6900      	li	s1,0
411f92bc:	2753      	beqz	a3,411f9364 <att_parse_cfo_result+0x104>
411f92be:	9414      	lw	a0,80(sp)
411f92c0:	9c03      	lw	s0,12(a0)
411f92c2:	d009      	sw	s0,36(sp)
411f92c4:	9017      	lw	s0,92(sp)
411f92c6:	9840      	lw	v0,0(s0)
        {
            ori_cfo_val = (int32)(data_buffer[i << 1]);
411f92c8:	9409      	lw	a0,36(sp)

            cfo_val = ori_cfo_val + mp_arg->cfo_upt_offset;
411f92ca:	b74b      	lw	a3,411f93f4 <att_parse_cfo_result+0x194>

            if (ori_cfo_val != INVALID_CFO_VAL)
411f92cc:	e44d      	addu	v1,a0,v0
411f92ce:	eaee      	xor	v0,a3
411f92d0:	220b      	beqz	v0,411f92e8 <att_parse_cfo_result+0x88>
411f92d2:	e673      	subu	a0,a2,v1
            {

                diff_val = libc_abs(cfo_avg_val - cfo_val);
411f92d4:	d50d      	sw	a1,52(sp)
411f92d6:	18e2 e455 	jal	411f9154 <libc_abs>
411f92da:	d60e      	sw	a2,56(sp)
411f92dc:	950d      	lw	a1,52(sp)

                if (diff_val > max_diff_val)
411f92de:	960e      	lw	a2,56(sp)
411f92e0:	ed42      	slt	a1,v0
411f92e2:	6002      	bteqz	411f92e8 <att_parse_cfo_result+0x88>
411f92e4:	d107      	sw	s1,28(sp)
                {
                    max_diff_index = i;
411f92e6:	67a2      	move	a1,v0
                    max_diff_val = diff_val;
411f92e8:	9316      	lw	v1,88(sp)
411f92ea:	4121      	addiu	s1,s1,1
411f92ec:	e963      	sltu	s1,v1
411f92ee:	4808      	addiu	s0,8
411f92f0:	61ea      	btnez	411f92c6 <att_parse_cfo_result+0x66>
411f92f2:	f629 5501 	slti	a1,20001
                }
            }
        }

        //判断离散程度最大的点是否超过限制，如果超过限制，剔除该点，重复计算下一点
        if (max_diff_val > MAX_CFO_DIFF_VAL)
411f92f6:	6136      	btnez	411f9364 <att_parse_cfo_result+0x104>
411f92f8:	9307      	lw	v1,28(sp)
        {
            //print_log("CFO INVALID[%d]: %d hz\n", max_diff_index, data_buffer[max_diff_index << 1]
            //        + mp_arg->cfo_upt_offset);

            //标记该点为无效点
            data_buffer[max_diff_index << 1] = INVALID_CFO_VAL;
411f92fa:	9417      	lw	a0,92(sp)
411f92fc:	326c      	sll	v0,v1,3
411f92fe:	b73e      	lw	a3,411f93f4 <att_parse_cfo_result+0x194>
411f9300:	e295      	addu	a1,v0,a0
411f9302:	dde0      	sw	a3,0(a1)
411f9304:	6901      	li	s1,1

            invalid_data_flag = TRUE;
411f9306:	6d00      	li	a1,0

            max_diff_val = 0;
411f9308:	d108      	sw	s1,32(sp)
411f930a:	17d6      	b	411f92b8 <att_parse_cfo_result+0x58>
411f930c:	9304      	lw	v1,16(sp)
411f930e:	4541      	addiu	v0,a1,1
411f9310:	e77d      	addu	a3,v1
411f9312:	6762      	move	v1,v0
411f9314:	e699      	addu	a2,a0
411f9316:	eb91      	seb	v1
411f9318:	d60e      	sw	a2,56(sp)
411f931a:	d70f      	sw	a3,60(sp)
411f931c:	18e2 e455 	jal	411f9154 <libc_abs>
411f9320:	d30d      	sw	v1,52(sp)
411f9322:	9505      	lw	a1,20(sp)
411f9324:	960e      	lw	a2,56(sp)
411f9326:	ed43      	sltu	a1,v0
411f9328:	970f      	lw	a3,60(sp)
411f932a:	950d      	lw	a1,52(sp)
411f932c:	6001      	bteqz	411f9330 <att_parse_cfo_result+0xd0>
411f932e:	d205      	sw	v0,20(sp)
411f9330:	9406      	lw	a0,24(sp)
411f9332:	ea83      	sltu	v0,a0
411f9334:	60b1      	bteqz	411f9298 <att_parse_cfo_result+0x38>
411f9336:	d206      	sw	v0,24(sp)
411f9338:	17af      	b	411f9298 <att_parse_cfo_result+0x38>
411f933a:	b630      	lw	a2,411f93f8 <att_parse_cfo_result+0x198>
        }
        else
        {
            break;
        }
    }

    //存在无效点需要重新计算cfo平均值
    if (invalid_data_flag == TRUE)
    {
        cfo_val_total = 0;
        pwr_avg_val = 0;

        div_val = 0;

        for (i = 0; i < result_num; i++)
        {
            ori_cfo_val = (int32)(data_buffer[i << 1]);

            cfo_val = ori_cfo_val + mp_arg->cfo_upt_offset;

            if (ori_cfo_val != INVALID_CFO_VAL)
            {
                cfo_val_total += cfo_val;
                pwr_avg_val += pwr_val;
                div_val++;
            }
            else
            {
                continue;
            }

            if (libc_abs(cfo_val) > max_cfo_val)
            {
                max_cfo_val = libc_abs(cfo_val);
            }

            if (libc_abs(cfo_val) < min_cfo_val)
            {
                min_cfo_val = libc_abs(cfo_val);
            }
        }

        //至少要有5组记录值
        if (div_val < MIN_RESULT_NUM)
        {
            //出现多组cfo异常值，需要扩大采集的样本点
            g_add_cfo_result_flag = TRUE;
411f933c:	6f01      	li	a3,1
411f933e:	6a00      	li	v0,0
            return FALSE;
411f9340:	c6e2      	sb	a3,2(a2)
411f9342:	647a      	restore	80,ra,s0-s1
        }

        cfo_avg_val = (cfo_val_total / div_val);
        pwr_avg_val = (pwr_avg_val / div_val);

        //计算得到的cfo平均值不能为0,必须找到一个合适的值
        if (cfo_avg_val == 0)
        {
            cfo_avg_val = (max_cfo_val + min_cfo_val) / 2;

            if ((cfo_avg_val == 0) && (max_cfo_val != 0))
            {
                cfo_avg_val = max_cfo_val;
            }
        }
    }

    cfo_return_arg->cfo_val = cfo_avg_val;
    cfo_return_arg->pwr_val = pwr_avg_val;

    return TRUE;
}
411f9344:	e8a0      	jrc	ra
411f9346:	6751      	move	v0,s1
411f9348:	647a      	restore	80,ra,s0-s1
411f934a:	e8a0      	jrc	ra
411f934c:	9305      	lw	v1,20(sp)
411f934e:	9406      	lw	a0,24(sp)
411f9350:	e39d      	addu	a3,v1,a0
411f9352:	f7c0 36e2 	srl	a2,a3,31
411f9356:	e7d5      	addu	a1,a3,a2
411f9358:	36a7      	sra	a2,a1,1
411f935a:	2eab      	bnez	a2,411f92b2 <att_parse_cfo_result+0x52>
411f935c:	9705      	lw	a3,20(sp)
411f935e:	27a9      	beqz	a3,411f92b2 <att_parse_cfo_result+0x52>
411f9360:	67c7      	move	a2,a3
411f9362:	17a7      	b	411f92b2 <att_parse_cfo_result+0x52>
411f9364:	9508      	lw	a1,32(sp)
411f9366:	253f      	beqz	a1,411f93e6 <att_parse_cfo_result+0x186>
411f9368:	9416      	lw	a0,88(sp)
411f936a:	6b00      	li	v1,0
411f936c:	eb83      	sltu	v1,a0
411f936e:	67c3      	move	a2,v1
411f9370:	67a3      	move	a1,v1
411f9372:	60e3      	bteqz	411f933a <att_parse_cfo_result+0xda>
411f9374:	9114      	lw	s1,80(sp)
411f9376:	9903      	lw	s0,12(s1)
411f9378:	9117      	lw	s1,92(sp)
411f937a:	d00a      	sw	s0,40(sp)
411f937c:	6704      	move	s0,a0
411f937e:	1003      	b	411f9386 <att_parse_cfo_result+0x126>
411f9380:	400f      	addiu	s0,s0,-1
411f9382:	4908      	addiu	s1,8
411f9384:	201d      	beqz	s0,411f93c0 <att_parse_cfo_result+0x160>
411f9386:	9940      	lw	v0,0(s1)
411f9388:	970a      	lw	a3,40(sp)
411f938a:	e751      	addu	a0,a3,v0
411f938c:	b71a      	lw	a3,411f93f4 <att_parse_cfo_result+0x194>
411f938e:	eaee      	xor	v0,a3
411f9390:	22f7      	beqz	v0,411f9380 <att_parse_cfo_result+0x120>
411f9392:	9204      	lw	v0,16(sp)
411f9394:	e69d      	addu	a3,a2,a0
411f9396:	e34d      	addu	v1,v0
411f9398:	4541      	addiu	v0,a1,1
411f939a:	67a2      	move	a1,v0
411f939c:	ed91      	seb	a1
411f939e:	d30c      	sw	v1,48(sp)
411f93a0:	d50d      	sw	a1,52(sp)
411f93a2:	18e2 e455 	jal	411f9154 <libc_abs>
411f93a6:	d70e      	sw	a3,56(sp)
411f93a8:	9605      	lw	a2,20(sp)
411f93aa:	930c      	lw	v1,48(sp)
411f93ac:	ee43      	sltu	a2,v0
411f93ae:	950d      	lw	a1,52(sp)
411f93b0:	960e      	lw	a2,56(sp)
411f93b2:	6001      	bteqz	411f93b6 <att_parse_cfo_result+0x156>
411f93b4:	d205      	sw	v0,20(sp)
411f93b6:	9406      	lw	a0,24(sp)
411f93b8:	ea83      	sltu	v0,a0
411f93ba:	60e2      	bteqz	411f9380 <att_parse_cfo_result+0x120>
411f93bc:	d206      	sw	v0,24(sp)
411f93be:	17e0      	b	411f9380 <att_parse_cfo_result+0x120>
411f93c0:	5505      	slti	a1,5
411f93c2:	61bb      	btnez	411f933a <att_parse_cfo_result+0xda>
411f93c4:	eeba      	div	zero,a2,a1
411f93c6:	ee12      	mflo	a2
411f93c8:	ebba      	div	zero,v1,a1
411f93ca:	ed12      	mflo	a1
411f93cc:	d50b      	sw	a1,44(sp)
411f93ce:	2e0b      	bnez	a2,411f93e6 <att_parse_cfo_result+0x186>
411f93d0:	9705      	lw	a3,20(sp)
411f93d2:	9406      	lw	a0,24(sp)
411f93d4:	e799      	addu	a2,a3,a0
411f93d6:	f7c0 33c2 	srl	v1,a2,31
411f93da:	e669      	addu	v0,a2,v1
411f93dc:	3647      	sra	a2,v0,1
411f93de:	2e03      	bnez	a2,411f93e6 <att_parse_cfo_result+0x186>
411f93e0:	9705      	lw	a3,20(sp)
411f93e2:	2701      	beqz	a3,411f93e6 <att_parse_cfo_result+0x186>
411f93e4:	67c7      	move	a2,a3
411f93e6:	9515      	lw	a1,84(sp)
411f93e8:	920b      	lw	v0,44(sp)
411f93ea:	ddc1      	sw	a2,4(a1)
411f93ec:	dd42      	sw	v0,8(a1)
411f93ee:	6a01      	li	v0,1
411f93f0:	647a      	restore	80,ra,s0-s1
411f93f2:	e8a0      	jrc	ra
411f93f4:	ffff      	daddiu	a3,sp,124
411f93f6:	7fff      	sd	a3,248(a3)
411f93f8:	8f84      	lh	a0,8(a3)
411f93fa:	bfc3      	lwu	a2,12(a3)

411f93fc <att_cfo_test_tx_stop>:
411f93fc:	f028 64f2 	save	a0-a1,272,ra,s0-s1
uint32 att_cfo_test_tx_stop(mp_test_arg_t *mp_arg, cfo_return_arg_t *cfo_return_arg)
{
411f9400:	b023      	lw	s0,411f948c <att_cfo_test_tx_stop+0x90>
    uint32 ret_val;
    uint8 *pdata;
    uint32 read_len;
    int32 cfo_temp_buffer[30* 2 ]; //最多30组记录，每组记录8个字节

    ret_val = att_write_data(STUB_CMD_ATT_CFO_TX_STOP, 0, STUB_ATT_RW_TEMP_BUFFER);
411f9402:	b622      	lw	a2,411f9488 <att_cfo_test_tx_stop+0x8c>
411f9404:	f440 6c17 	li	a0,1111
411f9408:	e840      	jalr	s0
411f940a:	6d00      	li	a1,0
411f940c:	b121      	lw	s1,411f9490 <att_cfo_test_tx_stop+0x94>

    if(g_SUT_state == 1)
411f940e:	6702      	move	s0,v0
411f9410:	a140      	lbu	v0,0(s1)
411f9412:	7201      	cmpi	v0,1
411f9414:	6009      	bteqz	411f9428 <att_cfo_test_tx_stop+0x2c>
411f9416:	200c      	beqz	s0,411f9430 <att_cfo_test_tx_stop+0x34>
    {
        att_write_hci_pkt(PKT_CFO_STOP_INDEX);
    }

    if(ret_val == 0)
411f9418:	b11e      	lw	s1,411f9490 <att_cfo_test_tx_stop+0x94>
    {
        read_len = g_cfo_return_num * 2 * 4;

        ret_val = att_read_data(STUB_CMD_ATT_CFO_TX_STOP, read_len, STUB_ATT_RW_TEMP_BUFFER);

        if((ret_val == 0) && (g_SUT_state == 1))
        {
            pdata = (uint8 *)STUB_ATT_RW_TEMP_BUFFER;

            libc_memcpy(cfo_temp_buffer, &pdata[6], g_cfo_return_num * 8);

            ret_val = att_parse_cfo_result(mp_arg, cfo_return_arg, g_cfo_return_num, cfo_temp_buffer);
        }
    }

    if (g_update_timer_id != -1)
411f941a:	9982      	lw	a0,8(s1)
411f941c:	eb8f      	not	v1,a0
411f941e:	2b27      	bnez	v1,411f946e <att_cfo_test_tx_stop+0x72>
411f9420:	6750      	move	v0,s0
    {
        //libc_print("kill timer", 0, 0);
        sys_del_irq_timer1(g_update_timer_id);
        g_update_timer_id = -1;
    }

    return ret_val;
}
411f9422:	f020 6472 	restore	272,ra,s0-s1
411f9426:	e8a0      	jrc	ra
411f9428:	18e2 e41b 	jal	411f906c <att_write_hci_pkt>
411f942c:	6c01      	li	a0,1
411f942e:	28f4      	bnez	s0,411f9418 <att_cfo_test_tx_stop+0x1c>
411f9430:	b31c      	lw	v1,411f94a0 <att_cfo_test_tx_stop+0xa4>
411f9432:	b616      	lw	a2,411f9488 <att_cfo_test_tx_stop+0x8c>
411f9434:	a3a0      	lbu	a1,0(v1)
411f9436:	b218      	lw	v0,411f9494 <att_cfo_test_tx_stop+0x98>
411f9438:	f440 6c17 	li	a0,1111
411f943c:	ea40      	jalr	v0
411f943e:	35ac      	sll	a1,3
411f9440:	6702      	move	s0,v0
411f9442:	2aea      	bnez	v0,411f9418 <att_cfo_test_tx_stop+0x1c>
411f9444:	a180      	lbu	a0,0(s1)
411f9446:	7401      	cmpi	a0,1
411f9448:	61e7      	btnez	411f9418 <att_cfo_test_tx_stop+0x1c>
411f944a:	b516      	lw	a1,411f94a0 <att_cfo_test_tx_stop+0xa4>
411f944c:	b20f      	lw	v0,411f9488 <att_cfo_test_tx_stop+0x8c>
411f944e:	a5c0      	lbu	a2,0(a1)
411f9450:	b112      	lw	s1,411f9498 <att_cfo_test_tx_stop+0x9c>
411f9452:	67f0      	move	a3,s0
411f9454:	0404      	addiu	a0,sp,16
411f9456:	42a6      	addiu	a1,v0,6
411f9458:	e940      	jalr	s1
411f945a:	36cc      	sll	a2,3
411f945c:	b711      	lw	a3,411f94a0 <att_cfo_test_tx_stop+0xa4>
411f945e:	9444      	lw	a0,272(sp)
411f9460:	a7c0      	lbu	a2,0(a3)
411f9462:	9545      	lw	a1,276(sp)
411f9464:	18e2 e498 	jal	411f9260 <att_parse_cfo_result>
411f9468:	0704      	addiu	a3,sp,16
411f946a:	6702      	move	s0,v0
411f946c:	17d5      	b	411f9418 <att_cfo_test_tx_stop+0x1c>
411f946e:	6d00      	li	a1,0
411f9470:	b20b      	lw	v0,411f949c <att_cfo_test_tx_stop+0xa0>
411f9472:	67c5      	move	a2,a1
411f9474:	ea40      	jalr	v0
411f9476:	6f22      	li	a3,34
411f9478:	6f01      	li	a3,1
411f947a:	eceb      	neg	a0,a3
411f947c:	6750      	move	v0,s0
411f947e:	d982      	sw	a0,8(s1)
411f9480:	f020 6472 	restore	272,ra,s0-s1
411f9484:	e8a0      	jrc	ra
411f9486:	0000      	addiu	s0,sp,0
411f9488:	a000      	lbu	s0,0(s0)
411f948a:	9fc3      	lw	a2,12(a3)
411f948c:	88e5      	lh	a3,10(s0)
411f948e:	bfc3      	lwu	a2,12(a3)
411f9490:	8f84      	lh	a0,8(a3)
411f9492:	bfc3      	lwu	a2,12(a3)
411f9494:	890d      	lh	s0,26(s1)
411f9496:	bfc3      	lwu	a2,12(a3)
411f9498:	88d5      	lh	a2,42(s0)
411f949a:	bfc3      	lwu	a2,12(a3)
411f949c:	88dd      	lh	a2,58(s0)
411f949e:	bfc3      	lwu	a2,12(a3)
411f94a0:	8f85      	lh	a0,10(a3)
411f94a2:	bfc3      	lwu	a2,12(a3)

411f94a4 <att_get_cfo_val>:
411f94a4:	f00c 64f7 	save	a0-a2,56,ra,s0-s1

int32 att_get_cfo_val(uint32 index, mp_test_arg_t *mp_arg, cfo_return_arg_t *cfo_return_arg, uint32 test_mode)
{
411f94a8:	3296      	srl	v0,a0,5
    uint8 bc_val;
    uint8 tc_val;
    uint16 cap_val;
    int32 ret_val;

    bc_val = (index >> 5);
411f94aa:	6762      	move	v1,v0
411f94ac:	eb11      	zeb	v1
411f94ae:	5b06      	sltiu	v1,6

    switch (bc_val)
411f94b0:	600d      	bteqz	411f94cc <att_get_cfo_val+0x28>
411f94b2:	0d04      	la	a1,411f94c0 <att_get_cfo_val+0x1c>
411f94b4:	3764      	sll	a3,v1,1
411f94b6:	e7b9      	addu	a2,a3,a1
411f94b8:	8e80      	lh	a0,0(a2)
411f94ba:	e4ad      	addu	v1,a0,a1
411f94bc:	eb80      	jrc	v1
411f94be:	0000      	addiu	s0,sp,0
411f94c0:	00df      	addiu	s0,sp,892
411f94c2:	000d      	addiu	s0,sp,52
411f94c4:	00e5      	addiu	s0,sp,916
411f94c6:	00e9      	addiu	s0,sp,932
411f94c8:	00ef      	addiu	s0,sp,956
411f94ca:	00d9      	addiu	s0,sp,868
411f94cc:	6b01      	li	v1,1
    {
        case CAP_INDEX_0:
        bc_val = 0;
        break;

        case CAP_INDEX_2:
        bc_val = 2;
        break;

        case CAP_INDEX_3:
        bc_val = 3;
        break;

        case CAP_INDEX_4:
        bc_val = 6;
        break;

        case CAP_INDEX_5:
        bc_val = 7;
        break;

        default:
        bc_val = 1;
411f94ce:	d308      	sw	v1,32(sp)
411f94d0:	970e      	lw	a3,56(sp)
        break;
    }

    tc_val = (index & 0x1f);
411f94d2:	6a1f      	li	v0,31
411f94d4:	ef4c      	and	a3,v0
411f94d6:	d706      	sw	a3,24(sp)
411f94d8:	9608      	lw	a2,32(sp)

    cap_val = ((bc_val << 5) | tc_val);
411f94da:	9506      	lw	a1,24(sp)
411f94dc:	34d4      	sll	a0,a2,5
411f94de:	ecad      	or	a0,a1
411f94e0:	3380      	sll	v1,a0,8

    cap_val = (cap_val | (cap_val << 8));
411f94e2:	eb8d      	or	v1,a0
411f94e4:	b24f      	lw	v0,411f9620 <.L111+0xda>

    // if(test_mode == 0)
    {
        sys_set_hosc_param(cap_val);
411f94e6:	d309      	sw	v1,36(sp)
411f94e8:	6783      	move	a0,v1
411f94ea:	6d07      	li	a1,7
411f94ec:	6e00      	li	a2,0
411f94ee:	ea40      	jalr	v0
411f94f0:	6f36      	li	a3,54
411f94f2:	1029      	b	411f9546 <.L111>
411f94f4:	83d1      	lb	a2,17(v1)
    }
    retry: att_cfo_test_tx_begin(mp_arg);

    ret_val = att_cfo_test_tx_stop(mp_arg, cfo_return_arg);

    /** 判断获取的RSSI是否在正常范围内
    */
    if(mp_arg->pwr_test == 1)
    {
        if((cfo_return_arg->pwr_val < mp_arg->pwr_threshold_low) ||
411f94f6:	9310      	lw	v1,64(sp)
411f94f8:	9ba2      	lw	a1,8(v1)
411f94fa:	edc2      	slt	a1,a2
411f94fc:	6104      	btnez	411f9506 <att_get_cfo_val+0x62>
411f94fe:	920f      	lw	v0,60(sp)
411f9500:	82f2      	lb	a3,18(v0)
411f9502:	efa2      	slt	a3,a1
411f9504:	602c      	bteqz	411f955e <.L111+0x18>
411f9506:	b148      	lw	s1,411f9624 <.L111+0xde>
            (cfo_return_arg->pwr_val > mp_arg->pwr_threshold_high))
        {
            print_log("RSSI is wrong : %d", cfo_return_arg->pwr_val);
411f9508:	0c2b      	la	a0,411f95b4 <.L111+0x6e>
411f950a:	e940      	jalr	s1
411f950c:	6800      	li	s0,0
411f950e:	d007      	sw	s0,28(sp)
    		ret_val = FALSE;
411f9510:	b046      	lw	s0,411f9628 <.L111+0xe2>
        }
    }
    

    if (ret_val == FALSE)
    {
        if (g_cfo_test_retry_num < CFO_TEST_RETRY_NUM)
411f9512:	4023      	addiu	s1,s0,3
411f9514:	a180      	lbu	a0,0(s1)
411f9516:	5c03      	sltiu	a0,3
411f9518:	6039      	bteqz	411f958c <.L111+0x46>
411f951a:	b243      	lw	v0,411f9624 <.L111+0xde>
        {
            print_log("retry index %d...", index);
411f951c:	0c2b      	la	a0,411f95c8 <.L111+0x82>
411f951e:	ea40      	jalr	v0
411f9520:	950e      	lw	a1,56(sp)
411f9522:	6d02      	li	a1,2

            //先stop
            g_SUT_state = 2;
411f9524:	940f      	lw	a0,60(sp)

            att_cfo_test_tx_begin(mp_arg);
411f9526:	18e2 e458 	jal	411f9160 <att_cfo_test_tx_begin>
411f952a:	c0a0      	sb	a1,0(s0)
411f952c:	940f      	lw	a0,60(sp)

            att_cfo_test_tx_stop(mp_arg, cfo_return_arg);
411f952e:	18e2 e4ff 	jal	411f93fc <att_cfo_test_tx_stop>
411f9532:	9510      	lw	a1,64(sp)
411f9534:	675d      	move	v0,sp

            g_SUT_state = 0;
411f9536:	a2fc      	lbu	a3,28(v0)
411f9538:	940f      	lw	a0,60(sp)

            //强制SUT重新初始化
            att_cfo_test_tx_begin(mp_arg);
411f953a:	18e2 e458 	jal	411f9160 <att_cfo_test_tx_begin>
411f953e:	c0e0      	sb	a3,0(s0)
411f9540:	a160      	lbu	v1,0(s1)

            g_cfo_test_retry_num++;
411f9542:	43c1      	addiu	a2,v1,1
411f9544:	c1c0      	sb	a2,0(s1)

411f9546 <.L111>:
411f9546:	18e2 e458 	jal	411f9160 <att_cfo_test_tx_begin>
411f954a:	940f      	lw	a0,60(sp)
411f954c:	940f      	lw	a0,60(sp)
411f954e:	18e2 e4ff 	jal	411f93fc <att_cfo_test_tx_stop>
411f9552:	9510      	lw	a1,64(sp)
411f9554:	930f      	lw	v1,60(sp)
411f9556:	d207      	sw	v0,28(sp)
411f9558:	a390      	lbu	a0,16(v1)
411f955a:	7401      	cmpi	a0,1
411f955c:	60cb      	bteqz	411f94f4 <att_get_cfo_val+0x50>
411f955e:	9507      	lw	a1,28(sp)
411f9560:	25d7      	beqz	a1,411f9510 <att_get_cfo_val+0x6c>
411f9562:	9610      	lw	a2,64(sp)

            goto retry;
        }
        else
        {
            //测试失败，重新插拔SUT
            print_log("Please re plug in SUT..\n");
        }
    }
    else
    {
        print_log("bc:%d, tc:%d, cap:0x%x, cfo:%d, pwr:%d\n", bc_val, tc_val, cap_val, cfo_return_arg->cfo_val,
411f9564:	9709      	lw	a3,36(sp)
411f9566:	9e81      	lw	a0,4(a2)
411f9568:	b22f      	lw	v0,411f9624 <.L111+0xde>
411f956a:	d404      	sw	a0,16(sp)
411f956c:	9ea2      	lw	a1,8(a2)
411f956e:	9606      	lw	a2,24(sp)
411f9570:	d505      	sw	a1,20(sp)
411f9572:	0c1b      	la	a0,411f95dc <.L111+0x96>
411f9574:	ea40      	jalr	v0
411f9576:	9508      	lw	a1,32(sp)
411f9578:	b62c      	lw	a2,411f9628 <.L111+0xe2>
                cfo_return_arg->pwr_val);
        g_cfo_test_retry_num = 0;
411f957a:	9207      	lw	v0,28(sp)
        g_add_cfo_result_flag = FALSE;
        g_cfo_return_num = MP_RETURN_RESULT_NUM;
    }

    return ret_val;
}
411f957c:	6f00      	li	a3,0
411f957e:	4662      	addiu	v1,a2,2
411f9580:	6c0a      	li	a0,10
411f9582:	c6e3      	sb	a3,3(a2)
411f9584:	c3e0      	sb	a3,0(v1)
411f9586:	c681      	sb	a0,1(a2)
411f9588:	6477      	restore	56,ra,s0-s1
411f958a:	e8a0      	jrc	ra
411f958c:	b226      	lw	v0,411f9620 <.L111+0xda>
411f958e:	0c1e      	la	a0,411f9604 <.L111+0xbe>
411f9590:	eac0      	jalrc	v0
411f9592:	9207      	lw	v0,28(sp)
411f9594:	6477      	restore	56,ra,s0-s1
411f9596:	e8a0      	jrc	ra
411f9598:	6a07      	li	v0,7
411f959a:	d208      	sw	v0,32(sp)
411f959c:	1799      	b	411f94d0 <att_get_cfo_val+0x2c>
411f959e:	6a00      	li	v0,0
411f95a0:	d208      	sw	v0,32(sp)
411f95a2:	1796      	b	411f94d0 <att_get_cfo_val+0x2c>
411f95a4:	6b02      	li	v1,2
411f95a6:	1793      	b	411f94ce <att_get_cfo_val+0x2a>
411f95a8:	6a03      	li	v0,3
411f95aa:	d208      	sw	v0,32(sp)
411f95ac:	1791      	b	411f94d0 <att_get_cfo_val+0x2c>
411f95ae:	6b06      	li	v1,6
411f95b0:	178e      	b	411f94ce <att_get_cfo_val+0x2a>
411f95b2:	0000      	addiu	s0,sp,0
411f95b4:	5352      	slti	v1,82
411f95b6:	4953      	addiu	s1,83
411f95b8:	6920      	li	s1,32
411f95ba:	2073      	beqz	s0,411f96a2 <att_cfo_test+0x36>
411f95bc:	7277      	cmpi	v0,119
411f95be:	6e6f      	li	a2,111
411f95c0:	2067      	beqz	s0,411f9690 <att_cfo_test+0x24>
411f95c2:	203a      	beqz	s0,411f9638 <read_cfo_index+0xc>
411f95c4:	6425      	restore	40,s0
411f95c6:	0000      	addiu	s0,sp,0
411f95c8:	6572      	move	s3,v0
411f95ca:	7274      	cmpi	v0,116
411f95cc:	2079      	beqz	s0,411f96c0 <att_cfo_test+0x54>
411f95ce:	6e69      	li	a2,105
411f95d0:	6564      	move	v1,a0
411f95d2:	2078      	beqz	s0,411f96c4 <att_cfo_test+0x58>
411f95d4:	6425      	restore	40,s0
411f95d6:	2e2e      	bnez	a2,411f9634 <read_cfo_index+0x8>
411f95d8:	002e      	addiu	s0,sp,184
411f95da:	0000      	addiu	s0,sp,0
411f95dc:	6362      	addiu	sp,784
411f95de:	253a      	beqz	a1,411f9654 <read_cfo_index+0x28>
411f95e0:	2c64      	bnez	a0,411f96aa <att_cfo_test+0x3e>
411f95e2:	7420      	cmpi	a0,32
411f95e4:	3a63      	ld	v1,24(v0)
411f95e6:	6425      	restore	40,s0
411f95e8:	202c      	beqz	s0,411f9642 <read_cfo_index+0x16>
411f95ea:	6163      	btnez	411f96b2 <att_cfo_test+0x46>
411f95ec:	3a70      	ld	v1,128(v0)
411f95ee:	7830      	sd	s1,128(s0)
411f95f0:	7825      	sd	s1,40(s0)
411f95f2:	202c      	beqz	s0,411f964c <read_cfo_index+0x20>
411f95f4:	6663      	0x6663
411f95f6:	3a6f      	ld	v1,120(v0)
411f95f8:	6425      	restore	40,s0
411f95fa:	202c      	beqz	s0,411f9654 <read_cfo_index+0x28>
411f95fc:	7770      	cmpi	a3,112
411f95fe:	3a72      	ld	v1,144(v0)
411f9600:	6425      	restore	40,s0
411f9602:	000a      	addiu	s0,sp,40
411f9604:	6c50      	li	a0,80
411f9606:	6165      	btnez	411f96d2 <.L129+0xc>
411f9608:	6573      	move	s3,v1
411f960a:	7220      	cmpi	v0,32
411f960c:	2065      	beqz	s0,411f96d8 <.L129+0x12>
411f960e:	6c70      	li	a0,112
411f9610:	6775      	move	v1,s5
411f9612:	6920      	li	s1,32
411f9614:	206e      	beqz	s0,411f96f2 <.L129+0x2c>
411f9616:	5553      	slti	a1,83
411f9618:	2e54      	bnez	a2,411f96c2 <att_cfo_test+0x56>
411f961a:	0a2e      	la	v0,411f96d0 <.L129+0xa>
411f961c:	0000      	addiu	s0,sp,0
411f961e:	0000      	addiu	s0,sp,0
411f9620:	88dd      	lh	a2,58(s0)
411f9622:	bfc3      	lwu	a2,12(a3)
411f9624:	9b59      	lw	v0,100(v1)
411f9626:	41cf      	addiu	a2,s1,-1
411f9628:	8f84      	lh	a0,8(a3)
411f962a:	bfc3      	lwu	a2,12(a3)

411f962c <read_cfo_index>:
411f962c:	64c4      	save	32,ra



uint32 read_cfo_index(void)
{
411f962e:	b20e      	lw	v0,411f9664 <read_cfo_index+0x38>
    uint32 index;
    uint32 cap_val;
    uint32 bc_val;
    uint32 tc_val;

    if (base_trim_cap_read(&cap_val, RW_TRIM_CAP_SNOR) != TRIM_CAP_READ_NO_ERROR)
411f9630:	6c0e      	li	a0,14
411f9632:	0504      	addiu	a1,sp,16
411f9634:	6e01      	li	a2,1
411f9636:	ea40      	jalr	v0
411f9638:	6f06      	li	a3,6
411f963a:	2a0d      	bnez	v0,411f9656 <read_cfo_index+0x2a>
411f963c:	9204      	lw	v0,16(sp)
411f963e:	ea11      	zeb	v0
    {
        //print_log("Error: not trim cap!");
        //return -1;
        cap_val = sys_read_hosc_param();
    }

    cap_val &= 0xff;
411f9640:	3356      	srl	v1,v0,5

    bc_val = (cap_val >> 5);
411f9642:	6c1f      	li	a0,31

    tc_val = (cap_val & 0x1f);
411f9644:	5b04      	sltiu	v1,4

    if (bc_val >= 4)
411f9646:	d204      	sw	v0,16(sp)
411f9648:	ec4c      	and	a0,v0
411f964a:	6101      	btnez	411f964e <read_cfo_index+0x22>
411f964c:	436e      	addiu	v1,v1,-2
    {
        bc_val -= 2;
411f964e:	3274      	sll	v0,v1,5
    }

    index = (bc_val << 5) | tc_val;
411f9650:	ea8d      	or	v0,a0

    return index;
}
411f9652:	6444      	restore	32,ra
411f9654:	e8a0      	jrc	ra
411f9656:	b205      	lw	v0,411f9668 <read_cfo_index+0x3c>
411f9658:	6c00      	li	a0,0
411f965a:	6d07      	li	a1,7
411f965c:	6e01      	li	a2,1
411f965e:	ea40      	jalr	v0
411f9660:	6f36      	li	a3,54
411f9662:	17ed      	b	411f963e <read_cfo_index+0x12>
411f9664:	8fdd      	lh	a2,58(a3)
411f9666:	bfc3      	lwu	a2,12(a3)
411f9668:	88dd      	lh	a2,58(s0)
411f966a:	bfc3      	lwu	a2,12(a3)

411f966c <att_cfo_test>:
411f966c:	f00c 64fd 	save	a0-a2,104,ra,s0-s1

//随着电容值的增大，频偏会逐渐从正偏转向负偏
uint32 att_cfo_test(mp_test_arg_t *mp_arg, cfo_return_arg_t *cfo_return_arg, uint32 test_mode)
{
411f9670:	8467      	lb	v1,7(a0)
    int32 cfo_val;
    int32 left;
    int32 right;
    uint32 mid;
    int32 cfo_threshold_low;
    int32 cfo_threshold_high;
    uint32 cfo_right_value_flag;
    int32 min_cfo;
    uint32 min_cfo_index;
    uint32 retry_flag;
    uint32 start_left;
    uint32 start_right;
    uint32 abs_cfo_val;
    uint32 adjust_step_changed;
    int32 ret_val;
    int32 min_positive_cfo;
    uint32 min_positive_cfo_index;
    uint32 adjust_direction; //0:往正方向调 1:往负方向调
    int32 last_cfo_val;

    cfo_threshold_low = mp_arg->cfo_threshold_low * 1000;
411f9672:	3574      	sll	a1,v1,5
411f9674:	e56b      	subu	v0,a1,v1
411f9676:	3748      	sll	a3,v0,2
411f9678:	e779      	addu	a2,a3,v1
411f967a:	35cc      	sll	a1,a2,3
411f967c:	d507      	sw	a1,28(sp)
411f967e:	8468      	lb	v1,8(a0)
    cfo_threshold_high = mp_arg->cfo_threshold_high * 1000;
411f9680:	3274      	sll	v0,v1,5
411f9682:	e27f      	subu	a3,v0,v1
411f9684:	36e8      	sll	a2,a3,2
411f9686:	e675      	addu	a1,a2,v1
411f9688:	32ac      	sll	v0,a1,3
411f968a:	d208      	sw	v0,32(sp)
411f968c:	a4e4      	lbu	a3,4(a0)

    left = mp_arg->cfo_index_low;
411f968e:	6b00      	li	v1,0
    right = mp_arg->cfo_index_high;

    start_left = left;

    start_right = right;

    //是否搜到符合阈值的cfo值
    cfo_right_value_flag = FALSE;
411f9690:	d704      	sw	a3,16(sp)
411f9692:	a4c5      	lbu	a2,5(a0)
411f9694:	67bd      	move	a1,sp

    min_cfo = 0x7fffffff;

    min_cfo_index = 0;

    min_positive_cfo = 0x7fffffff;

    min_positive_cfo_index = 0;

    cfo_val = 0;

    retry_flag = 0;

    adjust_step_changed = 0;

    last_cfo_val = 0;

    adjust_direction = 0;

    g_cfo_test_retry_num = 0;
411f9696:	d309      	sw	v1,36(sp)
411f9698:	b486      	lw	a0,411f98b0 <.L134+0xc8>
411f969a:	d30b      	sw	v1,44(sp)
411f969c:	d310      	sw	v1,64(sp)
411f969e:	d30c      	sw	v1,48(sp)
411f96a0:	d312      	sw	v1,72(sp)
411f96a2:	d311      	sw	v1,68(sp)
411f96a4:	b384      	lw	v1,411f98b4 <.L134+0xcc>
411f96a6:	f020 a544 	lbu	v0,36(a1)
411f96aa:	d605      	sw	a2,20(sp)
411f96ac:	d60e      	sw	a2,56(sp)
411f96ae:	67dd      	move	a2,sp

    g_add_cfo_result_flag = FALSE;
411f96b0:	d70d      	sw	a3,52(sp)
411f96b2:	d40a      	sw	a0,40(sp)
411f96b4:	d40f      	sw	a0,60(sp)
411f96b6:	43e3      	addiu	a3,v1,3
411f96b8:	f020 a684 	lbu	a0,36(a2)
411f96bc:	c740      	sb	v0,0(a3)
411f96be:	43a2      	addiu	a1,v1,2
411f96c0:	6a0a      	li	v0,10

    g_cfo_return_num = MP_RETURN_RESULT_NUM;    
411f96c2:	c580      	sb	a0,0(a1)
411f96c4:	c341      	sb	v0,1(v1)

411f96c6 <.L129>:
411f96c6:	9605      	lw	a2,20(sp)

    retry: while (left <= right)
    {
        mid = (left + right) / 2;

        if (test_mode == 1)
        {
            if ((mid = read_cfo_index()) == -1)
                goto test_fail;
        }

        print_log("left:%d right:%d index:%d", left, right, mid);

        ret_val = att_get_cfo_val(mid, mp_arg, cfo_return_arg, test_mode);

        //如果测试过程中发现测试数据错误，则返回测试失败
        if (ret_val == FALSE)
        {
            goto test_fail;
        }

        cfo_val = cfo_return_arg->cfo_val;

        if (cfo_val > 0)
        {
            //记录最小的正数值
            if (cfo_val < min_positive_cfo)
            {
                min_positive_cfo = cfo_val;
                min_positive_cfo_index = mid;
            }
        }

        abs_cfo_val = libc_abs(cfo_val);

        if (abs_cfo_val < libc_abs(min_cfo))
        {
            //记录cfo最小的index及cfo的值
            min_cfo = cfo_val;

            min_cfo_index = mid;
        }

        if (test_mode == 1)
        {
            break;
        }

        //保证调整方向的单调性
        if (last_cfo_val != 0)
        {
            //判断调整方向是否和预期相符
            if (adjust_direction == 0)
            {
                //往正方向调，新的值应该大于上一个值
                //如果出现新的值小于上一个值，则重新根据index读取cfo值
                if (cfo_val < last_cfo_val)
                {
                    left = mp_arg->cfo_index_low;
                    right = mp_arg->cfo_index_high;

                    print_log("cfo adjust error, retry");

                    last_cfo_val = 0;

                    continue;
                }
            }
            else
            {
                //往负方向调整，新的值应该小于上一个值
                //如果出现新的值大于上一个值，则重新根据index获取cfo值
                if (cfo_val > last_cfo_val)
                {
                    left = mp_arg->cfo_index_low;
                    right = mp_arg->cfo_index_high;

                    print_log("cfo adjust error, retry");

                    last_cfo_val = 0;

                    continue;
                }
            }
        }

        //频偏正偏
        if (cfo_val > 0)
        {
            left = mid + 1;

            adjust_direction = 1;
        }
        else if (cfo_val < 0)
        {
            right = mid - 1;

            adjust_direction = 0;
        }
        else
        {
            ;//nothing for QAC
        }

        last_cfo_val = cfo_val;

        //异常分支处理
        if ((left < 0) || (right < 0))
        {
            goto test_fail;
411f96c8:	9404      	lw	a0,16(sp)
411f96ca:	ee82      	slt	a2,a0
411f96cc:	6155      	btnez	411f9778 <.L129+0xb2>
411f96ce:	931c      	lw	v1,112(sp)
411f96d0:	6a01      	li	v0,1
411f96d2:	eb4e      	xor	v1,v0
411f96d4:	eb43      	sltu	v1,v0
411f96d6:	67f8      	move	a3,t8
411f96d8:	d714      	sw	a3,80(sp)
411f96da:	9505      	lw	a1,20(sp)
411f96dc:	9304      	lw	v1,16(sp)
411f96de:	e3bd      	addu	a3,v1,a1
411f96e0:	f7c0 32e2 	srl	v0,a3,31
411f96e4:	e759      	addu	a2,a3,v0
411f96e6:	9514      	lw	a1,80(sp)
411f96e8:	34c7      	sra	a0,a2,1
411f96ea:	d406      	sw	a0,24(sp)
411f96ec:	2506      	beqz	a1,411f96fa <.L129+0x34>
411f96ee:	18e2 e58b 	jal	411f962c <read_cfo_index>
411f96f2:	6500      	nop
411f96f4:	ec4f      	not	a0,v0
411f96f6:	d206      	sw	v0,24(sp)
411f96f8:	2477      	beqz	a0,411f97e8 <.L134>
411f96fa:	9504      	lw	a1,16(sp)
411f96fc:	9605      	lw	a2,20(sp)
411f96fe:	b36f      	lw	v1,411f98b8 <.L134+0xd0>
411f9700:	0c5f      	la	a0,411f987c <.L134+0x94>
411f9702:	eb40      	jalr	v1
411f9704:	9706      	lw	a3,24(sp)
411f9706:	9406      	lw	a0,24(sp)
411f9708:	951a      	lw	a1,104(sp)
411f970a:	961b      	lw	a2,108(sp)
411f970c:	18e2 e529 	jal	411f94a4 <att_get_cfo_val>
411f9710:	971c      	lw	a3,112(sp)
411f9712:	226a      	beqz	v0,411f97e8 <.L134>
411f9714:	961b      	lw	a2,108(sp)
411f9716:	9e21      	lw	s1,4(a2)
411f9718:	5101      	slti	s1,1
411f971a:	6718      	move	s0,t8
411f971c:	d013      	sw	s0,76(sp)
411f971e:	2806      	bnez	s0,411f972c <.L129+0x66>
411f9720:	970f      	lw	a3,60(sp)
411f9722:	e9e2      	slt	s1,a3
411f9724:	6003      	bteqz	411f972c <.L129+0x66>
411f9726:	9206      	lw	v0,24(sp)
411f9728:	d10f      	sw	s1,60(sp)
411f972a:	d210      	sw	v0,64(sp)
411f972c:	18e2 e455 	jal	411f9154 <libc_abs>
411f9730:	6791      	move	a0,s1
411f9732:	940a      	lw	a0,40(sp)
411f9734:	18e2 e455 	jal	411f9154 <libc_abs>
411f9738:	6702      	move	s0,v0
411f973a:	e843      	sltu	s0,v0
411f973c:	6003      	bteqz	411f9744 <.L129+0x7e>
411f973e:	9506      	lw	a1,24(sp)
411f9740:	d10a      	sw	s1,40(sp)
411f9742:	d50b      	sw	a1,44(sp)
411f9744:	9414      	lw	a0,80(sp)
411f9746:	2c18      	bnez	a0,411f9778 <.L129+0xb2>
411f9748:	9412      	lw	a0,72(sp)
411f974a:	2404      	beqz	a0,411f9754 <.L129+0x8e>
411f974c:	9311      	lw	v1,68(sp)
411f974e:	2b59      	bnez	v1,411f9802 <.L134+0x1a>
411f9750:	e982      	slt	s1,a0
411f9752:	6166      	btnez	411f9820 <.L134+0x38>
411f9754:	9413      	lw	a0,76(sp)
411f9756:	2c3d      	bnez	a0,411f97d2 <.L129+0x10c>
411f9758:	9706      	lw	a3,24(sp)
411f975a:	6b01      	li	v1,1
411f975c:	47c1      	addiu	a2,a3,1
411f975e:	d604      	sw	a2,16(sp)
411f9760:	d311      	sw	v1,68(sp)
411f9762:	9304      	lw	v1,16(sp)
411f9764:	d112      	sw	s1,72(sp)
411f9766:	5300      	slti	v1,0
411f9768:	613f      	btnez	411f97e8 <.L134>
411f976a:	9605      	lw	a2,20(sp)
411f976c:	5600      	slti	a2,0
411f976e:	613c      	btnez	411f97e8 <.L134>
411f9770:	9205      	lw	v0,20(sp)
411f9772:	9704      	lw	a3,16(sp)
411f9774:	eae2      	slt	v0,a3
411f9776:	60b1      	bteqz	411f96da <.L129+0x14>
411f9778:	951c      	lw	a1,112(sp)
        }
    }

    if (test_mode == 0)
411f977a:	2d0d      	bnez	a1,411f9796 <.L129+0xd0>
411f977c:	930f      	lw	v1,60(sp)
    {
        if (min_positive_cfo != min_cfo)
411f977e:	940a      	lw	a0,40(sp)
411f9780:	eb8a      	cmp	v1,a0
411f9782:	6009      	bteqz	411f9796 <.L129+0xd0>
411f9784:	9607      	lw	a2,28(sp)
        {
            if (min_positive_cfo >= cfo_threshold_low && min_positive_cfo <= cfo_threshold_high)
411f9786:	ebc2      	slt	v1,a2
411f9788:	6106      	btnez	411f9796 <.L129+0xd0>
411f978a:	9708      	lw	a3,32(sp)
411f978c:	ef62      	slt	a3,v1
411f978e:	6103      	btnez	411f9796 <.L129+0xd0>
411f9790:	d30a      	sw	v1,40(sp)
            {
                min_cfo = min_positive_cfo;
411f9792:	9310      	lw	v1,64(sp)

                min_cfo_index = min_positive_cfo_index;
411f9794:	d30b      	sw	v1,44(sp)
411f9796:	930a      	lw	v1,40(sp)
            }
        }
    }

    //判断是否找到最优值
    if (min_cfo >= cfo_threshold_low && min_cfo <= cfo_threshold_high)
411f9798:	9207      	lw	v0,28(sp)
411f979a:	eb42      	slt	v1,v0
411f979c:	6103      	btnez	411f97a4 <.L129+0xde>
411f979e:	9508      	lw	a1,32(sp)
411f97a0:	ed62      	slt	a1,v1
411f97a2:	6069      	bteqz	411f9876 <.L134+0x8e>
411f97a4:	961c      	lw	a2,112(sp)
    {
        cfo_right_value_flag = TRUE;
    }

    if (cfo_right_value_flag == FALSE && test_mode == 0)
411f97a6:	2e20      	bnez	a2,411f97e8 <.L134>
411f97a8:	970a      	lw	a3,40(sp)
    {
        //最小的频偏仍然为负偏，需要在最左区间搜索
        if ((min_cfo < 0) && (start_left > CFO_THRESHOLD_LEFT))
411f97aa:	5700      	slti	a3,0
411f97ac:	6145      	btnez	411f9838 <.L134+0x50>
411f97ae:	920a      	lw	v0,40(sp)
        {
            if ((retry_flag & SEARCH_LEFT_FLAG) == 0)
            {
                right = left;
                left = CFO_THRESHOLD_LEFT;
                retry_flag |= SEARCH_LEFT_FLAG;

                goto retry;
            }
        }

        //最小的频偏仍然正偏，需要在最右区间搜索
        if ((min_cfo > 0) && (start_right < CFO_THRESHOLD_RIGHT))
411f97b0:	5201      	slti	v0,1
411f97b2:	611a      	btnez	411f97e8 <.L134>
411f97b4:	940e      	lw	a0,56(sp)
411f97b6:	5ca0      	sltiu	a0,160
411f97b8:	6017      	bteqz	411f97e8 <.L134>
411f97ba:	960c      	lw	a2,48(sp)
        {
            if ((retry_flag & SEARCH_RIGHT_FLAG) == 0)
411f97bc:	6b02      	li	v1,2
411f97be:	ee6c      	and	a2,v1
411f97c0:	2e13      	bnez	a2,411f97e8 <.L134>
411f97c2:	920c      	lw	v0,48(sp)
            {
                left = right;
                right = CFO_THRESHOLD_RIGHT;
                retry_flag |= SEARCH_RIGHT_FLAG;
411f97c4:	9505      	lw	a1,20(sp)
411f97c6:	6fa0      	li	a3,160
411f97c8:	ea6d      	or	v0,v1
411f97ca:	d504      	sw	a1,16(sp)
411f97cc:	d705      	sw	a3,20(sp)
411f97ce:	d20c      	sw	v0,48(sp)
411f97d0:	177a      	b	411f96c6 <.L129>
411f97d2:	5100      	slti	s1,0
411f97d4:	60c6      	bteqz	411f9762 <.L129+0x9c>
411f97d6:	9406      	lw	a0,24(sp)
411f97d8:	9304      	lw	v1,16(sp)
411f97da:	44af      	addiu	a1,a0,-1
411f97dc:	6a00      	li	v0,0
411f97de:	5300      	slti	v1,0
411f97e0:	d505      	sw	a1,20(sp)
411f97e2:	d211      	sw	v0,68(sp)
411f97e4:	d112      	sw	s1,72(sp)
411f97e6:	60c1      	bteqz	411f976a <.L129+0xa4>

411f97e8 <.L134>:
411f97e8:	b333      	lw	v1,411f98b4 <.L134+0xcc>

                goto retry;
            }
        }
    }

    test_fail:

    //停止测试
    if (g_SUT_state == 1)
411f97ea:	a380      	lbu	a0,0(v1)
411f97ec:	7401      	cmpi	a0,1
411f97ee:	6031      	bteqz	411f9852 <.L134+0x6a>
411f97f0:	920a      	lw	v0,40(sp)
    {
        g_SUT_state = 2;

        //print_log("test fail stop\n");

        att_cfo_test_tx_begin(mp_arg);

        att_cfo_test_tx_stop(mp_arg, cfo_return_arg);
    }

    cfo_return_arg->cfo_val = min_cfo;
411f97f2:	931b      	lw	v1,108(sp)
411f97f4:	67bd      	move	a1,sp

    cfo_return_arg->cfo_index = min_cfo_index;
411f97f6:	db41      	sw	v0,4(v1)
411f97f8:	adf6      	lhu	a3,44(a1)
411f97fa:	9209      	lw	v0,36(sp)

    return cfo_right_value_flag;
}
411f97fc:	cbe1      	sh	a3,2(v1)
411f97fe:	647d      	restore	104,ra,s0-s1
411f9800:	e8a0      	jrc	ra
411f9802:	9412      	lw	a0,72(sp)
411f9804:	ec22      	slt	a0,s1
411f9806:	60a6      	bteqz	411f9754 <.L129+0x8e>
411f9808:	951a      	lw	a1,104(sp)
411f980a:	971a      	lw	a3,104(sp)
411f980c:	a544      	lbu	v0,4(a1)
411f980e:	b32b      	lw	v1,411f98b8 <.L134+0xd0>
411f9810:	d204      	sw	v0,16(sp)
411f9812:	a7c5      	lbu	a2,5(a3)
411f9814:	0c21      	la	a0,411f9898 <.L134+0xb0>
411f9816:	eb40      	jalr	v1
411f9818:	d605      	sw	a2,20(sp)
411f981a:	9414      	lw	a0,80(sp)
411f981c:	d412      	sw	a0,72(sp)
411f981e:	17a8      	b	411f9770 <.L129+0xaa>
411f9820:	951a      	lw	a1,104(sp)
411f9822:	971a      	lw	a3,104(sp)
411f9824:	a544      	lbu	v0,4(a1)
411f9826:	b325      	lw	v1,411f98b8 <.L134+0xd0>
411f9828:	d204      	sw	v0,16(sp)
411f982a:	a7c5      	lbu	a2,5(a3)
411f982c:	0c1b      	la	a0,411f9898 <.L134+0xb0>
411f982e:	eb40      	jalr	v1
411f9830:	d605      	sw	a2,20(sp)
411f9832:	9411      	lw	a0,68(sp)
411f9834:	d412      	sw	a0,72(sp)
411f9836:	179c      	b	411f9770 <.L129+0xaa>
411f9838:	930d      	lw	v1,52(sp)
411f983a:	23b9      	beqz	v1,411f97ae <.L129+0xe8>
411f983c:	920c      	lw	v0,48(sp)
411f983e:	6b01      	li	v1,1
411f9840:	ea6c      	and	v0,v1
411f9842:	2ab5      	bnez	v0,411f97ae <.L129+0xe8>
411f9844:	9504      	lw	a1,16(sp)
411f9846:	d204      	sw	v0,16(sp)
411f9848:	920c      	lw	v0,48(sp)
411f984a:	d505      	sw	a1,20(sp)
411f984c:	ea6d      	or	v0,v1
411f984e:	d20c      	sw	v0,48(sp)
411f9850:	173a      	b	411f96c6 <.L129>
411f9852:	6e02      	li	a2,2
411f9854:	941a      	lw	a0,104(sp)
411f9856:	18e2 e458 	jal	411f9160 <att_cfo_test_tx_begin>
411f985a:	c3c0      	sb	a2,0(v1)
411f985c:	951b      	lw	a1,108(sp)
411f985e:	18e2 e4ff 	jal	411f93fc <att_cfo_test_tx_stop>
411f9862:	941a      	lw	a0,104(sp)
411f9864:	920a      	lw	v0,40(sp)
411f9866:	931b      	lw	v1,108(sp)
411f9868:	67bd      	move	a1,sp
411f986a:	db41      	sw	v0,4(v1)
411f986c:	adf6      	lhu	a3,44(a1)
411f986e:	9209      	lw	v0,36(sp)
411f9870:	cbe1      	sh	a3,2(v1)
411f9872:	647d      	restore	104,ra,s0-s1
411f9874:	e8a0      	jrc	ra
411f9876:	6c01      	li	a0,1
411f9878:	d409      	sw	a0,36(sp)
411f987a:	17b6      	b	411f97e8 <.L134>
411f987c:	656c      	move	t3,a0
411f987e:	7466      	cmpi	a0,102
411f9880:	253a      	beqz	a1,411f98f6 <update_cmd0+0x2a>
411f9882:	2064      	beqz	s0,411f994c <update_cmd0+0x80>
411f9884:	6972      	li	s1,114
411f9886:	6867      	li	s0,103
411f9888:	3a74      	ld	v1,160(v0)
411f988a:	6425      	restore	40,s0
411f988c:	6920      	li	s1,32
411f988e:	646e      	restore	112,ra,s0
411f9890:	7865      	sd	v1,40(s0)
411f9892:	253a      	beqz	a1,411f9908 <update_cmd0+0x3c>
411f9894:	0064      	addiu	s0,sp,400
411f9896:	0000      	addiu	s0,sp,0
411f9898:	6663      	0x6663
411f989a:	206f      	beqz	s0,411f997a <update_cmd0+0xae>
411f989c:	6461      	restore	8,ra,s0
411f989e:	756a      	cmpi	a1,106
411f98a0:	7473      	cmpi	a0,115
411f98a2:	6520      	move	at,s0
411f98a4:	7272      	cmpi	v0,114
411f98a6:	726f      	cmpi	v0,111
411f98a8:	202c      	beqz	s0,411f9902 <update_cmd0+0x36>
411f98aa:	6572      	move	s3,v0
411f98ac:	7274      	cmpi	v0,116
411f98ae:	0079      	addiu	s0,sp,484
411f98b0:	ffff      	daddiu	a3,sp,124
411f98b2:	7fff      	sd	a3,248(a3)
411f98b4:	8f84      	lh	a0,8(a3)
411f98b6:	bfc3      	lwu	a2,12(a3)
411f98b8:	9b59      	lw	v0,100(v1)
411f98ba:	41cf      	addiu	a2,s1,-1

411f98bc <update_cmd2>:
411f98bc:	4a01 04fd f497 000f                         .J......

411f98c4 <update_cmd1>:
411f98c4:	4a01 04fd f597 000f                         .J......

411f98cc <update_cmd0>:
411f98cc:	4a01 04fd f182 00ff 0000 0000 0000 0000     .J..............
	...
Disassembly of section BANK_CONTROL_1_8:

41239000 <act_test_report_mptest_result>:
41239000:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
static const uint8 hci_tx_channel_cmd[] = { 0x4a, 0xfd, 0x04, 0x3f, 0x00, 0x00, 0x00 };

void act_test_report_mptest_result(int32 ret_val, mp_test_arg_t *mp_arg, cfo_return_arg_t *cfo_return_arg,
        uint32 test_mode)
{
41239004:	675d      	move	v0,sp
    return_result_t *return_data;
    uint16 trans_bytes = 0;
41239006:	6d00      	li	a1,0
41239008:	6704      	move	s0,a0
4123900a:	caa8      	sh	a1,16(v0)
4123900c:	b1b4      	lw	s1,412392dc <act_test_report_mptest_result+0x2dc>

    //DEBUG_ATT_PRINT("mp cfo val", cfo_return_arg->cfo_val, 2);

    return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
4123900e:	f120 2f02 	bnez	a3,41239256 <act_test_report_mptest_result+0x256>

    if (test_mode == 0)
41239012:	7401      	cmpi	a0,1
    {
        return_data->test_id = TESTID_MP_TEST;

        if (ret_val == TRUE)
41239014:	6798      	move	a0,t8
41239016:	6bc2      	li	v1,194
41239018:	5c01      	sltiu	a0,1
4123901a:	c963      	sh	v1,6(s1)
4123901c:	6778      	move	v1,t8
4123901e:	f120 230d 	beqz	v1,4123927c <act_test_report_mptest_result+0x27c>
41239022:	ae81      	lhu	a0,2(a2)
        {
            if ((cfo_return_arg->cfo_index - CFO_THRESHOLD_ADJUST_VAL) > CFO_THRESHOLD_LEFT)
41239024:	67c4      	move	a2,a0
41239026:	ee31      	zeh	a2
41239028:	46eb      	addiu	a3,a2,-5
4123902a:	5701      	slti	a3,1
4123902c:	f120 610e 	btnez	4123928c <act_test_report_mptest_result+0x28c>
41239030:	950c      	lw	a1,48(sp)
            {
                cfo_return_arg->cfo_index_low = cfo_return_arg->cfo_index - CFO_THRESHOLD_ADJUST_VAL;
41239032:	44eb      	addiu	a3,a0,-5
41239034:	c5e0      	sb	a3,0(a1)
41239036:	46a5      	addiu	a1,a2,5
            }
            else
            {
                cfo_return_arg->cfo_index_low = CFO_THRESHOLD_LEFT;
            }

            if ((cfo_return_arg->cfo_index + CFO_THRESHOLD_ADJUST_VAL) < CFO_THRESHOLD_RIGHT)
41239038:	55a0      	slti	a1,160
4123903a:	f120 600a 	bteqz	41239292 <act_test_report_mptest_result+0x292>
4123903e:	44e5      	addiu	a3,a0,5
            {
                cfo_return_arg->cfo_index_high = cfo_return_arg->cfo_index + CFO_THRESHOLD_ADJUST_VAL;
41239040:	940c      	lw	a0,48(sp)
41239042:	c4e1      	sb	a3,1(a0)
41239044:	f100 2316 	beqz	v1,41239274 <act_test_report_mptest_result+0x274>
            }
            else
            {
                cfo_return_arg->cfo_index_high = CFO_THRESHOLD_RIGHT;
            }
        }
        else
        {

            cfo_return_arg->cfo_index_low = mp_arg->cfo_index_low;

            cfo_return_arg->cfo_index_high = mp_arg->cfo_index_high;
        }
    }
    else
    {
        return_data->test_id = TESTID_MP_READ_TEST;

        cfo_return_arg->cfo_index_low = mp_arg->cfo_index_low;

        cfo_return_arg->cfo_index_high = mp_arg->cfo_index_high;
    }

    if (ret_val == TRUE)
41239048:	970c      	lw	a3,48(sp)
    {
        print_log("test over! cfo:%d index:%d", cfo_return_arg->cfo_val, cfo_return_arg->cfo_index);
4123904a:	0c95      	la	a0,4123929c <act_test_report_mptest_result+0x29c>
4123904c:	9fa1      	lw	a1,4(a3)
4123904e:	b2a5      	lw	v0,412392e0 <act_test_report_mptest_result+0x2e0>
    }
    else
    {
        print_log("test failed! min cfo: %d index:%d", cfo_return_arg->cfo_val, cfo_return_arg->cfo_index);
41239050:	eac0      	jalrc	v0
41239052:	c108      	sb	s0,8(s1)
    }

    return_data->test_result = ret_val;
41239054:	67fd      	move	a3,sp

    //print_log("return arg: index low %d, index high %d, cfo val %d, pwr val %d, ber val %d",
    //    cfo_return_arg->cfo_index_low, cfo_return_arg->cfo_index_high, cfo_return_arg->cfo_val,
    //    cfo_return_arg->pwr_val, cfo_return_arg->ber_val);

    int32_to_unicode(mp_arg->cfo_channel_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239056:	afa8      	lhu	a1,16(a3)
41239058:	960b      	lw	a2,44(sp)
4123905a:	34a4      	sll	a0,a1,1
4123905c:	e435      	addu	a1,a0,s1
4123905e:	a680      	lbu	a0,0(a2)
41239060:	4d0a      	addiu	a1,10
41239062:	0604      	addiu	a2,sp,16
41239064:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239068:	6f0a      	li	a3,10
4123906a:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
4123906c:	ab48      	lhu	v0,16(v1)
4123906e:	960b      	lw	a2,44(sp)

    int32_to_unicode(mp_arg->cfo_channel_mid, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239070:	42a1      	addiu	a1,v0,1
41239072:	3044      	sll	s0,v0,1
41239074:	cba8      	sh	a1,16(v1)
41239076:	e03d      	addu	a3,s0,s1
41239078:	ed31      	zeh	a1
4123907a:	682c      	li	s0,44
4123907c:	cf05      	sh	s0,10(a3)
4123907e:	34a4      	sll	a0,a1,1
41239080:	e435      	addu	a1,a0,s1
41239082:	a681      	lbu	a0,1(a2)
41239084:	4d0a      	addiu	a1,10
41239086:	0604      	addiu	a2,sp,16
41239088:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
4123908c:	6f0a      	li	a3,10
4123908e:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
41239090:	ab48      	lhu	v0,16(v1)
41239092:	42a1      	addiu	a1,v0,1
41239094:	3744      	sll	a3,v0,1
41239096:	cba8      	sh	a1,16(v1)
41239098:	e739      	addu	a2,a3,s1
4123909a:	ed31      	zeh	a1

    int32_to_unicode(mp_arg->cfo_channel_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
4123909c:	920b      	lw	v0,44(sp)
4123909e:	ce05      	sh	s0,10(a2)
412390a0:	34a4      	sll	a0,a1,1
412390a2:	e435      	addu	a1,a0,s1
412390a4:	a282      	lbu	a0,2(v0)
412390a6:	4d0a      	addiu	a1,10
412390a8:	0604      	addiu	a2,sp,16
412390aa:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412390ae:	6f0a      	li	a3,10
412390b0:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
412390b2:	abe8      	lhu	a3,16(v1)
412390b4:	47a1      	addiu	a1,a3,1
412390b6:	36e4      	sll	a2,a3,1
412390b8:	cba8      	sh	a1,16(v1)
412390ba:	e629      	addu	v0,a2,s1
412390bc:	970b      	lw	a3,44(sp)

    int32_to_unicode(mp_arg->cfo_test, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412390be:	ed31      	zeh	a1
412390c0:	ca05      	sh	s0,10(v0)
412390c2:	34a4      	sll	a0,a1,1
412390c4:	e435      	addu	a1,a0,s1
412390c6:	a783      	lbu	a0,3(a3)
412390c8:	4d0a      	addiu	a1,10
412390ca:	0604      	addiu	a2,sp,16
412390cc:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412390d0:	6f0a      	li	a3,10
412390d2:	677d      	move	v1,sp

    //要修改的参数
    return_data->return_arg[trans_bytes++] = 0x002c;
412390d4:	abc8      	lhu	a2,16(v1)
412390d6:	46a1      	addiu	a1,a2,1
412390d8:	32c4      	sll	v0,a2,1
412390da:	cba8      	sh	a1,16(v1)
412390dc:	e23d      	addu	a3,v0,s1
412390de:	960c      	lw	a2,48(sp)

    int32_to_unicode(cfo_return_arg->cfo_index_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412390e0:	ed31      	zeh	a1
412390e2:	cf05      	sh	s0,10(a3)
412390e4:	34a4      	sll	a0,a1,1
412390e6:	e435      	addu	a1,a0,s1
412390e8:	8680      	lb	a0,0(a2)
412390ea:	4d0a      	addiu	a1,10
412390ec:	0604      	addiu	a2,sp,16
412390ee:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412390f2:	6f0a      	li	a3,10
412390f4:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
412390f6:	ab48      	lhu	v0,16(v1)
412390f8:	42a1      	addiu	a1,v0,1
412390fa:	3744      	sll	a3,v0,1
412390fc:	cba8      	sh	a1,16(v1)
412390fe:	e739      	addu	a2,a3,s1
41239100:	ed31      	zeh	a1

    int32_to_unicode(cfo_return_arg->cfo_index_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239102:	920c      	lw	v0,48(sp)
41239104:	ce05      	sh	s0,10(a2)
41239106:	34a4      	sll	a0,a1,1
41239108:	e435      	addu	a1,a0,s1
4123910a:	8281      	lb	a0,1(v0)
4123910c:	4d0a      	addiu	a1,10
4123910e:	0604      	addiu	a2,sp,16
41239110:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239114:	6f0a      	li	a3,10
41239116:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
41239118:	abe8      	lhu	a3,16(v1)
4123911a:	47a1      	addiu	a1,a3,1
4123911c:	36e4      	sll	a2,a3,1
4123911e:	cba8      	sh	a1,16(v1)
41239120:	e629      	addu	v0,a2,s1
41239122:	970b      	lw	a3,44(sp)

    int32_to_unicode(mp_arg->cfo_index_changed, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239124:	ed31      	zeh	a1
41239126:	ca05      	sh	s0,10(v0)
41239128:	34a4      	sll	a0,a1,1
4123912a:	e435      	addu	a1,a0,s1
4123912c:	a786      	lbu	a0,6(a3)
4123912e:	4d0a      	addiu	a1,10
41239130:	0604      	addiu	a2,sp,16
41239132:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239136:	6f0a      	li	a3,10
41239138:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
4123913a:	abc8      	lhu	a2,16(v1)
4123913c:	46a1      	addiu	a1,a2,1
4123913e:	32c4      	sll	v0,a2,1
41239140:	cba8      	sh	a1,16(v1)
41239142:	e23d      	addu	a3,v0,s1
41239144:	960b      	lw	a2,44(sp)

    int32_to_unicode(mp_arg->cfo_threshold_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239146:	ed31      	zeh	a1
41239148:	cf05      	sh	s0,10(a3)
4123914a:	34a4      	sll	a0,a1,1
4123914c:	e435      	addu	a1,a0,s1
4123914e:	8687      	lb	a0,7(a2)
41239150:	4d0a      	addiu	a1,10
41239152:	0604      	addiu	a2,sp,16
41239154:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239158:	6f0a      	li	a3,10
4123915a:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
4123915c:	ab48      	lhu	v0,16(v1)
4123915e:	42a1      	addiu	a1,v0,1
41239160:	3744      	sll	a3,v0,1
41239162:	cba8      	sh	a1,16(v1)
41239164:	e739      	addu	a2,a3,s1
41239166:	ed31      	zeh	a1

    int32_to_unicode(mp_arg->cfo_threshold_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239168:	920b      	lw	v0,44(sp)
4123916a:	ce05      	sh	s0,10(a2)
4123916c:	34a4      	sll	a0,a1,1
4123916e:	e435      	addu	a1,a0,s1
41239170:	8288      	lb	a0,8(v0)
41239172:	4d0a      	addiu	a1,10
41239174:	0604      	addiu	a2,sp,16
41239176:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
4123917a:	6f0a      	li	a3,10
4123917c:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
4123917e:	abe8      	lhu	a3,16(v1)
41239180:	47a1      	addiu	a1,a3,1
41239182:	36e4      	sll	a2,a3,1
41239184:	cba8      	sh	a1,16(v1)
41239186:	e629      	addu	v0,a2,s1
41239188:	970b      	lw	a3,44(sp)

    int32_to_unicode(mp_arg->cfo_write_mode, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
4123918a:	ed31      	zeh	a1
4123918c:	ca05      	sh	s0,10(v0)
4123918e:	34a4      	sll	a0,a1,1
41239190:	e435      	addu	a1,a0,s1
41239192:	a789      	lbu	a0,9(a3)
41239194:	4d0a      	addiu	a1,10
41239196:	0604      	addiu	a2,sp,16
41239198:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
4123919c:	6f0a      	li	a3,10
4123919e:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
412391a0:	abc8      	lhu	a2,16(v1)
412391a2:	46a1      	addiu	a1,a2,1
412391a4:	cba8      	sh	a1,16(v1)
412391a6:	32c4      	sll	v0,a2,1
412391a8:	ed31      	zeh	a1

    int32_to_unicode(mp_arg->cfo_upt_offset, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412391aa:	960b      	lw	a2,44(sp)
412391ac:	34a4      	sll	a0,a1,1
412391ae:	e23d      	addu	a3,v0,s1
412391b0:	e435      	addu	a1,a0,s1
412391b2:	9e83      	lw	a0,12(a2)
412391b4:	cf05      	sh	s0,10(a3)
412391b6:	4d0a      	addiu	a1,10
412391b8:	0604      	addiu	a2,sp,16
412391ba:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412391be:	6f0a      	li	a3,10
412391c0:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
412391c2:	ab48      	lhu	v0,16(v1)
412391c4:	42a1      	addiu	a1,v0,1
412391c6:	3744      	sll	a3,v0,1
412391c8:	cba8      	sh	a1,16(v1)
412391ca:	e739      	addu	a2,a3,s1
412391cc:	ed31      	zeh	a1

    int32_to_unicode(mp_arg->pwr_test, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412391ce:	920b      	lw	v0,44(sp)
412391d0:	ce05      	sh	s0,10(a2)
412391d2:	34a4      	sll	a0,a1,1
412391d4:	e435      	addu	a1,a0,s1
412391d6:	a290      	lbu	a0,16(v0)
412391d8:	4d0a      	addiu	a1,10
412391da:	0604      	addiu	a2,sp,16
412391dc:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412391e0:	6f0a      	li	a3,10
412391e2:	677d      	move	v1,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
412391e4:	abe8      	lhu	a3,16(v1)
412391e6:	47a1      	addiu	a1,a3,1
412391e8:	36e4      	sll	a2,a3,1
412391ea:	cba8      	sh	a1,16(v1)
412391ec:	e629      	addu	v0,a2,s1
412391ee:	930b      	lw	v1,44(sp)

    int32_to_unicode(mp_arg->pwr_threshold_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412391f0:	ed31      	zeh	a1
412391f2:	ca05      	sh	s0,10(v0)
412391f4:	34a4      	sll	a0,a1,1
412391f6:	e435      	addu	a1,a0,s1
412391f8:	8391      	lb	a0,17(v1)
412391fa:	4d0a      	addiu	a1,10
412391fc:	0604      	addiu	a2,sp,16
412391fe:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239202:	6f0a      	li	a3,10
41239204:	67fd      	move	a3,sp

    return_data->return_arg[trans_bytes++] = 0x002c;
41239206:	afc8      	lhu	a2,16(a3)
41239208:	46a1      	addiu	a1,a2,1
4123920a:	32c4      	sll	v0,a2,1
4123920c:	cfa8      	sh	a1,16(a3)
4123920e:	e22d      	addu	v1,v0,s1
41239210:	970b      	lw	a3,44(sp)

    int32_to_unicode(mp_arg->pwr_threshold_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41239212:	ed31      	zeh	a1
41239214:	cb05      	sh	s0,10(v1)
41239216:	34a4      	sll	a0,a1,1
41239218:	e435      	addu	a1,a0,s1
4123921a:	8792      	lb	a0,18(a3)
4123921c:	0604      	addiu	a2,sp,16
4123921e:	4d0a      	addiu	a1,10
41239220:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41239224:	6f0a      	li	a3,10
41239226:	67dd      	move	a2,sp

    //如果参数未四字节对齐，要四字节对齐处理
    if ((trans_bytes % 2) != 0)
41239228:	ae88      	lhu	a0,16(a2)
4123922a:	6a01      	li	v0,1
4123922c:	6764      	move	v1,a0
4123922e:	eb31      	zeh	v1
41239230:	ea6c      	and	v0,v1
41239232:	2209      	beqz	v0,41239246 <act_test_report_mptest_result+0x246>
41239234:	3564      	sll	a1,v1,1
    {
        return_data->return_arg[trans_bytes++] = 0x0000;
41239236:	44c1      	addiu	a2,a0,1
41239238:	e52d      	addu	v1,a1,s1
4123923a:	67fd      	move	a3,sp
4123923c:	6c00      	li	a0,0
4123923e:	cfc8      	sh	a2,16(a3)
41239240:	cb85      	sh	a0,10(v1)
41239242:	6766      	move	v1,a2
41239244:	eb31      	zeh	v1
41239246:	3664      	sll	a2,v1,1
    }

    act_test_report_result(return_data, trans_bytes * 2 + 4);
41239248:	46a4      	addiu	a1,a2,4
4123924a:	b227      	lw	v0,412392e4 <act_test_report_mptest_result+0x2e4>
4123924c:	6791      	move	a0,s1
4123924e:	ea40      	jalr	v0
41239250:	ed31      	zeh	a1
41239252:	6475      	restore	40,ra,s0-s1
41239254:	e8a0      	jrc	ra
41239256:	960b      	lw	a2,44(sp)
41239258:	6dc3      	li	a1,195
4123925a:	c9a3      	sh	a1,6(s1)
4123925c:	a684      	lbu	a0,4(a2)
4123925e:	970c      	lw	a3,48(sp)
41239260:	7001      	cmpi	s0,1
41239262:	6778      	move	v1,t8
41239264:	c780      	sb	a0,0(a3)
41239266:	a645      	lbu	v0,5(a2)
41239268:	5b01      	sltiu	v1,1
4123926a:	6778      	move	v1,t8
4123926c:	c741      	sb	v0,1(a3)
4123926e:	afc1      	lhu	a2,2(a3)
41239270:	f6ff 2b0a 	bnez	v1,41239048 <act_test_report_mptest_result+0x48>
41239274:	930c      	lw	v1,48(sp)
41239276:	0c11      	la	a0,412392b8 <act_test_report_mptest_result+0x2b8>
41239278:	9ba1      	lw	a1,4(v1)
4123927a:	16e9      	b	4123904e <act_test_report_mptest_result+0x4e>
4123927c:	940b      	lw	a0,44(sp)
4123927e:	970c      	lw	a3,48(sp)
41239280:	a4a4      	lbu	a1,4(a0)
41239282:	c7a0      	sb	a1,0(a3)
41239284:	a4c5      	lbu	a2,5(a0)
41239286:	c7c1      	sb	a2,1(a3)
41239288:	afc1      	lhu	a2,2(a3)
4123928a:	16dc      	b	41239044 <act_test_report_mptest_result+0x44>
4123928c:	920c      	lw	v0,48(sp)
4123928e:	c2a0      	sb	a1,0(v0)
41239290:	16d2      	b	41239036 <act_test_report_mptest_result+0x36>
41239292:	950c      	lw	a1,48(sp)
41239294:	6a60      	li	v0,96
41239296:	ea4b      	neg	v0
41239298:	c541      	sb	v0,1(a1)
4123929a:	16d4      	b	41239044 <act_test_report_mptest_result+0x44>
4123929c:	6574      	move	s3,a0
4123929e:	7473      	cmpi	a0,115
412392a0:	6f20      	li	a3,32
412392a2:	6576      	move	s3,a2
412392a4:	2172      	beqz	s1,4123938a <att_modify_mp_data+0x1a>
412392a6:	6320      	addiu	sp,256
412392a8:	6f66      	li	a3,102
412392aa:	253a      	beqz	a1,41239320 <att_modify_mp_data_sub+0x30>
412392ac:	2064      	beqz	s0,41239376 <att_modify_mp_data+0x6>
412392ae:	6e69      	li	a2,105
412392b0:	6564      	move	v1,a0
412392b2:	3a78      	ld	v1,192(v0)
412392b4:	6425      	restore	40,s0
412392b6:	0000      	addiu	s0,sp,0
412392b8:	6574      	move	s3,a0
412392ba:	7473      	cmpi	a0,115
412392bc:	6620      	0x6620
412392be:	6961      	li	s1,97
412392c0:	656c      	move	t3,a0
412392c2:	2164      	beqz	s1,4123938c <att_modify_mp_data+0x1c>
412392c4:	6d20      	li	a1,32
412392c6:	6e69      	li	a2,105
412392c8:	6320      	addiu	sp,256
412392ca:	6f66      	li	a3,102
412392cc:	203a      	beqz	s0,41239342 <att_modify_mp_data_sub+0x52>
412392ce:	6425      	restore	40,s0
412392d0:	6920      	li	s1,32
412392d2:	646e      	restore	112,ra,s0
412392d4:	7865      	sd	v1,40(s0)
412392d6:	253a      	beqz	a1,4123934c <att_modify_mp_data_sub+0x5c>
412392d8:	0064      	addiu	s0,sp,400
412392da:	0000      	addiu	s0,sp,0
412392dc:	a100      	lbu	s0,0(s1)
412392de:	9fc3      	lw	a2,12(a3)
412392e0:	9b59      	lw	v0,100(v1)
412392e2:	41cf      	addiu	a2,s1,-1
412392e4:	9b41      	lw	v0,4(v1)
412392e6:	41cb      	addiu	a2,s1,-5

412392e8 <att_modify_tx_channel>:
412392e8:	a540      	lbu	v0,0(a1)
}

uint32 att_modify_tx_channel(uint8 *hci_data, mp_test_arg_t *mp_arg)
{
    hci_data[4] = mp_arg->cfo_channel_low;
412392ea:	c444      	sb	v0,4(a0)
412392ec:	e820      	jr	ra

    return TRUE;
}
412392ee:	6a01      	li	v0,1

412392f0 <att_modify_mp_data_sub>:
412392f0:	f00e 64f5 	save	a0-a3,40,ra,s0-s1

uint32 att_modify_mp_data_sub(uint8 *hci_data, uint32 data_len, uint32 pkt_index, mp_test_arg_t *mp_arg,
        modify_cb_func_t cb)
{
412392f4:	b01d      	lw	s0,41239368 <att_modify_mp_data_sub+0x78>
    uint32 i, j;
    cmd_pkt_head_t *cmd_pkt_head;
    uint8 *data_buffer;
    uint8 cmd_len;

    cmd_pkt_head = (cmd_pkt_head_t *) (ATT_MPDATA_TEMP_BUFFER);

    data_buffer = (uint8 *) cmd_pkt_head;
412392f6:	b41e      	lw	a0,4123936c <att_modify_mp_data_sub+0x7c>
412392f8:	1005      	b	41239304 <att_modify_mp_data_sub+0x14>
412392fa:	a861      	lhu	v1,2(s0)

    for (;;)
    {
        if (cmd_pkt_head->pkt_index == pkt_index)
        {
            break;
        }

        if (cmd_pkt_head->next_pkt_offset >= g_mpdata_bin_len)
412392fc:	aca0      	lhu	a1,0(a0)
412392fe:	eba3      	sltu	v1,a1
41239300:	6028      	bteqz	41239352 <att_modify_mp_data_sub+0x62>
41239302:	e061      	addu	s0,v1
        {
            return FALSE;
        }

        cmd_pkt_head = (cmd_pkt_head_t *) ((uint8 *) cmd_pkt_head + cmd_pkt_head->next_pkt_offset);
41239304:	a040      	lbu	v0,0(s0)
41239306:	eace      	xor	v0,a2
41239308:	2af8      	bnez	v0,412392fa <att_modify_mp_data_sub+0xa>
4123930a:	a081      	lbu	a0,1(s0)
    }

    data_buffer = (uint8 *) ((uint8 *) cmd_pkt_head + sizeof(cmd_pkt_head_t));

    for (i = 0; i < cmd_pkt_head->total_node; i++)
4123930c:	6b00      	li	v1,0
4123930e:	4024      	addiu	s1,s0,4
41239310:	653c      	move	t9,a0
41239312:	d304      	sw	v1,16(sp)
41239314:	241b      	beqz	a0,4123934c <att_modify_mp_data_sub+0x5c>
41239316:	a1c0      	lbu	a2,0(s1)
    {
        cmd_len = *data_buffer;
41239318:	970b      	lw	a3,44(sp)

        data_buffer++;

        if (cmd_len == data_len)
4123931a:	4121      	addiu	s1,s1,1
4123931c:	eeea      	cmp	a2,a3
4123931e:	6110      	btnez	41239340 <att_modify_mp_data_sub+0x50>
41239320:	6f00      	li	a3,0
        {
            for (j = 0; j < cmd_len; j++)
41239322:	260b      	beqz	a2,4123933a <att_modify_mp_data_sub+0x4a>
41239324:	950a      	lw	a1,40(sp)
41239326:	6791      	move	a0,s1
41239328:	a440      	lbu	v0,0(a0)
            {
                if (data_buffer[j] != hci_data[j])
4123932a:	a560      	lbu	v1,0(a1)
4123932c:	ea6e      	xor	v0,v1
4123932e:	2a05      	bnez	v0,4123933a <att_modify_mp_data_sub+0x4a>
41239330:	47e1      	addiu	a3,a3,1
41239332:	efc3      	sltu	a3,a2
41239334:	4481      	addiu	a0,a0,1
41239336:	45a1      	addiu	a1,a1,1
41239338:	61f7      	btnez	41239328 <att_modify_mp_data_sub+0x38>
4123933a:	67a6      	move	a1,a2
                {
                    break;
                }
            }

            if (j == cmd_len)
4123933c:	edee      	xor	a1,a3
4123933e:	250c      	beqz	a1,41239358 <att_modify_mp_data_sub+0x68>
41239340:	9204      	lw	v0,16(sp)
41239342:	6799      	move	a0,t9
41239344:	42e1      	addiu	a3,v0,1
41239346:	ef83      	sltu	a3,a0
41239348:	d704      	sw	a3,16(sp)
4123934a:	61e5      	btnez	41239316 <att_modify_mp_data_sub+0x26>
4123934c:	6a01      	li	v0,1
            {
                cb(data_buffer, mp_arg);
            }
        }
    }

    return TRUE;
4123934e:	6475      	restore	40,ra,s0-s1
}
41239350:	e8a0      	jrc	ra
41239352:	6a00      	li	v0,0
41239354:	6475      	restore	40,ra,s0-s1
41239356:	e8a0      	jrc	ra
41239358:	950d      	lw	a1,52(sp)
4123935a:	930e      	lw	v1,56(sp)
4123935c:	eb40      	jalr	v1
4123935e:	6791      	move	a0,s1
41239360:	a0c1      	lbu	a2,1(s0)
41239362:	653e      	move	t9,a2
41239364:	17ed      	b	41239340 <att_modify_mp_data_sub+0x50>
41239366:	0000      	addiu	s0,sp,0
41239368:	a608      	lbu	s0,8(a2)
4123936a:	9fc3      	lw	a2,12(a3)
4123936c:	8f88      	lh	a0,16(a3)
4123936e:	bfc3      	lwu	a2,12(a3)

41239370 <att_modify_mp_data>:
41239370:	64c4      	save	32,ra

uint32 att_modify_mp_data(mp_test_arg_t *mp_arg)
{
41239372:	67e4      	move	a3,a0
41239374:	b206      	lw	v0,4123938c <att_modify_mp_data+0x1c>
    att_modify_mp_data_sub(hci_tx_channel_cmd, sizeof(hci_tx_channel_cmd), PKT_CFO_BEGINE_INDEX, mp_arg,
41239376:	b405      	lw	a0,41239388 <att_modify_mp_data+0x18>
41239378:	6d07      	li	a1,7
4123937a:	6e00      	li	a2,0
4123937c:	1902 e4bc 	jal	412392f0 <att_modify_mp_data_sub>
41239380:	d204      	sw	v0,16(sp)
41239382:	6a01      	li	v0,1
            att_modify_tx_channel);

    return TRUE;
}
41239384:	6444      	restore	32,ra
41239386:	e8a0      	jrc	ra
41239388:	9838      	lw	s1,96(s0)
4123938a:	4123      	addiu	s1,s1,3
4123938c:	92e9      	lw	v0,932(sp)
4123938e:	4123      	addiu	s1,s1,3

41239390 <att_read_mpdata>:
41239390:	64f4      	save	32,ra,s0-s1

uint32 att_read_mpdata(mp_test_arg_t *mp_arg)
{
41239392:	b417      	lw	a0,412393ec <att_read_mpdata+0x5c>
    uint32 i;
    atf_head_t *atf_head;
    uint8 *data_buffer = (uint8 *) ATT_MPDATA_TEMP_BUFFER;

    att_test_fread(data_buffer, 512, 0);
41239394:	b217      	lw	v0,412393f0 <att_read_mpdata+0x60>
41239396:	f200 6d00 	li	a1,512
4123939a:	ea40      	jalr	v0
4123939c:	6e00      	li	a2,0
4123939e:	6800      	li	s0,0

    atf_head = (atf_head_t *) data_buffer;

    for (i = 0; i < (512 / sizeof(atf_dir_t)); i++)
412393a0:	b313      	lw	v1,412393ec <att_read_mpdata+0x5c>
    {
        if (libc_memcmp(atf_head->atf_dir[i].filename, bt_mpdat_name, 10) == 0)
412393a2:	3414      	sll	a0,s0,5
412393a4:	e465      	addu	s1,a0,v1
412393a6:	6791      	move	a0,s1
412393a8:	b513      	lw	a1,412393f4 <att_read_mpdata+0x64>
412393aa:	b214      	lw	v0,412393f8 <att_read_mpdata+0x68>
412393ac:	4c20      	addiu	a0,32
412393ae:	6e0a      	li	a2,10
412393b0:	ea40      	jalr	v0
412393b2:	6f02      	li	a3,2
412393b4:	2212      	beqz	v0,412393da <att_read_mpdata+0x4a>
412393b6:	4001      	addiu	s0,s0,1
412393b8:	5810      	sltiu	s0,16
412393ba:	61f2      	btnez	412393a0 <att_read_mpdata+0x10>
412393bc:	b50c      	lw	a1,412393ec <att_read_mpdata+0x5c>
412393be:	3614      	sll	a2,s0,5
412393c0:	e6a5      	addu	s1,a2,a1
412393c2:	99ad      	lw	a1,52(s1)
        {
            break;
        }
    }

    g_mpdata_bin_len = atf_head->atf_dir[i].length;
412393c4:	b70e      	lw	a3,412393fc <att_read_mpdata+0x6c>
412393c6:	cfa0      	sh	a1,0(a3)
412393c8:	6005      	bteqz	412393d4 <att_read_mpdata+0x44>

    //读取hci数据
    if (i < (512 / sizeof(atf_dir_t)))
412393ca:	6745      	move	v0,a1
    {
        if (g_mpdata_bin_len <= ATT_MPDATA_MEX_LENGTH)
412393cc:	ea31      	zeh	v0
412393ce:	f001 5a01 	sltiu	v0,2049
412393d2:	6105      	btnez	412393de <att_read_mpdata+0x4e>
412393d4:	6a00      	li	v0,0
        {
            att_test_fread(data_buffer, atf_head->atf_dir[i].length, atf_head->atf_dir[i].offset);

            return TRUE;
        }
    }

    //att_modify_mp_data(mp_arg);

    return FALSE;
412393d6:	6474      	restore	32,ra,s0-s1
}
412393d8:	e8a0      	jrc	ra
412393da:	5810      	sltiu	s0,16
412393dc:	17f2      	b	412393c2 <att_read_mpdata+0x32>
412393de:	b404      	lw	a0,412393ec <att_read_mpdata+0x5c>
412393e0:	b204      	lw	v0,412393f0 <att_read_mpdata+0x60>
412393e2:	ea40      	jalr	v0
412393e4:	99cc      	lw	a2,48(s1)
412393e6:	6a01      	li	v0,1
412393e8:	6474      	restore	32,ra,s0-s1
412393ea:	e8a0      	jrc	ra
412393ec:	a608      	lbu	s0,8(a2)
412393ee:	9fc3      	lw	a2,12(a3)
412393f0:	892d      	lh	s1,26(s1)
412393f2:	bfc3      	lwu	a2,12(a3)
412393f4:	982c      	lw	s1,48(s0)
412393f6:	4123      	addiu	s1,s1,3
412393f8:	88d5      	lh	a2,42(s0)
412393fa:	bfc3      	lwu	a2,12(a3)
412393fc:	8f88      	lh	a0,16(a3)
412393fe:	bfc3      	lwu	a2,12(a3)

41239400 <ringbuf_init>:
41239400:	b204      	lw	v0,41239410 <ringbuf_init+0x10>

void ringbuf_init(void)
{
    g_ringbuf_rw.read_ptr = 0;
41239402:	b305      	lw	v1,41239414 <ringbuf_init+0x14>
    g_ringbuf_rw.write_ptr = 0;
    g_ringbuf_rw.readable_len = 0;
    g_ringbuf_rw.read_buffer = (uint8 *) ATT_RINGBUFFER_ADDR;
41239404:	6c00      	li	a0,0
41239406:	ca80      	sh	a0,0(v0)
41239408:	ca81      	sh	a0,2(v0)
4123940a:	ca82      	sh	a0,4(v0)
4123940c:	e820      	jr	ra
4123940e:	da62      	sw	v1,8(v0)
41239410:	8f90      	lh	a0,32(a3)
41239412:	bfc3      	lwu	a2,12(a3)
41239414:	0000      	addiu	s0,sp,0
41239416:	0003      	addiu	s0,sp,12

41239418 <att_cfo_test_init>:
41239418:	64f8      	save	64,ra,s0-s1
}


uint32 att_cfo_test_init(mp_test_arg_t *mp_arg)
{
4123941a:	b127      	lw	s1,412394b4 <att_cfo_test_init+0x9c>
    uint32 ret_val;

    cfo_param_t cfo_param;

    libc_memset(&cfo_param, 0, sizeof(cfo_param));
4123941c:	6704      	move	s0,a0
4123941e:	6d00      	li	a1,0
41239420:	0404      	addiu	a0,sp,16
41239422:	6e20      	li	a2,32
41239424:	e940      	jalr	s1
41239426:	6f01      	li	a3,1
41239428:	6f00      	li	a3,0

    cfo_param.ic_type = MP_ICTYPE;
4123942a:	67dd      	move	a2,sp
4123942c:	c6f0      	sb	a3,16(a2)
4123942e:	a080      	lbu	a0,0(s0)
    cfo_param.channel = mp_arg->cfo_channel_low;
41239430:	67bd      	move	a1,sp
41239432:	c591      	sb	a0,17(a1)
41239434:	f222 6814 	li	s0,4660
    cfo_param.tx_gain_idx = MP_TX_GAIN_IDX;
    cfo_param.tx_gain_val = MP_TX_GAIN_VAL;
    cfo_param.payload = PAYLOADTYPE_SET;
    cfo_param.pkt_type = PKTTYPE_SET;
    cfo_param.tx_dac = MP_TX_DAC;
    cfo_param.whitening_cv = WHITENCOEFF_SET;
    cfo_param.pkt_header = PKTHEADER_SET;
41239438:	67bd      	move	a1,sp
4123943a:	cd0c      	sh	s0,24(a1)
4123943c:	b020      	lw	s0,412394bc <att_cfo_test_init+0xa4>
    cfo_param.hit_target_l = HIT_ADDRESS_SET_L;
    cfo_param.hit_target_h = HIT_ADDRESS_SET_H;
    cfo_param.sut_state = g_SUT_state;
4123943e:	6b07      	li	v1,7
41239440:	c572      	sb	v1,18(a1)
41239442:	c574      	sb	v1,20(a1)
41239444:	c5f5      	sb	a3,21(a1)
41239446:	a060      	lbu	v1,0(s0)
41239448:	b71c      	lw	a3,412394b8 <att_cfo_test_init+0xa0>
4123944a:	6c7f      	li	a0,127
4123944c:	c597      	sb	a0,23(a1)
4123944e:	6a32      	li	v0,50
41239450:	ea4b      	neg	v0
41239452:	6e13      	li	a2,19
41239454:	6c02      	li	a0,2
    cfo_param.report_interval = MP_REPORT_RX_INTERVAL;
    cfo_param.skip_report_count = MP_SKIP_PKT_NUM;
    cfo_param.once_report_pkts = MP_ONCE_REPORT_MIN_PKT_NUM;
    cfo_param.report_timeout = MP_REPORT_TIMEOUT;
41239456:	c553      	sb	v0,19(a1)
41239458:	c5d6      	sb	a2,22(a1)
4123945a:	f020 c564 	sb	v1,36(a1)
4123945e:	f020 c588 	sb	a0,40(a1)
41239462:	d707      	sw	a3,28(sp)
41239464:	6a01      	li	v0,1
41239466:	6f00      	li	a3,0
41239468:	6e08      	li	a2,8
4123946a:	6b0a      	li	v1,10

    cfo_param.recv_cfo_count = MP_RETURN_RESULT_NUM;
4123946c:	b415      	lw	a0,412394c0 <att_cfo_test_init+0xa8>
    //cfo_param.sut_download_patch = mp_arg->cfo_force_sut_init;

    libc_memcpy((uint8 *) (STUB_ATT_RW_TEMP_BUFFER + sizeof(stub_ext_cmd_t)), &cfo_param, sizeof(cfo_param));
4123946e:	f020 c5c7 	sb	a2,39(a1)
41239472:	f020 c545 	sb	v0,37(a1)
41239476:	f020 c5e6 	sb	a3,38(a1)
4123947a:	f020 c569 	sb	v1,41(a1)
4123947e:	6e20      	li	a2,32
41239480:	0504      	addiu	a1,sp,16
41239482:	e940      	jalr	s1
41239484:	d708      	sw	a3,32(sp)
41239486:	b110      	lw	s1,412394c4 <att_cfo_test_init+0xac>

    ret_val = att_write_data(STUB_CMD_ATT_CFO_TX_BEGIN, sizeof(cfo_param_t), STUB_ATT_RW_TEMP_BUFFER);
41239488:	b210      	lw	v0,412394c8 <att_cfo_test_init+0xb0>
4123948a:	f440 6c16 	li	a0,1110
4123948e:	6d20      	li	a1,32
41239490:	ea40      	jalr	v0
41239492:	67d1      	move	a2,s1
41239494:	2207      	beqz	v0,412394a4 <att_cfo_test_init+0x8c>

    if (ret_val == 0)
41239496:	a0e0      	lbu	a3,0(s0)
    {
        att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);
    }

    if (g_SUT_state == 0)
41239498:	2f02      	bnez	a3,4123949e <att_cfo_test_init+0x86>
4123949a:	6b01      	li	v1,1
    {
        g_SUT_state = 1;
4123949c:	c060      	sb	v1,0(s0)
4123949e:	6a01      	li	v0,1
    }

    //libc_print("--BTTxbegin", 0, 0);

    return TRUE;
}
412394a0:	6478      	restore	64,ra,s0-s1
412394a2:	e8a0      	jrc	ra
412394a4:	67a2      	move	a1,v0
412394a6:	b20a      	lw	v0,412394cc <att_cfo_test_init+0xb4>
412394a8:	f4e0 6c1e 	li	a0,1278
412394ac:	ea40      	jalr	v0
412394ae:	67d1      	move	a2,s1
412394b0:	17f2      	b	41239496 <att_cfo_test_init+0x7e>
412394b2:	0000      	addiu	s0,sp,0
412394b4:	88d5      	lh	a2,42(s0)
412394b6:	bfc3      	lwu	a2,12(a3)
412394b8:	8b33      	lh	s1,38(v1)
412394ba:	009e      	addiu	s0,sp,632
412394bc:	8f84      	lh	a0,8(a3)
412394be:	bfc3      	lwu	a2,12(a3)
412394c0:	a006      	lbu	s0,6(s0)
412394c2:	9fc3      	lw	a2,12(a3)
412394c4:	a000      	lbu	s0,0(s0)
412394c6:	9fc3      	lw	a2,12(a3)
412394c8:	88e5      	lh	a3,10(s0)
412394ca:	bfc3      	lwu	a2,12(a3)
412394cc:	890d      	lh	s0,26(s1)
412394ce:	bfc3      	lwu	a2,12(a3)

412394d0 <att_mptest_init>:
412394d0:	64f8      	save	64,ra,s0-s1


uint32 att_mptest_init(mp_test_arg_t *mp_arg)
{
412394d2:	b22a      	lw	v0,41239578 <att_mptest_init+0xa8>
    bt_drv_param_t tmp_bt_drv_param;

    btt_priv_data_t btt_priv_data;
      
    g_SUT_state = 0;
412394d4:	6b00      	li	v1,0
412394d6:	c260      	sb	v1,0(v0)
412394d8:	1902 e500 	jal	41239400 <ringbuf_init>

    ringbuf_init();    
412394dc:	d410      	sw	a0,64(sp)
412394de:	1902 e506 	jal	41239418 <att_cfo_test_init>

    //这个函数不能切bank，因发完这个命令PC工具就进行SUT的初始化，这个时候
    //不会响应工具的任何命令请求，因此重新实现一样的函数，避免bank切换
    att_cfo_test_init(mp_arg);
412394e2:	9410      	lw	a0,64(sp)
412394e4:	6c0c      	li	a0,12

    if (sys_get_drv_install_info(DRV_GROUP_BT) > 0)
412394e6:	6d00      	li	a1,0
412394e8:	b125      	lw	s1,4123957c <att_mptest_init+0xac>
412394ea:	67c5      	move	a2,a1
412394ec:	e940      	jalr	s1
412394ee:	67e4      	move	a3,a0
412394f0:	5201      	slti	v0,1
412394f2:	6105      	btnez	412394fe <att_mptest_init+0x2e>
412394f4:	6d00      	li	a1,0
    {
        //先卸载BT驱动
        sys_drv_uninstall(DRV_GROUP_BT);
412394f6:	6c0c      	li	a0,12
412394f8:	67c5      	move	a2,a1
412394fa:	e940      	jalr	s1
412394fc:	6f0b      	li	a3,11
412394fe:	671d      	move	s0,sp
    }

    //重装载BT驱动
    tmp_bt_drv_param.cbk = put_hci_data_to_ringbuf;

    tmp_bt_drv_param.bd_addr[0] = 0x00;
41239500:	6a00      	li	v0,0
41239502:	6b01      	li	v1,1
    tmp_bt_drv_param.bd_addr[1] = 0x01;
41239504:	b41f      	lw	a0,41239580 <att_mptest_init+0xb0>
41239506:	c054      	sb	v0,20(s0)
41239508:	c075      	sb	v1,21(s0)
4123950a:	b01f      	lw	s0,41239584 <att_mptest_init+0xb4>
    tmp_bt_drv_param.bd_addr[2] = 0x02;
    tmp_bt_drv_param.bd_addr[3] = 0xfd;
    tmp_bt_drv_param.bd_addr[4] = 0x4e;
    tmp_bt_drv_param.bd_addr[5] = 0xf4;

    tmp_bt_drv_param.uart_idle_timer = 5000;
    tmp_bt_drv_param.p_hci_buffer_get_len_cb = &(g_hci_deal.get_data_len);
4123950c:	677d      	move	v1,sp
4123950e:	6f02      	li	a3,2
41239510:	6e03      	li	a2,3
41239512:	eecb      	neg	a2
41239514:	c3f6      	sb	a3,22(v1)
41239516:	c3d7      	sb	a2,23(v1)
41239518:	d404      	sw	a0,16(sp)
4123951a:	40e4      	addiu	a3,s0,4
    tmp_bt_drv_param.p_hci_buffer_read_data_cb = &(g_hci_deal.read_data);
4123951c:	6d4e      	li	a1,78
4123951e:	6c0c      	li	a0,12
41239520:	ec8b      	neg	a0
41239522:	f382 6a08 	li	v0,5000
41239526:	b619      	lw	a2,41239588 <att_mptest_init+0xb8>
    sys_drv_install(DRV_GROUP_BT, &tmp_bt_drv_param, bt_drv_name);
41239528:	c3b8      	sb	a1,24(v1)
4123952a:	c399      	sb	a0,25(v1)
4123952c:	cb4d      	sh	v0,26(v1)
4123952e:	d007      	sw	s0,28(sp)
41239530:	d708      	sw	a3,32(sp)
41239532:	0504      	addiu	a1,sp,16
41239534:	6c0c      	li	a0,12
41239536:	e940      	jalr	s1
41239538:	6f0a      	li	a3,10
4123953a:	6c00      	li	a0,0

    bt_drv_controller_poweron();
4123953c:	b014      	lw	s0,4123958c <att_mptest_init+0xbc>
4123953e:	67a4      	move	a1,a0
41239540:	67c4      	move	a2,a0
41239542:	e840      	jalr	s0
41239544:	6f04      	li	a3,4
41239546:	6d00      	li	a1,0

    sys_mdelay(500);   
41239548:	67c5      	move	a2,a1
4123954a:	f1e0 6c14 	li	a0,500
4123954e:	e940      	jalr	s1
41239550:	6f1d      	li	a3,29
41239552:	679d      	move	a0,sp

    btt_priv_data.download_patch = FALSE;
41239554:	6e00      	li	a2,0
41239556:	6d01      	li	a1,1
    btt_priv_data.reset_controller = TRUE;
41239558:	f020 c4cc 	sb	a2,44(a0)
4123955c:	f020 c4ad 	sb	a1,45(a0)
41239560:	060a      	addiu	a2,sp,40

    bt_drv_down_patchcode(TRUE, BT_BTT_MODE, &btt_priv_data);   
41239562:	6d03      	li	a1,3
41239564:	6f02      	li	a3,2
41239566:	e840      	jalr	s0
41239568:	6c01      	li	a0,1
4123956a:	1902 e4e4 	jal	41239390 <att_read_mpdata>

    att_read_mpdata(mp_arg);
4123956e:	9410      	lw	a0,64(sp)
41239570:	6a01      	li	v0,1

    //#if 1
    //    *((REG32)(DEBUGSEL)) = 0x13; /*debug module select cmu*/
    //    *((REG32)(DEBUGOE)) |= 0x00200000; /*enable gpio_a21 debug output*/
    //    *((REG32)(CMU_DEBUG_CTL)) &= 0xfffffff0;
    //    *((REG32)(CMU_DEBUG_CTL)) |= 0x1; /*cmu backdoor output hosc*/
    //#endif
    return TRUE;
}
41239572:	6478      	restore	64,ra,s0-s1
41239574:	e8a0      	jrc	ra
41239576:	0000      	addiu	s0,sp,0
41239578:	8f84      	lh	a0,8(a3)
4123957a:	bfc3      	lwu	a2,12(a3)
4123957c:	88dd      	lh	a2,58(s0)
4123957e:	bfc3      	lwu	a2,12(a3)
41239580:	9039      	lw	s0,228(sp)
41239582:	411f      	daddiu	s0,s1,-1
41239584:	8f9c      	lh	a0,56(a3)
41239586:	bfc3      	lwu	a2,12(a3)
41239588:	9820      	lw	s1,0(s0)
4123958a:	4123      	addiu	s1,s1,3
4123958c:	8fd5      	lh	a2,42(a3)
4123958e:	bfc3      	lwu	a2,12(a3)

41239590 <read_trim_cap_efuse>:
41239590:	64c4      	save	32,ra

static int32 att_index_to_cap(uint32 index)
{
    uint8 bc_val;
    uint8 tc_val;
    uint16 cap_val;
    int32 ret_val;

    bc_val = (index >> 5);

    switch (bc_val)
    {
        case CAP_INDEX_0:
        bc_val = 0;
        break;

        case CAP_INDEX_1:
        bc_val = 1;
        break;

        case CAP_INDEX_2:
        bc_val = 2;
        break;

        case CAP_INDEX_3:
        bc_val = 3;
        break;

        case CAP_INDEX_4:
        bc_val = 6;
        break;

        case CAP_INDEX_5:
        bc_val = 7;
        break;

        default:
        bc_val = 1;
        break;
    }

    tc_val = (index & 0x1f);

    cap_val = ((bc_val << 5) | tc_val);

    cap_val = (cap_val | (cap_val << 8));

    return cap_val;
}

static int read_trim_cap_efuse(uint32 mode)
{
41239592:	b208      	lw	v0,412395b0 <read_trim_cap_efuse+0x20>
    uint32 ret_val;
    uint32 trim_cap_value;

    ret_val = base_trim_cap_read(&trim_cap_value, mode);
41239594:	67c4      	move	a2,a0
41239596:	0504      	addiu	a1,sp,16
41239598:	6c0e      	li	a0,14
4123959a:	ea40      	jalr	v0
4123959c:	6f06      	li	a3,6
4123959e:	2205      	beqz	v0,412395aa <read_trim_cap_efuse+0x1a>

    if (ret_val == TRIM_CAP_READ_NO_ERROR)
412395a0:	6b01      	li	v1,1
    {
        ;//读取到正确的频偏数值
    }
    else
    {
        trim_cap_value = -1;
412395a2:	ea6b      	neg	v0,v1
412395a4:	d204      	sw	v0,16(sp)
412395a6:	6444      	restore	32,ra
    }

    return trim_cap_value;
}
412395a8:	e8a0      	jrc	ra
412395aa:	9204      	lw	v0,16(sp)
412395ac:	6444      	restore	32,ra
412395ae:	e8a0      	jrc	ra
412395b0:	8fdd      	lh	a2,58(a3)
412395b2:	bfc3      	lwu	a2,12(a3)

412395b4 <att_write_trim_cap>:
412395b4:	f008 64f5 	save	a0-a1,40,ra,s0-s1

412395b8 <.LBB2>:

static int write_trim_cap_efuse(int value, uint32 mode)
{
    uint32 ret_val;
    int value_bak;

    ret_val = base_trim_cap_write(&value, mode);

    if (ret_val == TRIM_CAP_WRITE_NO_ERROR)
    {
        //重新读取频偏值，看二者是否相等
        ret_val = base_trim_cap_read(&value_bak, mode);

        if (ret_val == TRIM_CAP_READ_NO_ERROR)
        {
            if (value_bak == value)
            {
                return TRUE;
            }
        }
        return FALSE;
    }
    else
    {
        if (ret_val == TRIM_CAP_WRITE_ERR_NO_RESOURSE)
        {
            //efuse已经写满
            print_log("efuse write over!", 0, 0);
        }

        return FALSE;
    }
}
uint32 att_write_trim_cap(uint32 index, uint32 mode)
{
412395b8:	3296      	srl	v0,a0,5
412395ba:	6762      	move	v1,v0
412395bc:	eb11      	zeb	v1
412395be:	5b06      	sltiu	v1,6

412395c0 <.LBE2>:
412395c0:	6d01      	li	a1,1
412395c2:	600d      	bteqz	412395de <.LBE2+0x1e>
412395c4:	ed64      	sllv	v1,a1
412395c6:	0e03      	la	a2,412395d0 <.LBE2+0x10>
412395c8:	e3dd      	addu	a3,v1,a2
412395ca:	8fa0      	lh	a1,0(a3)
412395cc:	e5cd      	addu	v1,a1,a2
412395ce:	eb80      	jrc	v1
412395d0:	004f      	addiu	s0,sp,316
412395d2:	0053      	addiu	s0,sp,332
412395d4:	0057      	addiu	s0,sp,348
412395d6:	005b      	addiu	s0,sp,364
412395d8:	005f      	addiu	s0,sp,380
412395da:	000d      	addiu	s0,sp,52
412395dc:	6d07      	li	a1,7
412395de:	681f      	li	s0,31
412395e0:	e88c      	and	s0,a0
412395e2:	34b4      	sll	a0,a1,5
412395e4:	ec0d      	or	a0,s0
412395e6:	3080      	sll	s0,a0,8
412395e8:	e88d      	or	s0,a0
412395ea:	1902 e564 	jal	41239590 <read_trim_cap_efuse>
    uint32 ret_val;

    uint32 read_cap_value;

    uint32 write_cap_value;

    write_cap_value = att_index_to_cap(index);

    read_cap_value = read_trim_cap_efuse(mode);
412395ee:	940b      	lw	a0,44(sp)
412395f0:	ea0a      	cmp	v0,s0

    if (read_cap_value != write_cap_value)
412395f2:	6103      	btnez	412395fa <.LBE2+0x3a>
412395f4:	6a01      	li	v0,1
    {
        //g_efuse_value = cap_value;
        print_log("write efuse: %x", write_cap_value);
        ret_val = write_trim_cap_efuse(write_cap_value, mode);

        if (ret_val == FALSE)
        {
            return ret_val;
        }

        //设置系统频偏
        sys_set_hosc_param(write_cap_value);
    }

    return TRUE;
412395f6:	6475      	restore	40,ra,s0-s1
}
412395f8:	e8a0      	jrc	ra
412395fa:	b326      	lw	v1,41239690 <.LBE6+0x76>
412395fc:	0c1c      	la	a0,4123966c <.LBE6+0x52>
412395fe:	eb40      	jalr	v1
41239600:	67b0      	move	a1,s0

41239602 <.LBB6>:
41239602:	b125      	lw	s1,41239694 <.LBE6+0x7a>
41239604:	960b      	lw	a2,44(sp)
41239606:	d004      	sw	s0,16(sp)
41239608:	6c0d      	li	a0,13
4123960a:	0504      	addiu	a1,sp,16
4123960c:	e940      	jalr	s1
4123960e:	6f06      	li	a3,6
41239610:	6722      	move	s1,v0
41239612:	2216      	beqz	v0,41239640 <.LBE6+0x26>
41239614:	7202      	cmpi	v0,2
41239616:	600d      	bteqz	41239632 <.LBE6+0x18>
41239618:	6a00      	li	v0,0

4123961a <.LBE6>:
4123961a:	6475      	restore	40,ra,s0-s1
4123961c:	e8a0      	jrc	ra
4123961e:	6d00      	li	a1,0
41239620:	17de      	b	412395de <.LBE2+0x1e>
41239622:	6d01      	li	a1,1
41239624:	17dc      	b	412395de <.LBE2+0x1e>
41239626:	6d02      	li	a1,2
41239628:	17da      	b	412395de <.LBE2+0x1e>
4123962a:	6d03      	li	a1,3
4123962c:	17d8      	b	412395de <.LBE2+0x1e>
4123962e:	6d06      	li	a1,6
41239630:	17d6      	b	412395de <.LBE2+0x1e>
41239632:	6d00      	li	a1,0
41239634:	b317      	lw	v1,41239690 <.LBE6+0x76>
41239636:	0c12      	la	a0,4123967c <.LBE6+0x62>
41239638:	eb40      	jalr	v1
4123963a:	67c5      	move	a2,a1
4123963c:	6a00      	li	v0,0
4123963e:	17ed      	b	4123961a <.LBE6>
41239640:	960b      	lw	a2,44(sp)
41239642:	b315      	lw	v1,41239694 <.LBE6+0x7a>
41239644:	6c0e      	li	a0,14
41239646:	0505      	addiu	a1,sp,20
41239648:	eb40      	jalr	v1
4123964a:	6f06      	li	a3,6
4123964c:	67c2      	move	a2,v0
4123964e:	2a0b      	bnez	v0,41239666 <.LBE6+0x4c>
41239650:	9205      	lw	v0,20(sp)
41239652:	9504      	lw	a1,16(sp)
41239654:	eaae      	xor	v0,a1
41239656:	2a07      	bnez	v0,41239666 <.LBE6+0x4c>
41239658:	b210      	lw	v0,41239698 <.LBE6+0x7e>
4123965a:	6790      	move	a0,s0
4123965c:	6d07      	li	a1,7
4123965e:	ea40      	jalr	v0
41239660:	6f36      	li	a3,54
41239662:	6a01      	li	v0,1
41239664:	17c8      	b	412395f6 <.LBE2+0x36>
41239666:	6751      	move	v0,s1
41239668:	6475      	restore	40,ra,s0-s1
4123966a:	e8a0      	jrc	ra
4123966c:	7277      	cmpi	v0,119
4123966e:	7469      	cmpi	a0,105
41239670:	2065      	beqz	s0,4123973c <.LBE16+0xa>
41239672:	6665      	0x6665
41239674:	7375      	cmpi	v1,117
41239676:	3a65      	ld	v1,40(v0)
41239678:	2520      	beqz	a1,412396ba <att_mp_test+0x1e>
4123967a:	0078      	addiu	s0,sp,480
4123967c:	6665      	0x6665
4123967e:	7375      	cmpi	v1,117
41239680:	2065      	beqz	s0,4123974c <.LBE16+0x1a>
41239682:	7277      	cmpi	v0,119
41239684:	7469      	cmpi	a0,105
41239686:	2065      	beqz	s0,41239752 <.LBE16+0x20>
41239688:	766f      	cmpi	a2,111
4123968a:	7265      	cmpi	v0,101
4123968c:	0021      	addiu	s0,sp,132
4123968e:	0000      	addiu	s0,sp,0
41239690:	9b59      	lw	v0,100(v1)
41239692:	41cf      	addiu	a2,s1,-1
41239694:	8fdd      	lh	a2,58(a3)
41239696:	bfc3      	lwu	a2,12(a3)
41239698:	88dd      	lh	a2,58(s0)
4123969a:	bfc3      	lwu	a2,12(a3)

4123969c <att_mp_test>:
4123969c:	64f7      	save	56,ra,s0-s1


test_result_e att_mp_test(void *arg_buffer)
{
4123969e:	6b00      	li	v1,0
    int32 ret_val;
    cfo_return_arg_t cfo_return_arg;
    mp_test_arg_t *mp_arg;

    bool adjusted_ok = FALSE;
412396a0:	b03b      	lw	s0,4123978c <.LBE16+0x5a>
    uint32 cap_value;

    mp_arg = (mp_test_arg_t *) arg_buffer;

    libc_memset(&cfo_return_arg, 0, sizeof(cfo_return_arg_t));
412396a2:	67a3      	move	a1,v1
412396a4:	d308      	sw	v1,32(sp)
412396a6:	6e10      	li	a2,16
412396a8:	6f01      	li	a3,1
412396aa:	6724      	move	s1,a0
412396ac:	e840      	jalr	s0
412396ae:	0404      	addiu	a0,sp,16
412396b0:	1902 e534 	jal	412394d0 <att_mptest_init>

    att_mptest_init(mp_arg);
412396b4:	6791      	move	a0,s1
412396b6:	1902 e564 	jal	41239590 <read_trim_cap_efuse>

    //先判断是否调整过频偏
    if ((cap_value = read_trim_cap_efuse(RW_TRIM_CAP_SNOR)) != -1)
412396ba:	6c01      	li	a0,1
412396bc:	67a2      	move	a1,v0
412396be:	ea4f      	not	v0
412396c0:	2230      	beqz	v0,41239722 <.LBB16>
412396c2:	b034      	lw	s0,41239790 <.LBE16+0x5e>
    {
        print_log("check cap_value: 0x%x", cap_value);
412396c4:	0c26      	la	a0,4123975c <.LBE16+0x2a>
412396c6:	e8c0      	jalrc	s0
412396c8:	6791      	move	a0,s1

        //根据当前的频偏值读取一次频偏结果，判断是否满足阈值要求
        ret_val = att_cfo_test(mp_arg, &cfo_return_arg, 1);
412396ca:	0504      	addiu	a1,sp,16
412396cc:	18e2 e59b 	jal	411f966c <att_cfo_test>
412396d0:	6e01      	li	a2,1
412396d2:	6702      	move	s0,v0
412396d4:	222e      	beqz	v0,41239732 <.LBE16>

        if (ret_val == FALSE)
412396d6:	6d01      	li	a1,1
        {
            print_log("check fail, readjust...");

            //强制重新做一次初始化
            g_SUT_state = 0;

            att_cfo_test_init(mp_arg);

            //如果不满足阈值要求，则重新校正频偏
            ret_val = att_cfo_test(mp_arg, &cfo_return_arg, 0);
        }
        else
        {
            adjusted_ok = TRUE;
412396d8:	d508      	sw	a1,32(sp)
412396da:	7001      	cmpi	s0,1
        }
    }
    else
    {
        //没有校正频偏，直接开始频偏校正
        ret_val = att_cfo_test(mp_arg, &cfo_return_arg, 0);
    }

    if (ret_val == TRUE && adjusted_ok == FALSE)
412396dc:	610d      	btnez	412396f8 <att_mp_test+0x5c>
412396de:	9308      	lw	v1,32(sp)
412396e0:	2b0b      	bnez	v1,412396f8 <att_mp_test+0x5c>
412396e2:	a149      	lbu	v0,9(s1)
    {
        if (mp_arg->cfo_write_mode == 1)
412396e4:	7201      	cmpi	v0,1
412396e6:	6031      	bteqz	4123974a <.LBE16+0x18>
412396e8:	7202      	cmpi	v0,2
        {
            ret_val = att_write_trim_cap(cfo_return_arg.cfo_index, RW_TRIM_CAP_EFUSE);
        }

        if (mp_arg->cfo_write_mode == 2)
412396ea:	6106      	btnez	412396f8 <att_mp_test+0x5c>
412396ec:	67fd      	move	a3,sp
        {
            ret_val = att_write_trim_cap(cfo_return_arg.cfo_index, RW_TRIM_CAP_SNOR);
412396ee:	af89      	lhu	a0,18(a3)
412396f0:	1902 e56d 	jal	412395b4 <att_write_trim_cap>
412396f4:	6d01      	li	a1,1
412396f6:	6702      	move	s0,v0
412396f8:	6790      	move	a0,s0
        }
    }

    act_test_report_mptest_result(ret_val, mp_arg, &cfo_return_arg, 0);
412396fa:	67b1      	move	a1,s1
412396fc:	0604      	addiu	a2,sp,16
412396fe:	1902 e400 	jal	41239000 <act_test_report_mptest_result>
41239702:	6f00      	li	a3,0
41239704:	6c00      	li	a0,0

    bt_drv_controller_poweroff();
41239706:	b225      	lw	v0,41239798 <.LBE16+0x66>
41239708:	67a4      	move	a1,a0
4123970a:	67c4      	move	a2,a0
4123970c:	ea40      	jalr	v0
4123970e:	6f05      	li	a3,5
41239710:	6d00      	li	a1,0

    //测试完成卸载bt驱动
    sys_drv_uninstall(DRV_GROUP_BT);
41239712:	b223      	lw	v0,4123979c <.LBE16+0x6a>
41239714:	6c0c      	li	a0,12
41239716:	67c5      	move	a2,a1
41239718:	ea40      	jalr	v0
4123971a:	6f0b      	li	a3,11
4123971c:	6a00      	li	v0,0

    return TEST_PASS;
}
4123971e:	6477      	restore	56,ra,s0-s1
41239720:	e8a0      	jrc	ra

41239722 <.LBB16>:
41239722:	9608      	lw	a2,32(sp)
41239724:	6791      	move	a0,s1
41239726:	0504      	addiu	a1,sp,16
41239728:	18e2 e59b 	jal	411f966c <att_cfo_test>
4123972c:	6500      	nop
4123972e:	6702      	move	s0,v0
41239730:	17d4      	b	412396da <att_mp_test+0x3e>

41239732 <.LBE16>:
41239732:	b318      	lw	v1,41239790 <.LBE16+0x5e>
41239734:	0c10      	la	a0,41239774 <.LBE16+0x42>
41239736:	ebc0      	jalrc	v1
41239738:	b417      	lw	a0,41239790 <.LBE16+0x5e>
4123973a:	c400      	sb	s0,0(a0)
4123973c:	1902 e506 	jal	41239418 <att_cfo_test_init>
41239740:	6791      	move	a0,s1
41239742:	6791      	move	a0,s1
41239744:	0504      	addiu	a1,sp,16
41239746:	67d0      	move	a2,s0
41239748:	17ef      	b	41239728 <.LBB16+0x6>
4123974a:	67dd      	move	a2,sp
4123974c:	ae89      	lhu	a0,18(a2)
4123974e:	1902 e56d 	jal	412395b4 <att_write_trim_cap>
41239752:	67a3      	move	a1,v1
41239754:	6702      	move	s0,v0
41239756:	a149      	lbu	v0,9(s1)
41239758:	17c7      	b	412396e8 <att_mp_test+0x4c>
4123975a:	0000      	addiu	s0,sp,0
4123975c:	6863      	li	s0,99
4123975e:	6365      	addiu	sp,808
41239760:	206b      	beqz	s0,41239838 <hci_tx_channel_cmd>
41239762:	6163      	btnez	4123982a <bt_drv_name+0xa>
41239764:	5f70      	sltiu	a3,112
41239766:	6176      	btnez	41239854 <hci_tx_channel_cmd+0x1c>
41239768:	756c      	cmpi	a1,108
4123976a:	3a65      	ld	v1,40(v0)
4123976c:	3020      	sll	s0,s1,8
4123976e:	2578      	beqz	a1,41239860 <hci_tx_channel_cmd+0x28>
41239770:	0078      	addiu	s0,sp,480
41239772:	0000      	addiu	s0,sp,0
41239774:	6863      	li	s0,99
41239776:	6365      	addiu	sp,808
41239778:	206b      	beqz	s0,41239850 <hci_tx_channel_cmd+0x18>
4123977a:	6166      	btnez	41239848 <hci_tx_channel_cmd+0x10>
4123977c:	6c69      	li	a0,105
4123977e:	202c      	beqz	s0,412397d8 <att_mp_read_test+0x38>
41239780:	6572      	move	s3,v0
41239782:	6461      	restore	8,ra,s0
41239784:	756a      	cmpi	a1,106
41239786:	7473      	cmpi	a0,115
41239788:	2e2e      	bnez	a2,412397e6 <att_mp_read_test+0x46>
4123978a:	002e      	addiu	s0,sp,184
4123978c:	88d5      	lh	a2,42(s0)
4123978e:	bfc3      	lwu	a2,12(a3)
41239790:	9b59      	lw	v0,100(v1)
41239792:	41cf      	addiu	a2,s1,-1
41239794:	8f84      	lh	a0,8(a3)
41239796:	bfc3      	lwu	a2,12(a3)
41239798:	8fd5      	lh	a2,42(a3)
4123979a:	bfc3      	lwu	a2,12(a3)
4123979c:	88dd      	lh	a2,58(s0)
4123979e:	bfc3      	lwu	a2,12(a3)

412397a0 <att_mp_read_test>:
412397a0:	64e5      	save	40,ra,s0

test_result_e att_mp_read_test(void *arg_buffer)
{
412397a2:	b21c      	lw	v0,41239810 <att_mp_read_test+0x70>
    int32 ret_val;
    cfo_return_arg_t cfo_return_arg;
    mp_test_arg_t *mp_arg;

    mp_arg = (mp_test_arg_t *) arg_buffer;

    libc_memset(&cfo_return_arg, 0, sizeof(cfo_return_arg_t));
412397a4:	6704      	move	s0,a0
412397a6:	6f01      	li	a3,1
412397a8:	6d00      	li	a1,0
412397aa:	6e10      	li	a2,16
412397ac:	ea40      	jalr	v0
412397ae:	0404      	addiu	a0,sp,16
412397b0:	1902 e534 	jal	412394d0 <att_mptest_init>

    att_mptest_init(mp_arg);
412397b4:	6790      	move	a0,s0
412397b6:	b218      	lw	v0,41239814 <att_mp_read_test+0x74>

    print_log("start read freq trim result...");
412397b8:	0c0e      	la	a0,412397f0 <att_mp_read_test+0x50>
412397ba:	eac0      	jalrc	v0
412397bc:	6790      	move	a0,s0

    ret_val = att_cfo_test(mp_arg, &cfo_return_arg, 1);
412397be:	0504      	addiu	a1,sp,16
412397c0:	18e2 e59b 	jal	411f966c <att_cfo_test>
412397c4:	6e01      	li	a2,1
412397c6:	6782      	move	a0,v0

    act_test_report_mptest_result(ret_val, mp_arg, &cfo_return_arg, 1);
412397c8:	67b0      	move	a1,s0
412397ca:	0604      	addiu	a2,sp,16
412397cc:	1902 e400 	jal	41239000 <act_test_report_mptest_result>
412397d0:	6f01      	li	a3,1
412397d2:	6c00      	li	a0,0

    bt_drv_controller_poweroff();
412397d4:	b211      	lw	v0,41239818 <att_mp_read_test+0x78>
412397d6:	67a4      	move	a1,a0
412397d8:	67c4      	move	a2,a0
412397da:	ea40      	jalr	v0
412397dc:	6f05      	li	a3,5
412397de:	6d00      	li	a1,0

    //测试完成卸载bt驱动
    sys_drv_uninstall(DRV_GROUP_BT);
412397e0:	b20f      	lw	v0,4123981c <att_mp_read_test+0x7c>
412397e2:	6c0c      	li	a0,12
412397e4:	67c5      	move	a2,a1
412397e6:	ea40      	jalr	v0
412397e8:	6f0b      	li	a3,11
412397ea:	6a00      	li	v0,0

    return TEST_PASS;
}
412397ec:	6465      	restore	40,ra,s0
412397ee:	e8a0      	jrc	ra
412397f0:	7473      	cmpi	a0,115
412397f2:	7261      	cmpi	v0,97
412397f4:	2074      	beqz	s0,412398de <hci_tx_channel_cmd+0xa6>
412397f6:	6572      	move	s3,v0
412397f8:	6461      	restore	8,ra,s0
412397fa:	6620      	0x6620
412397fc:	6572      	move	s3,v0
412397fe:	2071      	beqz	s0,412398e2 <hci_tx_channel_cmd+0xaa>
41239800:	7274      	cmpi	v0,116
41239802:	6d69      	li	a1,105
41239804:	7220      	cmpi	v0,32
41239806:	7365      	cmpi	v1,101
41239808:	6c75      	li	a0,117
4123980a:	2e74      	bnez	a2,412398f4 <hci_tx_channel_cmd+0xbc>
4123980c:	2e2e      	bnez	a2,4123986a <hci_tx_channel_cmd+0x32>
4123980e:	0000      	addiu	s0,sp,0
41239810:	88d5      	lh	a2,42(s0)
41239812:	bfc3      	lwu	a2,12(a3)
41239814:	9b59      	lw	v0,100(v1)
41239816:	41cf      	addiu	a2,s1,-1
41239818:	8fd5      	lh	a2,42(a3)
4123981a:	bfc3      	lwu	a2,12(a3)
4123981c:	88dd      	lh	a2,58(s0)
4123981e:	bfc3      	lwu	a2,12(a3)

41239820 <bt_drv_name>:
41239820:	7462 635f 7274 2e6c 7264 0076               bt_ctrl.drv.

4123982c <bt_mpdat_name>:
4123982c:	706d 6164 6174 622e 6e69 0000               mpdata.bin..

41239838 <hci_tx_channel_cmd>:
41239838:	fd4a 3f04 0000 0000 0000 0000 0000 0000     J..?............
	...
Disassembly of section BANK_CONTROL_1_9:

41279000 <init_dac_buffer>:
41279000:	b40b      	lw	a0,4127902c <init_dac_buffer+0x2c>
void init_dac_buffer(void)
{
    uint8 i, j;

    uint16 *p_dac_buffer = (uint16 *) DAC_BUFFER;
41279002:	b50c      	lw	a1,41279030 <init_dac_buffer+0x30>
41279004:	6e00      	li	a2,0

    for (j = 0; j < 16; j++)
41279006:	6b00      	li	v1,0
    {
        for (i = 0; i < 16; i++)
41279008:	3764      	sll	a3,v1,1
        {
            //左右声道使用相同的数据
            *p_dac_buffer = pcm_table[i];
4127900a:	e7a9      	addu	v0,a3,a1
4127900c:	aae0      	lhu	a3,0(v0)
4127900e:	4341      	addiu	v0,v1,1
41279010:	6762      	move	v1,v0
41279012:	eb11      	zeb	v1
41279014:	5b10      	sltiu	v1,16
41279016:	cce0      	sh	a3,0(a0)
41279018:	cce1      	sh	a3,2(a0)
            p_dac_buffer++;
            *p_dac_buffer = pcm_table[i];
4127901a:	4484      	addiu	a0,a0,4
            p_dac_buffer++;
4127901c:	61f5      	btnez	41279008 <init_dac_buffer+0x8>
4127901e:	4661      	addiu	v1,a2,1
41279020:	67c3      	move	a2,v1
41279022:	ee11      	zeb	a2
41279024:	5e10      	sltiu	a2,16
41279026:	61ef      	btnez	41279006 <init_dac_buffer+0x6>
41279028:	e8a0      	jrc	ra
        }
    }

    return;
4127902a:	0000      	addiu	s0,sp,0
4127902c:	2400      	beqz	a0,4127902e <init_dac_buffer+0x2e>
4127902e:	9fc2      	lw	a2,8(a3)
41279030:	9958      	lw	v0,96(s1)
41279032:	4127      	addiu	s1,s1,7

41279034 <sco_dac_dma_config>:
41279034:	64f4      	save	32,ra,s0-s1
}

void sco_dac_dma_config(void)
{
41279036:	b023      	lw	s0,412790c0 <sco_dac_dma_config+0x8c>
    act_writel(0, DMA0CTL);
41279038:	6900      	li	s1,0
4127903a:	b323      	lw	v1,412790c4 <sco_dac_dma_config+0x90>

    sys_udelay(10);
4127903c:	67b1      	move	a1,s1
4127903e:	67d1      	move	a2,s1
41279040:	d820      	sw	s1,0(s0)
41279042:	6c0a      	li	a0,10
41279044:	eb40      	jalr	v1
41279046:	6f1e      	li	a3,30
41279048:	9840      	lw	v0,0(s0)

    //separated stored in the memory, 0 for interleaved stored, 1 for separated stored
    act_writel(act_readl(DMA0CTL) & (~(1 << DMA0CTL_AUDIOTYPE)), DMA0CTL);
4127904a:	b320      	lw	v1,412790c8 <sco_dac_dma_config+0x94>
4127904c:	f008 6c00 	li	a0,16384

    //data width 16bit
    act_writel(act_readl(DMA0CTL) | (1 << DMA0CTL_DATAWIDTH_SHIFT), DMA0CTL);
41279050:	ea6c      	and	v0,v1
41279052:	d840      	sw	v0,0(s0)
41279054:	98a0      	lw	a1,0(s0)
41279056:	b31f      	lw	v1,412790d0 <sco_dac_dma_config+0x9c>

    //source addr type:memory
    act_writel(act_readl(DMA0CTL) | (0 << DMA0CTL_SRCTYPE_SHIFT), DMA0CTL);

    //dest addr type:dac fifo
    act_writel(act_readl(DMA0CTL) | (0x0b << DMA0CTL_DSTTYPE_SHIFT), DMA0CTL);

    //reload enable
    act_writel(act_readl(DMA0CTL) | (1 << DMA0CTL_reload), DMA0CTL);

    //source address
    act_writel(DAC_BUFFER, DMA0SADDR0);
41279058:	ed8d      	or	a1,a0
4127905a:	d8a0      	sw	a1,0(s0)
4127905c:	98e0      	lw	a3,0(s0)
4127905e:	f319 4c00 	addiu	a0,-13568
41279062:	d8e0      	sw	a3,0(s0)
41279064:	98c0      	lw	a2,0(s0)
41279066:	b51a      	lw	a1,412790cc <sco_dac_dma_config+0x98>
41279068:	ee8d      	or	a2,a0
4127906a:	d8c0      	sw	a2,0(s0)
4127906c:	9840      	lw	v0,0(s0)
4127906e:	6e02      	li	a2,2
41279070:	eacd      	or	v0,a2
41279072:	b419      	lw	a0,412790d4 <sco_dac_dma_config+0xa0>

    //dma length
    act_writel(1024 / 2 / 2, DMA0FrameLen);
41279074:	6fff      	li	a3,255
41279076:	d840      	sw	v0,0(s0)
41279078:	dd60      	sw	v1,0(a1)
4127907a:	4761      	addiu	v1,a3,1
4127907c:	dc60      	sw	v1,0(a0)
4127907e:	b417      	lw	a0,412790d8 <sco_dac_dma_config+0xa4>

#if 0
    //enable dma0 half & full trans interupt
    //act_writel(act_readl(DMAIE)|0x00000011, DMAIE);

    //DAC FIFO Input Select:from Special DMA :DMA to DAC
    act_writel(act_readl(DAC_FIFOCTL) & ~(DAC_FIFOCTL_DAF0IS_MASK), DAC_FIFOCTL);
    act_writel(act_readl(DAC_FIFOCTL) | (1 << DAC_FIFOCTL_DAF0IS_SHIFT), DAC_FIFOCTL);

    //enalbe dac fifo
    act_writel(act_readl(DAC_FIFOCTL) | (1 << DAC_FIFOCTL_DAF0RT), DAC_FIFOCTL);

#else

    //DAC FIFO Input Select:from Special DMA :DMA to DAC
    act_writel(act_readl(DAC_FIFOCTL) & ~(DAC_FIFOCTL_DAF0IS_MASK), DAC_FIFOCTL);
41279080:	f6df 4b0f 	addiu	v1,-305
41279084:	9c40      	lw	v0,0(a0)
41279086:	ea6c      	and	v0,v1
41279088:	dc40      	sw	v0,0(a0)
4127908a:	9ca0      	lw	a1,0(a0)
    act_writel(act_readl(DAC_FIFOCTL) | (1 << DAC_FIFOCTL_DAF0IS_SHIFT), DAC_FIFOCTL);
4127908c:	4b41      	addiu	v1,65
4127908e:	ed6d      	or	a1,v1
41279090:	b313      	lw	v1,412790dc <sco_dac_dma_config+0xa8>

    //both left&right channel
    act_writel((act_readl(DAC_ANACTL) | (1 << DAC_ANACTL_DAENL)), DAC_ANACTL);
41279092:	dca0      	sw	a1,0(a0)
41279094:	9be0      	lw	a3,0(v1)
41279096:	6d01      	li	a1,1
41279098:	efad      	or	a3,a1
4127909a:	dbe0      	sw	a3,0(v1)
4127909c:	9b40      	lw	v0,0(v1)
    act_writel((act_readl(DAC_ANACTL) | (1 << DAC_ANACTL_DAENR)), DAC_ANACTL);
4127909e:	eacd      	or	v0,a2
412790a0:	db40      	sw	v0,0(v1)
412790a2:	9ce0      	lw	a3,0(a0)

    //enalbe DAC FIFO Empty DRQ
    act_writel(act_readl(DAC_FIFOCTL) | (1 << DAC_FIFOCTL_DAF0EDE), DAC_FIFOCTL);
412790a4:	b308      	lw	v1,412790c4 <sco_dac_dma_config+0x90>

    //enable transfer
    act_writel(act_readl(DMA0CTL) | (1 << DMA0CTL_DMA0START), DMA0CTL);

    sys_udelay(10);
412790a6:	efcd      	or	a3,a2
412790a8:	dce0      	sw	a3,0(a0)
412790aa:	9840      	lw	v0,0(s0)
412790ac:	6c0a      	li	a0,10
412790ae:	eaad      	or	v0,a1
412790b0:	d840      	sw	v0,0(s0)
412790b2:	67b1      	move	a1,s1
412790b4:	67d1      	move	a2,s1
412790b6:	eb40      	jalr	v1
412790b8:	6f1e      	li	a3,30
412790ba:	6474      	restore	32,ra,s0-s1
412790bc:	e8a0      	jrc	ra
412790be:	0000      	addiu	s0,sp,0
412790c0:	0010      	addiu	s0,sp,64
412790c2:	c00c      	sb	s0,12(s0)
412790c4:	88dd      	lh	a2,58(s0)
412790c6:	bfc3      	lwu	a2,12(a3)
412790c8:	ffff      	daddiu	a3,sp,124
412790ca:	fffe      	daddiu	a3,sp,120
412790cc:	0014      	addiu	s0,sp,80
412790ce:	c00c      	sb	s0,12(s0)
412790d0:	2400      	beqz	a0,412790d2 <sco_dac_dma_config+0x9e>
412790d2:	9fc2      	lw	a2,8(a3)
412790d4:	0024      	addiu	s0,sp,144
412790d6:	c00c      	sb	s0,12(s0)
412790d8:	0004      	addiu	s0,sp,16
412790da:	c005      	sb	s0,5(s0)
412790dc:	001c      	addiu	s0,sp,112
412790de:	c005      	sb	s0,5(s0)

412790e0 <print_channel_data>:
412790e0:	f004 64f4 	save	a0,32,ra,s0-s1
#endif
}

void print_channel_data(uint32 dst_addr)
{
412790e4:	6d00      	li	a1,0
    int i;

    DEBUG_ATT_PRINT("\n**************\n", 0, 0);
412790e6:	b012      	lw	s0,4127912c <print_channel_data+0x4c>
412790e8:	67c5      	move	a2,a1
412790ea:	0c0c      	la	a0,41279118 <print_channel_data+0x38>
412790ec:	e840      	jalr	s0
412790ee:	6f4b      	li	a3,75
412790f0:	6900      	li	s1,0

    for(i = 0; i < 128; i += 4)
412790f2:	9208      	lw	v0,32(sp)
    {
        DEBUG_ATT_PRINT(0, *(uint16 *)(dst_addr + i), 1);
412790f4:	b30e      	lw	v1,4127912c <print_channel_data+0x4c>
412790f6:	e221      	addu	s0,v0,s1
412790f8:	a8a0      	lhu	a1,0(s0)
412790fa:	6c00      	li	a0,0
412790fc:	6e01      	li	a2,1
412790fe:	eb40      	jalr	v1
41279100:	6f4b      	li	a3,75
41279102:	a8a1      	lhu	a1,2(s0)
        DEBUG_ATT_PRINT(0, *(uint16 *)(dst_addr + i + 2), 1);
41279104:	b30a      	lw	v1,4127912c <print_channel_data+0x4c>
41279106:	6c00      	li	a0,0
41279108:	6e01      	li	a2,1
4127910a:	6f4b      	li	a3,75
4127910c:	eb40      	jalr	v1
4127910e:	4124      	addiu	s1,s1,4
41279110:	5180      	slti	s1,128
41279112:	61ef      	btnez	412790f2 <print_channel_data+0x12>
41279114:	6474      	restore	32,ra,s0-s1
41279116:	e8a0      	jrc	ra
41279118:	2a0a      	bnez	v0,4127912e <print_channel_data+0x4e>
4127911a:	2a2a      	bnez	v0,41279170 <init_dma_to_adc+0x40>
4127911c:	2a2a      	bnez	v0,41279172 <init_dma_to_adc+0x42>
4127911e:	2a2a      	bnez	v0,41279174 <init_dma_to_adc+0x44>
41279120:	2a2a      	bnez	v0,41279176 <init_dma_to_adc+0x46>
41279122:	2a2a      	bnez	v0,41279178 <init_dma_to_adc+0x48>
41279124:	2a2a      	bnez	v0,4127917a <init_dma_to_adc+0x4a>
41279126:	0a2a      	la	v0,412791cc <init_dma_to_adc+0x9c>
41279128:	0000      	addiu	s0,sp,0
4127912a:	0000      	addiu	s0,sp,0
4127912c:	88dd      	lh	a2,58(s0)
4127912e:	bfc3      	lwu	a2,12(a3)

41279130 <init_dma_to_adc>:
41279130:	64f4      	save	32,ra,s0-s1
    }
}


/******************************************************************************/
/*!
 * \par  Description:
 * \配置ADC采样的参数以及DMA的配置
 * \param[in]    dst_addr 采集数据存放的缓冲区地址
 * \param[in]    block_length 采集的数据长度
 * \param[out]   none
 * \return       none
 * \retval
 * \ingroup      music_module_test.c
 * \note
 */
/*******************************************************************************/
void init_dma_to_adc(uint32 dst_addr, uint32 block_length)
{
41279132:	b01f      	lw	s0,412791ac <init_dma_to_adc+0x7c>
    uint32 status;

    //左右声道均会采集数据
    act_writel(act_readl(ADC_ANACTL) | (1 << ADC_ANACTL_ADLEN), ADC_ANACTL);
41279134:	6f02      	li	a3,2
41279136:	9840      	lw	v0,0(s0)
41279138:	6e01      	li	a2,1

    //左右声道均会采集数据
    act_writel(act_readl(ADC_ANACTL) | (1 << ADC_ANACTL_ADREN), ADC_ANACTL);
4127913a:	eaed      	or	v0,a3
4127913c:	d840      	sw	v0,0(s0)
4127913e:	9820      	lw	s1,0(s0)
41279140:	f008 6b00 	li	v1,16384

    //abort DMA stransfer and reset config
    *((REG32)(DMA1CTL)) = 0x00;

    //data width 16bit
    act_writel(act_readl(DMA1CTL) | (1 << DMA1CTL_DATAWIDTH_SHIFT), DMA1CTL);
41279144:	e9cd      	or	s1,a2
41279146:	d820      	sw	s1,0(s0)
41279148:	b01a      	lw	s0,412791b0 <init_dma_to_adc+0x80>
4127914a:	46cf      	addiu	a2,a2,-1
4127914c:	d8c0      	sw	a2,0(s0)
4127914e:	9840      	lw	v0,0(s0)
41279150:	35a6      	srl	a1,1

    //source addr type:adc fifo
    act_writel(act_readl(DMA1CTL) | (0x0b << DMA1CTL_SRCTYPE_SHIFT), DMA1CTL);

    //dest addr type:memory
    act_writel(act_readl(DMA1CTL) | (0 << DMA1CTL_DSTTYPE_SHIFT), DMA1CTL);

    //reload enable
    act_writel(act_readl(DMA1CTL) | (1 << DMA1CTL_reload), DMA1CTL);

    //dest address
    act_writel(dst_addr, DMA1DADDR0);

    //dma length
    act_writel(block_length / 2, DMA1FrameLen);
41279152:	ea6d      	or	v0,v1
41279154:	d840      	sw	v0,0(s0)
41279156:	9820      	lw	s1,0(s0)
41279158:	6bb0      	li	v1,176
4127915a:	e96d      	or	s1,v1
4127915c:	d820      	sw	s1,0(s0)
4127915e:	9840      	lw	v0,0(s0)
41279160:	f55f 4b0d 	addiu	v1,-691

    //dma1 half & complete int disable
    act_writel(act_readl(DMAIE) & (~((1 << DMAIE_DMA1HFIE) | (1 << DMAIE_DMA1TCIE))), DMAIE);
41279164:	d840      	sw	v0,0(s0)
41279166:	9820      	lw	s1,0(s0)
41279168:	b213      	lw	v0,412791b4 <init_dma_to_adc+0x84>
4127916a:	e9ed      	or	s1,a3
4127916c:	d820      	sw	s1,0(s0)
4127916e:	b113      	lw	s1,412791b8 <init_dma_to_adc+0x88>
41279170:	da80      	sw	a0,0(v0)
41279172:	d9a0      	sw	a1,0(s1)
41279174:	b112      	lw	s1,412791bc <init_dma_to_adc+0x8c>
41279176:	b413      	lw	a0,412791c0 <init_dma_to_adc+0x90>

    //clear pending，注意不能使用读-或-写这种方式，避免清掉其他pending位
    act_writel((1 << DMAIP_DMA1HFIP) | (1 << DMAIP_DMA1TCIP), DMAIP);    
41279178:	9940      	lw	v0,0(s1)
4127917a:	b514      	lw	a1,412791c8 <init_dma_to_adc+0x98>

    g_adc_buffer_ptr = 0;

    g_sample_count = 0;
4127917c:	ea6c      	and	v0,v1
4127917e:	f400 4b05 	addiu	v1,1029
41279182:	d940      	sw	v0,0(s1)
41279184:	dc60      	sw	v1,0(a0)
41279186:	b310      	lw	v1,412791c4 <init_dma_to_adc+0x94>
41279188:	c5c0      	sb	a2,0(a1)
4127918a:	b212      	lw	v0,412791d0 <init_dma_to_adc+0xa0>

    //挂接中断服务程序
    sys_request_irq(IRQ_DMA1, adc_data_deal);
4127918c:	b510      	lw	a1,412791cc <init_dma_to_adc+0x9c>
4127918e:	c3c0      	sb	a2,0(v1)
41279190:	6c13      	li	a0,19
41279192:	ea40      	jalr	v0
41279194:	4f12      	addiu	a3,18
41279196:	9980      	lw	a0,0(s1)

    //dma1 half & complete int enable
    act_writel(act_readl(DMAIE) | (1 << DMAIE_DMA1HFIE) | (1 << DMAIE_DMA1TCIE), DMAIE);      
41279198:	f200 6e02 	li	a2,514
4127919c:	eccd      	or	a0,a2
4127919e:	d980      	sw	a0,0(s1)
412791a0:	9840      	lw	v0,0(s0)

    //enable transfer
    act_writel(act_readl(DMA1CTL) | (1 << DMA1CTL_DMA1START), DMA1CTL);
412791a2:	6b01      	li	v1,1
412791a4:	ea6d      	or	v0,v1
412791a6:	d840      	sw	v0,0(s0)
412791a8:	6474      	restore	32,ra,s0-s1
412791aa:	e8a0      	jrc	ra
412791ac:	1010      	b	412791ce <init_dma_to_adc+0x9e>
412791ae:	c005      	sb	s0,5(s0)
412791b0:	0028      	addiu	s0,sp,160
412791b2:	c00c      	sb	s0,12(s0)
412791b4:	0034      	addiu	s0,sp,208
412791b6:	c00c      	sb	s0,12(s0)
412791b8:	003c      	addiu	s0,sp,240
412791ba:	c00c      	sb	s0,12(s0)
412791bc:	0008      	addiu	s0,sp,32
412791be:	c00c      	sb	s0,12(s0)
412791c0:	0004      	addiu	s0,sp,16
412791c2:	c00c      	sb	s0,12(s0)
412791c4:	9978      	lw	v1,96(s1)
412791c6:	4127      	addiu	s1,s1,7
412791c8:	9979      	lw	v1,100(s1)
412791ca:	4127      	addiu	s1,s1,7
412791cc:	94f9      	lw	a0,996(sp)
412791ce:	4127      	addiu	s1,s1,7
412791d0:	88dd      	lh	a2,58(s0)
412791d2:	bfc3      	lwu	a2,12(a3)

412791d4 <play_pcm_init>:
412791d4:	64f4      	save	32,ra,s0-s1

  
#if 0
    while (1)
    {
        status = act_readl(DMA1CTL);

        if ((status & 0x01) == 0)
        {
            loop_cnt++;

            if (loop_cnt < 2)
            {
                act_writel(act_readl(DMA1CTL) | (1 << DMA1CTL_DMA1START), DMA1CTL);
            }
            else
            {
                //abort DMA stransfer and reset config
                *((REG32)(DMA1CTL)) = 0x00;
                break;
            }

        }
    }
#endif
}

void play_pcm_init(uint8 ain_type)
{
412791d6:	6704      	move	s0,a0
412791d8:	e811      	zeb	s0
412791da:	b236      	lw	v0,412792b0 <play_pcm_init+0xdc>
    DEBUG_ATT_PRINT("start channel test", ain_type, 2);
412791dc:	0c30      	la	a0,4127929c <play_pcm_init+0xc8>
412791de:	67b0      	move	a1,s0
412791e0:	6e02      	li	a2,2
412791e2:	ea40      	jalr	v0
412791e4:	6f4b      	li	a3,75
412791e6:	6d00      	li	a1,0

    set_dac_rate(ADC_SAMPLE_RATE, 0);
412791e8:	b133      	lw	s1,412792b4 <play_pcm_init+0xe0>
412791ea:	67c5      	move	a2,a1
412791ec:	6c10      	li	a0,16
412791ee:	e940      	jalr	s1
412791f0:	6f06      	li	a3,6
412791f2:	6d00      	li	a1,0

    enable_dac(DAFIS_DMA, DAF0_EN);
412791f4:	6c01      	li	a0,1
412791f6:	67c5      	move	a2,a1
412791f8:	e940      	jalr	s1
412791fa:	6f04      	li	a3,4
412791fc:	7001      	cmpi	s0,1

    //先使能模拟输入，再设置ADC采样率，最后使能ADC
    if (ain_type == AI_SOURCE_AUX1)
412791fe:	603d      	bteqz	4127927a <play_pcm_init+0xa6>
41279200:	201e      	beqz	s0,4127923e <play_pcm_init+0x6a>
    {
        enable_ain(AI_SOURCE_AUX1, 1);
    }
    else if (ain_type == AI_SOURCE_AUX0)
41279202:	7002      	cmpi	s0,2
    {
        enable_ain(AI_SOURCE_AUX0, 1);    
    }
    else if (ain_type == AI_SOURCE_ASEMIC)
41279204:	6798      	move	a0,t8
41279206:	5c01      	sltiu	a0,1
41279208:	6718      	move	s0,t8
4127920a:	2841      	bnez	s0,4127928e <play_pcm_init+0xba>
4127920c:	6d00      	li	a1,0
    {
        //打开mic测试通道
        enable_ain(AI_SOURCE_ASEMIC, 0);
    }
    else
    {
        ;//FM测试暂不支持
    }

    set_adc_rate(ADC_SAMPLE_RATE);
4127920e:	b12a      	lw	s1,412792b4 <play_pcm_init+0xe0>
41279210:	67c5      	move	a2,a1
41279212:	6c10      	li	a0,16
41279214:	e940      	jalr	s1
41279216:	6f0f      	li	a3,15
41279218:	6d00      	li	a1,0

    enable_adc(ADFOS_DMA, 0);
4127921a:	6c01      	li	a0,1
4127921c:	67c5      	move	a2,a1
4127921e:	e940      	jalr	s1
41279220:	6f0d      	li	a3,13
41279222:	1922 e400 	jal	41279000 <init_dac_buffer>

    init_dac_buffer();
41279226:	6500      	nop
41279228:	1922 e40d 	jal	41279034 <sco_dac_dma_config>

    sco_dac_dma_config();
4127922c:	6500      	nop
4127922e:	201e      	beqz	s0,4127926c <play_pcm_init+0x98>

    if (ain_type == AI_SOURCE_ASEMIC)
41279230:	6c0f      	li	a0,15
    {
        //设置音量等级为5级音量，该音量可满足mic,linein的测试要求
        set_pa_volume(15, (0xbf));
41279232:	6dbf      	li	a1,191
41279234:	6e00      	li	a2,0
41279236:	e940      	jalr	s1
    }
    else
    {
        set_pa_volume(30, (0xbf));
41279238:	6f02      	li	a3,2
4127923a:	6474      	restore	32,ra,s0-s1
    }       
}
4127923c:	e8a0      	jrc	ra
4127923e:	6790      	move	a0,s0
41279240:	6d01      	li	a1,1
41279242:	67d0      	move	a2,s0
41279244:	e940      	jalr	s1
41279246:	6f08      	li	a3,8
41279248:	6d00      	li	a1,0
4127924a:	b11b      	lw	s1,412792b4 <play_pcm_init+0xe0>
4127924c:	67c5      	move	a2,a1
4127924e:	6c10      	li	a0,16
41279250:	e940      	jalr	s1
41279252:	6f0f      	li	a3,15
41279254:	6d00      	li	a1,0
41279256:	6c01      	li	a0,1
41279258:	67c5      	move	a2,a1
4127925a:	e940      	jalr	s1
4127925c:	6f0d      	li	a3,13
4127925e:	1922 e400 	jal	41279000 <init_dac_buffer>
41279262:	6500      	nop
41279264:	1922 e40d 	jal	41279034 <sco_dac_dma_config>
41279268:	6500      	nop
4127926a:	28e2      	bnez	s0,41279230 <play_pcm_init+0x5c>
4127926c:	6c1e      	li	a0,30
4127926e:	6dbf      	li	a1,191
41279270:	67d0      	move	a2,s0
41279272:	e940      	jalr	s1
41279274:	6f02      	li	a3,2
41279276:	6474      	restore	32,ra,s0-s1
41279278:	e8a0      	jrc	ra
4127927a:	6c01      	li	a0,1
4127927c:	67a4      	move	a1,a0
4127927e:	6e00      	li	a2,0
41279280:	e940      	jalr	s1
41279282:	6f08      	li	a3,8
41279284:	7002      	cmpi	s0,2
41279286:	6778      	move	v1,t8
41279288:	5b01      	sltiu	v1,1
4127928a:	6718      	move	s0,t8
4127928c:	17bf      	b	4127920c <play_pcm_init+0x38>
4127928e:	6d00      	li	a1,0
41279290:	6c02      	li	a0,2
41279292:	67c5      	move	a2,a1
41279294:	e940      	jalr	s1
41279296:	6f08      	li	a3,8
41279298:	17d7      	b	41279248 <play_pcm_init+0x74>
4127929a:	0000      	addiu	s0,sp,0
4127929c:	7473      	cmpi	a0,115
4127929e:	7261      	cmpi	v0,97
412792a0:	2074      	beqz	s0,4127938a <.L58+0x32>
412792a2:	6863      	li	s0,99
412792a4:	6e61      	li	a2,97
412792a6:	656e      	move	t3,a2
412792a8:	206c      	beqz	s0,41279382 <.L58+0x2a>
412792aa:	6574      	move	s3,a0
412792ac:	7473      	cmpi	a0,115
412792ae:	0000      	addiu	s0,sp,0
412792b0:	88dd      	lh	a2,58(s0)
412792b2:	bfc3      	lwu	a2,12(a3)
412792b4:	88cd      	lh	a2,26(s0)
412792b6:	bfc3      	lwu	a2,12(a3)

412792b8 <play_pcm_exit>:
412792b8:	64f4      	save	32,ra,s0-s1

void play_pcm_exit(void)
{
412792ba:	b30a      	lw	v1,412792e0 <play_pcm_exit+0x28>
    //停止数据发送
    act_writel(0, DMA0CTL);
412792bc:	b20a      	lw	v0,412792e4 <play_pcm_exit+0x2c>

    act_writel(0, DMA1CTL);
412792be:	6800      	li	s0,0
412792c0:	b10a      	lw	s1,412792e8 <play_pcm_exit+0x30>

    disable_dac(DAF0_EN);
412792c2:	db00      	sw	s0,0(v1)
412792c4:	6790      	move	a0,s0
412792c6:	67b0      	move	a1,s0
412792c8:	67d0      	move	a2,s0
412792ca:	da00      	sw	s0,0(v0)
412792cc:	e940      	jalr	s1
412792ce:	6f05      	li	a3,5
412792d0:	6790      	move	a0,s0

    disable_adc();
412792d2:	67b0      	move	a1,s0
412792d4:	67d0      	move	a2,s0
412792d6:	e940      	jalr	s1
412792d8:	6f0e      	li	a3,14
412792da:	6474      	restore	32,ra,s0-s1
412792dc:	e8a0      	jrc	ra
412792de:	0000      	addiu	s0,sp,0
412792e0:	0010      	addiu	s0,sp,64
412792e2:	c00c      	sb	s0,12(s0)
412792e4:	0028      	addiu	s0,sp,160
412792e6:	c00c      	sb	s0,12(s0)
412792e8:	88cd      	lh	a2,26(s0)
412792ea:	bfc3      	lwu	a2,12(a3)

412792ec <caculate_power_value>:
412792ec:	64f4      	save	32,ra,s0-s1
}

static int32 caculate_power_value(uint32 dac_buffer_addr, uint32 data_length, uint32 *power_val_array, uint32 index)
{
412792ee:	6705      	move	s0,a1
412792f0:	6726      	move	s1,a2
412792f2:	6e00      	li	a2,0
    uint32 i;
    uint32 power_value = 0;
412792f4:	ee03      	sltu	a2,s0
    uint32 power_sample_value = 0;

    int16 *dac_buffer = (int16 *)dac_buffer_addr;

    //计算单个声道的样本点
    for (i = 0; i < data_length; i += 2)
412792f6:	67a6      	move	a1,a2
412792f8:	6009      	bteqz	4127930c <caculate_power_value+0x20>
412792fa:	8c60      	lh	v1,0(a0)
    {
        if (dac_buffer[i] >= 0)
412792fc:	5300      	slti	v1,0
412792fe:	6743      	move	v0,v1
        {
            power_sample_value = (uint32)(dac_buffer[i]);
41279300:	6112      	btnez	41279326 <caculate_power_value+0x3a>
41279302:	45a2      	addiu	a1,a1,2
41279304:	e659      	addu	a2,v0
        }
        else
        {
            power_sample_value = (uint32)(-dac_buffer[i]);
        }

        power_value += power_sample_value;
41279306:	4484      	addiu	a0,a0,4
41279308:	ed03      	sltu	a1,s0
4127930a:	61f7      	btnez	412792fa <caculate_power_value+0xe>
4127930c:	3506      	srl	a1,s0,1
    }

    power_value = power_value / (data_length / 2);
4127930e:	eebb      	divu	zero,a2,a1
41279310:	34e8      	sll	a0,a3,2

    power_val_array[index] = power_value;
41279312:	e42d      	addu	v1,a0,s1
41279314:	b20a      	lw	v0,4127933c <caculate_power_value+0x50>

    att_write_test_info("power value:", power_value, 1);
41279316:	0c06      	la	a0,4127932c <caculate_power_value+0x40>
41279318:	6e01      	li	a2,1
4127931a:	ed12      	mflo	a1
4127931c:	ea40      	jalr	v0
4127931e:	dba0      	sw	a1,0(v1)
41279320:	6a00      	li	v0,0

    return 0;
}
41279322:	6474      	restore	32,ra,s0-s1
41279324:	e8a0      	jrc	ra
41279326:	ea6b      	neg	v0,v1
41279328:	17ec      	b	41279302 <caculate_power_value+0x16>
4127932a:	0000      	addiu	s0,sp,0
4127932c:	6f70      	li	a3,112
4127932e:	6577      	move	s3,a3
41279330:	2072      	beqz	s0,41279416 <.L58+0xbe>
41279332:	6176      	btnez	41279420 <.L58+0xc8>
41279334:	756c      	cmpi	a1,108
41279336:	3a65      	ld	v1,40(v0)
41279338:	0000      	addiu	s0,sp,0
4127933a:	0000      	addiu	s0,sp,0
4127933c:	8b89      	lh	a0,18(v1)
4127933e:	bfc3      	lwu	a2,12(a3)

41279340 <libc_abs>:
41279340:	5401      	slti	a0,1

static uint32 libc_abs(int32 value)
{
    if (value > 0)
41279342:	6744      	move	v0,a0
    {
        return value;
41279344:	6101      	btnez	41279348 <libc_abs+0x8>
41279346:	e8a0      	jrc	ra
    }
    else
    {
        return (0 - value);
    }
}
41279348:	e820      	jr	ra
4127934a:	ea8b      	neg	v0,a0

4127934c <analyse_power_val_valid>:
4127934c:	f00e 64f7 	save	a0-a3,56,ra,s0-s1

int32 analyse_power_val_valid(uint32 sample_cnt, uint32 *power_val_array, uint32 *p_power_val_left, uint32 *p_power_val_right)
{
41279350:	3386      	srl	v1,a0,1
    uint32 i;
    uint32 power_val;
    uint32 power_val_total;
    uint32 div_val;

    int32 diff_val;

    int32 max_diff_val;
    int32 max_diff_index;
    int32 invalid_data_flag;

    int32 analyse_flag = 0;
    
    uint32 sample_count = (sample_cnt >> 1);
41279352:	6a00      	li	v0,0
41279354:	d208      	sw	v0,32(sp)
41279356:	d309      	sw	v1,36(sp)

41279358 <.L58>:
41279358:	9609      	lw	a2,36(sp)

    retry:
    power_val_total = 0;
    
    for(i = 0; i < sample_count; i++)
4127935a:	6c00      	li	a0,0
4127935c:	ecc3      	sltu	a0,a2
4127935e:	67a4      	move	a1,a0
41279360:	600b      	bteqz	41279378 <.L58+0x20>
41279362:	9108      	lw	s1,32(sp)
41279364:	950f      	lw	a1,60(sp)
41279366:	3728      	sll	a3,s1,2
41279368:	9309      	lw	v1,36(sp)
4127936a:	e7b9      	addu	a2,a3,a1
4127936c:	9e40      	lw	v0,0(a2)
    {
        power_val_total += power_val_array[i*2 + analyse_flag];
4127936e:	436f      	addiu	v1,v1,-1
41279370:	e451      	addu	a0,v0
41279372:	4e08      	addiu	a2,8
41279374:	2bfb      	bnez	v1,4127936c <.L58+0x14>
41279376:	9509      	lw	a1,36(sp)
41279378:	ecbb      	divu	zero,a0,a1
    }

    power_val = power_val_total / i;
4127937a:	6c00      	li	a0,0

    invalid_data_flag = FALSE;
4127937c:	d407      	sw	a0,28(sp)
4127937e:	d405      	sw	a0,20(sp)

    max_diff_val = 0;
41279380:	eb12      	mflo	v1
41279382:	d304      	sw	v1,16(sp)
41279384:	6900      	li	s1,0

    while (1)
    {
        //判断采样点离散程度,先找出离散程度很大的点
        for (i = 0; i < sample_count; i++)
41279386:	9609      	lw	a2,36(sp)
41279388:	2655      	beqz	a2,41279434 <.L58+0xdc>
4127938a:	9008      	lw	s0,32(sp)
4127938c:	950f      	lw	a1,60(sp)
4127938e:	3708      	sll	a3,s0,2
41279390:	e7a1      	addu	s0,a3,a1
41279392:	9880      	lw	a0,0(s0)
        {
            if (power_val_array[i*2 + analyse_flag] != INVALID_POWER_VAL)
41279394:	f7ff 741f 	cmpi	a0,65535
41279398:	6009      	bteqz	412793ac <.L58+0x54>
4127939a:	9204      	lw	v0,16(sp)
            {
                diff_val = libc_abs(power_val_array[i*2 + analyse_flag] - power_val);
4127939c:	1922 e4d0 	jal	41279340 <libc_abs>
412793a0:	e453      	subu	a0,v0
412793a2:	9405      	lw	a0,20(sp)

                if (diff_val > max_diff_val)
412793a4:	ec42      	slt	a0,v0
412793a6:	6002      	bteqz	412793ac <.L58+0x54>
412793a8:	d106      	sw	s1,24(sp)
                {
                    max_diff_index = i;
412793aa:	d205      	sw	v0,20(sp)
                    max_diff_val = diff_val;
412793ac:	9309      	lw	v1,36(sp)
412793ae:	4121      	addiu	s1,s1,1
412793b0:	e963      	sltu	s1,v1
412793b2:	4808      	addiu	s0,8
412793b4:	61ee      	btnez	41279392 <.L58+0x3a>
412793b6:	9605      	lw	a2,20(sp)
                }
            }
        }

        //判断离散程度最大的点是否超过限制，如果超过限制，剔除该点，重复计算下一点
        if (max_diff_val > MAX_POWER_DIFF_VAL)
412793b8:	f300 5601 	slti	a2,769
412793bc:	613b      	btnez	41279434 <.L58+0xdc>
412793be:	9406      	lw	a0,24(sp)
        {   
            libc_print("invalid power", power_val_array[max_diff_index*2 + analyse_flag], 2);
412793c0:	9508      	lw	a1,32(sp)
412793c2:	3784      	sll	a3,a0,1
412793c4:	e7b9      	addu	a2,a3,a1
412793c6:	920f      	lw	v0,60(sp)
412793c8:	30c8      	sll	s0,a2,2
412793ca:	e041      	addu	s0,v0
412793cc:	98a0      	lw	a1,0(s0)
412793ce:	b14a      	lw	s1,412794f4 <.L58+0x19c>
412793d0:	0c3b      	la	a0,412794bc <.L58+0x164>
412793d2:	6e02      	li	a2,2
412793d4:	e940      	jalr	s1
412793d6:	6f4b      	li	a3,75
412793d8:	9506      	lw	a1,24(sp)

            libc_print("index ", max_diff_index, 2);
412793da:	b347      	lw	v1,412794f4 <.L58+0x19c>
412793dc:	0c3c      	la	a0,412794cc <.L58+0x174>
412793de:	6f4b      	li	a3,75
412793e0:	eb40      	jalr	v1
412793e2:	6e02      	li	a2,2
412793e4:	9109      	lw	s1,36(sp)
            
            //标记该点为无效点
            power_val_array[max_diff_index*2 + analyse_flag] = INVALID_POWER_VAL;

            invalid_data_flag = TRUE;

            max_diff_val = 0;

            //重新计算一次平均值
            power_val_total = 0;

            div_val = 0;

            for (i = 0; i < sample_count; i++)
412793e6:	6f00      	li	a3,0
412793e8:	f7ff 6c1f 	li	a0,65535
412793ec:	6d01      	li	a1,1
412793ee:	ef23      	sltu	a3,s1
412793f0:	d880      	sw	a0,0(s0)
412793f2:	d507      	sw	a1,28(sp)
412793f4:	d705      	sw	a3,20(sp)
412793f6:	67a7      	move	a1,a3
412793f8:	6787      	move	a0,a3
412793fa:	600e      	bteqz	41279418 <.L58+0xc0>
412793fc:	9208      	lw	v0,32(sp)
412793fe:	930f      	lw	v1,60(sp)
41279400:	3148      	sll	s1,v0,2
41279402:	9609      	lw	a2,36(sp)
41279404:	e169      	addu	v0,s1,v1
41279406:	9a60      	lw	v1,0(v0)
            {     
                if (power_val_array[i*2 + analyse_flag] != INVALID_POWER_VAL)
41279408:	f7ff 731f 	cmpi	v1,65535
4127940c:	6002      	bteqz	41279412 <.L58+0xba>
4127940e:	e575      	addu	a1,v1
                {
                    power_val_total += power_val_array[i*2 + analyse_flag];
41279410:	4481      	addiu	a0,a0,1
                                 
                    div_val++;
41279412:	46cf      	addiu	a2,a2,-1
41279414:	4a08      	addiu	v0,8
41279416:	2ef7      	bnez	a2,41279406 <.L58+0xae>
41279418:	ed9b      	divu	zero,a1,a0
                }
            }  

            power_val = (power_val_total / div_val); 
4127941a:	9608      	lw	a2,32(sp)

            if(analyse_flag == 0)
4127941c:	ea12      	mflo	v0
4127941e:	d204      	sw	v0,16(sp)
41279420:	2e2b      	bnez	a2,41279478 <.L58+0x120>
41279422:	ed12      	mflo	a1
            {
                libc_print("cal left power", power_val, 2);
41279424:	0c2c      	la	a0,412794d4 <.L58+0x17c>
41279426:	b134      	lw	s1,412794f4 <.L58+0x19c>
            }
            else
            {
                libc_print("cal right power", power_val, 2);    
41279428:	6e02      	li	a2,2
4127942a:	e940      	jalr	s1
4127942c:	6f4b      	li	a3,75
4127942e:	6900      	li	s1,0
41279430:	9609      	lw	a2,36(sp)
41279432:	2eab      	bnez	a2,4127938a <.L58+0x32>
41279434:	9707      	lw	a3,28(sp)
            }
        }
        else
        {
            break;
        }
    }

    //存在无效点需要重新计算cfo平均值
    if (invalid_data_flag == TRUE)
41279436:	2718      	beqz	a3,41279468 <.L58+0x110>
41279438:	9309      	lw	v1,36(sp)
    {
        power_val_total = 0;

        div_val = 0;

        for (i = 0; i < sample_count; i++)
4127943a:	6c00      	li	a0,0
4127943c:	ec63      	sltu	a0,v1
4127943e:	67a4      	move	a1,a0
41279440:	6039      	bteqz	412794b4 <.L58+0x15c>
41279442:	9708      	lw	a3,32(sp)
41279444:	960f      	lw	a2,60(sp)
41279446:	32e8      	sll	v0,a3,2
41279448:	9309      	lw	v1,36(sp)
4127944a:	e2c9      	addu	v0,a2
4127944c:	9ac0      	lw	a2,0(v0)
        {
            if (power_val_array[i*2 + analyse_flag] != INVALID_POWER_VAL)
4127944e:	f7ff 761f 	cmpi	a2,65535
41279452:	6002      	bteqz	41279458 <.L58+0x100>
41279454:	e4d1      	addu	a0,a2
            {
                power_val_total += power_val_array[i*2 + analyse_flag];
41279456:	45a1      	addiu	a1,a1,1
                div_val++;
41279458:	436f      	addiu	v1,v1,-1
4127945a:	4a08      	addiu	v0,8
4127945c:	2bf7      	bnez	v1,4127944c <.L58+0xf4>
4127945e:	5d02      	sltiu	a1,2
            }
            else
            {
                continue;
            }
        }

        //至少要有2组记录值
        if (div_val < 2)
41279460:	6129      	btnez	412794b4 <.L58+0x15c>
41279462:	ecbb      	divu	zero,a0,a1
        {
            return FALSE;
        }

        power_val = (power_val_total / div_val);
41279464:	ed12      	mflo	a1
41279466:	d504      	sw	a1,16(sp)
41279468:	9408      	lw	a0,32(sp)
    }

    if(analyse_flag == 0)
4127946a:	2c09      	bnez	a0,4127947e <.L58+0x126>
4127946c:	9304      	lw	v1,16(sp)
    {
        *p_power_val_left = power_val;
4127946e:	9210      	lw	v0,64(sp)
41279470:	6901      	li	s1,1

        analyse_flag = 1;
41279472:	da60      	sw	v1,0(v0)
41279474:	d108      	sw	s1,32(sp)
41279476:	1770      	b	41279358 <.L58>
41279478:	9504      	lw	a1,16(sp)
4127947a:	0c1b      	la	a0,412794e4 <.L58+0x18c>
4127947c:	17d4      	b	41279426 <.L58+0xce>
4127947e:	9604      	lw	a2,16(sp)

        goto retry;
    }
    else
    {
        *p_power_val_right = power_val;
41279480:	9311      	lw	v1,68(sp)
41279482:	940f      	lw	a0,60(sp)
    }

    if((libc_abs(*p_power_val_left - power_val_array[sample_cnt - 2]) <= MAX_POWER_DIFF_VAL)
41279484:	dbc0      	sw	a2,0(v1)
41279486:	900e      	lw	s0,56(sp)
41279488:	9510      	lw	a1,64(sp)
4127948a:	3208      	sll	v0,s0,2
4127948c:	e281      	addu	s0,v0,a0
4127948e:	9de0      	lw	a3,0(a1)
41279490:	f7ff 98d8 	lw	a2,-8(s0)
41279494:	1922 e4d0 	jal	41279340 <libc_abs>
41279498:	e7d3      	subu	a0,a3,a2
4127949a:	f300 5a01 	sltiu	v0,769
4127949e:	600a      	bteqz	412794b4 <.L58+0x15c>
412794a0:	f7ff 98fc 	lw	a3,-4(s0)
412794a4:	9504      	lw	a1,16(sp)
412794a6:	1922 e4d0 	jal	41279340 <libc_abs>
412794aa:	e5f3      	subu	a0,a1,a3
412794ac:	f300 5a01 	sltiu	v0,769
412794b0:	6a01      	li	v0,1
       && (libc_abs(*p_power_val_right - power_val_array[sample_cnt - 1]) <= MAX_POWER_DIFF_VAL))
    {
        return TRUE;
412794b2:	6101      	btnez	412794b6 <.L58+0x15e>
412794b4:	6a00      	li	v0,0
    }
    else
    {
        return FALSE;
412794b6:	6477      	restore	56,ra,s0-s1
    }
}
412794b8:	e8a0      	jrc	ra
412794ba:	0000      	addiu	s0,sp,0
412794bc:	6e69      	li	a2,105
412794be:	6176      	btnez	412795ac <adc_data_deal+0xb4>
412794c0:	696c      	li	s1,108
412794c2:	2064      	beqz	s0,4127958c <adc_data_deal+0x94>
412794c4:	6f70      	li	a3,112
412794c6:	6577      	move	s3,a3
412794c8:	0072      	addiu	s0,sp,456
412794ca:	0000      	addiu	s0,sp,0
412794cc:	6e69      	li	a2,105
412794ce:	6564      	move	v1,a0
412794d0:	2078      	beqz	s0,412795c2 <adc_data_deal+0xca>
412794d2:	0000      	addiu	s0,sp,0
412794d4:	6163      	btnez	4127959c <adc_data_deal+0xa4>
412794d6:	206c      	beqz	s0,412795b0 <adc_data_deal+0xb8>
412794d8:	656c      	move	t3,a0
412794da:	7466      	cmpi	a0,102
412794dc:	7020      	cmpi	s0,32
412794de:	776f      	cmpi	a3,111
412794e0:	7265      	cmpi	v0,101
412794e2:	0000      	addiu	s0,sp,0
412794e4:	6163      	btnez	412795ac <adc_data_deal+0xb4>
412794e6:	206c      	beqz	s0,412795c0 <adc_data_deal+0xc8>
412794e8:	6972      	li	s1,114
412794ea:	6867      	li	s0,103
412794ec:	2074      	beqz	s0,412795d6 <adc_data_deal+0xde>
412794ee:	6f70      	li	a3,112
412794f0:	6577      	move	s3,a3
412794f2:	0072      	addiu	s0,sp,456
412794f4:	88dd      	lh	a2,58(s0)
412794f6:	bfc3      	lwu	a2,12(a3)

412794f8 <adc_data_deal>:
412794f8:	64f4      	save	32,ra,s0-s1

void adc_data_deal(void)
{
412794fa:	b133      	lw	s1,412795c4 <adc_data_deal+0xcc>
    int32 ret_val;
    uint8 *src_buffer_addr = (uint8 *)SOUND_DATA_ADDR;
    
	if ((act_readl(DMAIP) & (1 << DMAIP_DMA1HFIP)) != 0)
412794fc:	f200 6800 	li	s0,512
41279500:	9940      	lw	v0,0(s1)
41279502:	ea0c      	and	v0,s0
41279504:	2a3d      	bnez	v0,41279580 <adc_data_deal+0x88>
41279506:	9980      	lw	a0,0(s1)
    {
        libc_print("half",0,0);
        while ((act_readl(DMAIP) & (1 << DMAIP_DMA1HFIP)) != 0)
        {
            act_writel((1 << DMAIP_DMA1HFIP), DMAIP);
        }   
    }
    else if ((act_readl(DMAIP) & (1 << DMAIP_DMA1TCIP)) != 0)
41279508:	6802      	li	s0,2
4127950a:	ec0c      	and	a0,s0
4127950c:	2c02      	bnez	a0,41279512 <adc_data_deal+0x1a>
4127950e:	6474      	restore	32,ra,s0-s1
    {
        libc_print("Complete", g_adc_buffer_ptr, 2);
        while ((act_readl(DMAIP) & (1 << DMAIP_DMA1TCIP)) != 0)
        {
            act_writel((1 << DMAIP_DMA1TCIP), DMAIP);
        }

        //print_channel_data(SAVE_SOUND_DATA_ADDR + i * SOUND_DATA_LEN);

        //统计左声道能量值
        caculate_power_value(src_buffer_addr, SOUND_DATA_LEN / 2, power_val_array, g_sample_count++);
    
        //统计右声道能量值
        caculate_power_value(src_buffer_addr + 2, SOUND_DATA_LEN / 2, power_val_array, g_sample_count++);
 
        //超过最小采样次数,开始进行数据分析
        if(g_sample_count >= MIN_POWER_SAMPLE_COUNT)
        {
            //比较采用得到的能量平均值，如果平均值在阈值范围内，则认为采样数据已经稳定
            ret_val = analyse_power_val_valid(g_sample_count, power_val_array, &g_power_val_left, &g_power_val_right);

            //如果数据稳定，结束数据采样
            if(ret_val == TRUE)
            {
                act_writel(0, DMA1CTL);               
            }
            else
            {
                g_sample_count = 0;
            }
        }
    }
    else
    {
        ;//qac
    }	    
}
41279510:	e8a0      	jrc	ra
41279512:	b72f      	lw	a3,412795cc <adc_data_deal+0xd4>
41279514:	b22d      	lw	v0,412795c8 <adc_data_deal+0xd0>
41279516:	a7a0      	lbu	a1,0(a3)
41279518:	67d0      	move	a2,s0
4127951a:	0c25      	la	a0,412795ac <adc_data_deal+0xb4>
4127951c:	ed11      	zeb	a1
4127951e:	ea40      	jalr	v0
41279520:	6f4b      	li	a3,75
41279522:	99c0      	lw	a2,0(s1)
41279524:	ee0c      	and	a2,s0
41279526:	2606      	beqz	a2,41279534 <adc_data_deal+0x3c>
41279528:	6771      	move	v1,s1
4127952a:	67d0      	move	a2,s0
4127952c:	dbc0      	sw	a2,0(v1)
4127952e:	9b00      	lw	s0,0(v1)
41279530:	e8cc      	and	s0,a2
41279532:	28fc      	bnez	s0,4127952c <adc_data_deal+0x34>
41279534:	b028      	lw	s0,412795d4 <adc_data_deal+0xdc>
41279536:	b127      	lw	s1,412795d0 <adc_data_deal+0xd8>
41279538:	a0e0      	lbu	a3,0(s0)
4127953a:	f001 6d00 	li	a1,2048
4127953e:	4781      	addiu	a0,a3,1
41279540:	c080      	sb	a0,0(s0)
41279542:	b420      	lw	a0,412795c0 <adc_data_deal+0xc8>
41279544:	67d1      	move	a2,s1
41279546:	1922 e4bb 	jal	412792ec <caculate_power_value>
4127954a:	ef11      	zeb	a3
4127954c:	a0e0      	lbu	a3,0(s0)
4127954e:	b31d      	lw	v1,412795c0 <adc_data_deal+0xc8>
41279550:	47a1      	addiu	a1,a3,1
41279552:	c0a0      	sb	a1,0(s0)
41279554:	4382      	addiu	a0,v1,2
41279556:	f001 6d00 	li	a1,2048
4127955a:	67d1      	move	a2,s1
4127955c:	1922 e4bb 	jal	412792ec <caculate_power_value>
41279560:	ef11      	zeb	a3
41279562:	a080      	lbu	a0,0(s0)
41279564:	5c04      	sltiu	a0,4
41279566:	61d3      	btnez	4127950e <adc_data_deal+0x16>
41279568:	b61c      	lw	a2,412795d8 <adc_data_deal+0xe0>
4127956a:	b71d      	lw	a3,412795dc <adc_data_deal+0xe4>
4127956c:	1922 e4d3 	jal	4127934c <analyse_power_val_valid>
41279570:	67b1      	move	a1,s1
41279572:	7201      	cmpi	v0,1
41279574:	6116      	btnez	412795a2 <adc_data_deal+0xaa>
41279576:	b61b      	lw	a2,412795e0 <adc_data_deal+0xe8>
41279578:	6a00      	li	v0,0
4127957a:	de40      	sw	v0,0(a2)
4127957c:	6474      	restore	32,ra,s0-s1
4127957e:	e8a0      	jrc	ra
41279580:	6d00      	li	a1,0
41279582:	b212      	lw	v0,412795c8 <adc_data_deal+0xd0>
41279584:	0c0d      	la	a0,412795b8 <adc_data_deal+0xc0>
41279586:	67c5      	move	a2,a1
41279588:	ea40      	jalr	v0
4127958a:	6f4b      	li	a3,75
4127958c:	9960      	lw	v1,0(s1)
4127958e:	eb0c      	and	v1,s0
41279590:	23be      	beqz	v1,4127950e <adc_data_deal+0x16>
41279592:	6791      	move	a0,s1
41279594:	6770      	move	v1,s0
41279596:	dc60      	sw	v1,0(a0)
41279598:	9ca0      	lw	a1,0(a0)
4127959a:	ed6c      	and	a1,v1
4127959c:	2dfc      	bnez	a1,41279596 <adc_data_deal+0x9e>
4127959e:	6474      	restore	32,ra,s0-s1
412795a0:	e8a0      	jrc	ra
412795a2:	6f00      	li	a3,0
412795a4:	c0e0      	sb	a3,0(s0)
412795a6:	6474      	restore	32,ra,s0-s1
412795a8:	e8a0      	jrc	ra
412795aa:	0000      	addiu	s0,sp,0
412795ac:	6f43      	li	a3,67
412795ae:	706d      	cmpi	s0,109
412795b0:	656c      	move	t3,a0
412795b2:	6574      	move	s3,a0
412795b4:	0000      	addiu	s0,sp,0
412795b6:	0000      	addiu	s0,sp,0
412795b8:	6168      	btnez	4127968a <channel_test+0xa6>
412795ba:	666c      	0x666c
412795bc:	0000      	addiu	s0,sp,0
412795be:	0000      	addiu	s0,sp,0
412795c0:	2800      	bnez	s0,412795c2 <adc_data_deal+0xca>
412795c2:	9fc2      	lw	a2,8(a3)
412795c4:	0004      	addiu	s0,sp,16
412795c6:	c00c      	sb	s0,12(s0)
412795c8:	88dd      	lh	a2,58(s0)
412795ca:	bfc3      	lwu	a2,12(a3)
412795cc:	9978      	lw	v1,96(s1)
412795ce:	4127      	addiu	s1,s1,7
412795d0:	9984      	lw	a0,16(s1)
412795d2:	4127      	addiu	s1,s1,7
412795d4:	9979      	lw	v1,100(s1)
412795d6:	4127      	addiu	s1,s1,7
412795d8:	997c      	lw	v1,112(s1)
412795da:	4127      	addiu	s1,s1,7
412795dc:	9980      	lw	a0,0(s1)
412795de:	4127      	addiu	s1,s1,7
412795e0:	0028      	addiu	s0,sp,160
412795e2:	c00c      	sb	s0,12(s0)

412795e4 <channel_test>:
412795e4:	f004 64f5 	save	a0,40,ra,s0-s1

int32 channel_test(void *arg_buffer, uint32 test_id)
{
412795e8:	6901      	li	s1,1
    int32 i;
    uint32 ret_val = TRUE;
412795ea:	b445      	lw	a0,412796fc <channel_test+0x118>
    channel_test_arg_t *channel_test_arg = (channel_test_arg_t *)arg_buffer;
    
    libc_memset(power_val_array, 0, sizeof(power_val_array));
412795ec:	b245      	lw	v0,41279700 <channel_test+0x11c>
412795ee:	67f1      	move	a3,s1
412795f0:	6705      	move	s0,a1
412795f2:	d104      	sw	s1,16(sp)
412795f4:	6d00      	li	a1,0
412795f6:	ea40      	jalr	v0
412795f8:	6e28      	li	a2,40
412795fa:	b443      	lw	a0,41279704 <channel_test+0x120>

    //开始通过linein通道采集数据
    init_dma_to_adc(SOUND_DATA_ADDR, SOUND_DATA_LEN);  
412795fc:	f002 6d00 	li	a1,4096
41279600:	1922 e44c 	jal	41279130 <init_dma_to_adc>
41279604:	6500      	nop
41279606:	6b08      	li	v1,8
41279608:	e86e      	xor	s0,v1
4127960a:	5801      	sltiu	s0,1
4127960c:	b23f      	lw	v0,41279708 <channel_test+0x124>
4127960e:	6738      	move	s1,t8
41279610:	9a00      	lw	s0,0(v0)

    while(1)
    {
        if(act_readl(DMA1CTL) == 0)
41279612:	28fe      	bnez	s0,41279610 <channel_test+0x2c>
41279614:	b23e      	lw	v0,4127970c <channel_test+0x128>
        {
            sys_free_irq(IRQ_DMA1);
41279616:	6c13      	li	a0,19
41279618:	67b0      	move	a1,s0
4127961a:	67d0      	move	a2,s0
4127961c:	ea40      	jalr	v0
4127961e:	6f15      	li	a3,21
41279620:	294e      	bnez	s1,412796be <channel_test+0xda>

            if(test_id == TESTID_MIC_CH_TEST)
41279622:	b33c      	lw	v1,41279710 <channel_test+0x12c>
            {
                //采集结束，关闭通道
                disable_ain(AI_SOURCE_ASEMIC);                    
            }
            else
            {
                //采集结束，关闭通道
                disable_ain(AI_SOURCE_AUX1);   
41279624:	6c01      	li	a0,1
41279626:	67b1      	move	a1,s1
41279628:	67d1      	move	a2,s1
4127962a:	eb40      	jalr	v1
4127962c:	6f09      	li	a3,9
4127962e:	b039      	lw	s0,41279710 <channel_test+0x12c>
                disable_ain(AI_SOURCE_AUX0); 
41279630:	6791      	move	a0,s1
41279632:	67b1      	move	a1,s1
41279634:	67d1      	move	a2,s1
41279636:	e840      	jalr	s0
41279638:	6f09      	li	a3,9
4127963a:	b137      	lw	s1,41279714 <channel_test+0x130>
            }
            break;
        }
    }
    
    DEBUG_ATT_PRINT("return power val left", g_power_val_left, 2);
4127963c:	b034      	lw	s0,4127970c <channel_test+0x128>
4127963e:	99a0      	lw	a1,0(s1)
41279640:	0c23      	la	a0,412796cc <channel_test+0xe8>
41279642:	6e02      	li	a2,2
41279644:	e840      	jalr	s0
41279646:	6f4b      	li	a3,75
41279648:	b634      	lw	a2,41279718 <channel_test+0x134>

    DEBUG_ATT_PRINT("return power val right", g_power_val_right, 2);
4127964a:	0c27      	la	a0,412796e4 <channel_test+0x100>
4127964c:	9ea0      	lw	a1,0(a2)
4127964e:	6f4b      	li	a3,75
41279650:	e840      	jalr	s0
41279652:	6e02      	li	a2,2
41279654:	930a      	lw	v1,40(sp)

    if(channel_test_arg->test_left_ch == TRUE)
41279656:	a380      	lbu	a0,0(v1)
41279658:	7401      	cmpi	a0,1
4127965a:	6106      	btnez	41279668 <channel_test+0x84>
4127965c:	9ba1      	lw	a1,4(v1)
    {
        if(g_power_val_left < channel_test_arg->left_ch_power_threadshold)
4127965e:	99e0      	lw	a3,0(s1)
41279660:	efa3      	sltu	a3,a1
41279662:	6002      	bteqz	41279668 <channel_test+0x84>
41279664:	6a00      	li	v0,0
        {
            ret_val = FALSE;
41279666:	d204      	sw	v0,16(sp)
41279668:	930a      	lw	v1,40(sp)
        }
    }

    if(channel_test_arg->test_right_ch == TRUE)
4127966a:	a381      	lbu	a0,1(v1)
4127966c:	7401      	cmpi	a0,1
4127966e:	611a      	btnez	412796a4 <channel_test+0xc0>
41279670:	b52a      	lw	a1,41279718 <channel_test+0x134>
    {
        if(g_power_val_right < channel_test_arg->right_ch_power_threadshold)
41279672:	9b62      	lw	v1,8(v1)
41279674:	9dc0      	lw	a2,0(a1)
41279676:	ee63      	sltu	a2,v1
41279678:	6015      	bteqz	412796a4 <channel_test+0xc0>
4127967a:	6f00      	li	a3,0
        {
            ret_val = FALSE;
4127967c:	d704      	sw	a3,16(sp)
4127967e:	b726      	lw	a3,41279714 <channel_test+0x130>
        }
    }  

    if(ret_val == FALSE)
    {
        channel_test_arg->left_ch_power_threadshold = g_power_val_left;
41279680:	940a      	lw	a0,40(sp)
41279682:	9fa0      	lw	a1,0(a3)
41279684:	b625      	lw	a2,41279718 <channel_test+0x134>
        channel_test_arg->right_ch_power_threadshold = g_power_val_right;
41279686:	dca1      	sw	a1,4(a0)
41279688:	9204      	lw	v0,16(sp)
    }
    
    if(test_id == TESTID_LINEIN_CH_TEST_ATS2825 || test_id == TESTID_LINEIN_CH_TEST_ATS2823)
    {
#ifdef DEBUG_WRITE_CHANNEL_DATA
        write_temp_file(1, SOUND_DATA_ADDR, SOUND_DATA_LEN);
#endif  
    }
    else if(test_id == TESTID_MIC_CH_TEST)
    {
#ifdef DEBUG_WRITE_CHANNEL_DATA
        write_temp_file(0, SOUND_DATA_ADDR, SOUND_DATA_LEN);
#endif                     
    }      
    else
    {
        ;//nothing for QAC
    }

    if(ret_val == TRUE)
4127968a:	9e60      	lw	v1,0(a2)
4127968c:	7201      	cmpi	v0,1
4127968e:	dc62      	sw	v1,8(a0)
41279690:	600e      	bteqz	412796ae <channel_test+0xca>
41279692:	940a      	lw	a0,40(sp)
    {
        ret_val = thd_test(SOUND_DATA_ADDR, channel_test_arg);
    }
    else
    {
        channel_test_arg->left_ch_SNR_threadshold = 0;
41279694:	9204      	lw	v0,16(sp)
        channel_test_arg->left_ch_max_sig_point = 0;
        channel_test_arg->right_ch_SNR_threadshold = 0;
        channel_test_arg->right_ch_max_sig_point = 0;
    }
    
    return ret_val;
}
41279696:	6b00      	li	v1,0
41279698:	dc63      	sw	v1,12(a0)
4127969a:	cc6a      	sh	v1,20(a0)
4127969c:	dc64      	sw	v1,16(a0)
4127969e:	cc6b      	sh	v1,22(a0)
412796a0:	6475      	restore	40,ra,s0-s1
412796a2:	e8a0      	jrc	ra
412796a4:	9204      	lw	v0,16(sp)
412796a6:	22eb      	beqz	v0,4127967e <channel_test+0x9a>
412796a8:	9204      	lw	v0,16(sp)
412796aa:	7201      	cmpi	v0,1
412796ac:	61f2      	btnez	41279692 <channel_test+0xae>
412796ae:	b416      	lw	a0,41279704 <channel_test+0x120>
412796b0:	b21b      	lw	v0,4127971c <channel_test+0x138>
412796b2:	ea40      	jalr	v0
412796b4:	950a      	lw	a1,40(sp)
412796b6:	d204      	sw	v0,16(sp)
412796b8:	9204      	lw	v0,16(sp)
412796ba:	6475      	restore	40,ra,s0-s1
412796bc:	e8a0      	jrc	ra
412796be:	b115      	lw	s1,41279710 <channel_test+0x12c>
412796c0:	6c02      	li	a0,2
412796c2:	67b0      	move	a1,s0
412796c4:	67d0      	move	a2,s0
412796c6:	e940      	jalr	s1
412796c8:	6f09      	li	a3,9
412796ca:	17b7      	b	4127963a <channel_test+0x56>
412796cc:	6572      	move	s3,v0
412796ce:	7574      	cmpi	a1,116
412796d0:	6e72      	li	a2,114
412796d2:	7020      	cmpi	s0,32
412796d4:	776f      	cmpi	a3,111
412796d6:	7265      	cmpi	v0,101
412796d8:	7620      	cmpi	a2,32
412796da:	6c61      	li	a0,97
412796dc:	6c20      	li	a0,32
412796de:	6665      	0x6665
412796e0:	0074      	addiu	s0,sp,464
412796e2:	0000      	addiu	s0,sp,0
412796e4:	6572      	move	s3,v0
412796e6:	7574      	cmpi	a1,116
412796e8:	6e72      	li	a2,114
412796ea:	7020      	cmpi	s0,32
412796ec:	776f      	cmpi	a3,111
412796ee:	7265      	cmpi	v0,101
412796f0:	7620      	cmpi	a2,32
412796f2:	6c61      	li	a0,97
412796f4:	7220      	cmpi	v0,32
412796f6:	6769      	move	v1,t1
412796f8:	7468      	cmpi	a0,104
412796fa:	0000      	addiu	s0,sp,0
412796fc:	9984      	lw	a0,16(s1)
412796fe:	4127      	addiu	s1,s1,7
41279700:	88d5      	lh	a2,42(s0)
41279702:	bfc3      	lwu	a2,12(a3)
41279704:	2800      	bnez	s0,41279706 <channel_test+0x122>
41279706:	9fc2      	lw	a2,8(a3)
41279708:	0028      	addiu	s0,sp,160
4127970a:	c00c      	sb	s0,12(s0)
4127970c:	88dd      	lh	a2,58(s0)
4127970e:	bfc3      	lwu	a2,12(a3)
41279710:	88cd      	lh	a2,26(s0)
41279712:	bfc3      	lwu	a2,12(a3)
41279714:	997c      	lw	v1,112(s1)
41279716:	4127      	addiu	s1,s1,7
41279718:	9980      	lw	a0,0(s1)
4127971a:	4127      	addiu	s1,s1,7
4127971c:	9441      	lw	a0,260(sp)
4127971e:	413b      	daddiu	s1,s1,-5

41279720 <act_test_report_channel_result>:
41279720:	f00c 64f5 	save	a0-a2,40,ra,s0-s1

void act_test_report_channel_result(uint16 test_id, int32 ret_val, void *arg_buffer)
{
41279724:	6765      	move	v1,a1
41279726:	67a4      	move	a1,a0
41279728:	6f00      	li	a3,0
    return_result_t *return_data;
    uint16 trans_bytes = 0;
4127972a:	67dd      	move	a2,sp
4127972c:	b435      	lw	a0,41279800 <.LBE3+0x4>
    channel_test_arg_t *channel_test_arg = (channel_test_arg_t *)arg_buffer;

    if (g_test_mode != TEST_MODE_CARD)
4127972e:	cee8      	sh	a3,16(a2)
41279730:	a440      	lbu	v0,0(a0)
41279732:	ed31      	zeh	a1
41279734:	2260      	beqz	v0,412797f6 <.LBB3>

41279736 <.LBB2>:
41279736:	b134      	lw	s1,41279804 <.LBE3+0x8>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
41279738:	679d      	move	a0,sp

        return_data->test_id = test_id;

        return_data->test_result = ret_val;

        int32_to_unicode(channel_test_arg->left_ch_power_threadshold, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
4127973a:	c168      	sb	v1,8(s1)
4127973c:	c9a3      	sh	a1,6(s1)
4127973e:	acc8      	lhu	a2,16(a0)
41279740:	970c      	lw	a3,48(sp)
41279742:	35c4      	sll	a1,a2,1
41279744:	9f81      	lw	a0,4(a3)
41279746:	e535      	addu	a1,s1
41279748:	4d0a      	addiu	a1,10
4127974a:	0604      	addiu	a2,sp,16
4127974c:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41279750:	6f0a      	li	a3,10
41279752:	677d      	move	v1,sp
        
        return_data->return_arg[trans_bytes++] = 0x002c;
41279754:	ab48      	lhu	v0,16(v1)
41279756:	970c      	lw	a3,48(sp)
        
        int32_to_unicode(channel_test_arg->right_ch_power_threadshold, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41279758:	42c1      	addiu	a2,v0,1
4127975a:	cbc8      	sh	a2,16(v1)
4127975c:	3044      	sll	s0,v0,1
4127975e:	ee31      	zeh	a2
41279760:	e031      	addu	a0,s0,s1
41279762:	35c4      	sll	a1,a2,1
41279764:	682c      	li	s0,44
41279766:	cc05      	sh	s0,10(a0)
41279768:	e535      	addu	a1,s1
4127976a:	9f82      	lw	a0,8(a3)
4127976c:	4d0a      	addiu	a1,10
4127976e:	0604      	addiu	a2,sp,16
41279770:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41279774:	6f0a      	li	a3,10
41279776:	677d      	move	v1,sp
        
        return_data->return_arg[trans_bytes++] = 0x002c;
41279778:	abc8      	lhu	a2,16(v1)
4127977a:	4681      	addiu	a0,a2,1
4127977c:	cb88      	sh	a0,16(v1)
4127977e:	32c4      	sll	v0,a2,1
41279780:	ec31      	zeh	a0
        
        int32_to_unicode(channel_test_arg->left_ch_SNR_threadshold, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
41279782:	960c      	lw	a2,48(sp)
41279784:	3584      	sll	a1,a0,1
41279786:	e23d      	addu	a3,v0,s1
41279788:	9e83      	lw	a0,12(a2)
4127978a:	e535      	addu	a1,s1
4127978c:	cf05      	sh	s0,10(a3)
4127978e:	4d0a      	addiu	a1,10
41279790:	0604      	addiu	a2,sp,16
41279792:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41279796:	6f0a      	li	a3,10
41279798:	677d      	move	v1,sp
        
        return_data->return_arg[trans_bytes++] = 0x002c;
4127979a:	ab48      	lhu	v0,16(v1)
4127979c:	4281      	addiu	a0,v0,1
4127979e:	cb88      	sh	a0,16(v1)
412797a0:	3744      	sll	a3,v0,1
412797a2:	ec31      	zeh	a0
        
        int32_to_unicode(channel_test_arg->right_ch_SNR_threadshold, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);
412797a4:	920c      	lw	v0,48(sp)
412797a6:	3584      	sll	a1,a0,1
412797a8:	e739      	addu	a2,a3,s1
412797aa:	9a84      	lw	a0,16(v0)
412797ac:	e535      	addu	a1,s1
412797ae:	ce05      	sh	s0,10(a2)
412797b0:	4d0a      	addiu	a1,10
412797b2:	0604      	addiu	a2,sp,16
412797b4:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
412797b8:	6f0a      	li	a3,10
412797ba:	677d      	move	v1,sp

        return_data->return_arg[trans_bytes++] = 0x002c;
412797bc:	abc8      	lhu	a2,16(v1)
412797be:	6d01      	li	a1,1

        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
412797c0:	4661      	addiu	v1,a2,1
412797c2:	34c4      	sll	a0,a2,1
412797c4:	e429      	addu	v0,a0,s1
412797c6:	6783      	move	a0,v1
412797c8:	ec31      	zeh	a0
412797ca:	67fd      	move	a3,sp
412797cc:	ed8c      	and	a1,a0
412797ce:	cf68      	sh	v1,16(a3)
412797d0:	ca05      	sh	s0,10(v0)
412797d2:	2507      	beqz	a1,412797e2 <.LBB2+0xac>
412797d4:	3784      	sll	a3,a0,1
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
412797d6:	43c1      	addiu	a2,v1,1
412797d8:	67bd      	move	a1,sp
412797da:	e729      	addu	v0,a3,s1
412797dc:	6b00      	li	v1,0
412797de:	cdc8      	sh	a2,16(a1)
412797e0:	ca65      	sh	v1,10(v0)
412797e2:	67fd      	move	a3,sp
        }        
        
        act_test_report_result(return_data, trans_bytes * 2 + 4);
412797e4:	af68      	lhu	v1,16(a3)
412797e6:	b209      	lw	v0,41279808 <.LBE3+0xc>
412797e8:	3464      	sll	a0,v1,1
412797ea:	44a4      	addiu	a1,a0,4
412797ec:	ed31      	zeh	a1
412797ee:	ea40      	jalr	v0
412797f0:	6791      	move	a0,s1

412797f2 <.LBE2>:
412797f2:	6475      	restore	40,ra,s0-s1
    }
    else
    {
        act_test_report_test_log(ret_val, test_id);
    }
}
412797f4:	e8a0      	jrc	ra

412797f6 <.LBB3>:
412797f6:	1802 e437 	jal	410390dc <act_test_report_test_log>
412797fa:	6783      	move	a0,v1

412797fc <.LBE3>:
412797fc:	6475      	restore	40,ra,s0-s1
412797fe:	e8a0      	jrc	ra
41279800:	8dc9      	lh	a2,18(a1)
41279802:	bfc3      	lwu	a2,12(a3)
41279804:	a100      	lbu	s0,0(s1)
41279806:	9fc3      	lw	a2,12(a3)
41279808:	9b41      	lw	v0,4(v1)
4127980a:	41cb      	addiu	a2,s1,-5

4127980c <act_test_linein_channel_test>:
4127980c:	f004 64f4 	save	a0,32,ra,s0-s1

test_result_e act_test_linein_channel_test(void *arg_buffer, uint32 ic_type)
{
41279810:	6a01      	li	v0,1
    int32 result = 0;

    if(ic_type == 1)
41279812:	ed4e      	xor	a1,v0
41279814:	ed43      	sltu	a1,v0
41279816:	6738      	move	s1,t8
41279818:	6800      	li	s0,0
4127981a:	211d      	beqz	s1,41279856 <act_test_linein_channel_test+0x4a>
4127981c:	1922 e475 	jal	412791d4 <play_pcm_init>
    {
        //初始化ADC,DAC,初始化相关DMA
        play_pcm_init(AI_SOURCE_AUX1);
41279820:	6782      	move	a0,v0
41279822:	9408      	lw	a0,32(sp)

        result = channel_test(arg_buffer, TESTID_LINEIN_CH_TEST_ATS2825);
41279824:	1922 e579 	jal	412795e4 <channel_test>
41279828:	6d07      	li	a1,7
4127982a:	1922 e4ae 	jal	412792b8 <play_pcm_exit>

        play_pcm_exit();
4127982e:	6702      	move	s0,v0
41279830:	7001      	cmpi	s0,1

        if(result == TRUE)
41279832:	6021      	bteqz	41279876 <act_test_linein_channel_test+0x6a>
41279834:	281c      	bnez	s0,4127986e <act_test_linein_channel_test+0x62>
        {
            //初始化ADC,DAC,初始化相关DMA
            play_pcm_init(AI_SOURCE_AUX0);

            result = channel_test(arg_buffer, TESTID_LINEIN_CH_TEST_ATS2825);

            play_pcm_exit();         
        }
    }
    else
    {
        //初始化ADC,DAC,初始化相关DMA
        play_pcm_init(AI_SOURCE_AUX0);

        result = channel_test(arg_buffer, TESTID_LINEIN_CH_TEST_ATS2823);

        play_pcm_exit();    
    }
    
    if (result == FALSE)
41279836:	0c14      	la	a0,41279884 <act_test_linein_channel_test+0x78>
    {
        att_write_test_info("linein channel test failed", 0, 0);
41279838:	67b0      	move	a1,s0
4127983a:	67d0      	move	a2,s0
4127983c:	b21f      	lw	v0,412798b8 <act_test_linein_channel_test+0xac>
    }
    else
    {
        att_write_test_info("linein channel test ok", 0, 0);
4127983e:	eac0      	jalrc	v0
41279840:	6c07      	li	a0,7
    }

    if(ic_type == 1)
    {
        act_test_report_channel_result(TESTID_LINEIN_CH_TEST_ATS2825, result, arg_buffer);
41279842:	2901      	bnez	s1,41279846 <act_test_linein_channel_test+0x3a>
41279844:	6c1c      	li	a0,28
    }
    else
    {
        act_test_report_channel_result(TESTID_LINEIN_CH_TEST_ATS2823, result, arg_buffer);    
41279846:	9608      	lw	a2,32(sp)
41279848:	1922 e5c8 	jal	41279720 <act_test_report_channel_result>
4127984c:	67b0      	move	a1,s0
4127984e:	6750      	move	v0,s0
    }
    
    return result;
}
41279850:	ea11      	zeb	v0
41279852:	6474      	restore	32,ra,s0-s1
41279854:	e8a0      	jrc	ra
41279856:	1922 e475 	jal	412791d4 <play_pcm_init>
4127985a:	6790      	move	a0,s0
4127985c:	9408      	lw	a0,32(sp)
4127985e:	6d1c      	li	a1,28
41279860:	1922 e579 	jal	412795e4 <channel_test>
41279864:	6500      	nop
41279866:	1922 e4ae 	jal	412792b8 <play_pcm_exit>
4127986a:	6702      	move	s0,v0
4127986c:	20e4      	beqz	s0,41279836 <act_test_linein_channel_test+0x2a>
4127986e:	6d00      	li	a1,0
41279870:	0c0c      	la	a0,412798a0 <act_test_linein_channel_test+0x94>
41279872:	67c5      	move	a2,a1
41279874:	17e3      	b	4127983c <act_test_linein_channel_test+0x30>
41279876:	1922 e475 	jal	412791d4 <play_pcm_init>
4127987a:	6c00      	li	a0,0
4127987c:	9408      	lw	a0,32(sp)
4127987e:	6d07      	li	a1,7
41279880:	17ef      	b	41279860 <act_test_linein_channel_test+0x54>
41279882:	0000      	addiu	s0,sp,0
41279884:	696c      	li	s1,108
41279886:	656e      	move	t3,a2
41279888:	6e69      	li	a2,105
4127988a:	6320      	addiu	sp,256
4127988c:	6168      	btnez	4127995e <pcm_table+0x6>
4127988e:	6e6e      	li	a2,110
41279890:	6c65      	li	a0,101
41279892:	7420      	cmpi	a0,32
41279894:	7365      	cmpi	v1,101
41279896:	2074      	beqz	s0,41279980 <g_power_val_right>
41279898:	6166      	btnez	41279966 <pcm_table+0xe>
4127989a:	6c69      	li	a0,105
4127989c:	6465      	restore	40,ra,s0
4127989e:	0000      	addiu	s0,sp,0
412798a0:	696c      	li	s1,108
412798a2:	656e      	move	t3,a2
412798a4:	6e69      	li	a2,105
412798a6:	6320      	addiu	sp,256
412798a8:	6168      	btnez	4127997a <g_sample_count+0x1>
412798aa:	6e6e      	li	a2,110
412798ac:	6c65      	li	a0,101
412798ae:	7420      	cmpi	a0,32
412798b0:	7365      	cmpi	v1,101
412798b2:	2074      	beqz	s0,4127999c <power_val_array+0x18>
412798b4:	6b6f      	li	v1,111
412798b6:	0000      	addiu	s0,sp,0
412798b8:	8b89      	lh	a0,18(v1)
412798ba:	bfc3      	lwu	a2,12(a3)

412798bc <act_test_linein_channel_test_ATS2825>:
412798bc:	64c3      	save	24,ra

test_result_e act_test_linein_channel_test_ATS2825(void *arg_buffer)
{
412798be:	1922 e603 	jal	4127980c <act_test_linein_channel_test>
    return act_test_linein_channel_test(arg_buffer, 1);
412798c2:	6d01      	li	a1,1
412798c4:	6443      	restore	24,ra
}
412798c6:	e8a0      	jrc	ra

412798c8 <act_test_linein_channel_test_ATS2823>:
412798c8:	64c3      	save	24,ra

test_result_e act_test_linein_channel_test_ATS2823(void *arg_buffer)
{
412798ca:	1922 e603 	jal	4127980c <act_test_linein_channel_test>
    return act_test_linein_channel_test(arg_buffer, 0);
412798ce:	6d00      	li	a1,0
412798d0:	6443      	restore	24,ra
}
412798d2:	e8a0      	jrc	ra

412798d4 <act_test_mic_channel_test>:
412798d4:	64f4      	save	32,ra,s0-s1

test_result_e act_test_mic_channel_test(void *arg_buffer)
{
412798d6:	6724      	move	s1,a0
412798d8:	1922 e475 	jal	412791d4 <play_pcm_init>
    int32 result;

    //初始化ADC,DAC,初始化相关DMA
    play_pcm_init(AI_SOURCE_ASEMIC);
412798dc:	6c02      	li	a0,2
412798de:	6791      	move	a0,s1

    result = channel_test(arg_buffer, TESTID_MIC_CH_TEST);
412798e0:	1922 e579 	jal	412795e4 <channel_test>
412798e4:	6d08      	li	a1,8
412798e6:	1922 e4ae 	jal	412792b8 <play_pcm_exit>

    play_pcm_exit();
412798ea:	6702      	move	s0,v0
412798ec:	280e      	bnez	s0,4127990a <act_test_mic_channel_test+0x36>

    if (result == FALSE)
412798ee:	b21a      	lw	v0,41279954 <act_test_mic_channel_test+0x80>
    {
        att_write_test_info("mic channel test failed", 0, 0);
    }
    else
    {
        att_write_test_info("mic channel test ok", 0, 0);
412798f0:	67b0      	move	a1,s0
412798f2:	0c0e      	la	a0,41279928 <act_test_mic_channel_test+0x54>
412798f4:	ea40      	jalr	v0
412798f6:	67d0      	move	a2,s0
412798f8:	6c08      	li	a0,8
    }

    act_test_report_channel_result(TESTID_MIC_CH_TEST, result, arg_buffer);
412798fa:	67b0      	move	a1,s0
412798fc:	1922 e5c8 	jal	41279720 <act_test_report_channel_result>
41279900:	67d1      	move	a2,s1
41279902:	6750      	move	v0,s0

    return result;
}
41279904:	ea11      	zeb	v0
41279906:	6474      	restore	32,ra,s0-s1
41279908:	e8a0      	jrc	ra
4127990a:	6d00      	li	a1,0
4127990c:	b212      	lw	v0,41279954 <act_test_mic_channel_test+0x80>
4127990e:	0c0d      	la	a0,41279940 <act_test_mic_channel_test+0x6c>
41279910:	ea40      	jalr	v0
41279912:	67c5      	move	a2,a1
41279914:	6c08      	li	a0,8
41279916:	67b0      	move	a1,s0
41279918:	1922 e5c8 	jal	41279720 <act_test_report_channel_result>
4127991c:	67d1      	move	a2,s1
4127991e:	6750      	move	v0,s0
41279920:	ea11      	zeb	v0
41279922:	6474      	restore	32,ra,s0-s1
41279924:	e8a0      	jrc	ra
41279926:	0000      	addiu	s0,sp,0
41279928:	696d      	li	s1,109
4127992a:	2063      	beqz	s0,412799f2 <power_val_array+0x6e>
4127992c:	6863      	li	s0,99
4127992e:	6e61      	li	a2,97
41279930:	656e      	move	t3,a2
41279932:	206c      	beqz	s0,41279a0c <power_val_array+0x88>
41279934:	6574      	move	s3,a0
41279936:	7473      	cmpi	a0,115
41279938:	6620      	0x6620
4127993a:	6961      	li	s1,97
4127993c:	656c      	move	t3,a0
4127993e:	0064      	addiu	s0,sp,400
41279940:	696d      	li	s1,109
41279942:	2063      	beqz	s0,41279a0a <power_val_array+0x86>
41279944:	6863      	li	s0,99
41279946:	6e61      	li	a2,97
41279948:	656e      	move	t3,a2
4127994a:	206c      	beqz	s0,41279a24 <power_val_array+0xa0>
4127994c:	6574      	move	s3,a0
4127994e:	7473      	cmpi	a0,115
41279950:	6f20      	li	a3,32
41279952:	006b      	addiu	s0,sp,428
41279954:	8b89      	lh	a0,18(v1)
41279956:	bfc3      	lwu	a2,12(a3)

41279958 <pcm_table>:
41279958:	06ba 371f 5f22 78a6 7fce 7328 55c9 2ab2     ...7"_.x..(s.U.*
41279968:	f945 c8df a0de 8757 802f 8c7f aa63 d550     E.....W./...c.P.

41279978 <g_adc_buffer_ptr>:
	...

41279979 <g_sample_count>:
41279979:	0000 0000                                        ...

4127997c <g_power_val_left>:
4127997c:	0000 0000                                   ....

41279980 <g_power_val_right>:
41279980:	0000 0000                                   ....

41279984 <power_val_array>:
	...
Disassembly of section BANK_CONTROL_1_10:

412b9000 <act_test_read_bt_addr>:
412b9000:	f010 64fa 	save	208,ra,s0-s1
}

//该测试项用于读取蓝牙地址，提供给PC工具进行校验，确认地址是否正确
int act_test_read_bt_addr(void *arg_buffer)
{
412b9004:	b362      	lw	v1,412b918c <.LBE7+0x64>
    uint32 i;
    uint8 cmd_data[16];
    int ret_val;
    return_result_t *return_data;
    int trans_bytes;
    nvram_param_rw_t param_rw;
    uint32 bt_addr_valid;
   
    bt_addr_vram_t bt_addr_vram;

    bt_addr_valid = TRUE;
    
    if(g_support_norflash_wp == TRUE)
412b9006:	a340      	lbu	v0,0(v1)
412b9008:	7201      	cmpi	v0,1
412b900a:	6162      	btnez	412b90d0 <.LBE4+0x8>
412b900c:	b061      	lw	s0,412b9190 <.LBE7+0x68>
    {
        sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
412b900e:	040e      	addiu	a0,sp,56
412b9010:	6d00      	li	a1,0
412b9012:	6e80      	li	a2,128
412b9014:	e840      	jalr	s0
412b9016:	6f12      	li	a3,18
412b9018:	677d      	move	v1,sp
    
        if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
412b901a:	ab9c      	lhu	a0,56(v1)
412b901c:	f020 001a 	addiu	s0,sp,58
412b9020:	f5aa 740a 	cmpi	a0,21930
412b9024:	616f      	btnez	412b9104 <.LBE4+0x3c>

412b9026 <.LBB2>:
412b9026:	6c00      	li	a0,0
412b9028:	6770      	move	v1,s0
412b902a:	a340      	lbu	v0,0(v1)
412b902c:	2202      	beqz	v0,412b9032 <.LBB2+0xc>
412b902e:	72ff      	cmpi	v0,255
412b9030:	6104      	btnez	412b903a <.LBB2+0x14>
412b9032:	4481      	addiu	a0,a0,1
412b9034:	5c06      	sltiu	a0,6
412b9036:	4361      	addiu	v1,v1,1
412b9038:	61f8      	btnez	412b902a <.LBB2+0x4>
412b903a:	7406      	cmpi	a0,6

412b903c <.LBE2>:
412b903c:	6758      	move	v0,t8
412b903e:	5a01      	sltiu	v0,1
412b9040:	67d8      	move	a2,t8
412b9042:	7601      	cmpi	a2,1
        {
            param_rw.logical_index = PARAM_BT_ADDR;
            param_rw.rw_len = 6;
            param_rw.rw_buffer = bt_addr_vram.bt_addr;
    
            ret_val = base_param_read(&param_rw);
    
            if (ret_val != 0)
            {
                bt_addr_valid = FALSE;
            }
        }
   }
   else
   {
        param_rw.logical_index = PARAM_BT_ADDR;
        param_rw.rw_len = 6;
        param_rw.rw_buffer = bt_addr_vram.bt_addr;

        ret_val = base_param_read(&param_rw);

        if (ret_val != 0)
        {
            sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
        
            if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
            {
                bt_addr_valid = FALSE;    
            }            
        }
         
   }
    if(bt_addr_valid = TRUE)
    {
        if (_check_bt_addr_valid(bt_addr_vram.bt_addr) == TRUE)
        {
            ret_val = 1;
412b9044:	67b8      	move	a1,t8
412b9046:	d52f      	sw	a1,188(sp)
412b9048:	2573      	beqz	a1,412b9130 <.LBE7+0x8>
        }
        else
        {
            ret_val = 0;
        }
    }
    else
    {
        ret_val = 0;    
    }

    if (ret_val == 1)
412b904a:	6c00      	li	a0,0
    {
        for (i = 0; i < 6; i++)
412b904c:	0508      	addiu	a1,sp,32
412b904e:	e59d      	addu	a3,a1,a0
        {
            cmd_data[i] = bt_addr_vram.bt_addr[i];
412b9050:	a77a      	lbu	v1,26(a3)
412b9052:	4481      	addiu	a0,a0,1
412b9054:	5c06      	sltiu	a0,6
412b9056:	c760      	sb	v1,0(a3)
412b9058:	61fa      	btnez	412b904e <.LBE2+0x12>
412b905a:	b650      	lw	a2,412b9198 <.LBE7+0x70>
        }
        
        if(g_test_mode != TEST_MODE_CARD)
412b905c:	a680      	lbu	a0,0(a2)
412b905e:	2c6f      	bnez	a0,412b913e <.LBE7+0x16>
412b9060:	4505      	addiu	s0,a1,5
412b9062:	6905      	li	s1,5
412b9064:	a0a0      	lbu	a1,0(s0)
        {    
            print_log("bt addr: %x:%x:%x:%x:%x:%x\n", cmd_data[5], cmd_data[4], cmd_data[3], cmd_data[2], cmd_data[1],
                cmd_data[0]);
        }
        else
        {
            for (i = 0; i < 6; i++)
            {
                att_write_test_info("addr: ", cmd_data[5 - i], 1);
412b9066:	b34f      	lw	v1,412b91a0 <.LBE7+0x78>
412b9068:	0c40      	la	a0,412b9168 <.LBE7+0x40>
412b906a:	6e01      	li	a2,1
412b906c:	eb40      	jalr	v1
412b906e:	412f      	addiu	s1,s1,-1
412b9070:	5100      	slti	s1,0
412b9072:	400f      	addiu	s0,s0,-1
412b9074:	60f7      	bteqz	412b9064 <.LBE2+0x28>
412b9076:	b749      	lw	a3,412b9198 <.LBE7+0x70>
            }                
        }
    }
    else
    {
        libc_memset(cmd_data, 0, sizeof(cmd_data));
    }

    if (g_test_mode != TEST_MODE_CARD)
412b9078:	a7a0      	lbu	a1,0(a3)
412b907a:	2552      	beqz	a1,412b9120 <.LBB7>

412b907c <.LBB4>:
412b907c:	67fd      	move	a3,sp
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = TESTID_READ_BTADDR;

        return_data->test_result = ret_val;
412b907e:	b04b      	lw	s0,412b91a8 <.LBE7+0x80>
412b9080:	f0a0 a73c 	lbu	s1,188(a3)
412b9084:	6ec4      	li	a2,196
412b9086:	c028      	sb	s1,8(s0)
412b9088:	052e      	addiu	a1,sp,184

        trans_bytes = 0;

        //蓝牙地址转unicode形式
        bytes_to_unicode(cmd_data, 5, 6, return_data->return_arg, &trans_bytes);
412b908a:	6900      	li	s1,0
412b908c:	67f0      	move	a3,s0
412b908e:	c8c3      	sh	a2,6(s0)
412b9090:	0408      	addiu	a0,sp,32
412b9092:	d504      	sw	a1,16(sp)
412b9094:	6e06      	li	a2,6
412b9096:	d12e      	sw	s1,184(sp)
412b9098:	6d05      	li	a1,5
412b909a:	1a43 e697 	jal	41cb9a5c <bytes_to_unicode>
412b909e:	4f0a      	addiu	a3,10
412b90a0:	942e      	lw	a0,184(sp)

        //添加结束符
        return_data->return_arg[trans_bytes++] = 0x0000;
412b90a2:	6e01      	li	a2,1

        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
412b90a4:	3284      	sll	v0,a0,1
412b90a6:	e20d      	addu	v1,v0,s0
412b90a8:	cb25      	sh	s1,10(v1)
412b90aa:	4461      	addiu	v1,a0,1
412b90ac:	ee6c      	and	a2,v1
412b90ae:	d32e      	sw	v1,184(sp)
412b90b0:	2605      	beqz	a2,412b90bc <.LBB4+0x40>
412b90b2:	3264      	sll	v0,v1,1
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
412b90b4:	e211      	addu	a0,v0,s0
412b90b6:	4361      	addiu	v1,v1,1
412b90b8:	cc25      	sh	s1,10(a0)
412b90ba:	d32e      	sw	v1,184(sp)
412b90bc:	3564      	sll	a1,v1,1
        }

        act_test_report_result(return_data, trans_bytes * 2 + 4);
412b90be:	45a4      	addiu	a1,a1,4
412b90c0:	b23b      	lw	v0,412b91ac <.LBE7+0x84>
412b90c2:	6790      	move	a0,s0
412b90c4:	ea40      	jalr	v0
412b90c6:	ed31      	zeh	a1

412b90c8 <.LBE4>:
412b90c8:	922f      	lw	v0,188(sp)
    }
    else
    {
        act_test_report_test_log(ret_val, TESTID_READ_BTADDR);
    }
    
    return ret_val;
}
412b90ca:	f010 647a 	restore	208,ra,s0-s1
412b90ce:	e8a0      	jrc	ra
412b90d0:	67fd      	move	a3,sp
412b90d2:	6c00      	li	a0,0
412b90d4:	6b06      	li	v1,6
412b90d6:	f020 001a 	addiu	s0,sp,58
412b90da:	b22f      	lw	v0,412b9194 <.LBE7+0x6c>
412b90dc:	f020 c790 	sb	a0,48(a3)
412b90e0:	f020 c771 	sb	v1,49(a3)
412b90e4:	d00d      	sw	s0,52(sp)
412b90e6:	6c0c      	li	a0,12
412b90e8:	050c      	addiu	a1,sp,48
412b90ea:	6e00      	li	a2,0
412b90ec:	ea40      	jalr	v0
412b90ee:	6f06      	li	a3,6
412b90f0:	229a      	beqz	v0,412b9026 <.LBB2>
412b90f2:	b228      	lw	v0,412b9190 <.LBE7+0x68>
412b90f4:	040e      	addiu	a0,sp,56
412b90f6:	6d00      	li	a1,0
412b90f8:	6e80      	li	a2,128
412b90fa:	ea40      	jalr	v0
412b90fc:	6f12      	li	a3,18
412b90fe:	6c00      	li	a0,0
412b9100:	6770      	move	v1,s0
412b9102:	1793      	b	412b902a <.LBB2+0x4>
412b9104:	6e00      	li	a2,0
412b9106:	6d06      	li	a1,6
412b9108:	b223      	lw	v0,412b9194 <.LBE7+0x6c>
412b910a:	f020 c3d0 	sb	a2,48(v1)
412b910e:	f020 c3b1 	sb	a1,49(v1)
412b9112:	d00d      	sw	s0,52(sp)
412b9114:	6c0c      	li	a0,12
412b9116:	050c      	addiu	a1,sp,48
412b9118:	6e00      	li	a2,0
412b911a:	ea40      	jalr	v0
412b911c:	6f06      	li	a3,6
412b911e:	17ef      	b	412b90fe <.LBE4+0x36>

412b9120 <.LBB7>:
412b9120:	942f      	lw	a0,188(sp)
412b9122:	1802 e437 	jal	410390dc <act_test_report_test_log>
412b9126:	6dc4      	li	a1,196

412b9128 <.LBE7>:
412b9128:	922f      	lw	v0,188(sp)
412b912a:	f010 647a 	restore	208,ra,s0-s1
412b912e:	e8a0      	jrc	ra
412b9130:	b21d      	lw	v0,412b91a0 <.LBE7+0x78>
412b9132:	0408      	addiu	a0,sp,32
412b9134:	6d00      	li	a1,0
412b9136:	6e10      	li	a2,16
412b9138:	ea40      	jalr	v0
412b913a:	6f01      	li	a3,1
412b913c:	179c      	b	412b9076 <.LBE2+0x3a>
412b913e:	677d      	move	v1,sp
412b9140:	f020 a382 	lbu	a0,34(v1)
412b9144:	f020 a3a5 	lbu	a1,37(v1)
412b9148:	f020 a3c4 	lbu	a2,36(v1)
412b914c:	f020 a3e3 	lbu	a3,35(v1)
412b9150:	d404      	sw	a0,16(sp)
412b9152:	f020 a341 	lbu	v0,33(v1)
412b9156:	d205      	sw	v0,20(sp)
412b9158:	f020 a380 	lbu	a0,32(v1)
412b915c:	b210      	lw	v0,412b919c <.LBE7+0x74>
412b915e:	d406      	sw	a0,24(sp)
412b9160:	0c04      	la	a0,412b9170 <.LBE7+0x48>
412b9162:	eac0      	jalrc	v0
412b9164:	1788      	b	412b9076 <.LBE2+0x3a>
412b9166:	0000      	addiu	s0,sp,0
412b9168:	6461      	restore	8,ra,s0
412b916a:	7264      	cmpi	v0,100
412b916c:	203a      	beqz	s0,412b91e2 <utf8str_to_unicode+0x6>
412b916e:	0000      	addiu	s0,sp,0
412b9170:	7462      	cmpi	a0,98
412b9172:	6120      	btnez	412b91b4 <cmp_bt_name+0x4>
412b9174:	6464      	restore	32,ra,s0
412b9176:	3a72      	ld	v1,144(v0)
412b9178:	2520      	beqz	a1,412b91ba <cmp_bt_name+0xa>
412b917a:	3a78      	ld	v1,192(v0)
412b917c:	7825      	sd	s1,40(s0)
412b917e:	253a      	beqz	a1,412b91f4 <utf8str_to_unicode+0x18>
412b9180:	3a78      	ld	v1,192(v0)
412b9182:	7825      	sd	s1,40(s0)
412b9184:	253a      	beqz	a1,412b91fa <utf8str_to_unicode+0x1e>
412b9186:	3a78      	ld	v1,192(v0)
412b9188:	7825      	sd	s1,40(s0)
412b918a:	000a      	addiu	s0,sp,40
412b918c:	8dc0      	lh	a2,0(a1)
412b918e:	bfc3      	lwu	a2,12(a3)
412b9190:	88dd      	lh	a2,58(s0)
412b9192:	bfc3      	lwu	a2,12(a3)
412b9194:	8fdd      	lh	a2,58(a3)
412b9196:	bfc3      	lwu	a2,12(a3)
412b9198:	8dc9      	lh	a2,18(a1)
412b919a:	bfc3      	lwu	a2,12(a3)
412b919c:	9b59      	lw	v0,100(v1)
412b919e:	41cf      	addiu	a2,s1,-1
412b91a0:	8b89      	lh	a0,18(v1)
412b91a2:	bfc3      	lwu	a2,12(a3)
412b91a4:	88d5      	lh	a2,42(s0)
412b91a6:	bfc3      	lwu	a2,12(a3)
412b91a8:	a100      	lbu	s0,0(s1)
412b91aa:	9fc3      	lw	a2,12(a3)
412b91ac:	9b41      	lw	v0,4(v1)
412b91ae:	41cb      	addiu	a2,s1,-5

412b91b0 <cmp_bt_name>:
412b91b0:	6f00      	li	a3,0

static int cmp_bt_name(uint8 *bt_name0, uint8 *bt_name1, uint32 cmp_len)
{
    uint32 i;

    for (i = 0; i < cmp_len; i++)
412b91b2:	efc3      	sltu	a3,a2
412b91b4:	600a      	bteqz	412b91ca <cmp_bt_name+0x1a>
412b91b6:	a460      	lbu	v1,0(a0)
    {
        if (bt_name0[i] != bt_name1[i])
412b91b8:	a540      	lbu	v0,0(a1)
412b91ba:	ea6e      	xor	v0,v1
412b91bc:	2a08      	bnez	v0,412b91ce <cmp_bt_name+0x1e>
412b91be:	230b      	beqz	v1,412b91d6 <cmp_bt_name+0x26>
        {
            break;
        }

        if (bt_name0[i] == '\0')
412b91c0:	47e1      	addiu	a3,a3,1
412b91c2:	4481      	addiu	a0,a0,1
412b91c4:	45a1      	addiu	a1,a1,1
412b91c6:	efc3      	sltu	a3,a2
412b91c8:	61f6      	btnez	412b91b6 <cmp_bt_name+0x6>
412b91ca:	6a01      	li	v0,1
        {
            return TRUE;
        }
    }

    if (i < cmp_len)
    {
        return FALSE;
    }
    else
    {
        return TRUE;
412b91cc:	e8a0      	jrc	ra
    }
}
412b91ce:	6a00      	li	v0,0
412b91d0:	61fd      	btnez	412b91cc <cmp_bt_name+0x1c>
412b91d2:	6a01      	li	v0,1
412b91d4:	17fb      	b	412b91cc <cmp_bt_name+0x1c>
412b91d6:	e820      	jr	ra
412b91d8:	6a01      	li	v0,1
	...

412b91dc <utf8str_to_unicode>:
412b91dc:	f00e 64b1 	save	a0-a3,8,s0-s1

static int32 utf8str_to_unicode(uint8 *utf8, uint32 utf8Len, uint16 *unicode, uint32 *unicode_len)
{
412b91e0:	6800      	li	s0,0
    int32 count = 0;
412b91e2:	a460      	lbu	v1,0(a0)
    uint8 c0, c1;
    uint32 scalar;

    while (--utf8Len >= 0)
    {
        c0 = *utf8;
412b91e4:	327e      	srl	v0,v1,7
        utf8++;

        if (c0 < 0x80)
412b91e6:	4481      	addiu	a0,a0,1
412b91e8:	2a08      	bnez	v0,412b91fa <utf8str_to_unicode+0x1e>
412b91ea:	ce60      	sh	v1,0(a2)
        {
            *unicode = c0;
412b91ec:	2322      	beqz	v1,412b9232 <utf8str_to_unicode+0x56>

            if (*unicode == 0x00)
412b91ee:	a460      	lbu	v1,0(a0)
412b91f0:	46c2      	addiu	a2,a2,2
            {
                //count += 2;
                break;
            }
            unicode++;
            count += 2;
            continue;
        }

        /*非ascii字符，编码的第一个字节不应该为10xxxxxx*/
        if ((c0 & 0xc0) == 0x80)
        {
            return -1;
        }

        scalar = c0;
        if (--utf8Len < 0)
        {
            return -1;
        }

        c1 = *utf8;
        utf8++;
        /*第2个字节的编码格式应该为10xxxxxx*/
        if ((c1 & 0xc0) != 0x80)
        {
            return -1;
        }
        scalar <<= 6;
        scalar |= (c1 & 0x3f);

        /*如果r0 & 0x20等于0，说明该utf编码长度为2，否则其编码长度大于2*/
        if (!(c0 & 0x20))
        {
            if ((scalar != 0) && (scalar < 0x80))
            {
                /*unicode编码小于0x80，utf8编码长度却为2，over encoding*/
                return -1;
            }
            *unicode = (unsigned short) scalar & 0x7ff;
            if (*unicode == 0x00)
            {
                count += 2;
                break;
            }
            unicode++;
            count += 2;
            continue;
        }

        if (--utf8Len < 0)
        {
            return -1;
        }

        c1 = *utf8;
        utf8++;
        /*第3个字节的编码格式应该为10xxxxxx*/
        if ((c1 & 0xc0) != 0x80)
        {
            return -1;
        }
        scalar <<= 6;
        scalar |= (c1 & 0x3f);

        /*如果r0 & 0x10等于0，说明该utf编码长度为3，否则其编码长度大于3*/
        if (!(c0 & 0x10))
        {
            if (scalar < 0x800)
            {
                return -1;
            }
            if ((scalar >= 0xd800) && (scalar < 0xe000))
            {
                return -1;
            }
            *unicode = (unsigned short) scalar & 0xffff;
            if (*unicode == 0x00)
            {
                count += 2;
                break;
            }
            unicode++;
412b91f2:	327e      	srl	v0,v1,7
412b91f4:	4002      	addiu	s0,s0,2
            count += 2;
412b91f6:	4481      	addiu	a0,a0,1
412b91f8:	22f8      	beqz	v0,412b91ea <utf8str_to_unicode+0xe>
412b91fa:	69c0      	li	s1,192
412b91fc:	67a3      	move	a1,v1
412b91fe:	ed2c      	and	a1,s1
412b9200:	7580      	cmpi	a1,128
412b9202:	603d      	bteqz	412b927e <utf8str_to_unicode+0xa2>
412b9204:	a4a0      	lbu	a1,0(a0)
412b9206:	4481      	addiu	a0,a0,1
412b9208:	67e5      	move	a3,a1
412b920a:	ef2c      	and	a3,s1
412b920c:	7780      	cmpi	a3,128
412b920e:	6137      	btnez	412b927e <utf8str_to_unicode+0xa2>
412b9210:	6a3f      	li	v0,63
412b9212:	ed4c      	and	a1,v0
412b9214:	653a      	move	t9,v0
412b9216:	4ae1      	addiu	v0,-31
412b9218:	3778      	sll	a3,v1,6
412b921a:	ea6c      	and	v0,v1
412b921c:	efad      	or	a3,a1
412b921e:	2a14      	bnez	v0,412b9248 <utf8str_to_unicode+0x6c>
412b9220:	476f      	addiu	v1,a3,-1
412b9222:	5b7f      	sltiu	v1,127
412b9224:	612c      	btnez	412b927e <utf8str_to_unicode+0xa2>
412b9226:	f7e0 6a1f 	li	v0,2047
412b922a:	eaec      	and	v0,a3
412b922c:	ce40      	sh	v0,0(a2)
412b922e:	2adf      	bnez	v0,412b91ee <utf8str_to_unicode+0x12>
412b9230:	4002      	addiu	s0,s0,2
412b9232:	6d03      	li	a1,3
            continue;
        }

        return -1;
    }

    //保证字符串四字节对齐
    if ((count % 4) != 0)
412b9234:	ed0c      	and	a1,s0
412b9236:	2503      	beqz	a1,412b923e <utf8str_to_unicode+0x62>
412b9238:	6f00      	li	a3,0
    {
        unicode++;
        count += 2;
        *unicode = 0x00;
412b923a:	4002      	addiu	s0,s0,2
412b923c:	cee1      	sh	a3,2(a2)
412b923e:	9605      	lw	a2,20(sp)
    }

    *unicode_len = count;
412b9240:	6a00      	li	v0,0
    return 0;
412b9242:	de00      	sw	s0,0(a2)
412b9244:	6431      	restore	8,s0-s1
}
412b9246:	e8a0      	jrc	ra
412b9248:	a440      	lbu	v0,0(a0)
412b924a:	4481      	addiu	a0,a0,1
412b924c:	e94c      	and	s1,v0
412b924e:	7180      	cmpi	s1,128
412b9250:	6116      	btnez	412b927e <utf8str_to_unicode+0xa2>
412b9252:	35f8      	sll	a1,a3,6
412b9254:	67f9      	move	a3,t9
412b9256:	eaec      	and	v0,a3
412b9258:	ed4d      	or	a1,v0
412b925a:	6a10      	li	v0,16
412b925c:	ea6c      	and	v0,v1
412b925e:	2a0f      	bnez	v0,412b927e <utf8str_to_unicode+0xa2>
412b9260:	f001 5d00 	sltiu	a1,2048
412b9264:	6110      	btnez	412b9286 <utf8str_to_unicode+0xaa>
412b9266:	f01b 6b00 	li	v1,55296
412b926a:	eb6b      	neg	v1
412b926c:	e569      	addu	v0,a1,v1
412b926e:	f001 5a00 	sltiu	v0,2048
412b9272:	6105      	btnez	412b927e <utf8str_to_unicode+0xa2>
412b9274:	6745      	move	v0,a1
412b9276:	ea31      	zeh	v0
412b9278:	cea0      	sh	a1,0(a2)
412b927a:	2ab9      	bnez	v0,412b91ee <utf8str_to_unicode+0x12>
412b927c:	17d9      	b	412b9230 <utf8str_to_unicode+0x54>
412b927e:	6c01      	li	a0,1
412b9280:	ea8b      	neg	v0,a0
412b9282:	6431      	restore	8,s0-s1
412b9284:	e8a0      	jrc	ra
412b9286:	424f      	addiu	v0,v0,-1
412b9288:	6431      	restore	8,s0-s1
412b928a:	e8a0      	jrc	ra

412b928c <act_test_read_bt_name>:
412b928c:	f014 64f7 	save	a0,184,ra,s0-s1

int act_test_read_bt_name(void *arg_buffer)
{
412b9290:	0106      	addiu	s1,sp,24
    uint32 i;

    uint32 ret_val;

    read_btname_test_arg_t *read_btname_arg;

    nvram_param_rw_t param_rw;

    bt_addr_vram_t bt_addr_vram;

    return_result_t *return_data;

    uint32 trans_bytes;

    uint32 count;
    
    uint32 bt_name_valid = TRUE;
    
    uint32 ble_name_valid = TRUE;

    read_btname_arg = (read_btname_test_arg_t *) arg_buffer;

    libc_memset(&bt_addr_vram, 0, sizeof(bt_addr_vram));
412b9292:	6b01      	li	v1,1
412b9294:	b290      	lw	v0,412b94d4 <.LBE8+0xd0>
412b9296:	d328      	sw	v1,160(sp)
412b9298:	d327      	sw	v1,156(sp)
412b929a:	67e3      	move	a3,v1
412b929c:	6791      	move	a0,s1
412b929e:	6d00      	li	a1,0
412b92a0:	ea40      	jalr	v0
412b92a2:	6e80      	li	a2,128
412b92a4:	b38d      	lw	v1,412b94d8 <.LBE8+0xd4>
    
    if(g_support_norflash_wp == TRUE)
412b92a6:	a340      	lbu	v0,0(v1)
412b92a8:	7201      	cmpi	v0,1
412b92aa:	616c      	btnez	412b9384 <act_test_read_bt_name+0xf8>
412b92ac:	6791      	move	a0,s1
    {
        sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
412b92ae:	b18c      	lw	s1,412b94dc <.LBE8+0xd8>
412b92b0:	6d00      	li	a1,0
412b92b2:	6e80      	li	a2,128
412b92b4:	e940      	jalr	s1
412b92b6:	6f12      	li	a3,18
412b92b8:	677d      	move	v1,sp

        if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
412b92ba:	ab8c      	lhu	a0,24(v1)
412b92bc:	f5aa 740a 	cmpi	a0,21930
412b92c0:	f0a0 6110 	btnez	412b9424 <.LBE8+0x20>
412b92c4:	9627      	lw	a2,156(sp)
        {
            param_rw.logical_index = PARAM_BT_NAME;
            param_rw.rw_len = sizeof(bt_addr_vram.device_name);
            param_rw.rw_buffer = &(bt_addr_vram.device_name[0]);
    
            //读取蓝牙名称
            ret_val = base_param_read(&param_rw);
    
            if (ret_val != 0)
            { 
                bt_name_valid = FALSE;         
            }  
            param_rw.logical_index = PARAM_BT_BLENAME;
            param_rw.rw_len = sizeof(bt_addr_vram.ble_device_name);
            param_rw.rw_buffer = &(bt_addr_vram.ble_device_name[0]);

            //读取蓝牙BLE名称
            ret_val = base_param_read(&param_rw);

            if (ret_val != 0)
            {
                ble_name_valid = FALSE;
            }         
        }
    }
    else
    {
        param_rw.logical_index = PARAM_BT_NAME;
        param_rw.rw_len = sizeof(bt_addr_vram.device_name);
        param_rw.rw_buffer = &(bt_addr_vram.device_name[0]);

        //读取蓝牙名称
        ret_val = base_param_read(&param_rw);

        param_rw.logical_index = PARAM_BT_BLENAME;
        
        param_rw.rw_len = sizeof(bt_addr_vram.ble_device_name);
        param_rw.rw_buffer = &(bt_addr_vram.ble_device_name[0]);

        //读取蓝牙BLE名称
        ret_val += base_param_read(&param_rw);       

        if (ret_val != 0)
        {  
            sys_vm_read(&bt_addr_vram, VM_BTSTACK, sizeof(bt_addr_vram));
    
            if (bt_addr_vram.magic != VRAM_MAGIC(VM_BTSTACK))
            {
                bt_name_valid = FALSE; 
                ble_name_valid = FALSE;   
            }
        }          
    }
 
    ret_val = FALSE;
    
    if(bt_name_valid == TRUE)
412b92c6:	6b00      	li	v1,0
412b92c8:	d329      	sw	v1,164(sp)
412b92ca:	2607      	beqz	a2,412b92da <act_test_read_bt_name+0x4e>
412b92cc:	677d      	move	v1,sp
    {
        if (bt_addr_vram.device_name[0] != 0)
412b92ce:	f020 a3f1 	lbu	a3,49(v1)
412b92d2:	2703      	beqz	a3,412b92da <act_test_read_bt_name+0x4e>
412b92d4:	9428      	lw	a0,160(sp)
        {
            if(ble_name_valid == TRUE)
412b92d6:	f0c0 2c08 	bnez	a0,412b946a <.LBE8+0x66>
412b92da:	9629      	lw	a2,164(sp)
            {    
                if (bt_addr_vram.ble_device_name[0] != 0)
                {
                    ret_val = TRUE;
                }
            }    
        }
    }

    if (ret_val == TRUE)
412b92dc:	7601      	cmpi	a2,1
412b92de:	67b8      	move	a1,t8
412b92e0:	5d01      	sltiu	a1,1
412b92e2:	6738      	move	s1,t8
412b92e4:	210d      	beqz	s1,412b9300 <act_test_read_bt_name+0x74>
412b92e6:	b380      	lw	v1,412b94e4 <.LBE8+0xe0>
    {
        if(g_test_mode != TEST_MODE_CARD)
412b92e8:	a300      	lbu	s0,0(v1)
412b92ea:	f080 200f 	beqz	s0,412b940c <.LBE8+0x8>
412b92ee:	b07f      	lw	s0,412b94e8 <.LBE8+0xe4>
        {
            print_log("read bt name: %s\n", bt_addr_vram.device_name);
412b92f0:	0c67      	la	a0,412b948c <.LBE8+0x88>
412b92f2:	f020 0511 	addiu	a1,sp,49
412b92f6:	e8c0      	jalrc	s0
412b92f8:	0c6a      	la	a0,412b949c <.LBE8+0x98>
    
            print_log("read ble name: %s\n", bt_addr_vram.ble_device_name);
412b92fa:	f060 0519 	addiu	a1,sp,121
412b92fe:	e8c0      	jalrc	s0
412b9300:	932e      	lw	v1,184(sp)
        }
        else
        {
            att_write_test_info("read bt name: ", bt_addr_vram.device_name, 1);
            
            att_write_test_info("read ble name: ", bt_addr_vram.ble_device_name, 1);        
        }
    }

    if (read_btname_arg->cmp_btname_flag == TRUE)
412b9302:	a3e0      	lbu	a3,0(v1)
412b9304:	7701      	cmpi	a3,1
412b9306:	606e      	bteqz	412b93e4 <act_test_read_bt_name+0x158>
412b9308:	2106      	beqz	s1,412b9316 <act_test_read_bt_name+0x8a>
    {
        ret_val = cmp_bt_name(bt_addr_vram.device_name, read_btname_arg->cmp_btname, sizeof(bt_addr_vram.device_name));
    }

    if (ret_val == TRUE)
412b930a:	932e      	lw	v1,184(sp)
    {
        if (read_btname_arg->cmp_blename_flag == TRUE)
412b930c:	f020 a359 	lbu	v0,57(v1)
412b9310:	7201      	cmpi	v0,1
412b9312:	f0a0 6011 	bteqz	412b9478 <.LBE8+0x74>
412b9316:	b674      	lw	a2,412b94e4 <.LBE8+0xe0>
        {
            ret_val = cmp_bt_name(bt_addr_vram.ble_device_name, read_btname_arg->cmp_blename,
                    sizeof(bt_addr_vram.ble_device_name));
        }

    }

    if (g_test_mode != TEST_MODE_CARD)
412b9318:	a6a0      	lbu	a1,0(a2)
412b931a:	2570      	beqz	a1,412b93fc <.LBB8>
412b931c:	b175      	lw	s1,412b94f0 <.LBE8+0xec>
    {
        trans_bytes = 0;
        
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
412b931e:	675d      	move	v0,sp

        return_data->test_id = TESTID_READ_BTNAME;

        return_data->test_result = ret_val;
412b9320:	f0a0 a284 	lbu	a0,164(v0)
412b9324:	6816      	li	s0,22
412b9326:	67d1      	move	a2,s1

        //utf8转unicode可能所需的buffer较多，极端情况下是之前字符串buffer的2倍
        //因此需要一个大一点的buffer缓存字符串
        utf8str_to_unicode(bt_addr_vram.device_name, sizeof(bt_addr_vram.device_name), return_data->return_arg, &count); 
412b9328:	c903      	sh	s0,6(s1)
412b932a:	c188      	sb	a0,8(s1)
412b932c:	6d38      	li	a1,56
412b932e:	f020 0411 	addiu	a0,sp,49
412b9332:	4e0a      	addiu	a2,10
412b9334:	1942 e477 	jal	412b91dc <utf8str_to_unicode>
412b9338:	0726      	addiu	a3,sp,152
412b933a:	9726      	lw	a3,152(sp)

        trans_bytes += (count >> 1);
412b933c:	6e2c      	li	a2,44

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;   
412b933e:	30e6      	srl	s0,a3,1
412b9340:	3304      	sll	v1,s0,1
412b9342:	4001      	addiu	s0,s0,1
412b9344:	e335      	addu	a1,v1,s1
412b9346:	3204      	sll	v0,s0,1

        //utf8转unicode可能所需的buffer较多，极端情况下是之前字符串buffer的2倍
        //因此需要一个大一点的buffer缓存字符串
        utf8str_to_unicode(bt_addr_vram.ble_device_name, sizeof(bt_addr_vram.ble_device_name), &(return_data->return_arg[trans_bytes]), &count);        
412b9348:	cdc5      	sh	a2,10(a1)
412b934a:	e239      	addu	a2,v0,s1
412b934c:	f060 0419 	addiu	a0,sp,121
412b9350:	6d1e      	li	a1,30
412b9352:	0726      	addiu	a3,sp,152
412b9354:	1942 e477 	jal	412b91dc <utf8str_to_unicode>
412b9358:	4e0a      	addiu	a2,10
412b935a:	9426      	lw	a0,152(sp)

        trans_bytes += (count >> 1);
412b935c:	6b01      	li	v1,1
                
        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
412b935e:	3786      	srl	a3,a0,1
412b9360:	e0f5      	addu	a1,s0,a3
412b9362:	ebac      	and	v1,a1
412b9364:	2305      	beqz	v1,412b9370 <act_test_read_bt_name+0xe4>
412b9366:	37a4      	sll	a3,a1,1
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
412b9368:	e739      	addu	a2,a3,s1
412b936a:	6b00      	li	v1,0
412b936c:	ce65      	sh	v1,10(a2)
412b936e:	45a1      	addiu	a1,a1,1
412b9370:	35a4      	sll	a1,1
        }        
        act_test_report_result(return_data, trans_bytes * 2 + 4);
412b9372:	45a4      	addiu	a1,a1,4
412b9374:	b260      	lw	v0,412b94f4 <.LBE8+0xf0>
412b9376:	6791      	move	a0,s1
412b9378:	ea40      	jalr	v0
412b937a:	ed31      	zeh	a1
412b937c:	9229      	lw	v0,164(sp)
    }
    else
    {
        act_test_report_test_log(ret_val, TESTID_READ_BTNAME);
    }
    
    return ret_val;
}
412b937e:	f010 6477 	restore	184,ra,s0-s1
412b9382:	e8a0      	jrc	ra
412b9384:	677d      	move	v1,sp
412b9386:	f0a0 a380 	lbu	a0,160(v1)
412b938a:	6f38      	li	a3,56
412b938c:	f020 0611 	addiu	a2,sp,49
412b9390:	b054      	lw	s0,412b94e0 <.LBE8+0xdc>
412b9392:	c390      	sb	a0,16(v1)
412b9394:	c3f1      	sb	a3,17(v1)
412b9396:	d605      	sw	a2,20(sp)
412b9398:	6c0c      	li	a0,12
412b939a:	0504      	addiu	a1,sp,16
412b939c:	6e00      	li	a2,0
412b939e:	e840      	jalr	s0
412b93a0:	6f06      	li	a3,6
412b93a2:	6702      	move	s0,v0
412b93a4:	679d      	move	a0,sp
412b93a6:	6d02      	li	a1,2
412b93a8:	6a1e      	li	v0,30
412b93aa:	f060 0719 	addiu	a3,sp,121
412b93ae:	b34d      	lw	v1,412b94e0 <.LBE8+0xdc>
412b93b0:	c4b0      	sb	a1,16(a0)
412b93b2:	c451      	sb	v0,17(a0)
412b93b4:	d705      	sw	a3,20(sp)
412b93b6:	6c0c      	li	a0,12
412b93b8:	0504      	addiu	a1,sp,16
412b93ba:	6e00      	li	a2,0
412b93bc:	eb40      	jalr	v1
412b93be:	6f06      	li	a3,6
412b93c0:	e041      	addu	s0,v0
412b93c2:	2080      	beqz	s0,412b92c4 <act_test_read_bt_name+0x38>
412b93c4:	6791      	move	a0,s1
412b93c6:	b146      	lw	s1,412b94dc <.LBE8+0xd8>
412b93c8:	6d00      	li	a1,0
412b93ca:	6e80      	li	a2,128
412b93cc:	e940      	jalr	s1
412b93ce:	6f12      	li	a3,18
412b93d0:	675d      	move	v0,sp
412b93d2:	aa2c      	lhu	s1,24(v0)
412b93d4:	f5aa 710a 	cmpi	s1,21930
412b93d8:	f77f 6014 	bteqz	412b92c4 <act_test_read_bt_name+0x38>
412b93dc:	6d00      	li	a1,0
412b93de:	d528      	sw	a1,160(sp)
412b93e0:	d527      	sw	a1,156(sp)
412b93e2:	1770      	b	412b92c4 <act_test_read_bt_name+0x38>
412b93e4:	f020 0411 	addiu	a0,sp,49
412b93e8:	43a1      	addiu	a1,v1,1
412b93ea:	1942 e46c 	jal	412b91b0 <cmp_bt_name>
412b93ee:	6e38      	li	a2,56
412b93f0:	7201      	cmpi	v0,1
412b93f2:	6798      	move	a0,t8
412b93f4:	5c01      	sltiu	a0,1
412b93f6:	6738      	move	s1,t8
412b93f8:	d229      	sw	v0,164(sp)
412b93fa:	1786      	b	412b9308 <act_test_read_bt_name+0x7c>

412b93fc <.LBB8>:
412b93fc:	9429      	lw	a0,164(sp)
412b93fe:	1802 e437 	jal	410390dc <act_test_report_test_log>
412b9402:	6d16      	li	a1,22

412b9404 <.LBE8>:
412b9404:	9229      	lw	v0,164(sp)
412b9406:	f010 6477 	restore	184,ra,s0-s1
412b940a:	e8a0      	jrc	ra
412b940c:	b038      	lw	s0,412b94e8 <.LBE8+0xe4>
412b940e:	f020 0511 	addiu	a1,sp,49
412b9412:	0c29      	la	a0,412b94b4 <.LBE8+0xb0>
412b9414:	e840      	jalr	s0
412b9416:	6e01      	li	a2,1
412b9418:	0c2b      	la	a0,412b94c4 <.LBE8+0xc0>
412b941a:	f060 0519 	addiu	a1,sp,121
412b941e:	e840      	jalr	s0
412b9420:	6e01      	li	a2,1
412b9422:	176e      	b	412b9300 <act_test_read_bt_name+0x74>
412b9424:	f0a0 a3e0 	lbu	a3,160(v1)
412b9428:	6e38      	li	a2,56
412b942a:	f020 0511 	addiu	a1,sp,49
412b942e:	b02d      	lw	s0,412b94e0 <.LBE8+0xdc>
412b9430:	c3f0      	sb	a3,16(v1)
412b9432:	c3d1      	sb	a2,17(v1)
412b9434:	d505      	sw	a1,20(sp)
412b9436:	6c0c      	li	a0,12
412b9438:	0504      	addiu	a1,sp,16
412b943a:	6e00      	li	a2,0
412b943c:	e840      	jalr	s0
412b943e:	6f06      	li	a3,6
412b9440:	2202      	beqz	v0,412b9446 <.LBE8+0x42>
412b9442:	6a00      	li	v0,0
412b9444:	d227      	sw	v0,156(sp)
412b9446:	679d      	move	a0,sp
412b9448:	6d02      	li	a1,2
412b944a:	691e      	li	s1,30
412b944c:	f060 0319 	addiu	v1,sp,121
412b9450:	c4b0      	sb	a1,16(a0)
412b9452:	c431      	sb	s1,17(a0)
412b9454:	d305      	sw	v1,20(sp)
412b9456:	6c0c      	li	a0,12
412b9458:	0504      	addiu	a1,sp,16
412b945a:	6e00      	li	a2,0
412b945c:	e840      	jalr	s0
412b945e:	6f06      	li	a3,6
412b9460:	f73f 2210 	beqz	v0,412b92c4 <act_test_read_bt_name+0x38>
412b9464:	6e00      	li	a2,0
412b9466:	d628      	sw	a2,160(sp)
412b9468:	172d      	b	412b92c4 <act_test_read_bt_name+0x38>
412b946a:	f060 a359 	lbu	v0,121(v1)
412b946e:	f73f 2214 	beqz	v0,412b92da <act_test_read_bt_name+0x4e>
412b9472:	6901      	li	s1,1
412b9474:	d129      	sw	s1,164(sp)
412b9476:	1731      	b	412b92da <act_test_read_bt_name+0x4e>
412b9478:	67a3      	move	a1,v1
412b947a:	f060 0419 	addiu	a0,sp,121
412b947e:	4d3a      	addiu	a1,58
412b9480:	1942 e46c 	jal	412b91b0 <cmp_bt_name>
412b9484:	6e1e      	li	a2,30
412b9486:	d229      	sw	v0,164(sp)
412b9488:	1746      	b	412b9316 <act_test_read_bt_name+0x8a>
412b948a:	0000      	addiu	s0,sp,0
412b948c:	6572      	move	s3,v0
412b948e:	6461      	restore	8,ra,s0
412b9490:	6220      	sw	ra,128(sp)
412b9492:	2074      	beqz	s0,412b957c <.LBE8+0x178>
412b9494:	616e      	btnez	412b9572 <.LBE8+0x16e>
412b9496:	656d      	move	t3,a1
412b9498:	203a      	beqz	s0,412b950e <.LBE8+0x10a>
412b949a:	7325      	cmpi	v1,37
412b949c:	000a      	addiu	s0,sp,40
412b949e:	0000      	addiu	s0,sp,0
412b94a0:	6572      	move	s3,v0
412b94a2:	6461      	restore	8,ra,s0
412b94a4:	6220      	sw	ra,128(sp)
412b94a6:	656c      	move	t3,a0
412b94a8:	6e20      	li	a2,32
412b94aa:	6d61      	li	a1,97
412b94ac:	3a65      	ld	v1,40(v0)
412b94ae:	2520      	beqz	a1,412b94f0 <.LBE8+0xec>
412b94b0:	0a73      	la	v0,412b967c <.LBE8+0x278>
412b94b2:	0000      	addiu	s0,sp,0
412b94b4:	6572      	move	s3,v0
412b94b6:	6461      	restore	8,ra,s0
412b94b8:	6220      	sw	ra,128(sp)
412b94ba:	2074      	beqz	s0,412b95a4 <.LBE8+0x1a0>
412b94bc:	616e      	btnez	412b959a <.LBE8+0x196>
412b94be:	656d      	move	t3,a1
412b94c0:	203a      	beqz	s0,412b9536 <.LBE8+0x132>
412b94c2:	0000      	addiu	s0,sp,0
412b94c4:	6572      	move	s3,v0
412b94c6:	6461      	restore	8,ra,s0
412b94c8:	6220      	sw	ra,128(sp)
412b94ca:	656c      	move	t3,a0
412b94cc:	6e20      	li	a2,32
412b94ce:	6d61      	li	a1,97
412b94d0:	3a65      	ld	v1,40(v0)
412b94d2:	0020      	addiu	s0,sp,128
412b94d4:	88d5      	lh	a2,42(s0)
412b94d6:	bfc3      	lwu	a2,12(a3)
412b94d8:	8dc0      	lh	a2,0(a1)
412b94da:	bfc3      	lwu	a2,12(a3)
412b94dc:	88dd      	lh	a2,58(s0)
412b94de:	bfc3      	lwu	a2,12(a3)
412b94e0:	8fdd      	lh	a2,58(a3)
412b94e2:	bfc3      	lwu	a2,12(a3)
412b94e4:	8dc9      	lh	a2,18(a1)
412b94e6:	bfc3      	lwu	a2,12(a3)
412b94e8:	9b59      	lw	v0,100(v1)
412b94ea:	41cf      	addiu	a2,s1,-1
412b94ec:	8b89      	lh	a0,18(v1)
412b94ee:	bfc3      	lwu	a2,12(a3)
412b94f0:	a100      	lbu	s0,0(s1)
412b94f2:	9fc3      	lw	a2,12(a3)
412b94f4:	9b41      	lw	v0,4(v1)
412b94f6:	41cb      	addiu	a2,s1,-5
	...
Disassembly of section BANK_CONTROL_1_11:

412f9000 <ber_print_rxtx>:
412f9000:	e8a0      	jrc	ra
	...

412f9004 <_ber_test_read_hci_data>:
 返回: 
 说明: 
*/
static void ber_print_rxtx(uint8 *buf, uint32 len, uint32 mode)
{
412f9004:	64f4      	save	32,ra,s0-s1
#if 0
    dma_print_info_t data_info;
    data_info.dma_channel = 2;//dma2
    if(len > 10)
    {
        len = 10;
    }

    libc_memset(&(g_ber_control->rx_debug_buf[0]), 0, RX_DEBUG_BYTES);
    libc_memcpy(&(g_ber_control->rx_debug_buf[0]), buf, len);
    data_info.len = len;
    data_info.data.buf = &(g_ber_control->rx_debug_buf[0]);
    if(mode == 0)
    {
        libc_dma_print("<RX>", &data_info, DMA_PRINT_BUF1);
    }
    else
    {
        libc_dma_print("<TX>", &data_info, DMA_PRINT_BUF1);        
    }
#endif
}

/** 
 功能: 读取HCI的数据
 参数: 
 返回:
 说明:
*/
void _ber_test_read_hci_data(uint16 read_num, uint8 hci_overflow)
{
412f9006:	b166      	lw	s1,412f919c <_ber_test_read_hci_data+0x198>
412f9008:	9980      	lw	a0,0(s1)
412f900a:	9c40      	lw	v0,0(a0)
    uint8 len = 0;
    uint32 ber_value = 0;
    uint16 err_bit;
    uint32 real_len;
    
    while (g_ber_control->g_hci_deal.get_data_len() >= g_ber_control->g_hci_deal.minReqLen)
    {
        g_ber_control->rev_pkt_flag = TRUE;
        
        //先取前三个字节，可以获取RX总长度
        g_ber_control->g_hci_deal.read_data((uint32) (&(g_ber_control->g_hci_deal.headerBuffer[0])), 3);

        real_len = g_ber_control->g_hci_deal.headerBuffer[2];
     
        while (g_ber_control->g_hci_deal.get_data_len() >= real_len)
        {
            g_ber_control->g_hci_deal.read_data((uint32) (&(g_ber_control->g_hci_deal.headerBuffer[3])), real_len);                        
        }
       
        //libc_print("len", 3 + real_len, 2);
        
        ber_print_rxtx(&(g_ber_control->g_hci_deal.headerBuffer[0]), 3 + real_len, 0);
        
        if((g_ber_control->g_hci_deal.headerBuffer[0] == 0x04) &&
            (g_ber_control->g_hci_deal.headerBuffer[1] == 0x0e) &&
            (g_ber_control->g_hci_deal.headerBuffer[2] == 0x06) &&
            (g_ber_control->g_hci_deal.headerBuffer[3] == 0x02))
        {        
            //reset receive data
            g_ber_control->g_hci_deal.headerBuffer[0] = 0x00;
            
            if(g_ber_control->ber_test_state == BER_STATE_FINISH)
            {
                //libc_print("more val", 0,0);
                break;
            }
            
            if(g_ber_control->cmd_state == BER_CMD_STATE_READ_PACKET_NUM)
            {                
                //get pkt count
                g_ber_control->pkt_info.result = (g_ber_control->g_hci_deal.headerBuffer[8] << 8) |
                                                          (g_ber_control->g_hci_deal.headerBuffer[7]);
                //g_ber_control->pkt_info.time = sys_get_ab_timer();
                libc_print("pktcnt:", g_ber_control->pkt_info.result,2);

                //libc_print("pkt info", g_ber_control->pkt_info_count, 2);

                //libc_print("state", g_ber_control->ber_test_state, 2);

                if(g_ber_control->pkt_info.result >= MIN_RECV_PKT_NUM)
                {
                    //if(g_ber_control->rssi_test == FALSE)
                    {
                        //超过最小接收包数，认为收到了有效数据，此后开始计算BER
                        g_ber_control->cmd_state = BER_CMD_STATE_WRITE_ERROR_BIT;                        
                    }
                    //else
                    //{
                    //    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_RSSI;    
                    //}

                    g_ber_control->rev_valid_pkt_flag = TRUE; 

                    g_ber_control->tick_cnt = 0;
                }
                else
                {
                    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_CLEAR_REPORT;
                }
            }
            else if(g_ber_control->cmd_state == BER_CMD_STATE_READ_ERROR_BIT)
            {
                //get error bit
                err_bit = (g_ber_control->g_hci_deal.headerBuffer[8] << 8) |
                                        (g_ber_control->g_hci_deal.headerBuffer[7]);

                if(err_bit != 0)
                {
                    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_RSSI;

                    libc_print("err bit:", err_bit,2);

                    //libc_print("time:", sys_get_ab_timer() - g_ber_control->pkt_info.time,2);
                    //if((sys_get_ab_timer() - g_ber_control->pkt_info.time) < 30)
                    {
                        //get ber value
                        ber_value = (err_bit * 10000) / ((g_ber_control->pkt_info.result) * 216);

                        g_ber_control->ber_value[g_ber_control->pkt_info_count] = ber_value;

                        libc_print("ber_val:", ber_value, 2);
                        
                        //reset temp buf
                        //g_ber_control->pkt_info.result = 0;
                        //g_ber_control->pkt_info.time = 0;
                        g_ber_control->cmd_state = BER_CMD_STATE_WRITE_RSSI;
                    }                    
                }
                else
                {
                    //g_ber_control->cmd_state = BER_CMD_STATE_WRITE_CLEAR_REPORT;
                    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_RSSI;
                }                
            }
            else if(g_ber_control->cmd_state == BER_CMD_STATE_READ_RSSI)
            {
                //get rssi
                g_ber_control->rssi = (g_ber_control->g_hci_deal.headerBuffer[8] << 8) |
                                        (g_ber_control->g_hci_deal.headerBuffer[7]);

                g_ber_control->rssi >>= 10; 

                g_ber_control->rssi_value[g_ber_control->pkt_info_count] = g_ber_control->rssi;

                if(g_ber_control->pkt_info.result >= MIN_RECV_PKT_NUM)
                {
                    //先获取ber，再获取rssi，获取完rssi做数据缓存
                    g_ber_control->pkt_info_count++;
                }
                
                //实际的rssi计算公式，这里忽略
                //g_ber_control->rssi = (g_ber_control->rssi * 2 - 96);                        
                libc_print("rssi:", g_ber_control->rssi,2);  
                g_ber_control->cmd_state = BER_CMD_STATE_WRITE_CLEAR_REPORT;
            } 
            else
            {
                
            }

            
            if(g_ber_control->pkt_info_count >= PKT_INFO_COUNT)
            {
                if(g_ber_control->ber_test_state != BER_STATE_FINISH)
                {
                    //finish ber test
                    //libc_print("get enough:", g_ber_control->pkt_info_count,2);
                    g_ber_control->ber_test_state = BER_STATE_FINISH;

                    g_ber_control->test_cnt++;
412f900c:	eac0      	jalrc	v0
412f900e:	9980      	lw	a0,0(s1)
412f9010:	ace4      	lhu	a3,8(a0)
412f9012:	eae3      	sltu	v0,a3
412f9014:	f080 6105 	btnez	412f9122 <_ber_test_read_hci_data+0x11e>
412f9018:	6d01      	li	a1,1
412f901a:	f060 c4b6 	sb	a1,118(a0)
412f901e:	9980      	lw	a0,0(s1)
412f9020:	6d03      	li	a1,3
412f9022:	9c61      	lw	v1,4(a0)
412f9024:	eb40      	jalr	v1
412f9026:	4c0e      	addiu	a0,14
412f9028:	9940      	lw	v0,0(s1)
412f902a:	a210      	lbu	s0,16(v0)
412f902c:	b15c      	lw	s1,412f919c <_ber_test_read_hci_data+0x198>
412f902e:	1005      	b	412f903a <_ber_test_read_hci_data+0x36>
412f9030:	9980      	lw	a0,0(s1)
412f9032:	67b0      	move	a1,s0
412f9034:	9c41      	lw	v0,4(a0)
412f9036:	ea40      	jalr	v0
412f9038:	4c11      	addiu	a0,17
412f903a:	9980      	lw	a0,0(s1)
412f903c:	9c40      	lw	v0,0(a0)
412f903e:	eac0      	jalrc	v0
412f9040:	ea03      	sltu	v0,s0
412f9042:	60f6      	bteqz	412f9030 <_ber_test_read_hci_data+0x2c>
412f9044:	b156      	lw	s1,412f919c <_ber_test_read_hci_data+0x198>
412f9046:	9960      	lw	v1,0(s1)
412f9048:	abc7      	lhu	a2,14(v1)
412f904a:	6783      	move	a0,v1
412f904c:	f601 7604 	cmpi	a2,3588
412f9050:	61dc      	btnez	412f900a <_ber_test_read_hci_data+0x6>
412f9052:	abe8      	lhu	a3,16(v1)
412f9054:	f200 7706 	cmpi	a3,518
412f9058:	61d8      	btnez	412f900a <_ber_test_read_hci_data+0x6>
412f905a:	6800      	li	s0,0
412f905c:	c30e      	sb	s0,14(v1)
412f905e:	9980      	lw	a0,0(s1)
412f9060:	f0a0 a461 	lbu	v1,161(a0)
412f9064:	7302      	cmpi	v1,2
412f9066:	605d      	bteqz	412f9122 <_ber_test_read_hci_data+0x11e>
412f9068:	f0a0 a443 	lbu	v0,163(a0)
412f906c:	7201      	cmpi	v0,1
412f906e:	603e      	bteqz	412f90ec <_ber_test_read_hci_data+0xe8>
412f9070:	7203      	cmpi	v0,3
412f9072:	611a      	btnez	412f90a8 <_ber_test_read_hci_data+0xa4>
412f9074:	a416      	lbu	s0,22(a0)
412f9076:	3300      	sll	v1,s0,8
412f9078:	a415      	lbu	s0,21(a0)
412f907a:	e86d      	or	s0,v1
412f907c:	2854      	bnez	s0,412f9126 <_ber_test_read_hci_data+0x122>
412f907e:	6a04      	li	v0,4
412f9080:	f0a0 c443 	sb	v0,163(a0)
412f9084:	9980      	lw	a0,0(s1)
412f9086:	f080 a4ec 	lbu	a3,140(a0)
412f908a:	5f0a      	sltiu	a3,10
412f908c:	61be      	btnez	412f900a <_ber_test_read_hci_data+0x6>
412f908e:	f0a0 a441 	lbu	v0,161(a0)
412f9092:	7202      	cmpi	v0,2
412f9094:	60ba      	bteqz	412f900a <_ber_test_read_hci_data+0x6>
412f9096:	f0a0 a462 	lbu	v1,162(a0)
412f909a:	6e02      	li	a2,2
412f909c:	43a1      	addiu	a1,v1,1
412f909e:	f0a0 c4c1 	sb	a2,161(a0)
412f90a2:	f0a0 c4a2 	sb	a1,162(a0)
412f90a6:	17b0      	b	412f9008 <_ber_test_read_hci_data+0x4>
412f90a8:	7205      	cmpi	v0,5
412f90aa:	61ec      	btnez	412f9084 <_ber_test_read_hci_data+0x80>
412f90ac:	a456      	lbu	v0,22(a0)
412f90ae:	f080 a4ec 	lbu	a3,140(a0)
412f90b2:	334a      	srl	v1,v0,2
412f90b4:	e799      	addu	a2,a3,a0
412f90b6:	f080 c677 	sb	v1,151(a2)
412f90ba:	f0a0 cc64 	sh	v1,164(a0)
412f90be:	9960      	lw	v1,0(s1)
412f90c0:	f080 aba8 	lhu	a1,136(v1)
412f90c4:	5d40      	sltiu	a1,64
412f90c6:	6106      	btnez	412f90d4 <_ber_test_read_hci_data+0xd0>
412f90c8:	f080 a3ac 	lbu	a1,140(v1)
412f90cc:	4581      	addiu	a0,a1,1
412f90ce:	f080 c38c 	sb	a0,140(v1)
412f90d2:	9960      	lw	v1,0(s1)
412f90d4:	f0a0 aba4 	lhu	a1,164(v1)
412f90d8:	b332      	lw	v1,412f91a0 <_ber_test_read_hci_data+0x19c>
412f90da:	0c27      	la	a0,412f9174 <_ber_test_read_hci_data+0x170>
412f90dc:	6e02      	li	a2,2
412f90de:	eb40      	jalr	v1
412f90e0:	6f4b      	li	a3,75
412f90e2:	9960      	lw	v1,0(s1)
412f90e4:	6e06      	li	a2,6
412f90e6:	f0a0 c3c3 	sb	a2,163(v1)
412f90ea:	17cc      	b	412f9084 <_ber_test_read_hci_data+0x80>
412f90ec:	a4d6      	lbu	a2,22(a0)
412f90ee:	a4b5      	lbu	a1,21(a0)
412f90f0:	32c0      	sll	v0,a2,8
412f90f2:	ed4d      	or	a1,v0
412f90f4:	b32b      	lw	v1,412f91a0 <_ber_test_read_hci_data+0x19c>
412f90f6:	f080 cca8 	sh	a1,136(a0)
412f90fa:	6e02      	li	a2,2
412f90fc:	0c20      	la	a0,412f917c <_ber_test_read_hci_data+0x178>
412f90fe:	eb40      	jalr	v1
412f9100:	6f4b      	li	a3,75
412f9102:	9960      	lw	v1,0(s1)
412f9104:	f080 aba8 	lhu	a1,136(v1)
412f9108:	5d40      	sltiu	a1,64
412f910a:	61ec      	btnez	412f90e4 <_ber_test_read_hci_data+0xe0>
412f910c:	6a02      	li	v0,2
412f910e:	f0a0 c343 	sb	v0,163(v1)
412f9112:	99e0      	lw	a3,0(s1)
412f9114:	6d01      	li	a1,1
412f9116:	f060 c7b7 	sb	a1,119(a3)
412f911a:	9980      	lw	a0,0(s1)
412f911c:	f0a0 c406 	sb	s0,166(a0)
412f9120:	17b1      	b	412f9084 <_ber_test_read_hci_data+0x80>
412f9122:	6474      	restore	32,ra,s0-s1
                }
            }
        }
    }
    
    return;
412f9124:	e8a0      	jrc	ra
412f9126:	6f04      	li	a3,4
412f9128:	b31e      	lw	v1,412f91a0 <_ber_test_read_hci_data+0x19c>
412f912a:	f0a0 c4e3 	sb	a3,163(a0)
412f912e:	67b0      	move	a1,s0
412f9130:	0c15      	la	a0,412f9184 <_ber_test_read_hci_data+0x180>
412f9132:	6e02      	li	a2,2
412f9134:	eb40      	jalr	v1
412f9136:	6f4b      	li	a3,75
412f9138:	99c0      	lw	a2,0(s1)
412f913a:	f704 6b10 	li	v1,10000
412f913e:	f080 ae48 	lhu	v0,136(a2)
412f9142:	e878      	mult	s0,v1
412f9144:	344c      	sll	a0,v0,3
412f9146:	e457      	subu	a1,a0,v0
412f9148:	37a8      	sll	a3,a1,2
412f914a:	e74f      	subu	v1,a3,v0
412f914c:	ec12      	mflo	a0
412f914e:	356c      	sll	a1,v1,3
412f9150:	ecba      	div	zero,a0,a1
412f9152:	f080 a64c 	lbu	v0,140(a2)
412f9156:	b313      	lw	v1,412f91a0 <_ber_test_read_hci_data+0x19c>
412f9158:	e2dd      	addu	a3,v0,a2
412f915a:	0c0e      	la	a0,412f9190 <_ber_test_read_hci_data+0x18c>
412f915c:	6e02      	li	a2,2
412f915e:	ed12      	mflo	a1
412f9160:	f080 c7ad 	sb	a1,141(a3)
412f9164:	eb40      	jalr	v1
412f9166:	6f4b      	li	a3,75
412f9168:	99c0      	lw	a2,0(s1)
412f916a:	6c04      	li	a0,4
412f916c:	f0a0 c683 	sb	a0,163(a2)
412f9170:	1789      	b	412f9084 <_ber_test_read_hci_data+0x80>
412f9172:	0000      	addiu	s0,sp,0
412f9174:	7372      	cmpi	v1,114
412f9176:	6973      	li	s1,115
412f9178:	003a      	addiu	s0,sp,232
412f917a:	0000      	addiu	s0,sp,0
412f917c:	6b70      	li	v1,112
412f917e:	6374      	addiu	sp,928
412f9180:	746e      	cmpi	a0,110
412f9182:	003a      	addiu	s0,sp,232
412f9184:	7265      	cmpi	v0,101
412f9186:	2072      	beqz	s0,412f926c <.LBE2+0x2c>
412f9188:	6962      	li	s1,98
412f918a:	3a74      	ld	v1,160(v0)
412f918c:	0000      	addiu	s0,sp,0
412f918e:	0000      	addiu	s0,sp,0
412f9190:	6562      	move	v1,v0
412f9192:	5f72      	sltiu	a3,114
412f9194:	6176      	btnez	412f9282 <.LBE2+0x42>
412f9196:	3a6c      	ld	v1,96(v0)
412f9198:	0000      	addiu	s0,sp,0
412f919a:	0000      	addiu	s0,sp,0
412f919c:	8fcc      	lh	a2,24(a3)
412f919e:	bfc3      	lwu	a2,12(a3)
412f91a0:	88dd      	lh	a2,58(s0)
412f91a2:	bfc3      	lwu	a2,12(a3)

412f91a4 <update_hci_cmd_time>:
412f91a4:	64c3      	save	24,ra
}

void update_hci_cmd_time(void)
{
412f91a6:	6c00      	li	a0,0
    hci_cmd_time = sys_get_ab_timer();    
412f91a8:	b206      	lw	v0,412f91c0 <update_hci_cmd_time+0x1c>
412f91aa:	67a4      	move	a1,a0
412f91ac:	67c4      	move	a2,a0
412f91ae:	ea40      	jalr	v0
412f91b0:	6f1c      	li	a3,28
412f91b2:	b303      	lw	v1,412f91bc <update_hci_cmd_time+0x18>
412f91b4:	db41      	sw	v0,4(v1)
412f91b6:	6443      	restore	24,ra
412f91b8:	e8a0      	jrc	ra
412f91ba:	0000      	addiu	s0,sp,0
412f91bc:	8fcc      	lh	a2,24(a3)
412f91be:	bfc3      	lwu	a2,12(a3)
412f91c0:	88dd      	lh	a2,58(s0)
412f91c2:	bfc3      	lwu	a2,12(a3)

412f91c4 <send_bt_data>:
412f91c4:	64c3      	save	24,ra
}

void send_bt_data(uint8 *data_buffer, uint32 data_len)
{
412f91c6:	6e00      	li	a2,0
    ber_print_rxtx(data_buffer, data_len, 1);
    bt_drv_send_data(data_buffer, data_len);
412f91c8:	b204      	lw	v0,412f91d8 <send_bt_data+0x14>
412f91ca:	ea40      	jalr	v0
412f91cc:	67e6      	move	a3,a2
412f91ce:	1962 e469 	jal	412f91a4 <update_hci_cmd_time>

    update_hci_cmd_time();
412f91d2:	6500      	nop
412f91d4:	6443      	restore	24,ra
412f91d6:	e8a0      	jrc	ra
412f91d8:	8fd5      	lh	a2,42(a3)
412f91da:	bfc3      	lwu	a2,12(a3)

412f91dc <_ber_test_get_pktinfo_cb>:
412f91dc:	b504      	lw	a1,412f91ec <_ber_test_get_pktinfo_cb+0x10>
}

/** 
 功能: 获取pkt number和error bit的定时器回调
 参数: 
 返回: 
 说明: 
*/
void _ber_test_get_pktinfo_cb(void)
{
    g_ber_control->tick_cnt++;
412f91de:	9d60      	lw	v1,0(a1)
412f91e0:	f0a0 a386 	lbu	a0,166(v1)
412f91e4:	4441      	addiu	v0,a0,1
412f91e6:	f0a0 c346 	sb	v0,166(v1)
412f91ea:	e8a0      	jrc	ra
412f91ec:	8fcc      	lh	a2,24(a3)
412f91ee:	bfc3      	lwu	a2,12(a3)

412f91f0 <att_parse_ber_result>:
412f91f0:	f00c 64f7 	save	a0-a2,56,ra,s0-s1
}

static uint32 libc_abs(int32 value)
{
    if (value > 0)
    {
        return value;
    }
    else
    {
        return (0 - value);
    }
}

uint32 att_parse_ber_result(uint32 result_num, uint32 *p_ber_val, uint32 *p_rssi_val)
{
412f91f4:	6f00      	li	a3,0
    int32 i;
    int32 diff_val;
    int8 div_val;
    int32 ber_val_total;
    int32 max_diff_val;
    int32 max_diff_index;
    int32 invalid_data_flag;
    int32 rssi_val_total;

    int32 ber_val;

    int32 rssi_val;

    div_val = 0;
412f91f6:	ef83      	sltu	a3,a0

    ber_val_total = 0;

    rssi_val_total = 0;

    //先计算总的平均值
    for (i = 0; i < result_num; i++)
412f91f8:	6727      	move	s1,a3
412f91fa:	d705      	sw	a3,20(sp)
412f91fc:	6707      	move	s0,a3
412f91fe:	600b      	bteqz	412f9216 <att_parse_ber_result+0x26>
412f9200:	b369      	lw	v1,412f93a4 <.LBE2+0x164>
    {
        if (g_ber_control->ber_value[i] != INVALID_BER_VAL)
412f9202:	9b40      	lw	v0,0(v1)
412f9204:	e049      	addu	v0,s0,v0
412f9206:	f080 a2ad 	lbu	a1,141(v0)
412f920a:	f080 2d01 	bnez	a1,412f9310 <.LBE2+0xd0>
412f920e:	960e      	lw	a2,56(sp)
412f9210:	4001      	addiu	s0,s0,1
412f9212:	e8c3      	sltu	s0,a2
412f9214:	61f5      	btnez	412f9200 <att_parse_ber_result+0x10>
412f9216:	e9fa      	div	zero,s1,a3
        {    
            print_log("ber: %d rssi: %d", g_ber_control->ber_value[i], g_ber_control->rssi_value[i]);
            
            ber_val_total += g_ber_control->ber_value[i];

            rssi_val_total += g_ber_control->rssi_value[i];
            
            div_val++;
        }
    }

    ber_val = (ber_val_total / div_val);
412f9218:	9005      	lw	s0,20(sp)

    rssi_val = (rssi_val_total / div_val);
412f921a:	6c00      	li	a0,0

    invalid_data_flag = FALSE;
412f921c:	653c      	move	t9,a0
412f921e:	e912      	mflo	s1
412f9220:	e8fa      	div	zero,s0,a3
412f9222:	67e4      	move	a3,a0

    max_diff_val = 0;
412f9224:	e812      	mflo	s0
412f9226:	6d00      	li	a1,0

    while (1)
    {
        //判断采样点离散程度,先找出离散程度很大的点
        for (i = 0; i < result_num; i++)
412f9228:	930e      	lw	v1,56(sp)
412f922a:	2348      	beqz	v1,412f92bc <.LBE2+0x7c>
412f922c:	b25e      	lw	v0,412f93a4 <.LBE2+0x164>
412f922e:	9a40      	lw	v0,0(v0)
412f9230:	f080 a26d 	lbu	v1,141(v0)
        {
            if (g_ber_control->ber_value[i] != INVALID_BER_VAL)
412f9234:	2309      	beqz	v1,412f9248 <.LBE2+0x8>

412f9236 <.LBB2>:
412f9236:	e32f      	subu	v1,s1
412f9238:	5301      	slti	v1,1
412f923a:	6783      	move	a0,v1
412f923c:	f080 6101 	btnez	412f9342 <.LBE2+0x102>

412f9240 <.LBE2>:
412f9240:	ef82      	slt	a3,a0
            {
                diff_val = libc_abs(g_ber_control->ber_value[i] - ber_val);

                if (diff_val > max_diff_val)
412f9242:	6002      	bteqz	412f9248 <.LBE2+0x8>
412f9244:	d504      	sw	a1,16(sp)
                {
                    max_diff_index = i;
412f9246:	67e4      	move	a3,a0
                    max_diff_val = diff_val;
412f9248:	960e      	lw	a2,56(sp)
412f924a:	45a1      	addiu	a1,a1,1
412f924c:	edc3      	sltu	a1,a2
412f924e:	4241      	addiu	v0,v0,1
412f9250:	61ef      	btnez	412f9230 <att_parse_ber_result+0x40>
412f9252:	5706      	slti	a3,6
                }
            }
        }

        //判断离散程度最大的点是否超过限制，如果超过限制，剔除该点，重复计算下一点
        if (max_diff_val > MAX_BER_DIFF_VAL)
412f9254:	6133      	btnez	412f92bc <.LBE2+0x7c>
412f9256:	b554      	lw	a1,412f93a4 <.LBE2+0x164>
        {           
            print_log("INVALID ber[%d]: %d", max_diff_index, g_ber_control->ber_value[max_diff_index]);
412f9258:	9604      	lw	a2,16(sp)
412f925a:	9d60      	lw	v1,0(a1)
412f925c:	b153      	lw	s1,412f93a8 <.LBE2+0x168>
412f925e:	e67d      	addu	a3,a2,v1
412f9260:	67a6      	move	a1,a2
412f9262:	f080 a7cd 	lbu	a2,141(a3)
412f9266:	0c3f      	la	a0,412f9360 <.LBE2+0x120>
412f9268:	e9c0      	jalrc	s1
412f926a:	b24f      	lw	v0,412f93a4 <.LBE2+0x164>

            //标记该点为无效点
            g_ber_control->ber_value[max_diff_index] = INVALID_BER_VAL;
412f926c:	9004      	lw	s0,16(sp)
412f926e:	9a80      	lw	a0,0(v0)
412f9270:	6d00      	li	a1,0
412f9272:	e09d      	addu	a3,s0,a0
412f9274:	f080 c7ad 	sb	a1,141(a3)
412f9278:	6901      	li	s1,1

            invalid_data_flag = TRUE;
412f927a:	930e      	lw	v1,56(sp)

            max_diff_val = 0;

            //重新计算一次平均值
            ber_val_total = 0;

            div_val = 0;

            rssi_val_total = 0;

            for (i = 0; i < result_num; i++)
412f927c:	41ef      	addiu	a3,s1,-1
412f927e:	ef63      	sltu	a3,v1
412f9280:	6539      	move	t9,s1
412f9282:	67a7      	move	a1,a3
412f9284:	6727      	move	s1,a3
412f9286:	6707      	move	s0,a3
412f9288:	6787      	move	a0,a3
412f928a:	6011      	bteqz	412f92ae <.LBE2+0x6e>
412f928c:	b246      	lw	v0,412f93a4 <.LBE2+0x164>
412f928e:	9ac0      	lw	a2,0(v0)
412f9290:	e4cd      	addu	v1,a0,a2
            {     
                if (g_ber_control->ber_value[i] != INVALID_BER_VAL)
412f9292:	f080 a34d 	lbu	v0,141(v1)
412f9296:	2207      	beqz	v0,412f92a6 <.LBE2+0x66>
412f9298:	e145      	addu	s1,v0
                {
                    ber_val_total += g_ber_control->ber_value[i];
412f929a:	f080 a357 	lbu	v0,151(v1)

                    rssi_val_total += g_ber_control->rssi_value[i];
412f929e:	4561      	addiu	v1,a1,1
                                 
                    div_val++;
412f92a0:	67a3      	move	a1,v1
412f92a2:	e041      	addu	s0,v0
412f92a4:	ed91      	seb	a1
412f92a6:	930e      	lw	v1,56(sp)
412f92a8:	4481      	addiu	a0,a0,1
412f92aa:	ec63      	sltu	a0,v1
412f92ac:	61f1      	btnez	412f9290 <.LBE2+0x50>
412f92ae:	e9ba      	div	zero,s1,a1
                }
            }  

            ber_val = (ber_val_total / div_val);  
412f92b0:	e912      	mflo	s1
412f92b2:	e8ba      	div	zero,s0,a1

            rssi_val = (rssi_val_total / div_val);
412f92b4:	e812      	mflo	s0
412f92b6:	6d00      	li	a1,0
412f92b8:	930e      	lw	v1,56(sp)
412f92ba:	2bb8      	bnez	v1,412f922c <att_parse_ber_result+0x3c>
412f92bc:	6799      	move	a0,t9
        }
        else
        {
            break;
        }
    }

    //存在无效点需要重新计算cfo平均值
    if (invalid_data_flag == TRUE)
412f92be:	2448      	beqz	a0,412f9350 <.LBE2+0x110>
412f92c0:	970e      	lw	a3,56(sp)
    {
        ber_val_total = 0;

        rssi_val_total = 0;

        div_val = 0;

        for (i = 0; i < result_num; i++)
412f92c2:	6e00      	li	a2,0
412f92c4:	eee3      	sltu	a2,a3
412f92c6:	653e      	move	t9,a2
412f92c8:	67a6      	move	a1,a2
412f92ca:	6786      	move	a0,a2
412f92cc:	6017      	bteqz	412f92fc <.LBE2+0xbc>
412f92ce:	b336      	lw	v1,412f93a4 <.LBE2+0x164>
412f92d0:	9b40      	lw	v0,0(v1)
412f92d2:	d208      	sw	v0,32(sp)
412f92d4:	9708      	lw	a3,32(sp)
        {
            if (g_ber_control->ber_value[i] != INVALID_BER_VAL)
412f92d6:	e4ed      	addu	v1,a0,a3
412f92d8:	f080 a34d 	lbu	v0,141(v1)
412f92dc:	2209      	beqz	v0,412f92f0 <.LBE2+0xb0>
412f92de:	67f9      	move	a3,t9
            {
                ber_val_total += g_ber_control->ber_value[i];
412f92e0:	e75d      	addu	a3,v0
412f92e2:	653f      	move	t9,a3
412f92e4:	4541      	addiu	v0,a1,1
                rssi_val_total += g_ber_control->rssi_value[i];
                div_val++;
412f92e6:	f080 a3f7 	lbu	a3,151(v1)
412f92ea:	67a2      	move	a1,v0
412f92ec:	e6f9      	addu	a2,a3
412f92ee:	ed91      	seb	a1
412f92f0:	930e      	lw	v1,56(sp)
412f92f2:	4481      	addiu	a0,a0,1
412f92f4:	ec63      	sltu	a0,v1
412f92f6:	61ee      	btnez	412f92d4 <.LBE2+0x94>
412f92f8:	5505      	slti	a1,5
            }
            else
            {
                continue;
            }
        }

        //至少要有8组记录值
        if (div_val < MAX_BER_DIFF_VAL)
412f92fa:	6025      	bteqz	412f9346 <.LBE2+0x106>
412f92fc:	b22b      	lw	v0,412f93a8 <.LBE2+0x168>
        {
            print_log("BER record not enough: %d", div_val);
412f92fe:	0c1e      	la	a0,412f9374 <.LBE2+0x134>
412f9300:	eac0      	jalrc	v0
412f9302:	950f      	lw	a1,60(sp)
            
            *p_ber_val = ber_val;
412f9304:	9610      	lw	a2,64(sp)

            *p_rssi_val = rssi_val;
412f9306:	6a00      	li	v0,0
            
            //出现多组ber异常值，表示本次测试结果异常
            return FALSE;
412f9308:	dd20      	sw	s1,0(a1)
412f930a:	de00      	sw	s0,0(a2)
412f930c:	6477      	restore	56,ra,s0-s1
        }

        ber_val = (ber_val_total / div_val);

        rssi_val = (rssi_val_total / div_val);
    }

    *p_ber_val = ber_val;

    *p_rssi_val = rssi_val;    

    return TRUE;
}
412f930e:	e8a0      	jrc	ra
412f9310:	f080 a2d7 	lbu	a2,151(v0)
412f9314:	b225      	lw	v0,412f93a8 <.LBE2+0x168>
412f9316:	0c1f      	la	a0,412f9390 <.LBE2+0x150>
412f9318:	ea40      	jalr	v0
412f931a:	d706      	sw	a3,24(sp)
412f931c:	b522      	lw	a1,412f93a4 <.LBE2+0x164>
412f931e:	9605      	lw	a2,20(sp)
412f9320:	9de0      	lw	a3,0(a1)
412f9322:	e0f1      	addu	a0,s0,a3
412f9324:	f080 a457 	lbu	v0,151(a0)
412f9328:	9706      	lw	a3,24(sp)
412f932a:	f080 a46d 	lbu	v1,141(a0)
412f932e:	e655      	addu	a1,a2,v0
412f9330:	4781      	addiu	a0,a3,1
412f9332:	960e      	lw	a2,56(sp)
412f9334:	67e4      	move	a3,a0
412f9336:	4001      	addiu	s0,s0,1
412f9338:	e165      	addu	s1,v1
412f933a:	ef91      	seb	a3
412f933c:	e8c3      	sltu	s0,a2
412f933e:	d505      	sw	a1,20(sp)
412f9340:	1769      	b	412f9214 <att_parse_ber_result+0x24>
412f9342:	ec6b      	neg	a0,v1
412f9344:	177d      	b	412f9240 <.LBE2>
412f9346:	6719      	move	s0,t9
412f9348:	e8ba      	div	zero,s0,a1
412f934a:	e912      	mflo	s1
412f934c:	eeba      	div	zero,a2,a1
412f934e:	e812      	mflo	s0
412f9350:	970f      	lw	a3,60(sp)
412f9352:	9410      	lw	a0,64(sp)
412f9354:	6a01      	li	v0,1
412f9356:	df20      	sw	s1,0(a3)
412f9358:	dc00      	sw	s0,0(a0)
412f935a:	6477      	restore	56,ra,s0-s1
412f935c:	e8a0      	jrc	ra
412f935e:	0000      	addiu	s0,sp,0
412f9360:	4e49      	addiu	a2,73
412f9362:	4156      	daddiu	v0,s1,6
412f9364:	494c      	addiu	s1,76
412f9366:	2044      	beqz	s0,412f93f0 <_ber_test_write_berdata+0x44>
412f9368:	6562      	move	v1,v0
412f936a:	5b72      	sltiu	v1,114
412f936c:	6425      	restore	40,s0
412f936e:	3a5d      	ld	v0,232(v0)
412f9370:	2520      	beqz	a1,412f93b2 <_ber_test_write_berdata+0x6>
412f9372:	0064      	addiu	s0,sp,400
412f9374:	4542      	addiu	v0,a1,2
412f9376:	2052      	beqz	s0,412f941c <_ber_test_write_berdata+0x70>
412f9378:	6572      	move	s3,v0
412f937a:	6f63      	li	a3,99
412f937c:	6472      	restore	16,ra,s0-s1
412f937e:	6e20      	li	a2,32
412f9380:	746f      	cmpi	a0,111
412f9382:	6520      	move	at,s0
412f9384:	6f6e      	li	a3,110
412f9386:	6775      	move	v1,s5
412f9388:	3a68      	ld	v1,64(v0)
412f938a:	2520      	beqz	a1,412f93cc <_ber_test_write_berdata+0x20>
412f938c:	0064      	addiu	s0,sp,400
412f938e:	0000      	addiu	s0,sp,0
412f9390:	6562      	move	v1,v0
412f9392:	3a72      	ld	v1,144(v0)
412f9394:	2520      	beqz	a1,412f93d6 <_ber_test_write_berdata+0x2a>
412f9396:	2064      	beqz	s0,412f9460 <_ber_test_write_berdata+0xb4>
412f9398:	7372      	cmpi	v1,114
412f939a:	6973      	li	s1,115
412f939c:	203a      	beqz	s0,412f9412 <_ber_test_write_berdata+0x66>
412f939e:	6425      	restore	40,s0
412f93a0:	0000      	addiu	s0,sp,0
412f93a2:	0000      	addiu	s0,sp,0
412f93a4:	8fcc      	lh	a2,24(a3)
412f93a6:	bfc3      	lwu	a2,12(a3)
412f93a8:	9b59      	lw	v0,100(v1)
412f93aa:	41cf      	addiu	a2,s1,-1

412f93ac <_ber_test_write_berdata>:
412f93ac:	64f6      	save	48,ra,s0-s1

/** 
 功能: 发送HCI CMD
 参数: 
 返回: 成功返回TRUE, 失败返回FALSE
 说明: 
*/
uint8 _ber_test_write_berdata(uint8 pkt_index)
{
412f93ae:	b03a      	lw	s0,412f9494 <_ber_test_write_berdata+0xe8>
    uint32 i;
    cmd_pkt_head_t *cmd_pkt_head;
    uint8 *data_buffer;
    uint8 cmd_len;
    uint32 old_time;

    cmd_pkt_head = (cmd_pkt_head_t *)(ATT_MPDATA_TEMP_BUFFER);
412f93b0:	ec11      	zeb	a0
412f93b2:	67b0      	move	a1,s0
412f93b4:	1008      	b	412f93c6 <_ber_test_write_berdata+0x1a>
412f93b6:	b339      	lw	v1,412f9498 <_ber_test_write_berdata+0xec>

    data_buffer = (uint8 *)cmd_pkt_head;

    for(;;)
    {
        if(cmd_pkt_head->pkt_index == pkt_index)
        {
            break;
        }

        if(cmd_pkt_head->next_pkt_offset >= g_ber_control->berdata_len)
412f93b8:	9be0      	lw	a3,0(v1)
412f93ba:	a861      	lhu	v1,2(s0)
412f93bc:	f060 afd4 	lhu	a2,116(a3)
412f93c0:	ebc3      	sltu	v1,a2
412f93c2:	604a      	bteqz	412f9458 <_ber_test_write_berdata+0xac>
412f93c4:	e3a1      	addu	s0,v1,a1
        {
            return FALSE;
        }
        
        cmd_pkt_head = (cmd_pkt_head_t *)((uint8 *)ATT_MPDATA_TEMP_BUFFER + cmd_pkt_head->next_pkt_offset);
412f93c6:	a040      	lbu	v0,0(s0)
412f93c8:	ea8e      	xor	v0,a0
412f93ca:	2af5      	bnez	v0,412f93b6 <_ber_test_write_berdata+0xa>
412f93cc:	a041      	lbu	v0,1(s0)
    }

    data_buffer = (uint8 *)((uint8 *)cmd_pkt_head + sizeof(cmd_pkt_head_t));

    for(i = 0; i < cmd_pkt_head->total_node; i++)
412f93ce:	6c00      	li	a0,0
412f93d0:	4024      	addiu	s1,s0,4
412f93d2:	d404      	sw	a0,16(sp)
412f93d4:	2209      	beqz	v0,412f93e8 <_ber_test_write_berdata+0x3c>
412f93d6:	a1a0      	lbu	a1,0(s1)
    {
        cmd_len = *data_buffer;
412f93d8:	4121      	addiu	s1,s1,1

        data_buffer++;
412f93da:	d505      	sw	a1,20(sp)
412f93dc:	2d0b      	bnez	a1,412f93f4 <_ber_test_write_berdata+0x48>
        
        if(cmd_len != 0)
412f93de:	9604      	lw	a2,16(sp)
412f93e0:	46a1      	addiu	a1,a2,1
412f93e2:	ed43      	sltu	a1,v0
412f93e4:	d504      	sw	a1,16(sp)
412f93e6:	61f7      	btnez	412f93d6 <_ber_test_write_berdata+0x2a>
412f93e8:	b22f      	lw	v0,412f94a4 <_ber_test_write_berdata+0xf8>
        {            
            g_ber_control->rev_pkt_flag = FALSE;
            bt_drv_send_data(data_buffer, cmd_len);
            old_time = sys_get_ab_timer();

            while(1)
            {
                if(g_ber_control->rev_pkt_flag == TRUE)
                {
                    g_ber_control->rev_pkt_flag = FALSE;
                    break;
                }

                if((sys_get_ab_timer() - old_time) > 1000)
                {
                    print_log("hci timeout !");
                    PRINT_DATA(data_buffer, cmd_len);

                    return FALSE;
                }
            }

            data_buffer += cmd_len;
        }
    }

    print_log("pkt send over");
412f93ea:	0c21      	la	a0,412f946c <_ber_test_write_berdata+0xc0>
412f93ec:	eac0      	jalrc	v0
412f93ee:	6a01      	li	v0,1

    return TRUE;
412f93f0:	6476      	restore	48,ra,s0-s1
}
412f93f2:	e8a0      	jrc	ra
412f93f4:	b329      	lw	v1,412f9494 <_ber_test_write_berdata+0xe8>
412f93f6:	6f00      	li	a3,0
412f93f8:	9bc0      	lw	a2,0(v1)
412f93fa:	b229      	lw	v0,412f949c <_ber_test_write_berdata+0xf0>
412f93fc:	f060 c6f6 	sb	a3,118(a2)
412f9400:	9505      	lw	a1,20(sp)
412f9402:	6e00      	li	a2,0
412f9404:	67e6      	move	a3,a2
412f9406:	ea40      	jalr	v0
412f9408:	6791      	move	a0,s1
412f940a:	6c00      	li	a0,0
412f940c:	b225      	lw	v0,412f94a0 <_ber_test_write_berdata+0xf4>
412f940e:	67a4      	move	a1,a0
412f9410:	67c4      	move	a2,a0
412f9412:	ea40      	jalr	v0
412f9414:	6f1c      	li	a3,28
412f9416:	d206      	sw	v0,24(sp)
412f9418:	b520      	lw	a1,412f9498 <_ber_test_write_berdata+0xec>
412f941a:	9d60      	lw	v1,0(a1)
412f941c:	f060 a396 	lbu	a0,118(v1)
412f9420:	7401      	cmpi	a0,1
412f9422:	601d      	bteqz	412f945e <_ber_test_write_berdata+0xb2>
412f9424:	6c00      	li	a0,0
412f9426:	b31f      	lw	v1,412f94a0 <_ber_test_write_berdata+0xf4>
412f9428:	67c4      	move	a2,a0
412f942a:	67a4      	move	a1,a0
412f942c:	eb40      	jalr	v1
412f942e:	6f1c      	li	a3,28
412f9430:	9606      	lw	a2,24(sp)
412f9432:	e2cb      	subu	v0,a2
412f9434:	f3e0 5a09 	sltiu	v0,1001
412f9438:	61ef      	btnez	412f9418 <_ber_test_write_berdata+0x6c>
412f943a:	b21b      	lw	v0,412f94a4 <_ber_test_write_berdata+0xf8>
412f943c:	0c10      	la	a0,412f947c <_ber_test_write_berdata+0xd0>
412f943e:	eac0      	jalrc	v0
412f9440:	6d00      	li	a1,0
412f9442:	b318      	lw	v1,412f94a0 <_ber_test_write_berdata+0xf4>
412f9444:	67c5      	move	a2,a1
412f9446:	0c12      	la	a0,412f948c <_ber_test_write_berdata+0xe0>
412f9448:	eb40      	jalr	v1
412f944a:	6f4b      	li	a3,75
412f944c:	9505      	lw	a1,20(sp)
412f944e:	b315      	lw	v1,412f94a0 <_ber_test_write_berdata+0xf4>
412f9450:	6791      	move	a0,s1
412f9452:	6e03      	li	a2,3
412f9454:	eb40      	jalr	v1
412f9456:	6f4b      	li	a3,75
412f9458:	6a00      	li	v0,0
412f945a:	6476      	restore	48,ra,s0-s1
412f945c:	e8a0      	jrc	ra
412f945e:	6c00      	li	a0,0
412f9460:	f060 c396 	sb	a0,118(v1)
412f9464:	9705      	lw	a3,20(sp)
412f9466:	a041      	lbu	v0,1(s0)
412f9468:	e1e5      	addu	s1,a3
412f946a:	17b9      	b	412f93de <_ber_test_write_berdata+0x32>
412f946c:	6b70      	li	v1,112
412f946e:	2074      	beqz	s0,412f9558 <ber_test_loop_deal+0x44>
412f9470:	6573      	move	s3,v1
412f9472:	646e      	restore	112,ra,s0
412f9474:	6f20      	li	a3,32
412f9476:	6576      	move	s3,a2
412f9478:	0072      	addiu	s0,sp,456
412f947a:	0000      	addiu	s0,sp,0
412f947c:	6368      	addiu	sp,832
412f947e:	2069      	beqz	s0,412f9552 <ber_test_loop_deal+0x3e>
412f9480:	6974      	li	s1,116
412f9482:	656d      	move	t3,a1
412f9484:	756f      	cmpi	a1,111
412f9486:	2074      	beqz	s0,412f9570 <ber_test_loop_deal+0x5c>
412f9488:	0021      	addiu	s0,sp,132
412f948a:	0000      	addiu	s0,sp,0
412f948c:	643c      	restore	96,s0-s1
412f948e:	7461      	cmpi	a0,97
412f9490:	3e61      	ld	v1,8(a2)
412f9492:	0020      	addiu	s0,sp,128
412f9494:	a608      	lbu	s0,8(a2)
412f9496:	9fc3      	lw	a2,12(a3)
412f9498:	8fcc      	lh	a2,24(a3)
412f949a:	bfc3      	lwu	a2,12(a3)
412f949c:	8fd5      	lh	a2,42(a3)
412f949e:	bfc3      	lwu	a2,12(a3)
412f94a0:	88dd      	lh	a2,58(s0)
412f94a2:	bfc3      	lwu	a2,12(a3)
412f94a4:	9b59      	lw	v0,100(v1)
412f94a6:	41cf      	addiu	a2,s1,-1

412f94a8 <ber_clear_report>:
412f94a8:	64c3      	save	24,ra

uint32 ber_clear_report(void)
{
412f94aa:	b219      	lw	v0,412f950c <ber_clear_report+0x64>
    uint32 ret_val;
    
    print_log("clear report");
412f94ac:	0c14      	la	a0,412f94fc <ber_clear_report+0x54>
412f94ae:	eac0      	jalrc	v0
412f94b0:	1962 e4eb 	jal	412f93ac <_ber_test_write_berdata>

    //send_bt_data(clear_report_cmd0, sizeof(clear_report_cmd0));
    //sys_mdelay(10);
    //send_bt_data(clear_report_cmd1, sizeof(clear_report_cmd1));
    //sys_mdelay(10);
    //send_bt_data(clear_report_cmd2, sizeof(clear_report_cmd2));
    //ssys_mdelay(10);
    //send_bt_data(clear_report_cmd3, sizeof(clear_report_cmd3)); 
    //sys_mdelay(10);    
    
    ret_val = _ber_test_write_berdata(PKT_CFO_STOP_INDEX);
412f94b4:	6c01      	li	a0,1
412f94b6:	7201      	cmpi	v0,1

    if(ret_val == TRUE)
412f94b8:	67a2      	move	a1,v0
412f94ba:	600e      	bteqz	412f94d8 <ber_clear_report+0x30>
412f94bc:	b415      	lw	a0,412f9510 <ber_clear_report+0x68>
    {
        ret_val = _ber_test_write_berdata(PKT_CFO_BEGINE_INDEX);    
    }
    
    //g_ber_control->tick_cnt = 0;
    //g_ber_control->cmd_state = BER_CMD_STATE_DELAY;  
    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_PACKET_NUM; 
412f94be:	6b00      	li	v1,0
412f94c0:	9c40      	lw	v0,0(a0)
412f94c2:	f0a0 c263 	sb	v1,163(v0)
412f94c6:	9ce0      	lw	a3,0(a0)
    g_ber_control->tick_cnt = 0;
412f94c8:	6745      	move	v0,a1
    g_ber_control->rev_valid_pkt_flag = FALSE;    

    //sys_mdelay(2000);

    return ret_val;
}
412f94ca:	f0a0 c766 	sb	v1,166(a3)
412f94ce:	9cc0      	lw	a2,0(a0)
412f94d0:	f060 c677 	sb	v1,119(a2)
412f94d4:	6443      	restore	24,ra
412f94d6:	e8a0      	jrc	ra
412f94d8:	1962 e4eb 	jal	412f93ac <_ber_test_write_berdata>
412f94dc:	6c00      	li	a0,0
412f94de:	b40d      	lw	a0,412f9510 <ber_clear_report+0x68>
412f94e0:	67a2      	move	a1,v0
412f94e2:	9c40      	lw	v0,0(a0)
412f94e4:	6b00      	li	v1,0
412f94e6:	f0a0 c263 	sb	v1,163(v0)
412f94ea:	9ce0      	lw	a3,0(a0)
412f94ec:	6745      	move	v0,a1
412f94ee:	f0a0 c766 	sb	v1,166(a3)
412f94f2:	9cc0      	lw	a2,0(a0)
412f94f4:	f060 c677 	sb	v1,119(a2)
412f94f8:	6443      	restore	24,ra
412f94fa:	e8a0      	jrc	ra
412f94fc:	6c63      	li	a0,99
412f94fe:	6165      	btnez	412f95ca <ber_test_loop_deal+0xb6>
412f9500:	2072      	beqz	s0,412f95e6 <ber_test_loop_deal+0xd2>
412f9502:	6572      	move	s3,v0
412f9504:	6f70      	li	a3,112
412f9506:	7472      	cmpi	a0,114
412f9508:	0000      	addiu	s0,sp,0
412f950a:	0000      	addiu	s0,sp,0
412f950c:	9b59      	lw	v0,100(v1)
412f950e:	41cf      	addiu	a2,s1,-1
412f9510:	8fcc      	lh	a2,24(a3)
412f9512:	bfc3      	lwu	a2,12(a3)

412f9514 <ber_test_loop_deal>:
412f9514:	f004 64f7 	save	a0,56,ra,s0-s1

int32 ber_test_loop_deal(ber_test_arg_t * ber_arg)
{
412f9518:	6b00      	li	v1,0
    uint32 ber_val;
    uint32 rssi_val;
    uint32 old_state = 0;
412f951a:	d307      	sw	v1,28(sp)
412f951c:	1962 e469 	jal	412f91a4 <update_hci_cmd_time>
    int32 ret_val;
    int32 clear_time = 0;
    int32 update_time = 0;
    int32 cur_time;

    /** RX监控定时器
    */
    //g_ber_control->get_pktinfo_timer = sys_set_irq_timer1(_ber_test_get_pktinfo_cb, 50);

    update_hci_cmd_time();
412f9520:	d306      	sw	v1,24(sp)
412f9522:	9407      	lw	a0,28(sp)

    update_time = sys_get_ab_timer();
412f9524:	b2c9      	lw	v0,412f9848 <ber_test_loop_deal+0x334>
412f9526:	67a4      	move	a1,a0
412f9528:	67c4      	move	a2,a0
412f952a:	ea40      	jalr	v0
412f952c:	6f1c      	li	a3,28
412f952e:	d208      	sw	v0,32(sp)
412f9530:	6c00      	li	a0,0

    /** 循环检测是否需要stop
    */
    while(1)
    {
        cur_time = sys_get_ab_timer();
412f9532:	b0c6      	lw	s0,412f9848 <ber_test_loop_deal+0x334>
412f9534:	67a4      	move	a1,a0
412f9536:	67c4      	move	a2,a0
412f9538:	e840      	jalr	s0
412f953a:	6f1c      	li	a3,28
412f953c:	9508      	lw	a1,32(sp)
        
        if(cur_time - update_time > 50)
412f953e:	6702      	move	s0,v0
412f9540:	e2b3      	subu	a0,v0,a1
412f9542:	5433      	slti	a0,51
412f9544:	603b      	bteqz	412f95bc <ber_test_loop_deal+0xa8>
412f9546:	b1c2      	lw	s1,412f984c <ber_test_loop_deal+0x338>
        {
            _ber_test_get_pktinfo_cb();

            update_time = cur_time;
        }
        
        if(g_ber_control->ber_test_state == BER_STATE_FINISH)
412f9548:	9960      	lw	v1,0(s1)
412f954a:	f0a0 a3c1 	lbu	a2,161(v1)
412f954e:	7602      	cmpi	a2,2
412f9550:	603f      	bteqz	412f95d0 <ber_test_loop_deal+0xbc>
412f9552:	f080 a3ec 	lbu	a3,140(v1)
        {       
            ret_val = att_parse_ber_result(PKT_INFO_COUNT, &ber_val, &rssi_val);

            if (g_ber_control->rssi_test == TRUE)
            {
                //判断记录数据是否够结果计息
                if(ret_val == FALSE || (((rssi_val < ber_arg->rssi_thr_low) || (rssi_val > ber_arg->rssi_thr_high))))
                {
                    //如果记录不足，要重新进行ber数值的获取
                    if(g_ber_control->test_cnt >= MAX_BER_RETRY_CNT)
                    {          
                        print_log("RSSI_test fail:%d", rssi_val);
                        ret_val = FALSE;
                        break;
                        
                    }
                    else
                    {
                        print_log("RSSI_val:%d cnt: %d", rssi_val, g_ber_control->test_cnt); 
                    
                        g_ber_control->pkt_info_count = 0;
                        g_ber_control->pkt_info.result = 0;
                        libc_memset(g_ber_control->ber_value, 0, PKT_INFO_COUNT);  
                        libc_memset(g_ber_control->rssi_value, 0, PKT_INFO_COUNT);                    
                    
                        g_ber_control->ber_test_state = BER_STATE_START;
                        g_ber_control->rev_valid_pkt_flag = FALSE;
                        g_ber_control->rev_pkt_flag = FALSE;

                        //ber_clear_report();  
                    }
                }
                else
                {      
                    print_log("RSSI_test success:%d", rssi_val);

                    ret_val = TRUE;
                    break;
                }
            }
            else
            {
                //判断记录数据是否够结果计息
                if(ret_val == FALSE)
                {
                    //如果记录不足，要重新进行ber数值的获取
                    if(g_ber_control->test_cnt >= MAX_BER_RETRY_CNT)
                    {          
                        print_log("ber_test fail:%d", ber_val);
                        ret_val = FALSE;
                        break;
                        
                    }
                    else
                    {
                        print_log("ber_val:%d cnt: %d", ber_val, g_ber_control->test_cnt); 
                    
                        g_ber_control->pkt_info_count = 0;
                        g_ber_control->pkt_info.result = 0;
                        libc_memset(g_ber_control->ber_value, 0, PKT_INFO_COUNT);  
                        libc_memset(g_ber_control->rssi_value, 0, PKT_INFO_COUNT);                    
                    
                        g_ber_control->ber_test_state = BER_STATE_START;
                        g_ber_control->rev_valid_pkt_flag = FALSE;
                        g_ber_control->rev_pkt_flag = FALSE;

                        //ber_clear_report();  
                    }
                }
                else
                {
                    if(ber_val < ber_arg->ber_thr_low || ber_val > ber_arg->ber_thr_high)
                    {
                        //如果信号强度比较好，而测试出来的ber较差，则认为测试失败
                        //否则需要多测试几次
                        if((g_ber_control->test_cnt >= MAX_BER_RETRY_CNT)
                            || (rssi_val > 0x28))
                        {          
                            print_log("ber_test fail:%d", ber_val);
                            ret_val = FALSE;
                            break;
                            
                        }
                        else
                        {
                            print_log("ber_val:%d cnt: %d", ber_val, g_ber_control->test_cnt); 

                            g_ber_control->pkt_info_count = 0;
                            g_ber_control->pkt_info.result = 0;
                            libc_memset(g_ber_control->ber_value, 0, PKT_INFO_COUNT);  
                            libc_memset(g_ber_control->rssi_value, 0, PKT_INFO_COUNT);                    

                            g_ber_control->ber_test_state = BER_STATE_START;
                            g_ber_control->rev_valid_pkt_flag = FALSE;
                            g_ber_control->rev_pkt_flag = FALSE;

                            //ber_clear_report();
                        }
                    }
                    else
                    {
                        print_log("ber_test success:%d", ber_val);

                        ret_val = TRUE;
                        break;

                    }
                }
            }
        }
        else
        {        
            if(g_ber_control->pkt_info_count < PKT_INFO_COUNT)
412f9556:	5f0a      	sltiu	a3,10
412f9558:	60eb      	bteqz	412f9530 <ber_test_loop_deal+0x1c>
412f955a:	f0a0 a343 	lbu	v0,163(v1)
            {              
                if(old_state != g_ber_control->cmd_state)
412f955e:	9406      	lw	a0,24(sp)
412f9560:	ea8a      	cmp	v0,a0
412f9562:	6001      	bteqz	412f9566 <ber_test_loop_deal+0x52>
412f9564:	d206      	sw	v0,24(sp)
                {
                    //libc_print("cmd state", g_ber_control->cmd_state, 2);
                    //libc_print("tick", g_ber_control->tick_cnt, 2);
                    old_state = g_ber_control->cmd_state;
412f9566:	99a1      	lw	a1,4(s1)
                }
                
                if((cur_time - hci_cmd_time) > 5000)
412f9568:	e0ab      	subu	v0,s0,a1
412f956a:	f382 5a09 	sltiu	v0,5001
412f956e:	f0e0 601c 	bteqz	412f976a <ber_test_loop_deal+0x256>
412f9572:	f0a0 a3c6 	lbu	a2,166(v1)
                {
                    print_log("hci event timeout");
                    ret_val = FALSE;
                    break;
                }
                
                //超过5s未收到event回应，则认为测试失败
                if(g_ber_control->tick_cnt >= 100 && g_ber_control->rev_valid_pkt_flag == FALSE)
412f9576:	5e64      	sltiu	a2,100
412f9578:	6104      	btnez	412f9582 <ber_test_loop_deal+0x6e>
412f957a:	f060 a317 	lbu	s0,119(v1)
412f957e:	f0e0 2019 	beqz	s0,412f9774 <ber_test_loop_deal+0x260>
412f9582:	f0a0 a303 	lbu	s0,163(v1)
                {
                    print_log("no event test timeout");
                    ret_val = FALSE;
                    break;
                }               

                if(g_ber_control->cmd_state == BER_CMD_STATE_WRITE_PACKET_NUM)
412f9586:	6743      	move	v0,v1
412f9588:	2863      	bnez	s0,412f9650 <ber_test_loop_deal+0x13c>
412f958a:	9407      	lw	a0,28(sp)
                {  
                    if(clear_time == 0)
412f958c:	f0c0 240f 	beqz	a0,412f972e <ber_test_loop_deal+0x21a>
412f9590:	b4b2      	lw	a0,412f9858 <ber_test_loop_deal+0x344>
                    {
                        clear_time = sys_get_ab_timer();
                    }
                    
                    g_ber_control->rev_valid_pkt_flag = FALSE;
                    send_bt_data(pkt_num_cmd, sizeof(pkt_num_cmd));
412f9592:	f060 c217 	sb	s0,119(v0)
412f9596:	1962 e471 	jal	412f91c4 <send_bt_data>
412f959a:	6d05      	li	a1,5
412f959c:	b0ac      	lw	s0,412f984c <ber_test_loop_deal+0x338>
                    g_ber_control->cmd_state = BER_CMD_STATE_READ_PACKET_NUM;
412f959e:	6a01      	li	v0,1
412f95a0:	9860      	lw	v1,0(s0)
412f95a2:	f0a0 c343 	sb	v0,163(v1)
                    
                }
                else if(g_ber_control->cmd_state == BER_CMD_STATE_WRITE_ERROR_BIT)
                {                     
                    send_bt_data(error_bit_cmd, sizeof(error_bit_cmd));  
                    g_ber_control->cmd_state = BER_CMD_STATE_READ_ERROR_BIT;
                }
                else if(g_ber_control->cmd_state == BER_CMD_STATE_WRITE_RSSI)
                {
                    send_bt_data(grssi_cmd, sizeof(grssi_cmd));
                    g_ber_control->cmd_state = BER_CMD_STATE_READ_RSSI;
412f95a6:	6c00      	li	a0,0
412f95a8:	b0a8      	lw	s0,412f9848 <ber_test_loop_deal+0x334>
412f95aa:	67a4      	move	a1,a0
412f95ac:	67c4      	move	a2,a0
412f95ae:	e840      	jalr	s0
412f95b0:	6f1c      	li	a3,28
412f95b2:	9508      	lw	a1,32(sp)
412f95b4:	6702      	move	s0,v0
412f95b6:	e2b3      	subu	a0,v0,a1
412f95b8:	5433      	slti	a0,51
412f95ba:	61c5      	btnez	412f9546 <ber_test_loop_deal+0x32>
412f95bc:	1962 e477 	jal	412f91dc <_ber_test_get_pktinfo_cb>
412f95c0:	6500      	nop
412f95c2:	b1a3      	lw	s1,412f984c <ber_test_loop_deal+0x338>
412f95c4:	d008      	sw	s0,32(sp)
412f95c6:	9960      	lw	v1,0(s1)
412f95c8:	f0a0 a3c1 	lbu	a2,161(v1)
412f95cc:	7602      	cmpi	a2,2
412f95ce:	61c1      	btnez	412f9552 <ber_test_loop_deal+0x3e>
412f95d0:	0504      	addiu	a1,sp,16
412f95d2:	6c0a      	li	a0,10
412f95d4:	1962 e47c 	jal	412f91f0 <att_parse_ber_result>
412f95d8:	0605      	addiu	a2,sp,20
412f95da:	99a0      	lw	a1,0(s1)
412f95dc:	6702      	move	s0,v0
412f95de:	f0a0 a5e7 	lbu	a3,167(a1)
412f95e2:	7701      	cmpi	a3,1
412f95e4:	6154      	btnez	412f968e <ber_test_loop_deal+0x17a>
412f95e6:	227b      	beqz	v0,412f96de <ber_test_loop_deal+0x1ca>
412f95e8:	940e      	lw	a0,56(sp)
412f95ea:	9505      	lw	a1,20(sp)
412f95ec:	8445      	lb	v0,5(a0)
412f95ee:	ed43      	sltu	a1,v0
412f95f0:	6104      	btnez	412f95fa <ber_test_loop_deal+0xe6>
412f95f2:	8466      	lb	v1,6(a0)
412f95f4:	eba3      	sltu	v1,a1
412f95f6:	f0c0 600b 	bteqz	412f9790 <ber_test_loop_deal+0x27c>
412f95fa:	b095      	lw	s0,412f984c <ber_test_loop_deal+0x338>
412f95fc:	9880      	lw	a0,0(s0)
412f95fe:	f0a0 a402 	lbu	s0,162(a0)
412f9602:	2873      	bnez	s0,412f96ea <ber_test_loop_deal+0x1d6>
412f9604:	b393      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f9606:	0c67      	la	a0,412f97a0 <ber_test_loop_deal+0x28c>
412f9608:	eb40      	jalr	v1
412f960a:	67d0      	move	a2,s0
412f960c:	b490      	lw	a0,412f984c <ber_test_loop_deal+0x338>
412f960e:	b192      	lw	s1,412f9854 <ber_test_loop_deal+0x340>
412f9610:	9ca0      	lw	a1,0(a0)
412f9612:	6e0a      	li	a2,10
412f9614:	f080 c50c 	sb	s0,140(a1)
412f9618:	9c80      	lw	a0,0(a0)
412f961a:	67b0      	move	a1,s0
412f961c:	f080 cc08 	sh	s0,136(a0)
412f9620:	4c7f      	addiu	a0,127
412f9622:	4c0e      	addiu	a0,14
412f9624:	e940      	jalr	s1
412f9626:	6f01      	li	a3,1
412f9628:	b789      	lw	a3,412f984c <ber_test_loop_deal+0x338>
412f962a:	b38b      	lw	v1,412f9854 <ber_test_loop_deal+0x340>
412f962c:	9f80      	lw	a0,0(a3)
412f962e:	67b0      	move	a1,s0
412f9630:	4c7f      	addiu	a0,127
412f9632:	6e0a      	li	a2,10
412f9634:	4c18      	addiu	a0,24
412f9636:	eb40      	jalr	v1
412f9638:	6f01      	li	a3,1
412f963a:	b185      	lw	s1,412f984c <ber_test_loop_deal+0x338>
412f963c:	6e01      	li	a2,1
412f963e:	99a0      	lw	a1,0(s1)
412f9640:	f060 c517 	sb	s0,119(a1)
412f9644:	9940      	lw	v0,0(s1)
412f9646:	f0a0 c5c1 	sb	a2,161(a1)
412f964a:	f060 c216 	sb	s0,118(v0)
412f964e:	1770      	b	412f9530 <ber_test_loop_deal+0x1c>
412f9650:	7002      	cmpi	s0,2
412f9652:	6063      	bteqz	412f971a <ber_test_loop_deal+0x206>
412f9654:	7004      	cmpi	s0,4
412f9656:	6074      	bteqz	412f9740 <ber_test_loop_deal+0x22c>
412f9658:	7006      	cmpi	s0,6
                }
                else if(g_ber_control->cmd_state == BER_CMD_STATE_WRITE_CLEAR_REPORT)
412f965a:	f77f 6109 	btnez	412f9530 <ber_test_loop_deal+0x1c>
412f965e:	6c00      	li	a0,0
                {
                    //work 3s delay 3s
                    if((sys_get_ab_timer() - clear_time) < 2000)
412f9660:	b07a      	lw	s0,412f9848 <ber_test_loop_deal+0x334>
412f9662:	67a4      	move	a1,a0
412f9664:	67c4      	move	a2,a0
412f9666:	e840      	jalr	s0
412f9668:	6f1c      	li	a3,28
412f966a:	9607      	lw	a2,28(sp)
412f966c:	e2d7      	subu	a1,v0,a2
412f966e:	f7c0 5d10 	sltiu	a1,2000
412f9672:	6070      	bteqz	412f9754 <ber_test_loop_deal+0x240>
412f9674:	6d00      	li	a1,0
                    {
                        sys_mdelay(RECV_PKT_REPORT_INTERVAL);
412f9676:	6c32      	li	a0,50
412f9678:	67c5      	move	a2,a1
412f967a:	e840      	jalr	s0
412f967c:	6f1d      	li	a3,29
412f967e:	9960      	lw	v1,0(s1)
                        g_ber_control->cmd_state = BER_CMD_STATE_WRITE_PACKET_NUM;            
412f9680:	6900      	li	s1,0
412f9682:	f0a0 c323 	sb	s1,163(v1)
412f9686:	1962 e469 	jal	412f91a4 <update_hci_cmd_time>
                    }
                    else
                    {                              
                        ret_val = ber_clear_report(); 
                        clear_time = 0;

                        if(ret_val == FALSE)
                        {
                            break;
                        }
                    } 

                    update_hci_cmd_time();
412f968a:	6500      	nop
412f968c:	1751      	b	412f9530 <ber_test_loop_deal+0x1c>
412f968e:	2a34      	bnez	v0,412f96f8 <ber_test_loop_deal+0x1e4>
412f9690:	f0a0 a5c2 	lbu	a2,162(a1)
412f9694:	2e78      	bnez	a2,412f9786 <ber_test_loop_deal+0x272>
412f9696:	9504      	lw	a1,16(sp)
412f9698:	0c47      	la	a0,412f97b4 <ber_test_loop_deal+0x2a0>
412f969a:	b36e      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f969c:	eb40      	jalr	v1
412f969e:	67d0      	move	a2,s0
412f96a0:	99c0      	lw	a2,0(s1)
412f96a2:	b36d      	lw	v1,412f9854 <ber_test_loop_deal+0x340>
412f96a4:	f080 c60c 	sb	s0,140(a2)
412f96a8:	9980      	lw	a0,0(s1)
412f96aa:	67b0      	move	a1,s0
412f96ac:	f080 cc08 	sh	s0,136(a0)
412f96b0:	4c7f      	addiu	a0,127
412f96b2:	4c0e      	addiu	a0,14
412f96b4:	6e0a      	li	a2,10
412f96b6:	eb40      	jalr	v1
412f96b8:	6f01      	li	a3,1
412f96ba:	9980      	lw	a0,0(s1)
412f96bc:	b366      	lw	v1,412f9854 <ber_test_loop_deal+0x340>
412f96be:	4c7f      	addiu	a0,127
412f96c0:	4c18      	addiu	a0,24
412f96c2:	67b0      	move	a1,s0
412f96c4:	6e0a      	li	a2,10
412f96c6:	eb40      	jalr	v1
412f96c8:	6f01      	li	a3,1
412f96ca:	9980      	lw	a0,0(s1)
412f96cc:	6d01      	li	a1,1
412f96ce:	f060 c417 	sb	s0,119(a0)
412f96d2:	9940      	lw	v0,0(s1)
412f96d4:	f0a0 c4a1 	sb	a1,161(a0)
412f96d8:	f060 c216 	sb	s0,118(v0)
412f96dc:	1729      	b	412f9530 <ber_test_loop_deal+0x1c>
412f96de:	b05c      	lw	s0,412f984c <ber_test_loop_deal+0x338>
412f96e0:	9505      	lw	a1,20(sp)
412f96e2:	9880      	lw	a0,0(s0)
412f96e4:	f0a0 a402 	lbu	s0,162(a0)
412f96e8:	208d      	beqz	s0,412f9604 <ber_test_loop_deal+0xf0>
412f96ea:	0c38      	la	a0,412f97c8 <ber_test_loop_deal+0x2b4>
412f96ec:	b359      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f96ee:	eb40      	jalr	v1
412f96f0:	6800      	li	s0,0
412f96f2:	6750      	move	v0,s0
                }
                else 
                {
                    //if(g_ber_control->tick_cnt == 50 && g_ber_control->rev_pkt_flag == TRUE)  
                    //{
                    //    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_PACKET_NUM; 
                    //    g_ber_control->tick_cnt = 0;
                    //    g_ber_control->rev_valid_pkt_flag = FALSE;
                    //}                
                }
            }
        }
    } 

    /** 删除RX监控定时器
    */
    //if(g_ber_control->get_pktinfo_timer != -1)
    //{
    //    sys_del_irq_timer1(g_ber_control->get_pktinfo_timer);
    //    g_ber_control->get_pktinfo_timer = -1;
    //}

    return ret_val;
}
412f96f4:	6477      	restore	56,ra,s0-s1
412f96f6:	e8a0      	jrc	ra
412f96f8:	940e      	lw	a0,56(sp)
412f96fa:	9304      	lw	v1,16(sp)
412f96fc:	8403      	lb	s0,3(a0)
412f96fe:	eb03      	sltu	v1,s0
412f9700:	6103      	btnez	412f9708 <ber_test_loop_deal+0x1f4>
412f9702:	84e4      	lb	a3,4(a0)
412f9704:	ef63      	sltu	a3,v1
412f9706:	6049      	bteqz	412f979a <ber_test_loop_deal+0x286>
412f9708:	f0a0 a502 	lbu	s0,162(a1)
412f970c:	2839      	bnez	s0,412f9780 <ber_test_loop_deal+0x26c>
412f970e:	9205      	lw	v0,20(sp)
412f9710:	5a29      	sltiu	v0,41
412f9712:	6036      	bteqz	412f9780 <ber_test_loop_deal+0x26c>
412f9714:	0c28      	la	a0,412f97b4 <ber_test_loop_deal+0x2a0>
412f9716:	67a3      	move	a1,v1
412f9718:	17c0      	b	412f969a <ber_test_loop_deal+0x186>
412f971a:	b451      	lw	a0,412f985c <ber_test_loop_deal+0x348>
412f971c:	1962 e471 	jal	412f91c4 <send_bt_data>
412f9720:	6d05      	li	a1,5
412f9722:	b74b      	lw	a3,412f984c <ber_test_loop_deal+0x338>
412f9724:	6a03      	li	v0,3
412f9726:	9f60      	lw	v1,0(a3)
412f9728:	f0a0 c343 	sb	v0,163(v1)
412f972c:	173c      	b	412f95a6 <ber_test_loop_deal+0x92>
412f972e:	b247      	lw	v0,412f9848 <ber_test_loop_deal+0x334>
412f9730:	67a4      	move	a1,a0
412f9732:	67c4      	move	a2,a0
412f9734:	ea40      	jalr	v0
412f9736:	6f1c      	li	a3,28
412f9738:	b145      	lw	s1,412f984c <ber_test_loop_deal+0x338>
412f973a:	d207      	sw	v0,28(sp)
412f973c:	9940      	lw	v0,0(s1)
412f973e:	1728      	b	412f9590 <ber_test_loop_deal+0x7c>
412f9740:	b448      	lw	a0,412f9860 <ber_test_loop_deal+0x34c>
412f9742:	1962 e471 	jal	412f91c4 <send_bt_data>
412f9746:	6d05      	li	a1,5
412f9748:	b441      	lw	a0,412f984c <ber_test_loop_deal+0x338>
412f974a:	6a05      	li	v0,5
412f974c:	9c60      	lw	v1,0(a0)
412f974e:	f0a0 c343 	sb	v0,163(v1)
412f9752:	1729      	b	412f95a6 <ber_test_loop_deal+0x92>
412f9754:	1962 e52a 	jal	412f94a8 <ber_clear_report>
412f9758:	6500      	nop
412f975a:	6702      	move	s0,v0
412f975c:	6a00      	li	v0,0
412f975e:	d207      	sw	v0,28(sp)
412f9760:	20c8      	beqz	s0,412f96f2 <ber_test_loop_deal+0x1de>
412f9762:	1962 e469 	jal	412f91a4 <update_hci_cmd_time>
412f9766:	6500      	nop
412f9768:	16e3      	b	412f9530 <ber_test_loop_deal+0x1c>
412f976a:	b33a      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f976c:	0c1c      	la	a0,412f97dc <ber_test_loop_deal+0x2c8>
412f976e:	eb40      	jalr	v1
412f9770:	6800      	li	s0,0
412f9772:	17bf      	b	412f96f2 <ber_test_loop_deal+0x1de>
412f9774:	b337      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f9776:	0c1f      	la	a0,412f97f0 <ber_test_loop_deal+0x2dc>
412f9778:	ebc0      	jalrc	v1
412f977a:	6750      	move	v0,s0
412f977c:	6477      	restore	56,ra,s0-s1
412f977e:	e8a0      	jrc	ra
412f9780:	0c22      	la	a0,412f9804 <ber_test_loop_deal+0x2f0>
412f9782:	67a3      	move	a1,v1
412f9784:	17b3      	b	412f96ec <ber_test_loop_deal+0x1d8>
412f9786:	b333      	lw	v1,412f9850 <ber_test_loop_deal+0x33c>
412f9788:	0c20      	la	a0,412f9808 <ber_test_loop_deal+0x2f4>
412f978a:	eb40      	jalr	v1
412f978c:	9504      	lw	a1,16(sp)
412f978e:	17b1      	b	412f96f2 <ber_test_loop_deal+0x1de>
412f9790:	0c23      	la	a0,412f981c <ber_test_loop_deal+0x308>
412f9792:	b030      	lw	s0,412f9850 <ber_test_loop_deal+0x33c>
412f9794:	e8c0      	jalrc	s0
412f9796:	6801      	li	s0,1
412f9798:	17ac      	b	412f96f2 <ber_test_loop_deal+0x1de>
412f979a:	0c27      	la	a0,412f9834 <ber_test_loop_deal+0x320>
412f979c:	67a3      	move	a1,v1
412f979e:	17f9      	b	412f9792 <ber_test_loop_deal+0x27e>
412f97a0:	5352      	slti	v1,82
412f97a2:	4953      	addiu	s1,83
412f97a4:	765f      	cmpi	a2,95
412f97a6:	6c61      	li	a0,97
412f97a8:	253a      	beqz	a1,412f981e <ber_test_loop_deal+0x30a>
412f97aa:	2064      	beqz	s0,412f9874 <clear_report_cmd1>
412f97ac:	6e63      	li	a2,99
412f97ae:	3a74      	ld	v1,160(v0)
412f97b0:	2520      	beqz	a1,412f97f2 <ber_test_loop_deal+0x2de>
412f97b2:	0064      	addiu	s0,sp,400
412f97b4:	6562      	move	v1,v0
412f97b6:	5f72      	sltiu	a3,114
412f97b8:	6176      	btnez	412f98a6 <pkt_num_cmd+0x2>
412f97ba:	3a6c      	ld	v1,96(v0)
412f97bc:	6425      	restore	40,s0
412f97be:	6320      	addiu	sp,256
412f97c0:	746e      	cmpi	a0,110
412f97c2:	203a      	beqz	s0,412f9838 <ber_test_loop_deal+0x324>
412f97c4:	6425      	restore	40,s0
412f97c6:	0000      	addiu	s0,sp,0
412f97c8:	5352      	slti	v1,82
412f97ca:	4953      	addiu	s1,83
412f97cc:	745f      	cmpi	a0,95
412f97ce:	7365      	cmpi	v1,101
412f97d0:	2074      	beqz	s0,412f98ba <pkt_num_cmd+0x16>
412f97d2:	6166      	btnez	412f98a0 <error_bit_cmd+0x4>
412f97d4:	6c69      	li	a0,105
412f97d6:	253a      	beqz	a1,412f984c <ber_test_loop_deal+0x338>
412f97d8:	0064      	addiu	s0,sp,400
412f97da:	0000      	addiu	s0,sp,0
412f97dc:	6368      	addiu	sp,832
412f97de:	2069      	beqz	s0,412f98b2 <pkt_num_cmd+0xe>
412f97e0:	7665      	cmpi	a2,101
412f97e2:	6e65      	li	a2,101
412f97e4:	2074      	beqz	s0,412f98ce <pkt_num_cmd+0x2a>
412f97e6:	6974      	li	s1,116
412f97e8:	656d      	move	t3,a1
412f97ea:	756f      	cmpi	a1,111
412f97ec:	0074      	addiu	s0,sp,464
412f97ee:	0000      	addiu	s0,sp,0
412f97f0:	6f6e      	li	a3,110
412f97f2:	6520      	move	at,s0
412f97f4:	6576      	move	s3,a2
412f97f6:	746e      	cmpi	a0,110
412f97f8:	7420      	cmpi	a0,32
412f97fa:	7365      	cmpi	v1,101
412f97fc:	2074      	beqz	s0,412f98e6 <pkt_num_cmd+0x42>
412f97fe:	6974      	li	s1,116
412f9800:	656d      	move	t3,a1
412f9802:	756f      	cmpi	a1,111
412f9804:	0074      	addiu	s0,sp,464
412f9806:	0000      	addiu	s0,sp,0
412f9808:	6562      	move	v1,v0
412f980a:	5f72      	sltiu	a3,114
412f980c:	6574      	move	s3,a0
412f980e:	7473      	cmpi	a0,115
412f9810:	6620      	0x6620
412f9812:	6961      	li	s1,97
412f9814:	3a6c      	ld	v1,96(v0)
412f9816:	6425      	restore	40,s0
412f9818:	0000      	addiu	s0,sp,0
412f981a:	0000      	addiu	s0,sp,0
412f981c:	5352      	slti	v1,82
412f981e:	4953      	addiu	s1,83
412f9820:	745f      	cmpi	a0,95
412f9822:	7365      	cmpi	v1,101
412f9824:	2074      	beqz	s0,412f990e <pkt_num_cmd+0x6a>
412f9826:	7573      	cmpi	a1,115
412f9828:	6363      	addiu	sp,792
412f982a:	7365      	cmpi	v1,101
412f982c:	3a73      	ld	v1,152(v0)
412f982e:	6425      	restore	40,s0
412f9830:	0000      	addiu	s0,sp,0
412f9832:	0000      	addiu	s0,sp,0
412f9834:	6562      	move	v1,v0
412f9836:	5f72      	sltiu	a3,114
412f9838:	6574      	move	s3,a0
412f983a:	7473      	cmpi	a0,115
412f983c:	7320      	cmpi	v1,32
412f983e:	6375      	addiu	sp,936
412f9840:	6563      	move	v1,v1
412f9842:	7373      	cmpi	v1,115
412f9844:	253a      	beqz	a1,412f98ba <pkt_num_cmd+0x16>
412f9846:	0064      	addiu	s0,sp,400
412f9848:	88dd      	lh	a2,58(s0)
412f984a:	bfc3      	lwu	a2,12(a3)
412f984c:	8fcc      	lh	a2,24(a3)
412f984e:	bfc3      	lwu	a2,12(a3)
412f9850:	9b59      	lw	v0,100(v1)
412f9852:	41cf      	addiu	a2,s1,-1
412f9854:	88d5      	lh	a2,42(s0)
412f9856:	bfc3      	lwu	a2,12(a3)
412f9858:	98a4      	lw	a1,16(s0)
412f985a:	412f      	addiu	s1,s1,-1
412f985c:	989c      	lw	a0,112(s0)
412f985e:	412f      	addiu	s1,s1,-1
412f9860:	9894      	lw	a0,80(s0)
412f9862:	412f      	addiu	s1,s1,-1

412f9864 <clear_report_cmd3>:
412f9864:	4a01 04fd 8697 000f                         .J......

412f986c <clear_report_cmd2>:
412f986c:	4901 01fd 0097 0000                         .I......

412f9874 <clear_report_cmd1>:
412f9874:	4a01 04fd 8697 0009                         .J......

412f987c <clear_report_cmd0>:
412f987c:	4901 01fd 0097 0000                         .I......

412f9884 <clear_report1_cmd1>:
412f9884:	4a01 04fd f897 000f                         .J......

412f988c <clear_report1_cmd0>:
412f988c:	4a01 04fd f897 0001                         .J......

412f9894 <grssi_cmd>:
412f9894:	4901 01fd 00b8 0000                         .I......

412f989c <error_bit_cmd>:
412f989c:	4901 01fd 00bc 0000                         .I......

412f98a4 <pkt_num_cmd>:
412f98a4:	4901 01fd 00b9 0000 0000 0000 0000 0000     .I..............
	...
Disassembly of section BANK_CONTROL_1_12:

41339000 <get_adc_data>:
41339000:	64f6      	save	48,ra,s0-s1
/*
 * 根据不同转接板 ADC 不同电阻不同分压来获取不同设备号.
 */
uint32 get_adc_data(uint32 adc_num)
{
41339002:	b043      	lw	s0,4133910c <get_adc_data+0x10c>
    uint32  adc_data;
    uint32 pmuadc_ctl_bak;
    uint32 gpiob0_ctl_bak;
    uint32 ad_select1_bak;

    pmuadc_ctl_bak = act_readl(PMUADC_CTL);
41339004:	b144      	lw	s1,41339114 <get_adc_data+0x114>
    gpiob0_ctl_bak = act_readl(GPIOB0_CTL);
    ad_select1_bak = act_readl(AD_Select1);
41339006:	98a0      	lw	a1,0(s0)
41339008:	7401      	cmpi	a0,1

    //select PMUADC_CTL_LRADC_FS 250khz
    act_writel((act_readl(PMUADC_CTL) | (1 << PMUADC_CTL_BATADC_FS)), PMUADC_CTL); 

    if(adc_num == 1)
4133900a:	d504      	sw	a1,16(sp)
4133900c:	b541      	lw	a1,41339110 <get_adc_data+0x110>
4133900e:	9dc0      	lw	a2,0(a1)
41339010:	9960      	lw	v1,0(s1)
41339012:	9840      	lw	v0,0(s0)
41339014:	d306      	sw	v1,24(sp)
41339016:	6b80      	li	v1,128
41339018:	ea6d      	or	v0,v1
4133901a:	d605      	sw	a2,20(sp)
4133901c:	d840      	sw	v0,0(s0)
4133901e:	613d      	btnez	4133909a <get_adc_data+0x9a>
41339020:	98e0      	lw	a3,0(s0)
    {    
        //enable LRADC1
        act_writel((act_readl(PMUADC_CTL) | (1 << PMUADC_CTL_LRADC1_EN)), PMUADC_CTL);
41339022:	4b90      	addiu	v1,-112
41339024:	ef6d      	or	a3,v1
41339026:	d8e0      	sw	a3,0(s0)
41339028:	9d00      	lw	s0,0(a1)
        
        //mfp switch
        act_writel((act_readl(GPIOB0_CTL) & (~GPIOB0_CTL_GPIOB0_MFP_MASK)), GPIOB0_CTL);
4133902a:	f600 6b01 	li	v1,1537
4133902e:	ea6b      	neg	v0,v1
41339030:	b43a      	lw	a0,41339118 <get_adc_data+0x118>

         //rtc register
         act_writel(0xA596, RTC_REGUPDATA);
41339032:	e84c      	and	s0,v0
41339034:	f594 6f16 	li	a3,42390
41339038:	dd00      	sw	s0,0(a1)
4133903a:	dce0      	sw	a3,0(a0)
4133903c:	9c00      	lw	s0,0(a0)
         while (act_readl(RTC_REGUPDATA) != 0x5A69)
4133903e:	f26b 7009 	cmpi	s0,23145
41339042:	61fc      	btnez	4133903c <get_adc_data+0x3c>
41339044:	9d40      	lw	v0,0(a1)
         {
             ;//wait for register update
         }       

         //b0 as lradc1
        act_writel((act_readl(GPIOB0_CTL) | (1<<GPIOB0_CTL_GPIOB0_MFP_SHIFT)), GPIOB0_CTL); 
41339046:	f200 6b00 	li	v1,512
4133904a:	ea6d      	or	v0,v1
4133904c:	dd40      	sw	v0,0(a1)
4133904e:	f594 6d16 	li	a1,42390

        //rtc register
        act_writel(0xA596, RTC_REGUPDATA);
41339052:	dca0      	sw	a1,0(a0)
41339054:	6704      	move	s0,a0
41339056:	9cc0      	lw	a2,0(a0)
        while (act_readl(RTC_REGUPDATA) != 0x5A69)
41339058:	f26b 7609 	cmpi	a2,23145
4133905c:	61fc      	btnez	41339056 <get_adc_data+0x56>
4133905e:	6d00      	li	a1,0
        {
            ;//wait for register update
        }   

        sys_mdelay(50);
41339060:	b22f      	lw	v0,4133911c <get_adc_data+0x11c>
41339062:	67c5      	move	a2,a1
41339064:	6c32      	li	a0,50
41339066:	ea40      	jalr	v0
41339068:	6f1d      	li	a3,29
4133906a:	b62e      	lw	a2,41339120 <get_adc_data+0x120>

        /* 获取 ADC 分压值 */
        adc_data = act_readl(LRADC1_DATA) & 0x7F;  
4133906c:	b728      	lw	a3,4133910c <get_adc_data+0x10c>

        act_writel(pmuadc_ctl_bak, PMUADC_CTL);
4133906e:	9e80      	lw	a0,0(a2)
41339070:	9504      	lw	a1,16(sp)
41339072:	6a7f      	li	v0,127
41339074:	9305      	lw	v1,20(sp)

        act_writel(gpiob0_ctl_bak, GPIOB0_CTL);
41339076:	b627      	lw	a2,41339110 <get_adc_data+0x110>
41339078:	dfa0      	sw	a1,0(a3)
4133907a:	ec4c      	and	a0,v0
4133907c:	b526      	lw	a1,41339114 <get_adc_data+0x114>

        act_writel(ad_select1_bak, AD_Select1);
4133907e:	9206      	lw	v0,24(sp)
41339080:	de60      	sw	v1,0(a2)
41339082:	f594 6f16 	li	a3,42390
        
        //rtc register
        act_writel(0xA596, RTC_REGUPDATA);
41339086:	b325      	lw	v1,41339118 <get_adc_data+0x118>
41339088:	dd40      	sw	v0,0(a1)
4133908a:	d8e0      	sw	a3,0(s0)
4133908c:	9be0      	lw	a3,0(v1)
        while (act_readl(RTC_REGUPDATA) != 0x5A69)
4133908e:	f26b 7709 	cmpi	a3,23145
41339092:	61fc      	btnez	4133908c <get_adc_data+0x8c>
41339094:	6744      	move	v0,a0
        {
            ;//wait for register update
        }          
    }
    else if(adc_num == 2)
    {
        act_writel(act_readl(PMUADC_CTL) | (1 << 5), PMUADC_CTL); // LRADC234_EN  

        act_writel((act_readl(AD_Select1) & (~AD_Select1_GPIOA22_MASK)), AD_Select1);
        
        act_writel((act_readl(AD_Select1) | (0x01 << AD_Select1_GPIOA22_SHIFT)), AD_Select1);

        sys_mdelay(50);

        /* 获取 ADC 分压值 */
        adc_data = act_readl(LRADC2_DATA) & 0x7F;   

        act_writel(pmuadc_ctl_bak, PMUADC_CTL);

        act_writel(gpiob0_ctl_bak, GPIOB0_CTL);

        act_writel(ad_select1_bak, AD_Select1);        
    }
    else if(adc_num == 4)
    {  
        act_writel(act_readl(PMUADC_CTL) | (1 << 5), PMUADC_CTL); // LRADC234_EN
           
        act_writel((act_readl(AD_Select1) & (~(1 << AD_Select1_GPIOA2))), AD_Select1);
        
        act_writel((act_readl(AD_Select1) | (0x01 << AD_Select1_GPIOA2)), AD_Select1); 

        sys_mdelay(50);

        /* 获取 ADC 分压值 */
        adc_data = act_readl(LRADC4_DATA) & 0x7F;   

        act_writel(pmuadc_ctl_bak, PMUADC_CTL);

        act_writel(gpiob0_ctl_bak, GPIOB0_CTL);

        act_writel(ad_select1_bak, AD_Select1);       
    }
    else
    {
        return 0;
    }

    //libc_print("adc data", adc_data, 2);   

    return adc_data;
41339096:	6476      	restore	48,ra,s0-s1
}
41339098:	e8a0      	jrc	ra
4133909a:	7402      	cmpi	a0,2
4133909c:	6017      	bteqz	413390cc <get_adc_data+0xcc>
4133909e:	7404      	cmpi	a0,4
413390a0:	6a00      	li	v0,0
413390a2:	61f9      	btnez	41339096 <get_adc_data+0x96>
413390a4:	98c0      	lw	a2,0(s0)
413390a6:	6b20      	li	v1,32
413390a8:	ee6d      	or	a2,v1
413390aa:	d8c0      	sw	a2,0(s0)
413390ac:	99a0      	lw	a1,0(s1)
413390ae:	4bde      	addiu	v1,-34
413390b0:	ed6c      	and	a1,v1
413390b2:	d9a0      	sw	a1,0(s1)
413390b4:	99e0      	lw	a3,0(s1)
413390b6:	4383      	addiu	a0,v1,3
413390b8:	ef8d      	or	a3,a0
413390ba:	6d00      	li	a1,0
413390bc:	b218      	lw	v0,4133911c <get_adc_data+0x11c>
413390be:	d9e0      	sw	a3,0(s1)
413390c0:	6c32      	li	a0,50
413390c2:	67c5      	move	a2,a1
413390c4:	ea40      	jalr	v0
413390c6:	6f1d      	li	a3,29
413390c8:	b218      	lw	v0,41339128 <get_adc_data+0x128>
413390ca:	1013      	b	413390f2 <get_adc_data+0xf2>
413390cc:	98c0      	lw	a2,0(s0)
413390ce:	6b20      	li	v1,32
413390d0:	ee6d      	or	a2,v1
413390d2:	d8c0      	sw	a2,0(s0)
413390d4:	99a0      	lw	a1,0(s1)
413390d6:	4bd9      	addiu	v1,-39
413390d8:	ed6c      	and	a1,v1
413390da:	d9a0      	sw	a1,0(s1)
413390dc:	9980      	lw	a0,0(s1)
413390de:	4b09      	addiu	v1,9
413390e0:	ec6d      	or	a0,v1
413390e2:	6d00      	li	a1,0
413390e4:	b20e      	lw	v0,4133911c <get_adc_data+0x11c>
413390e6:	d980      	sw	a0,0(s1)
413390e8:	67c5      	move	a2,a1
413390ea:	6c32      	li	a0,50
413390ec:	ea40      	jalr	v0
413390ee:	6f1d      	li	a3,29
413390f0:	b20d      	lw	v0,41339124 <get_adc_data+0x124>
413390f2:	9a80      	lw	a0,0(v0)
413390f4:	6e7f      	li	a2,127
413390f6:	9206      	lw	v0,24(sp)
413390f8:	9504      	lw	a1,16(sp)
413390fa:	9305      	lw	v1,20(sp)
413390fc:	b705      	lw	a3,41339110 <get_adc_data+0x110>
413390fe:	eccc      	and	a0,a2
41339100:	d8a0      	sw	a1,0(s0)
41339102:	df60      	sw	v1,0(a3)
41339104:	d940      	sw	v0,0(s1)
41339106:	6744      	move	v0,a0
41339108:	17c6      	b	41339096 <get_adc_data+0x96>
4133910a:	0000      	addiu	s0,sp,0
4133910c:	0014      	addiu	s0,sp,80
4133910e:	c002      	sb	s0,2(s0)
41339110:	003c      	addiu	s0,sp,240
41339112:	c009      	sb	s0,9(s0)
41339114:	00a4      	addiu	s0,sp,656
41339116:	c009      	sb	s0,9(s0)
41339118:	0004      	addiu	s0,sp,16
4133911a:	c012      	sb	s0,18(s0)
4133911c:	88dd      	lh	a2,58(s0)
4133911e:	bfc3      	lwu	a2,12(a3)
41339120:	0028      	addiu	s0,sp,160
41339122:	c002      	sb	s0,2(s0)
41339124:	002c      	addiu	s0,sp,176
41339126:	c002      	sb	s0,2(s0)
41339128:	0034      	addiu	s0,sp,208
4133912a:	c002      	sb	s0,2(s0)

4133912c <act_test_report_lradc_result>:
4133912c:	64c3      	save	24,ra


void act_test_report_lradc_result(uint16 test_id, int32 ret_val)
{
4133912e:	6765      	move	v1,a1
41339130:	67a4      	move	a1,a0
41339132:	b409      	lw	a0,41339154 <.LBE2+0x4>
    return_result_t *return_data;
    uint16 trans_bytes = 0;

    if (g_test_mode != TEST_MODE_CARD)
41339134:	ed31      	zeh	a1
41339136:	a440      	lbu	v0,0(a0)
41339138:	2208      	beqz	v0,4133914a <.LBB2>
4133913a:	b408      	lw	a0,41339158 <.LBE2+0x8>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
4133913c:	b208      	lw	v0,4133915c <.LBE2+0xc>

        return_data->test_id = test_id;

        return_data->test_result = ret_val;

        act_test_report_result(return_data, 4);
4133913e:	cca3      	sh	a1,6(a0)
41339140:	c468      	sb	v1,8(a0)
41339142:	ea40      	jalr	v0
41339144:	6d04      	li	a1,4
41339146:	6443      	restore	24,ra
    }
    else
    {
        act_test_report_test_log(ret_val, test_id);
    }
}
41339148:	e8a0      	jrc	ra

4133914a <.LBB2>:
4133914a:	1802 e437 	jal	410390dc <act_test_report_test_log>
4133914e:	6783      	move	a0,v1

41339150 <.LBE2>:
41339150:	6443      	restore	24,ra
41339152:	e8a0      	jrc	ra
41339154:	8dc9      	lh	a2,18(a1)
41339156:	bfc3      	lwu	a2,12(a3)
41339158:	a100      	lbu	s0,0(s1)
4133915a:	9fc3      	lw	a2,12(a3)
4133915c:	9b41      	lw	v0,4(v1)
4133915e:	41cb      	addiu	a2,s1,-5

41339160 <act_test_lradc_test>:
41339160:	f004 64f4 	save	a0,32,ra,s0-s1

test_result_e act_test_lradc_test(void *arg_buffer)
{
41339164:	a440      	lbu	v0,0(a0)
    int32 result;
    uint32 adc_data;
    
    lradc_test_arg_t *lradc_arg = (lradc_test_arg_t *)arg_buffer;

    result = TRUE;
    
    if(lradc_arg->lradc1_test == TRUE)
41339166:	6901      	li	s1,1
41339168:	ea2a      	cmp	v0,s1
4133916a:	600f      	bteqz	4133918a <.L29+0xe>
4133916c:	9308      	lw	v1,32(sp)
    {
        adc_data =  get_adc_data(1);

        if(g_test_mode == TEST_MODE_CARD)
        {
            att_write_test_info("lradc1 data: ", adc_data, 1);
        }
        else
        {
            print_log("lradc1 data: %d", adc_data);
        }
        
        if(adc_data >= lradc_arg->lradc1_thr_low 
            && adc_data <= lradc_arg->lradc1_thr_high)
        {
            result = TRUE;
        }
        else
        {
            result = FALSE;
            goto test_end;
        }
    }

    if(lradc_arg->lradc2_test == TRUE)
4133916e:	a3e3      	lbu	a3,3(v1)
41339170:	7701      	cmpi	a3,1
41339172:	6026      	bteqz	413391c0 <.L29+0x44>
41339174:	9308      	lw	v1,32(sp)
    {
        adc_data =  get_adc_data(2);

        if(g_test_mode == TEST_MODE_CARD)
        {
            att_write_test_info("lradc2 data: ", adc_data, 1);
        }
        else
        {
            print_log("lradc2 data: %d", adc_data);
        }


        if(adc_data >= lradc_arg->lradc2_thr_low 
            && adc_data <= lradc_arg->lradc2_thr_high)
        {
            result = TRUE;
        }
        else
        {
            result = FALSE;
            goto test_end;
        }
    }

    if(lradc_arg->lradc4_test == TRUE)
41339176:	a3e6      	lbu	a3,6(v1)
41339178:	7701      	cmpi	a3,1
4133917a:	6037      	bteqz	413391ea <.L29+0x6e>

4133917c <.L29>:
4133917c:	6c1b      	li	a0,27
    {
        adc_data =  get_adc_data(4);

        if(g_test_mode == TEST_MODE_CARD)
        {
            att_write_test_info("lradc4 data: ", adc_data, 1);
        }
        else
        {
            print_log("lradc4 data: %d", adc_data);
        }


        if(adc_data >= lradc_arg->lradc4_thr_low 
            && adc_data <= lradc_arg->lradc4_thr_high)
        {
            result = TRUE;
        }
        else
        {
            result = FALSE;
            goto test_end;
        }
    }

test_end:    
    act_test_report_lradc_result(TESTID_LRADC_TEST, result);
4133917e:	1982 e44b 	jal	4133912c <act_test_report_lradc_result>
41339182:	67b1      	move	a1,s1
41339184:	6751      	move	v0,s1

    return result;
}
41339186:	6474      	restore	32,ra,s0-s1
41339188:	e8a0      	jrc	ra
4133918a:	1982 e400 	jal	41339000 <get_adc_data>
4133918e:	6791      	move	a0,s1
41339190:	b442      	lw	a0,41339298 <.L29+0x11c>
41339192:	6702      	move	s0,v0
41339194:	a460      	lbu	v1,0(a0)
41339196:	233f      	beqz	v1,41339216 <.L29+0x9a>
41339198:	67a2      	move	a1,v0
4133919a:	b242      	lw	v0,413392a0 <.L29+0x124>
4133919c:	0c27      	la	a0,41339238 <.L29+0xbc>
4133919e:	eac0      	jalrc	v0
413391a0:	9308      	lw	v1,32(sp)
413391a2:	a3a1      	lbu	a1,1(v1)
413391a4:	e8a3      	sltu	s0,a1
413391a6:	6104      	btnez	413391b0 <.L29+0x34>
413391a8:	a3c2      	lbu	a2,2(v1)
413391aa:	6901      	li	s1,1
413391ac:	ee03      	sltu	a2,s0
413391ae:	60de      	bteqz	4133916c <act_test_lradc_test+0xc>
413391b0:	6900      	li	s1,0
413391b2:	6c1b      	li	a0,27
413391b4:	1982 e44b 	jal	4133912c <act_test_report_lradc_result>
413391b8:	67b1      	move	a1,s1
413391ba:	6751      	move	v0,s1
413391bc:	6474      	restore	32,ra,s0-s1
413391be:	e8a0      	jrc	ra
413391c0:	1982 e400 	jal	41339000 <get_adc_data>
413391c4:	6c02      	li	a0,2
413391c6:	b135      	lw	s1,41339298 <.L29+0x11c>
413391c8:	6702      	move	s0,v0
413391ca:	a180      	lbu	a0,0(s1)
413391cc:	242a      	beqz	a0,41339222 <.L29+0xa6>
413391ce:	b135      	lw	s1,413392a0 <.L29+0x124>
413391d0:	0c1e      	la	a0,41339248 <.L29+0xcc>
413391d2:	e940      	jalr	s1
413391d4:	67a2      	move	a1,v0
413391d6:	9308      	lw	v1,32(sp)
413391d8:	a3a4      	lbu	a1,4(v1)
413391da:	e8a3      	sltu	s0,a1
413391dc:	61e9      	btnez	413391b0 <.L29+0x34>
413391de:	a3c5      	lbu	a2,5(v1)
413391e0:	6901      	li	s1,1
413391e2:	ee03      	sltu	a2,s0
413391e4:	60c7      	bteqz	41339174 <act_test_lradc_test+0x14>
413391e6:	6900      	li	s1,0
413391e8:	17e4      	b	413391b2 <.L29+0x36>
413391ea:	1982 e400 	jal	41339000 <get_adc_data>
413391ee:	6c04      	li	a0,4
413391f0:	6702      	move	s0,v0
413391f2:	b22a      	lw	v0,41339298 <.L29+0x11c>
413391f4:	a280      	lbu	a0,0(v0)
413391f6:	2c1b      	bnez	a0,4133922e <.L29+0xb2>
413391f8:	b129      	lw	s1,4133929c <.L29+0x120>
413391fa:	0c18      	la	a0,41339258 <.L29+0xdc>
413391fc:	67b0      	move	a1,s0
413391fe:	e940      	jalr	s1
41339200:	6e01      	li	a2,1
41339202:	9308      	lw	v1,32(sp)
41339204:	a3a7      	lbu	a1,7(v1)
41339206:	e8a3      	sltu	s0,a1
41339208:	61d3      	btnez	413391b0 <.L29+0x34>
4133920a:	a3c8      	lbu	a2,8(v1)
4133920c:	6901      	li	s1,1
4133920e:	ee03      	sltu	a2,s0
41339210:	60b5      	bteqz	4133917c <.L29>
41339212:	6900      	li	s1,0
41339214:	17ce      	b	413391b2 <.L29+0x36>
41339216:	67d1      	move	a2,s1
41339218:	b121      	lw	s1,4133929c <.L29+0x120>
4133921a:	0c14      	la	a0,41339268 <.L29+0xec>
4133921c:	e940      	jalr	s1
4133921e:	67a2      	move	a1,v0
41339220:	17bf      	b	413391a0 <.L29+0x24>
41339222:	67a2      	move	a1,v0
41339224:	b21e      	lw	v0,4133929c <.L29+0x120>
41339226:	0c15      	la	a0,41339278 <.L29+0xfc>
41339228:	ea40      	jalr	v0
4133922a:	6e01      	li	a2,1
4133922c:	17d4      	b	413391d6 <.L29+0x5a>
4133922e:	b21d      	lw	v0,413392a0 <.L29+0x124>
41339230:	0c16      	la	a0,41339288 <.L29+0x10c>
41339232:	ea40      	jalr	v0
41339234:	67b0      	move	a1,s0
41339236:	17e5      	b	41339202 <.L29+0x86>
41339238:	726c      	cmpi	v0,108
4133923a:	6461      	restore	8,ra,s0
4133923c:	3163      	sra	s1,v1,8
4133923e:	6420      	restore	128,s0
41339240:	7461      	cmpi	a0,97
41339242:	3a61      	ld	v1,8(v0)
41339244:	2520      	beqz	a1,41339286 <.L29+0x10a>
41339246:	0064      	addiu	s0,sp,400
41339248:	726c      	cmpi	v0,108
4133924a:	6461      	restore	8,ra,s0
4133924c:	3263      	sra	v0,v1,8
4133924e:	6420      	restore	128,s0
41339250:	7461      	cmpi	a0,97
41339252:	3a61      	ld	v1,8(v0)
41339254:	2520      	beqz	a1,41339296 <.L29+0x11a>
41339256:	0064      	addiu	s0,sp,400
41339258:	726c      	cmpi	v0,108
4133925a:	6461      	restore	8,ra,s0
4133925c:	3463      	sra	a0,v1,8
4133925e:	6420      	restore	128,s0
41339260:	7461      	cmpi	a0,97
41339262:	3a61      	ld	v1,8(v0)
41339264:	0020      	addiu	s0,sp,128
41339266:	0000      	addiu	s0,sp,0
41339268:	726c      	cmpi	v0,108
4133926a:	6461      	restore	8,ra,s0
4133926c:	3163      	sra	s1,v1,8
4133926e:	6420      	restore	128,s0
41339270:	7461      	cmpi	a0,97
41339272:	3a61      	ld	v1,8(v0)
41339274:	0020      	addiu	s0,sp,128
41339276:	0000      	addiu	s0,sp,0
41339278:	726c      	cmpi	v0,108
4133927a:	6461      	restore	8,ra,s0
4133927c:	3263      	sra	v0,v1,8
4133927e:	6420      	restore	128,s0
41339280:	7461      	cmpi	a0,97
41339282:	3a61      	ld	v1,8(v0)
41339284:	0020      	addiu	s0,sp,128
41339286:	0000      	addiu	s0,sp,0
41339288:	726c      	cmpi	v0,108
4133928a:	6461      	restore	8,ra,s0
4133928c:	3463      	sra	a0,v1,8
4133928e:	6420      	restore	128,s0
41339290:	7461      	cmpi	a0,97
41339292:	3a61      	ld	v1,8(v0)
41339294:	2520      	beqz	a1,413392d6 <card_adfu_launcher+0x32>
41339296:	0064      	addiu	s0,sp,400
41339298:	8dc9      	lh	a2,18(a1)
4133929a:	bfc3      	lwu	a2,12(a3)
4133929c:	8b89      	lh	a0,18(v1)
4133929e:	bfc3      	lwu	a2,12(a3)
413392a0:	9b59      	lw	v0,100(v1)
413392a2:	41cf      	addiu	a2,s1,-1

413392a4 <card_adfu_launcher>:
413392a4:	64e3      	save	24,ra,s0
    return TRUE;
}

void card_adfu_launcher(void)
{
413392a6:	b01b      	lw	s0,41339310 <card_adfu_launcher+0x6c>
    uint32 i;
    
    p_func_entry p_card_adfu_launcher;  

    print_log("enter card launcher...");
413392a8:	0c14      	la	a0,413392f8 <card_adfu_launcher+0x54>
413392aa:	e8c0      	jalrc	s0
413392ac:	6c00      	li	a0,0
    
    p_card_adfu_launcher = *(uint32*)0xbfc002b0;

    sys_local_irq_save();   
413392ae:	b01b      	lw	s0,41339318 <card_adfu_launcher+0x74>
413392b0:	67a4      	move	a1,a0
413392b2:	67c4      	move	a2,a0
413392b4:	e840      	jalr	s0
413392b6:	6f2d      	li	a3,45
413392b8:	6c00      	li	a0,0
   
    sys_unlock_adjust_freq();
413392ba:	67c4      	move	a2,a0
413392bc:	6d05      	li	a1,5
413392be:	e840      	jalr	s0
413392c0:	6f36      	li	a3,54
413392c2:	6d00      	li	a1,0

    sys_adjust_clk(26, 0);
413392c4:	67c5      	move	a2,a1
413392c6:	6c1a      	li	a0,26
413392c8:	e840      	jalr	s0
413392ca:	6f3a      	li	a3,58
413392cc:	b614      	lw	a2,4133931c <card_adfu_launcher+0x78>

    act_writel(0, INTC_CFG0);
413392ce:	b515      	lw	a1,41339320 <card_adfu_launcher+0x7c>
    act_writel(0, INTC_CFG1);
413392d0:	b415      	lw	a0,41339324 <card_adfu_launcher+0x80>
    act_writel(0, INTC_CFG2); //assgin usb intrrupt to IP2
413392d2:	6b00      	li	v1,0
413392d4:	b215      	lw	v0,41339328 <card_adfu_launcher+0x84>

    act_writel(0x58, WD_CTL);
413392d6:	de60      	sw	v1,0(a2)
413392d8:	dd60      	sw	v1,0(a1)
413392da:	dc60      	sw	v1,0(a0)
413392dc:	4b58      	addiu	v1,88
413392de:	da60      	sw	v1,0(v0)
413392e0:	6aff      	li	v0,255
413392e2:	424f      	addiu	v0,v0,-1

    for(i = 0; i < 0x100; i++)
413392e4:	5200      	slti	v0,0
413392e6:	60fd      	bteqz	413392e2 <card_adfu_launcher+0x3e>
413392e8:	b411      	lw	a0,4133932c <card_adfu_launcher+0x88>
    {
        ;//nothing for QAC
    }

    p_card_adfu_launcher = *(uint32*)0xbfc002b4;
413392ea:	9c60      	lw	v1,0(a0)
413392ec:	ebc0      	jalrc	v1

    //完成数据的初始化
    p_card_adfu_launcher();
413392ee:	b70a      	lw	a3,41339314 <card_adfu_launcher+0x70>

    p_card_adfu_launcher = *(uint32*)0xbfc002b0;
413392f0:	9f40      	lw	v0,0(a3)
413392f2:	eac0      	jalrc	v0

    //跳转真正的函数入口 
    p_card_adfu_launcher();     
413392f4:	6463      	restore	24,ra,s0
413392f6:	e8a0      	jrc	ra
413392f8:	6e65      	li	a2,101
413392fa:	6574      	move	s3,a0
413392fc:	2072      	beqz	s0,413393e2 <act_test_enter_ft_mode+0x62>
413392fe:	6163      	btnez	413393c6 <act_test_enter_ft_mode+0x46>
41339300:	6472      	restore	16,ra,s0-s1
41339302:	6c20      	li	a0,32
41339304:	7561      	cmpi	a1,97
41339306:	636e      	addiu	sp,880
41339308:	6568      	move	t3,s0
4133930a:	2e72      	bnez	a2,413393f0 <act_test_enter_ft_mode+0x70>
4133930c:	2e2e      	bnez	a2,4133936a <.LBE2+0x8>
4133930e:	0000      	addiu	s0,sp,0
41339310:	9b59      	lw	v0,100(v1)
41339312:	41cf      	addiu	a2,s1,-1
41339314:	02b0      	addiu	v0,sp,704
41339316:	bfc0      	lwu	a2,0(a3)
41339318:	88dd      	lh	a2,58(s0)
4133931a:	bfc3      	lwu	a2,12(a3)
4133931c:	0008      	addiu	s0,sp,32
4133931e:	c00b      	sb	s0,11(s0)
41339320:	000c      	addiu	s0,sp,48
41339322:	c00b      	sb	s0,11(s0)
41339324:	0010      	addiu	s0,sp,64
41339326:	c00b      	sb	s0,11(s0)
41339328:	001c      	addiu	s0,sp,112
4133932a:	c012      	sb	s0,18(s0)
4133932c:	02b4      	addiu	v0,sp,720
4133932e:	bfc0      	lwu	a2,0(a3)

41339330 <act_test_flashtest>:
41339330:	64c3      	save	24,ra
}

void act_test_flashtest(void *arg_buffer)
{   
41339332:	6d00      	li	a1,0
    return_result_t *return_data;

    //该测试项必须卡中量产固件才可以测试成功
    if (sys_detect_disk(DRV_GROUP_STG_CARD) != -1)
41339334:	b20f      	lw	v0,41339370 <.LBE2+0xe>
41339336:	6c01      	li	a0,1
41339338:	67c5      	move	a2,a1
4133933a:	ea40      	jalr	v0
4133933c:	6f09      	li	a3,9
4133933e:	ea4f      	not	v0
41339340:	2a12      	bnez	v0,41339366 <.LBE2+0x4>
41339342:	b30d      	lw	v1,41339374 <.LBE2+0x12>
    {
        card_adfu_launcher(); 
    }    
    
    if (g_test_mode != TEST_MODE_CARD)
41339344:	a380      	lbu	a0,0(v1)
41339346:	240a      	beqz	a0,4133935c <.LBB2>
41339348:	b40c      	lw	a0,41339378 <.LBE2+0x16>
    { 
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
4133934a:	6e1a      	li	a2,26

        return_data->test_id = TESTID_FLASHTEST;
4133934c:	6d00      	li	a1,0

        return_data->test_result = 0;
4133934e:	b20c      	lw	v0,4133937c <.LBE2+0x1a>
       
        act_test_report_result(return_data, 4);
41339350:	c4a8      	sb	a1,8(a0)
41339352:	ccc3      	sh	a2,6(a0)
41339354:	ea40      	jalr	v0
41339356:	6d04      	li	a1,4
41339358:	6443      	restore	24,ra
    }
    else
    {
        act_test_report_test_log(0, TESTID_FLASHTEST);
    }    
}
4133935a:	e8a0      	jrc	ra

4133935c <.LBB2>:
4133935c:	1802 e437 	jal	410390dc <act_test_report_test_log>
41339360:	6d1a      	li	a1,26

41339362 <.LBE2>:
41339362:	6443      	restore	24,ra
41339364:	e8a0      	jrc	ra
41339366:	1982 e4a9 	jal	413392a4 <card_adfu_launcher>
4133936a:	6500      	nop
4133936c:	17ea      	b	41339342 <act_test_flashtest+0x12>
4133936e:	0000      	addiu	s0,sp,0
41339370:	88dd      	lh	a2,58(s0)
41339372:	bfc3      	lwu	a2,12(a3)
41339374:	8dc9      	lh	a2,18(a1)
41339376:	bfc3      	lwu	a2,12(a3)
41339378:	a100      	lbu	s0,0(s1)
4133937a:	9fc3      	lw	a2,12(a3)
4133937c:	9b41      	lw	v0,4(v1)
4133937e:	41cb      	addiu	a2,s1,-5

41339380 <act_test_enter_ft_mode>:
41339380:	64e3      	save	24,ra,s0

test_result_e act_test_enter_ft_mode(void *arg_buffer)
{
41339382:	b330      	lw	v1,41339440 <.LBB3+0x24>
    return_result_t *return_data;

    if (g_test_mode != TEST_MODE_CARD)
41339384:	6704      	move	s0,a0
41339386:	a340      	lbu	v0,0(v1)
41339388:	2a49      	bnez	v0,4133941c <.LBB3>
4133938a:	b031      	lw	s0,4133944c <.LBB3+0x30>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = TESTID_FTMODE;

        return_data->test_result = TRUE;

        act_test_report_result(return_data, 4);

        act_test_read_testid(arg_buffer, 80);
    }

    sys_local_irq_save();
4133938c:	6c00      	li	a0,0
4133938e:	67a4      	move	a1,a0
41339390:	67c4      	move	a2,a0
41339392:	e840      	jalr	s0
41339394:	6f2d      	li	a3,45
41339396:	b72f      	lw	a3,41339450 <.LBB3+0x34>

    //A21 digital function
    act_writel((act_readl(AD_Select) & 0xfffffffc), AD_Select);
41339398:	6d04      	li	a1,4
4133939a:	9f80      	lw	a0,0(a3)
4133939c:	eeab      	neg	a2,a1
4133939e:	eccc      	and	a0,a2
413393a0:	b22d      	lw	v0,41339454 <.LBB3+0x38>

    //A22 digital function
    act_writel((act_readl(AD_Select1) & 0xfffffff9), AD_Select);
413393a2:	df80      	sw	a0,0(a3)
413393a4:	9aa0      	lw	a1,0(v0)
413393a6:	466d      	addiu	v1,a2,-3
413393a8:	ed6c      	and	a1,v1
413393aa:	dfa0      	sw	a1,0(a3)
413393ac:	b52b      	lw	a1,41339458 <.LBB3+0x3c>

    act_writel(act_readl(GPIOAOUTEN) | (1 << 21), GPIOAOUTEN);
413393ae:	b42c      	lw	a0,4133945c <.LBB3+0x40>
413393b0:	9dc0      	lw	a2,0(a1)
413393b2:	b32c      	lw	v1,41339460 <.LBB3+0x44>

    act_writel(act_readl(GPIOAOUTEN) | (1 << 22), GPIOAOUTEN);
413393b4:	ee8d      	or	a2,a0
413393b6:	ddc0      	sw	a2,0(a1)
413393b8:	9d40      	lw	v0,0(a1)
413393ba:	b72c      	lw	a3,41339468 <.LBB3+0x4c>

    act_writel(act_readl(GPIOADAT) & (~(1 << 21)), GPIOADAT);
413393bc:	ea6d      	or	v0,v1
413393be:	dd40      	sw	v0,0(a1)
413393c0:	b529      	lw	a1,41339464 <.LBB3+0x48>
413393c2:	b62b      	lw	a2,4133946c <.LBB3+0x50>

    act_writel(act_readl(GPIOADAT) & (~(1 << 22)), GPIOADAT);
413393c4:	9d80      	lw	a0,0(a1)
413393c6:	f003 6b01 	li	v1,6145

    act_writel((act_readl(VD15_DCDC_CTL) & 0xffffe7ff), VD15_DCDC_CTL);
413393ca:	ecec      	and	a0,a3
413393cc:	dd80      	sw	a0,0(a1)
413393ce:	9d40      	lw	v0,0(a1)
413393d0:	ef6b      	neg	a3,v1
413393d2:	eacc      	and	v0,a2
413393d4:	b627      	lw	a2,41339470 <.LBB3+0x54>
413393d6:	dd40      	sw	v0,0(a1)
413393d8:	9e80      	lw	a0,0(a2)
413393da:	6d00      	li	a1,0

    DEBUG_ATT_PRINT("FT MODE", 0, 0);
413393dc:	ecec      	and	a0,a3
413393de:	de80      	sw	a0,0(a2)
413393e0:	6f4b      	li	a3,75
413393e2:	0c16      	la	a0,41339438 <.LBB3+0x1c>
413393e4:	e840      	jalr	s0
413393e6:	67c5      	move	a2,a1
413393e8:	6d00      	li	a1,0

    //FT mode
    sys_mdelay(20);
413393ea:	67c5      	move	a2,a1
413393ec:	6c14      	li	a0,20
413393ee:	e840      	jalr	s0
413393f0:	6f1d      	li	a3,29
413393f2:	6d00      	li	a1,0
    sys_mdelay(10);
413393f4:	67c5      	move	a2,a1
413393f6:	6c0a      	li	a0,10
413393f8:	e840      	jalr	s0
413393fa:	6f1d      	li	a3,29
413393fc:	b51e      	lw	a1,41339474 <.LBB3+0x58>
    act_writel(act_readl(0xc01b0000) | 0x00000014, 0xc01b0000); //ft test mode
413393fe:	6c14      	li	a0,20
41339400:	9d40      	lw	v0,0(a1)
41339402:	6f1d      	li	a3,29
    sys_mdelay(20);
41339404:	ea8d      	or	v0,a0
41339406:	dd40      	sw	v0,0(a1)
41339408:	6d00      	li	a1,0
4133940a:	e840      	jalr	s0
4133940c:	67c5      	move	a2,a1
4133940e:	b41b      	lw	a0,41339478 <.LBB3+0x5c>
    act_writel((act_readl(WD_CTL) & (~0x10)), WD_CTL);
41339410:	6b11      	li	v1,17
41339412:	9ce0      	lw	a3,0(a0)
41339414:	e86b      	neg	s0,v1
41339416:	ef0c      	and	a3,s0
41339418:	dce0      	sw	a3,0(a0)
4133941a:	17ff      	b	4133941a <act_test_enter_ft_mode+0x9a>

4133941c <.LBB3>:
4133941c:	b40a      	lw	a0,41339444 <.LBB3+0x28>
4133941e:	6e18      	li	a2,24
41339420:	6d01      	li	a1,1
41339422:	b20a      	lw	v0,41339448 <.LBB3+0x2c>
41339424:	ccc3      	sh	a2,6(a0)
41339426:	c4a8      	sb	a1,8(a0)
41339428:	ea40      	jalr	v0
4133942a:	6d04      	li	a1,4
4133942c:	6790      	move	a0,s0
4133942e:	1a43 e6f4 	jal	41cb9bd0 <act_test_read_testid>
41339432:	6d50      	li	a1,80
41339434:	17aa      	b	4133938a <act_test_enter_ft_mode+0xa>
41339436:	0000      	addiu	s0,sp,0
41339438:	5446      	slti	a0,70
4133943a:	4d20      	addiu	a1,32
4133943c:	444f      	addiu	v0,a0,-1
4133943e:	0045      	addiu	s0,sp,276
41339440:	8dc9      	lh	a2,18(a1)
41339442:	bfc3      	lwu	a2,12(a3)
41339444:	a100      	lbu	s0,0(s1)
41339446:	9fc3      	lw	a2,12(a3)
41339448:	9b41      	lw	v0,4(v1)
4133944a:	41cb      	addiu	a2,s1,-5
4133944c:	88dd      	lh	a2,58(s0)
4133944e:	bfc3      	lwu	a2,12(a3)
41339450:	0064      	addiu	s0,sp,400
41339452:	c009      	sb	s0,9(s0)
41339454:	00a4      	addiu	s0,sp,656
41339456:	c009      	sb	s0,9(s0)
41339458:	0000      	addiu	s0,sp,0
4133945a:	c009      	sb	s0,9(s0)
4133945c:	0000      	addiu	s0,sp,0
4133945e:	0020      	addiu	s0,sp,128
41339460:	0000      	addiu	s0,sp,0
41339462:	0040      	addiu	s0,sp,256
41339464:	0008      	addiu	s0,sp,32
41339466:	c009      	sb	s0,9(s0)
41339468:	ffff      	daddiu	a3,sp,124
4133946a:	ffdf      	daddiu	a2,sp,124
4133946c:	ffff      	daddiu	a3,sp,124
4133946e:	ffbf      	daddiu	a1,sp,124
41339470:	0008      	addiu	s0,sp,32
41339472:	c002      	sb	s0,2(s0)
41339474:	0000      	addiu	s0,sp,0
41339476:	c01b      	sb	s0,27(s0)
41339478:	001c      	addiu	s0,sp,112
4133947a:	c012      	sb	s0,18(s0)

4133947c <act_test_enter_BQB_mode>:
4133947c:	f004 64f6 	save	a0,48,ra,s0-s1
    while (1)
    {
        ;
    }
}

static void switch_app(uint32 app_func_id)
{
    msg_apps_t msg;
        
    g_app_func_id = app_func_id;
    
    //消息类型(即消息名称)
    msg.type = MSG_AUTOTEST_SWITCH_APP;
    msg.content.addr = &g_app_func_id;

    send_async_msg(MSG_TARGET_ID_FRONTAPP, &msg);    
}


test_result_e act_test_enter_BQB_mode(void *arg_buffer)
{
41339480:	b32d      	lw	v1,41339534 <.LBE6+0x28>
    int i;

    bool ret;

    msg_apps_t msg;

    return_result_t *return_data;

    if (g_att_version == 1)
41339482:	a340      	lbu	v0,0(v1)
41339484:	7201      	cmpi	v0,1
41339486:	6104      	btnez	41339490 <act_test_enter_BQB_mode+0x14>
41339488:	b62c      	lw	a2,41339538 <.LBE6+0x2c>
    {
        /* config 应用继续运行并启动其它程序;
         */
        g_p_test_ap_info_bak->test_stage = 1;
4133948a:	6d01      	li	a1,1
4133948c:	9e80      	lw	a0,0(a2)
4133948e:	c4a1      	sb	a1,1(a0)
41339490:	6c00      	li	a0,0
    }

    sys_os_sched_unlock();
41339492:	b02b      	lw	s0,4133953c <.LBE6+0x30>
41339494:	67a4      	move	a1,a0
41339496:	67c4      	move	a2,a0
41339498:	e840      	jalr	s0
4133949a:	6f34      	li	a3,52
4133949c:	b129      	lw	s1,41339540 <.LBE6+0x34>
4133949e:	6800      	li	s0,0
413394a0:	1006      	b	413394ae <.LBB4>
413394a2:	b227      	lw	v0,4133953c <.LBE6+0x30>

    while (1)
    {
        switch_app(APP_ATT_FUNC_ID_BTPLAY);
        
        if (g_test_share_info.front_ap_id == APP_ID_BTPLAY)
        {
            g_test_share_info.ap_switch_flag = FALSE;
            break;
        }

        sys_os_time_dly(5);
413394a4:	6c05      	li	a0,5
413394a6:	67b0      	move	a1,s0
413394a8:	67d0      	move	a2,s0
413394aa:	ea40      	jalr	v0
413394ac:	6f31      	li	a3,49

413394ae <.LBB4>:
413394ae:	f400 6b0a 	li	v1,1034
413394b2:	b225      	lw	v0,41339544 <.LBE6+0x38>
413394b4:	d900      	sw	s0,0(s1)
413394b6:	d306      	sw	v1,24(sp)
413394b8:	d107      	sw	s1,28(sp)
413394ba:	6c01      	li	a0,1
413394bc:	ea40      	jalr	v0
413394be:	0506      	addiu	a1,sp,24

413394c0 <.LBE4>:
413394c0:	b222      	lw	v0,41339548 <.LBE6+0x3c>
413394c2:	a2e0      	lbu	a3,0(v0)
413394c4:	7702      	cmpi	a3,2
413394c6:	61ed      	btnez	413394a2 <act_test_enter_BQB_mode+0x26>
413394c8:	b620      	lw	a2,41339548 <.LBE6+0x3c>
413394ca:	b21d      	lw	v0,4133953c <.LBE6+0x30>
    }
#if 0
    while (1)
    {
        DEBUG_ATT_PRINT("send install msg", 0, 0);

        //等待BTSTACK加载
        msg.type = MSG_AUTOTEST_QUERY_BTSTACK_WORK_SYNC;

        ret = send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 100);

        if (ret == TRUE)
        {
            break;
        }

        //sys_os_time_dly(1);
    }
#endif
    DEBUG_ATT_PRINT("btstack install", 0, 0);
413394cc:	c601      	sb	s0,1(a2)
413394ce:	0c16      	la	a0,41339524 <.LBE6+0x18>
413394d0:	67b0      	move	a1,s0
413394d2:	67d0      	move	a2,s0
413394d4:	ea40      	jalr	v0
413394d6:	6f4b      	li	a3,75
413394d8:	b51d      	lw	a1,4133954c <.LBE6+0x40>

    if (g_test_mode != TEST_MODE_CARD)
413394da:	a580      	lbu	a0,0(a1)
413394dc:	2c0b      	bnez	a0,413394f4 <.LBB6>
413394de:	f001 6c04 	li	a0,2052
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = TESTID_BQBMODE;

        return_data->test_result = TRUE;

        act_test_report_result(return_data, 4);

        act_test_read_testid(arg_buffer, 80);
    }

    //消息类型(即消息名称)
    msg.type = MSG_BTSTACK_BQB_TEST_SYNC;
413394e2:	b21e      	lw	v0,41339558 <.LBE6+0x4c>

    //发送同步消息
    send_sync_msg(MSG_TARGET_ID_BTSTACK, &msg, NULL, 0);
413394e4:	d404      	sw	a0,16(sp)
413394e6:	0504      	addiu	a1,sp,16
413394e8:	6c03      	li	a0,3
413394ea:	67d0      	move	a2,s0
413394ec:	ea40      	jalr	v0
413394ee:	67f0      	move	a3,s0
413394f0:	6476      	restore	48,ra,s0-s1

}
413394f2:	e8a0      	jrc	ra

413394f4 <.LBB6>:
413394f4:	b417      	lw	a0,4133954c <.LBE6+0x40>
413394f6:	6b19      	li	v1,25
413394f8:	6f01      	li	a3,1
413394fa:	b217      	lw	v0,41339554 <.LBE6+0x48>
413394fc:	cc63      	sh	v1,6(a0)
413394fe:	c4e8      	sb	a3,8(a0)
41339500:	ea40      	jalr	v0
41339502:	6d04      	li	a1,4
41339504:	940c      	lw	a0,48(sp)
41339506:	1a43 e6f4 	jal	41cb9bd0 <act_test_read_testid>
4133950a:	6d50      	li	a1,80

4133950c <.LBE6>:
4133950c:	f001 6c04 	li	a0,2052
41339510:	b212      	lw	v0,41339558 <.LBE6+0x4c>
41339512:	d404      	sw	a0,16(sp)
41339514:	0504      	addiu	a1,sp,16
41339516:	6c03      	li	a0,3
41339518:	67d0      	move	a2,s0
4133951a:	ea40      	jalr	v0
4133951c:	67f0      	move	a3,s0
4133951e:	6476      	restore	48,ra,s0-s1
41339520:	e8a0      	jrc	ra
41339522:	0000      	addiu	s0,sp,0
41339524:	7462      	cmpi	a0,98
41339526:	7473      	cmpi	a0,115
41339528:	6361      	addiu	sp,776
4133952a:	206b      	beqz	s0,41339602 <.LBE6+0xf6>
4133952c:	6e69      	li	a2,105
4133952e:	7473      	cmpi	a0,115
41339530:	6c61      	li	a0,97
41339532:	006c      	addiu	s0,sp,432
41339534:	8dc8      	lh	a2,16(a1)
41339536:	bfc3      	lwu	a2,12(a3)
41339538:	8dfc      	lh	a3,56(a1)
4133953a:	bfc3      	lwu	a2,12(a3)
4133953c:	88dd      	lh	a2,58(s0)
4133953e:	bfc3      	lwu	a2,12(a3)
41339540:	8dbc      	lh	a1,56(a1)
41339542:	bfc3      	lwu	a2,12(a3)
41339544:	8f2d      	lh	s1,26(a3)
41339546:	bfc3      	lwu	a2,12(a3)
41339548:	8dd0      	lh	a2,32(a1)
4133954a:	bfc3      	lwu	a2,12(a3)
4133954c:	8dc9      	lh	a2,18(a1)
4133954e:	bfc3      	lwu	a2,12(a3)
41339550:	a100      	lbu	s0,0(s1)
41339552:	9fc3      	lw	a2,12(a3)
41339554:	9b41      	lw	v0,4(v1)
41339556:	41cb      	addiu	a2,s1,-5
41339558:	8e4d      	lh	v0,26(a2)
4133955a:	bfc3      	lwu	a2,12(a3)
	...
Disassembly of section BANK_CONTROL_1_13:

41379000 <_ber_test_report_result>:
41379000:	f004 64f5 	save	a0,40,ra,s0-s1
 返回:
 说明:
*/
static void _ber_test_report_result(ber_test_arg_t *ber_arg, uint8 ret_val)
{
41379004:	b451      	lw	a0,41379148 <_ber_test_report_result+0x148>
    return_result_t *return_data;
    uint16 trans_bytes = 0;

    return_data = (return_result_t *)(STUB_ATT_RETURN_DATA_BUFFER);

    if(g_ber_control->rssi_test == FALSE)
41379006:	6f00      	li	a3,0
41379008:	67dd      	move	a2,sp
4137900a:	9c60      	lw	v1,0(a0)
4137900c:	cee8      	sh	a3,16(a2)
4137900e:	f0a0 a347 	lbu	v0,167(v1)
41379012:	b14d      	lw	s1,41379144 <_ber_test_report_result+0x144>
41379014:	f080 2a13 	bnez	v0,4137913e <_ber_test_report_result+0x13e>
41379018:	6ac5      	li	v0,197
    {
        return_data->test_id = TESTID_BER_TEST;
4137901a:	c943      	sh	v0,6(s1)
    }
    else
    {
        return_data->test_id = TESTID_RSSI_TEST;
4137901c:	c1a8      	sb	a1,8(s1)
    }
    
    return_data->test_result = ret_val;
4137901e:	675d      	move	v0,sp

    /** 0x002c是参数分隔符
    */
    int32_to_unicode(ber_arg->ber_channel_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10); 
41379020:	aaa8      	lhu	a1,16(v0)
41379022:	970a      	lw	a3,40(sp)
41379024:	34a4      	sll	a0,a1,1
41379026:	e435      	addu	a1,a0,s1
41379028:	a780      	lbu	a0,0(a3)
4137902a:	4d0a      	addiu	a1,10
4137902c:	0604      	addiu	a2,sp,16
4137902e:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41379032:	6f0a      	li	a3,10
41379034:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
41379036:	abc8      	lhu	a2,16(v1)
41379038:	970a      	lw	a3,40(sp)
    int32_to_unicode(ber_arg->ber_channel_mid, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10); 
4137903a:	46a1      	addiu	a1,a2,1
4137903c:	30c4      	sll	s0,a2,1
4137903e:	cba8      	sh	a1,16(v1)
41379040:	e029      	addu	v0,s0,s1
41379042:	ed31      	zeh	a1
41379044:	682c      	li	s0,44
41379046:	ca05      	sh	s0,10(v0)
41379048:	34a4      	sll	a0,a1,1
4137904a:	e435      	addu	a1,a0,s1
4137904c:	a781      	lbu	a0,1(a3)
4137904e:	4d0a      	addiu	a1,10
41379050:	0604      	addiu	a2,sp,16
41379052:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41379056:	6f0a      	li	a3,10
41379058:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
4137905a:	abc8      	lhu	a2,16(v1)
4137905c:	46a1      	addiu	a1,a2,1
4137905e:	32c4      	sll	v0,a2,1
41379060:	cba8      	sh	a1,16(v1)
41379062:	e23d      	addu	a3,v0,s1
41379064:	960a      	lw	a2,40(sp)
    int32_to_unicode(ber_arg->ber_channel_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10); 
41379066:	ed31      	zeh	a1
41379068:	cf05      	sh	s0,10(a3)
4137906a:	34a4      	sll	a0,a1,1
4137906c:	e435      	addu	a1,a0,s1
4137906e:	a682      	lbu	a0,2(a2)
41379070:	4d0a      	addiu	a1,10
41379072:	0604      	addiu	a2,sp,16
41379074:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41379078:	6f0a      	li	a3,10
4137907a:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
4137907c:	ab48      	lhu	v0,16(v1)
4137907e:	42a1      	addiu	a1,v0,1
41379080:	3744      	sll	a3,v0,1
41379082:	cba8      	sh	a1,16(v1)
41379084:	e739      	addu	a2,a3,s1
41379086:	ed31      	zeh	a1
    int32_to_unicode(ber_arg->ber_thr_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);  
41379088:	920a      	lw	v0,40(sp)
4137908a:	ce05      	sh	s0,10(a2)
4137908c:	34a4      	sll	a0,a1,1
4137908e:	e435      	addu	a1,a0,s1
41379090:	8283      	lb	a0,3(v0)
41379092:	4d0a      	addiu	a1,10
41379094:	0604      	addiu	a2,sp,16
41379096:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
4137909a:	6f0a      	li	a3,10
4137909c:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
4137909e:	abe8      	lhu	a3,16(v1)
413790a0:	47a1      	addiu	a1,a3,1
413790a2:	36e4      	sll	a2,a3,1
413790a4:	cba8      	sh	a1,16(v1)
413790a6:	e629      	addu	v0,a2,s1
413790a8:	970a      	lw	a3,40(sp)
    int32_to_unicode(ber_arg->ber_thr_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);  
413790aa:	ed31      	zeh	a1
413790ac:	ca05      	sh	s0,10(v0)
413790ae:	34a4      	sll	a0,a1,1
413790b0:	e435      	addu	a1,a0,s1
413790b2:	8784      	lb	a0,4(a3)
413790b4:	4d0a      	addiu	a1,10
413790b6:	0604      	addiu	a2,sp,16
413790b8:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
413790bc:	6f0a      	li	a3,10
413790be:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
413790c0:	abc8      	lhu	a2,16(v1)
413790c2:	46a1      	addiu	a1,a2,1
413790c4:	32c4      	sll	v0,a2,1
413790c6:	cba8      	sh	a1,16(v1)
413790c8:	e23d      	addu	a3,v0,s1
413790ca:	960a      	lw	a2,40(sp)
    int32_to_unicode(ber_arg->rssi_thr_low, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);  
413790cc:	ed31      	zeh	a1
413790ce:	cf05      	sh	s0,10(a3)
413790d0:	34a4      	sll	a0,a1,1
413790d2:	e435      	addu	a1,a0,s1
413790d4:	8685      	lb	a0,5(a2)
413790d6:	4d0a      	addiu	a1,10
413790d8:	0604      	addiu	a2,sp,16
413790da:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
413790de:	6f0a      	li	a3,10
413790e0:	677d      	move	v1,sp
    return_data->return_arg[trans_bytes++] = 0x002c;
413790e2:	ab48      	lhu	v0,16(v1)
413790e4:	42a1      	addiu	a1,v0,1
413790e6:	3744      	sll	a3,v0,1
413790e8:	cba8      	sh	a1,16(v1)
413790ea:	e739      	addu	a2,a3,s1
413790ec:	ed31      	zeh	a1
    int32_to_unicode(ber_arg->rssi_thr_high, &(return_data->return_arg[trans_bytes]), &trans_bytes, 10);      
413790ee:	920a      	lw	v0,40(sp)
413790f0:	ce05      	sh	s0,10(a2)
413790f2:	34a4      	sll	a0,a1,1
413790f4:	e435      	addu	a1,a0,s1
413790f6:	8286      	lb	a0,6(v0)
413790f8:	4d0a      	addiu	a1,10
413790fa:	0604      	addiu	a2,sp,16
413790fc:	1a43 e6b5 	jal	41cb9ad4 <int32_to_unicode>
41379100:	6f0a      	li	a3,10
41379102:	677d      	move	v1,sp
    
    /** 添加结束符,如果参数未四字节对齐，要四字节对齐处理
    */
    return_data->return_arg[trans_bytes++] = 0x0000;
41379104:	abc8      	lhu	a2,16(v1)
41379106:	67fd      	move	a3,sp
41379108:	35c4      	sll	a1,a2,1
4137910a:	e531      	addu	a0,a1,s1
4137910c:	4661      	addiu	v1,a2,1
4137910e:	6d00      	li	a1,0
41379110:	cf68      	sh	v1,16(a3)
41379112:	cca5      	sh	a1,10(a0)
41379114:	6783      	move	a0,v1
    if((trans_bytes % 2) != 0)
41379116:	ec31      	zeh	a0
41379118:	6a01      	li	v0,1
4137911a:	ea8c      	and	v0,a0
4137911c:	2206      	beqz	v0,4137912a <_ber_test_report_result+0x12a>
4137911e:	4341      	addiu	v0,v1,1
    {
        return_data->return_arg[trans_bytes++] = 0x0000;    
41379120:	3384      	sll	v1,a0,1
41379122:	67fd      	move	a3,sp
41379124:	e339      	addu	a2,v1,s1
41379126:	cf48      	sh	v0,16(a3)
41379128:	cea5      	sh	a1,10(a2)
4137912a:	67dd      	move	a2,sp
    }        

    act_test_report_result(return_data, trans_bytes*2 + 4);
4137912c:	aea8      	lhu	a1,16(a2)
4137912e:	b208      	lw	v0,4137914c <_ber_test_report_result+0x14c>
41379130:	34a4      	sll	a0,a1,1
41379132:	44a4      	addiu	a1,a0,4
41379134:	ed31      	zeh	a1
41379136:	ea40      	jalr	v0
41379138:	6791      	move	a0,s1
4137913a:	6475      	restore	40,ra,s0-s1
4137913c:	e8a0      	jrc	ra
4137913e:	6ac6      	li	v0,198
41379140:	176c      	b	4137901a <_ber_test_report_result+0x1a>
41379142:	0000      	addiu	s0,sp,0
41379144:	a100      	lbu	s0,0(s1)
41379146:	9fc3      	lw	a2,12(a3)
41379148:	8fcc      	lh	a2,24(a3)
4137914a:	bfc3      	lwu	a2,12(a3)
4137914c:	9b41      	lw	v0,4(v1)
4137914e:	41cb      	addiu	a2,s1,-5

41379150 <_ber_test_stop_att>:
41379150:	64f4      	save	32,ra,s0-s1
}



 /** 
 功能: 通知PC工具停止测试
 参数: 
 返回:
 说明:
*/
static uint8  _ber_test_stop_att(ber_test_arg_t *ber_arg, uint32 test_result)
{
41379152:	b01c      	lw	s0,413791c0 <.LBE2+0x16>
    uint32 ret_val;   
    uint32 read_len;
    uint8 *pdata;

    print_log("ber att stop!");
41379154:	0c17      	la	a0,413791b0 <.LBE2+0x6>
41379156:	e840      	jalr	s0
41379158:	d509      	sw	a1,36(sp)
4137915a:	b31c      	lw	v1,413791c8 <.LBE2+0x1e>

    /** 灵敏度的阈值
    */
    //g_ber_control->dut2pc_data.ber_thr = ber_arg->ber_thr;

    /** 把测试结果发给ATT工具并通知ATT工具stop
    */
    libc_memcpy(STUB_ATT_RW_TEMP_BUFFER, &(g_ber_control->dut2pc_data), sizeof(ber_update_arg_t));
4137915c:	b01a      	lw	s0,413791c4 <.LBE2+0x1a>
4137915e:	9ba0      	lw	a1,0(v1)
41379160:	b11b      	lw	s1,413791cc <.LBE2+0x22>
41379162:	6790      	move	a0,s0
41379164:	4d30      	addiu	a1,48
41379166:	6e20      	li	a2,32
41379168:	e940      	jalr	s1
4137916a:	6f00      	li	a3,0
4137916c:	b219      	lw	v0,413791d0 <.LBE2+0x26>
    ret_val = att_write_data(STUB_CMD_ATT_BER_TX_STOP, sizeof(ber_update_arg_t), STUB_ATT_RW_TEMP_BUFFER);
4137916e:	f440 6c19 	li	a0,1113
41379172:	6d20      	li	a1,32
41379174:	ea40      	jalr	v0
41379176:	67d0      	move	a2,s0
41379178:	2206      	beqz	v0,41379186 <_ber_test_stop_att+0x36>
    if(ret_val == 0)
4137917a:	9409      	lw	a0,36(sp)
    {       
        read_len = sizeof(ber_retrun_arg_t);
        ret_val = att_read_data(STUB_CMD_ATT_BER_TX_STOP, read_len, STUB_ATT_RW_TEMP_BUFFER); 
        if(ret_val == 0)
        {       
            pdata = (uint8 *)STUB_ATT_RW_TEMP_BUFFER;

            /** 从PC读回来的数据是否需要从bytes 6开始???
            */
            libc_memcpy(&(g_ber_control->pc2dut_data), &pdata[0], read_len);
        }
    }

    if(test_result == TRUE)
4137917c:	7401      	cmpi	a0,1
4137917e:	6012      	bteqz	413791a4 <.LBB2>
41379180:	6a01      	li	v0,1
    {
        /** 配置RX stop
        */
        _ber_test_write_berdata(PKT_CFO_STOP_INDEX);
    }
    return TRUE; 
}
41379182:	6474      	restore	32,ra,s0-s1
41379184:	e8a0      	jrc	ra
41379186:	b214      	lw	v0,413791d4 <.LBE2+0x2a>
41379188:	f440 6c19 	li	a0,1113
4137918c:	6d20      	li	a1,32
4137918e:	ea40      	jalr	v0
41379190:	67d0      	move	a2,s0
41379192:	2af3      	bnez	v0,4137917a <_ber_test_stop_att+0x2a>
41379194:	b50d      	lw	a1,413791c8 <.LBE2+0x1e>
41379196:	6e20      	li	a2,32
41379198:	9d80      	lw	a0,0(a1)
4137919a:	67e2      	move	a3,v0
4137919c:	4c50      	addiu	a0,80
4137919e:	e940      	jalr	s1
413791a0:	67b0      	move	a1,s0
413791a2:	17eb      	b	4137917a <_ber_test_stop_att+0x2a>

413791a4 <.LBB2>:
413791a4:	1962 e4eb 	jal	412f93ac <_ber_test_write_berdata>
413791a8:	6c01      	li	a0,1

413791aa <.LBE2>:
413791aa:	6a01      	li	v0,1
413791ac:	6474      	restore	32,ra,s0-s1
413791ae:	e8a0      	jrc	ra
413791b0:	6562      	move	v1,v0
413791b2:	2072      	beqz	s0,41379298 <_ber_test_init+0x20>
413791b4:	7461      	cmpi	a0,97
413791b6:	2074      	beqz	s0,413792a0 <.L17+0x4>
413791b8:	7473      	cmpi	a0,115
413791ba:	706f      	cmpi	s0,111
413791bc:	0021      	addiu	s0,sp,132
413791be:	0000      	addiu	s0,sp,0
413791c0:	9b59      	lw	v0,100(v1)
413791c2:	41cf      	addiu	a2,s1,-1
413791c4:	a000      	lbu	s0,0(s0)
413791c6:	9fc3      	lw	a2,12(a3)
413791c8:	8fcc      	lh	a2,24(a3)
413791ca:	bfc3      	lwu	a2,12(a3)
413791cc:	88d5      	lh	a2,42(s0)
413791ce:	bfc3      	lwu	a2,12(a3)
413791d0:	88e5      	lh	a3,10(s0)
413791d2:	bfc3      	lwu	a2,12(a3)
413791d4:	890d      	lh	s0,26(s1)
413791d6:	bfc3      	lwu	a2,12(a3)

413791d8 <_ber_test_start_att>:
413791d8:	64f8      	save	64,ra,s0-s1



/** 
 功能: 读berdata.bin,用于BEGINE&STOP RX
 参数: 
 返回: 成功返回TRUE, 失败返回FALSE
 说明: 
*/
static uint8 _ber_test_read_berdata(ber_test_arg_t *ber_arg)
{
    uint32 i;
    atf_head_t *atf_head;
    uint8 *data_buffer = (uint8 *)ATT_MPDATA_TEMP_BUFFER;
    
    att_test_fread(data_buffer, 512, 0);
    
    atf_head = (atf_head_t *) data_buffer;
    for (i = 0; i < (512 / sizeof(atf_dir_t)); i++)
    {
        if (libc_memcmp(atf_head->atf_dir[i].filename, BER_HCI_CMD_BIN, 10) == 0)
        {
            break;
        }
    }  

    g_ber_control->berdata_len = atf_head->atf_dir[i].length;
    
    /** 读取HCI命令
    */
    if(i < (512 / sizeof(atf_dir_t)))
    {
        if(g_ber_control->berdata_len <= ATT_MPDATA_MEX_LENGTH)
        {
            att_test_fread(data_buffer, atf_head->atf_dir[i].length, atf_head->atf_dir[i].offset);
            return TRUE;
        }
    }

    return FALSE;
}

/** 
 功能: 通知PC工具开始测试
 参数: 
 返回:
 说明:
*/
static uint8  _ber_test_start_att(ber_test_arg_t *ber_arg)
{
413791da:	b122      	lw	s1,41379260 <_ber_test_start_att+0x88>
    uint32 ret_val;
    
    ber_param_t ber_param;


    /** 通知ATT工具START
    */
    libc_memset(&ber_param, 0, sizeof(ber_param_t));
413791dc:	6704      	move	s0,a0
413791de:	6d00      	li	a1,0
413791e0:	0404      	addiu	a0,sp,16
413791e2:	6e20      	li	a2,32
413791e4:	e940      	jalr	s1
413791e6:	6f01      	li	a3,1
413791e8:	6d00      	li	a1,0
    ber_param.ic_type = MP_ICTYPE;
413791ea:	679d      	move	a0,sp
413791ec:	c4b0      	sb	a1,16(a0)
413791ee:	a040      	lbu	v0,0(s0)
    ber_param.channel = ber_arg->ber_channel_low;
413791f0:	679d      	move	a0,sp
413791f2:	6f32      	li	a3,50
    ber_param.tx_gain_idx = MP_TX_GAIN_IDX;
    ber_param.tx_gain_val = MP_TX_GAIN_VAL;    
413791f4:	efeb      	neg	a3
413791f6:	c4f3      	sb	a3,19(a0)
413791f8:	6807      	li	s0,7
413791fa:	6e06      	li	a2,6
    //ber_param.payload = PAYLOADTYPE_SET;
    ber_param.payload = BT_PAYLOAD_TYPE_1111_0000;
413791fc:	6b13      	li	v1,19
    ber_param.pkt_type = PKTTYPE_SET;  
    ber_param.tx_dac = MP_TX_DAC;
413791fe:	6f01      	li	a3,1
    ber_param.whitening_cv = WHITENCOEFF_SET;
    ber_param.pkt_header = PKTHEADER_SET;
    ber_param.tx_pkt_cnt = BER_TX_PKT_CNT;
41379200:	efeb      	neg	a3
41379202:	c451      	sb	v0,17(a0)
41379204:	c412      	sb	s0,18(a0)
41379206:	c4d4      	sb	a2,20(a0)
41379208:	c4b5      	sb	a1,21(a0)
4137920a:	c476      	sb	v1,22(a0)
4137920c:	cced      	sh	a3,26(a0)
4137920e:	b616      	lw	a2,41379264 <_ber_test_start_att+0x8c>
    ber_param.hit_target_l = HIT_ADDRESS_SET_L;
41379210:	6f00      	li	a3,0
    ber_param.hit_target_h = HIT_ADDRESS_SET_H;
41379212:	6a7f      	li	v0,127
41379214:	f222 6814 	li	s0,4660
41379218:	6d01      	li	a1,1
    ber_param.sut_state = 0;
    ber_param.report_interval = BER_TX_REPORT_INTERVAL;
4137921a:	6b04      	li	v1,4
    ber_param.report_timeout = BER_TX_REPORT_TIMEOUT;
4137921c:	cc0c      	sh	s0,24(a0)
4137921e:	f020 c4a5 	sb	a1,37(a0)
41379222:	c457      	sb	v0,23(a0)
41379224:	f020 c4e4 	sb	a3,36(a0)
41379228:	f020 c468 	sb	v1,40(a0)
4137922c:	b40f      	lw	a0,41379268 <_ber_test_start_att+0x90>

    libc_memcpy((uint8 *)(STUB_ATT_RW_TEMP_BUFFER + sizeof(stub_ext_cmd_t)), &ber_param, sizeof(ber_param_t));
4137922e:	d607      	sw	a2,28(sp)
41379230:	0504      	addiu	a1,sp,16
41379232:	6e20      	li	a2,32
41379234:	e940      	jalr	s1
41379236:	d708      	sw	a3,32(sp)
41379238:	b00d      	lw	s0,4137926c <_ber_test_start_att+0x94>
    ret_val = att_write_data(STUB_CMD_ATT_BER_TX_BEGIN, sizeof(ber_param_t), STUB_ATT_RW_TEMP_BUFFER);
4137923a:	b20e      	lw	v0,41379270 <_ber_test_start_att+0x98>
4137923c:	f440 6c18 	li	a0,1112
41379240:	6d20      	li	a1,32
41379242:	ea40      	jalr	v0
41379244:	67d0      	move	a2,s0
41379246:	2203      	beqz	v0,4137924e <_ber_test_start_att+0x76>
    
    if(ret_val == 0)
41379248:	6a01      	li	v0,1
    {
        att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);
    }

          
    return TRUE;
}
4137924a:	6478      	restore	64,ra,s0-s1
4137924c:	e8a0      	jrc	ra
4137924e:	67a2      	move	a1,v0
41379250:	b209      	lw	v0,41379274 <_ber_test_start_att+0x9c>
41379252:	f4e0 6c1e 	li	a0,1278
41379256:	ea40      	jalr	v0
41379258:	67d0      	move	a2,s0
4137925a:	6a01      	li	v0,1
4137925c:	6478      	restore	64,ra,s0-s1
4137925e:	e8a0      	jrc	ra
41379260:	88d5      	lh	a2,42(s0)
41379262:	bfc3      	lwu	a2,12(a3)
41379264:	8b33      	lh	s1,38(v1)
41379266:	009e      	addiu	s0,sp,632
41379268:	a006      	lbu	s0,6(s0)
4137926a:	9fc3      	lw	a2,12(a3)
4137926c:	a000      	lbu	s0,0(s0)
4137926e:	9fc3      	lw	a2,12(a3)
41379270:	88e5      	lh	a3,10(s0)
41379272:	bfc3      	lwu	a2,12(a3)
41379274:	890d      	lh	s0,26(s1)
41379276:	bfc3      	lwu	a2,12(a3)

41379278 <_ber_test_init>:
41379278:	64f9      	save	72,ra,s0-s1

/** 
 功能: 模块测试初始化
 参数: ber_test_arg  编辑工具配置的参数信息 
 返回:
 说明:
*/
uint8 _ber_test_init(ber_test_arg_t *ber_arg)
{
4137927a:	b059      	lw	s0,413793dc <.LBE3+0xaa>
    uint32 retry_cnt;
    uint32 ret_val;
    bt_drv_param_t tmp_bt_drv_param;
    btt_priv_data_t btt_priv_data;  

    /** 初始化全局控制结构
    */
    g_ber_control = (ber_control_t *)ATT_RINGBUFFER_ADDR;
4137927c:	b459      	lw	a0,413793e0 <.LBE3+0xae>
4137927e:	b15a      	lw	s1,413793e4 <.LBE3+0xb2>
    libc_memset(g_ber_control, 0, sizeof(ber_control_t));
41379280:	d880      	sw	a0,0(s0)
41379282:	6d00      	li	a1,0
41379284:	6ea8      	li	a2,168
41379286:	e940      	jalr	s1
41379288:	6f01      	li	a3,1
4137928a:	9860      	lw	v1,0(s0)
    g_ber_control->get_pktinfo_timer = -1;
4137928c:	6e01      	li	a2,1
4137928e:	edcb      	neg	a1,a2
41379290:	6c00      	li	a0,0
    g_ber_control->ber_test_state = BER_STATE_STOP;
41379292:	6a00      	li	v0,0

    retry_cnt = 0;
41379294:	dbbc      	sw	a1,112(v1)
41379296:	f0a0 c381 	sb	a0,161(v1)
4137929a:	d20c      	sw	v0,48(sp)

4137929c <.L17>:
4137929c:	6c0c      	li	a0,12

retry:    
    if(sys_get_drv_install_info(DRV_GROUP_BT) > 0)
4137929e:	6d00      	li	a1,0
413792a0:	b152      	lw	s1,413793e8 <.LBE3+0xb6>
413792a2:	67c5      	move	a2,a1
413792a4:	e940      	jalr	s1
413792a6:	67e4      	move	a3,a0
413792a8:	5201      	slti	v0,1
413792aa:	6105      	btnez	413792b6 <.L17+0x1a>
413792ac:	6d00      	li	a1,0
    {
        sys_drv_uninstall(DRV_GROUP_BT);
413792ae:	6c0c      	li	a0,12
413792b0:	67c5      	move	a2,a1
413792b2:	e940      	jalr	s1
413792b4:	6f0b      	li	a3,11
413792b6:	b64e      	lw	a2,413793ec <.LBE3+0xba>
    }

    /** 重装载BT驱动
    */
    tmp_bt_drv_param.cbk = _ber_test_read_hci_data;
413792b8:	6d01      	li	a1,1
    tmp_bt_drv_param.bd_addr[0] = 0x00;
    tmp_bt_drv_param.bd_addr[1] = 0x01;
413792ba:	d604      	sw	a2,16(sp)
413792bc:	67dd      	move	a2,sp
413792be:	c6b5      	sb	a1,21(a2)
413792c0:	b547      	lw	a1,413793dc <.LBE3+0xaa>
    tmp_bt_drv_param.bd_addr[2] = 0x02;   
    tmp_bt_drv_param.bd_addr[3] = 0xfd;
    tmp_bt_drv_param.bd_addr[4] = 0x4e;
    tmp_bt_drv_param.bd_addr[5] = 0xf4;
    tmp_bt_drv_param.uart_idle_timer = 5000;
    tmp_bt_drv_param.p_hci_buffer_get_len_cb = &(g_ber_control->g_hci_deal.get_data_len);
413792c2:	6c02      	li	a0,2
413792c4:	c696      	sb	a0,22(a2)
413792c6:	6800      	li	s0,0
413792c8:	9d80      	lw	a0,0(a1)
413792ca:	c614      	sb	s0,20(a2)
413792cc:	6b03      	li	v1,3
413792ce:	eb6b      	neg	v1
413792d0:	6f4e      	li	a3,78
413792d2:	6a0c      	li	v0,12
413792d4:	ea4b      	neg	v0
413792d6:	f382 6808 	li	s0,5000
413792da:	c677      	sb	v1,23(a2)
413792dc:	c6f8      	sb	a3,24(a2)
413792de:	4464      	addiu	v1,a0,4
    tmp_bt_drv_param.p_hci_buffer_read_data_cb = &(g_ber_control->g_hci_deal.read_data);
413792e0:	ce0d      	sh	s0,26(a2)
413792e2:	c659      	sb	v0,25(a2)
413792e4:	b643      	lw	a2,413793f0 <.LBE3+0xbe>
    sys_drv_install(DRV_GROUP_BT, &tmp_bt_drv_param, bt_drv_name);
413792e6:	d308      	sw	v1,32(sp)
413792e8:	d407      	sw	a0,28(sp)
413792ea:	0504      	addiu	a1,sp,16
413792ec:	6c0c      	li	a0,12
413792ee:	e940      	jalr	s1
413792f0:	6f0a      	li	a3,10
413792f2:	6c00      	li	a0,0

    bt_drv_controller_poweron();
413792f4:	b040      	lw	s0,413793f4 <.LBE3+0xc2>
413792f6:	67a4      	move	a1,a0
413792f8:	67c4      	move	a2,a0
413792fa:	e840      	jalr	s0
413792fc:	6f04      	li	a3,4
413792fe:	6d00      	li	a1,0

    sys_mdelay(500);
41379300:	67c5      	move	a2,a1
41379302:	f1e0 6c14 	li	a0,500
41379306:	e940      	jalr	s1
41379308:	6f1d      	li	a3,29
4137930a:	6f00      	li	a3,0

    /** 加载PATCH CODE
    */
    btt_priv_data.download_patch = FALSE;
4137930c:	673d      	move	s1,sp
4137930e:	6a01      	li	v0,1
    btt_priv_data.reset_controller = TRUE;    
41379310:	f020 c1ec 	sb	a3,44(s1)
41379314:	6c01      	li	a0,1
    bt_drv_down_patchcode(TRUE, BT_BTT_MODE, &btt_priv_data); 
41379316:	6d03      	li	a1,3
41379318:	060a      	addiu	a2,sp,40
4137931a:	f020 c14d 	sb	v0,45(s1)
4137931e:	e840      	jalr	s0
41379320:	6f02      	li	a3,2
41379322:	b62f      	lw	a2,413793dc <.LBE3+0xaa>

    /** pkt type为1 bytes
    */
    g_ber_control->g_hci_deal.minReqLen = 3;
41379324:	6c01      	li	a0,1
    g_ber_control->g_hci_deal.reqRxParseStatus = UART_HCI_STATUS_RX_TYPE;
41379326:	9ee0      	lw	a3,0(a2)
41379328:	6d03      	li	a1,3
4137932a:	c78d      	sb	a0,13(a3)
4137932c:	6b00      	li	v1,0

4137932e <.LBB3>:
    g_ber_control->cmd_state = BER_CMD_STATE_WRITE_PACKET_NUM;
4137932e:	b433      	lw	a0,413793f8 <.LBE3+0xc6>
41379330:	b233      	lw	v0,413793fc <.LBE3+0xca>

41379332 <.LBE3>:
41379332:	cfa4      	sh	a1,8(a3)
41379334:	f0a0 c763 	sb	v1,163(a3)
41379338:	f200 6d00 	li	a1,512
4137933c:	ea40      	jalr	v0
4137933e:	6e00      	li	a2,0
41379340:	6800      	li	s0,0
41379342:	b72e      	lw	a3,413793f8 <.LBE3+0xc6>
41379344:	3314      	sll	v1,s0,5
41379346:	e3e5      	addu	s1,v1,a3
41379348:	6791      	move	a0,s1
4137934a:	b227      	lw	v0,413793e4 <.LBE3+0xb2>
4137934c:	4c20      	addiu	a0,32
4137934e:	0d1c      	la	a1,413793bc <.LBE3+0x8a>
41379350:	6e0a      	li	a2,10
41379352:	ea40      	jalr	v0
41379354:	6f02      	li	a3,2
41379356:	2227      	beqz	v0,413793a6 <.LBE3+0x74>
41379358:	4001      	addiu	s0,s0,1
4137935a:	5810      	sltiu	s0,16
4137935c:	61f2      	btnez	41379342 <.LBE3+0x10>
4137935e:	b427      	lw	a0,413793f8 <.LBE3+0xc6>
41379360:	3514      	sll	a1,s0,5
41379362:	e585      	addu	s1,a1,a0
41379364:	b21e      	lw	v0,413793dc <.LBE3+0xaa>
41379366:	99ad      	lw	a1,52(s1)
41379368:	9ac0      	lw	a2,0(v0)
4137936a:	f060 ceb4 	sh	a1,116(a2)
4137936e:	6005      	bteqz	4137937a <.LBE3+0x48>
41379370:	67e5      	move	a3,a1
41379372:	ef31      	zeh	a3
41379374:	f001 5f01 	sltiu	a3,2049
41379378:	6110      	btnez	4137939a <.LBE3+0x68>
4137937a:	6a00      	li	v0,0
4137937c:	221c      	beqz	v0,413793b6 <.LBE3+0x84>
4137937e:	1962 e4eb 	jal	412f93ac <_ber_test_write_berdata>

    /** 加载berdata.bin
    */
    if(_ber_test_read_berdata(ber_arg) == FALSE)
    {
        return FALSE;
    }

    /** 配置RX begin
    */
    ret_val = _ber_test_write_berdata(PKT_CFO_BEGINE_INDEX);
41379382:	6c00      	li	a0,0
41379384:	2a12      	bnez	v0,413793aa <.LBE3+0x78>

    if(ret_val == FALSE)
41379386:	930c      	lw	v1,48(sp)
    {
        retry_cnt++;
41379388:	4361      	addiu	v1,v1,1
4137938a:	5b03      	sltiu	v1,3

        if(retry_cnt < 3)
4137938c:	d30c      	sw	v1,48(sp)
4137938e:	6013      	bteqz	413793b6 <.LBE3+0x84>
41379390:	b11c      	lw	s1,41379400 <.LBE3+0xce>
        { 
            print_log("retry start ber %d", retry_cnt);        
41379392:	0c0e      	la	a0,413793c8 <.LBE3+0x96>
41379394:	e940      	jalr	s1
41379396:	67a3      	move	a1,v1
41379398:	1781      	b	4137929c <.L17>
4137939a:	b418      	lw	a0,413793f8 <.LBE3+0xc6>
4137939c:	b218      	lw	v0,413793fc <.LBE3+0xca>
4137939e:	ea40      	jalr	v0
413793a0:	99cc      	lw	a2,48(s1)
413793a2:	6a01      	li	v0,1
413793a4:	17eb      	b	4137937c <.LBE3+0x4a>
413793a6:	5810      	sltiu	s0,16
413793a8:	17dd      	b	41379364 <.LBE3+0x32>
413793aa:	b60d      	lw	a2,413793dc <.LBE3+0xaa>
            goto retry;
        }
        else
        {
            return FALSE;
        }
    }
    g_ber_control->ber_test_state = BER_STATE_START;    
413793ac:	6d01      	li	a1,1
413793ae:	9e80      	lw	a0,0(a2)
413793b0:	6a01      	li	v0,1

    return TRUE;
413793b2:	f0a0 c4a1 	sb	a1,161(a0)
413793b6:	6479      	restore	72,ra,s0-s1
}
413793b8:	e8a0      	jrc	ra
413793ba:	0000      	addiu	s0,sp,0
413793bc:	6562      	move	v1,v0
413793be:	6472      	restore	16,ra,s0-s1
413793c0:	7461      	cmpi	a0,97
413793c2:	2e61      	bnez	a2,41379486 <.L35+0x8>
413793c4:	6962      	li	s1,98
413793c6:	006e      	addiu	s0,sp,440
413793c8:	6572      	move	s3,v0
413793ca:	7274      	cmpi	v0,116
413793cc:	2079      	beqz	s0,413794c0 <.L35+0x42>
413793ce:	7473      	cmpi	a0,115
413793d0:	7261      	cmpi	v0,97
413793d2:	2074      	beqz	s0,413794bc <.L35+0x3e>
413793d4:	6562      	move	v1,v0
413793d6:	2072      	beqz	s0,413794bc <.L35+0x3e>
413793d8:	6425      	restore	40,s0
413793da:	0000      	addiu	s0,sp,0
413793dc:	8fcc      	lh	a2,24(a3)
413793de:	bfc3      	lwu	a2,12(a3)
413793e0:	0000      	addiu	s0,sp,0
413793e2:	0003      	addiu	s0,sp,12
413793e4:	88d5      	lh	a2,42(s0)
413793e6:	bfc3      	lwu	a2,12(a3)
413793e8:	88dd      	lh	a2,58(s0)
413793ea:	bfc3      	lwu	a2,12(a3)
413793ec:	9005      	lw	s0,20(sp)
413793ee:	412f      	addiu	s1,s1,-1
413793f0:	95d8      	lw	a1,864(sp)
413793f2:	4137      	daddiu	s1,s1,7
413793f4:	8fd5      	lh	a2,42(a3)
413793f6:	bfc3      	lwu	a2,12(a3)
413793f8:	a608      	lbu	s0,8(a2)
413793fa:	9fc3      	lw	a2,12(a3)
413793fc:	892d      	lh	s1,26(s1)
413793fe:	bfc3      	lwu	a2,12(a3)
41379400:	9b59      	lw	v0,100(v1)
41379402:	41cf      	addiu	a2,s1,-1

41379404 <act_test_ber_test>:
41379404:	f004 64f5 	save	a0,40,ra,s0-s1


/** 
 功能: 测试蓝牙的灵敏度
 参数: arg_buffer  编辑工具配置的参数信息 
 返回: 测试结果
 说明: 1. 使用Golden sample不能正确测试灵敏度;
       2. 这个函数测试的实际上不是灵敏度,而是灵敏度相关的可用于一致性参考的值;
*/
test_result_e act_test_ber_test(void *arg_buffer)
{
41379408:	6b00      	li	v1,0
    ber_test_arg_t *ber_arg;
    
    int32 ret_val;

    int32 retry_cnt = 0;    
4137940a:	b23e      	lw	v0,41379500 <.L35+0x82>
        
    print_log("enter ber_test !");
4137940c:	0c28      	la	a0,413794ac <.L35+0x2e>
4137940e:	ea40      	jalr	v0
41379410:	d304      	sw	v1,16(sp)
41379412:	1035      	b	4137947e <.L35>
41379414:	6d00      	li	a1,0

    ber_arg = (ber_test_arg_t *)arg_buffer;

retry:
    /** 启动SUT的tx pkt发送
    */
    if(_ber_test_start_att(ber_arg) == FALSE)
    {
        print_log("ber_test start fail !");
        ret_val = FALSE;
        goto ber_test_end;
    }

    sys_mdelay(20);
41379416:	b13c      	lw	s1,41379504 <.L35+0x86>
41379418:	6c14      	li	a0,20
4137941a:	67c5      	move	a2,a1
4137941c:	e940      	jalr	s1
4137941e:	6f1d      	li	a3,29
41379420:	19a2 e49e 	jal	41379278 <_ber_test_init>

    /** 蓝牙和变量初始化
    */
    if(_ber_test_init(ber_arg) == FALSE)
41379424:	940a      	lw	a0,40(sp)
41379426:	6702      	move	s0,v0
41379428:	2234      	beqz	v0,41379492 <.L35+0x14>
4137942a:	b036      	lw	s0,41379500 <.L35+0x82>
    {
        print_log("ber_test init fail !");
        ret_val = FALSE;
        goto ber_test_end;
    }  

    print_log("ber att start!");
4137942c:	0c25      	la	a0,413794c0 <.L35+0x42>
4137942e:	e8c0      	jalrc	s0
41379430:	6d00      	li	a1,0

    sys_mdelay(20);
41379432:	67c5      	move	a2,a1
41379434:	6c14      	li	a0,20
41379436:	e940      	jalr	s1
41379438:	6f1d      	li	a3,29
4137943a:	1962 e545 	jal	412f9514 <ber_test_loop_deal>
    
    ret_val = ber_test_loop_deal(ber_arg);
4137943e:	940a      	lw	a0,40(sp)
41379440:	9504      	lw	a1,16(sp)

    retry_cnt++;
41379442:	6722      	move	s1,v0
41379444:	4581      	addiu	a0,a1,1
41379446:	d404      	sw	a0,16(sp)

41379448 <.L37>:
41379448:	940a      	lw	a0,40(sp)

    ber_test_end:
    /** finish test
    */
    _ber_test_stop_att(ber_arg, ret_val);
4137944a:	19a2 e454 	jal	41379150 <_ber_test_stop_att>
4137944e:	67b1      	move	a1,s1
41379450:	6c0c      	li	a0,12
    
    if(sys_get_drv_install_info(DRV_GROUP_BT) > 0)
41379452:	6d00      	li	a1,0
41379454:	b02c      	lw	s0,41379504 <.L35+0x86>
41379456:	67c5      	move	a2,a1
41379458:	e840      	jalr	s0
4137945a:	67e4      	move	a3,a0
4137945c:	5201      	slti	v0,1
4137945e:	610b      	btnez	41379476 <.L37+0x2e>
41379460:	6c00      	li	a0,0
    {        
        bt_drv_controller_poweroff();
41379462:	b22a      	lw	v0,41379508 <.L35+0x8a>
41379464:	67a4      	move	a1,a0
41379466:	67c4      	move	a2,a0
41379468:	ea40      	jalr	v0
4137946a:	6f05      	li	a3,5
4137946c:	6d00      	li	a1,0
        
        sys_drv_uninstall(DRV_GROUP_BT);
4137946e:	6c0c      	li	a0,12
41379470:	67c5      	move	a2,a1
41379472:	e840      	jalr	s0
41379474:	6f0b      	li	a3,11
41379476:	9604      	lw	a2,16(sp)
    }     

    if(retry_cnt < 3 && ret_val == FALSE)
41379478:	5603      	slti	a2,3
4137947a:	6010      	bteqz	4137949c <.L35+0x1e>
4137947c:	290f      	bnez	s1,4137949c <.L35+0x1e>

4137947e <.L35>:
4137947e:	19a2 e476 	jal	413791d8 <_ber_test_start_att>
41379482:	940a      	lw	a0,40(sp)
41379484:	6702      	move	s0,v0
41379486:	0c13      	la	a0,413794d0 <.L35+0x52>
41379488:	2ac5      	bnez	v0,41379414 <act_test_ber_test+0x10>
4137948a:	b11e      	lw	s1,41379500 <.L35+0x82>
4137948c:	e9c0      	jalrc	s1
4137948e:	6730      	move	s1,s0
41379490:	17db      	b	41379448 <.L37>
41379492:	b11c      	lw	s1,41379500 <.L35+0x82>
41379494:	0c15      	la	a0,413794e8 <.L35+0x6a>
41379496:	e9c0      	jalrc	s1
41379498:	6730      	move	s1,s0
4137949a:	17d6      	b	41379448 <.L37>
4137949c:	940a      	lw	a0,40(sp)
    {               
        goto retry;
    } 
   
    _ber_test_report_result(ber_arg, ret_val);
4137949e:	67b1      	move	a1,s1
413794a0:	19a2 e400 	jal	41379000 <_ber_test_report_result>
413794a4:	ed11      	zeb	a1
413794a6:	6a00      	li	v0,0
    
    return TEST_PASS;
}
413794a8:	6475      	restore	40,ra,s0-s1
413794aa:	e8a0      	jrc	ra
413794ac:	6e65      	li	a2,101
413794ae:	6574      	move	s3,a0
413794b0:	2072      	beqz	s0,41379596 <.L45+0x6>
413794b2:	6562      	move	v1,v0
413794b4:	5f72      	sltiu	a3,114
413794b6:	6574      	move	s3,a0
413794b8:	7473      	cmpi	a0,115
413794ba:	2120      	beqz	s1,413794fc <.L35+0x7e>
413794bc:	0000      	addiu	s0,sp,0
413794be:	0000      	addiu	s0,sp,0
413794c0:	6562      	move	v1,v0
413794c2:	2072      	beqz	s0,413795a8 <.L45+0x18>
413794c4:	7461      	cmpi	a0,97
413794c6:	2074      	beqz	s0,413795b0 <.L45+0x20>
413794c8:	7473      	cmpi	a0,115
413794ca:	7261      	cmpi	v0,97
413794cc:	2174      	beqz	s1,413795b6 <.L45+0x26>
413794ce:	0000      	addiu	s0,sp,0
413794d0:	6562      	move	v1,v0
413794d2:	5f72      	sltiu	a3,114
413794d4:	6574      	move	s3,a0
413794d6:	7473      	cmpi	a0,115
413794d8:	7320      	cmpi	v1,32
413794da:	6174      	btnez	413795c4 <.L45+0x34>
413794dc:	7472      	cmpi	a0,114
413794de:	6620      	0x6620
413794e0:	6961      	li	s1,97
413794e2:	206c      	beqz	s0,413795bc <.L45+0x2c>
413794e4:	0021      	addiu	s0,sp,132
413794e6:	0000      	addiu	s0,sp,0
413794e8:	6562      	move	v1,v0
413794ea:	5f72      	sltiu	a3,114
413794ec:	6574      	move	s3,a0
413794ee:	7473      	cmpi	a0,115
413794f0:	6920      	li	s1,32
413794f2:	696e      	li	s1,110
413794f4:	2074      	beqz	s0,413795de <bt_drv_name+0x6>
413794f6:	6166      	btnez	413795c4 <.L45+0x34>
413794f8:	6c69      	li	a0,105
413794fa:	2120      	beqz	s1,4137953c <act_test_rssi_test+0x30>
413794fc:	0000      	addiu	s0,sp,0
413794fe:	0000      	addiu	s0,sp,0
41379500:	9b59      	lw	v0,100(v1)
41379502:	41cf      	addiu	a2,s1,-1
41379504:	88dd      	lh	a2,58(s0)
41379506:	bfc3      	lwu	a2,12(a3)
41379508:	8fd5      	lh	a2,42(a3)
4137950a:	bfc3      	lwu	a2,12(a3)

4137950c <act_test_rssi_test>:
4137950c:	f004 64f5 	save	a0,40,ra,s0-s1


/** 
 功能: 测试蓝牙的灵敏度
 参数: arg_buffer  编辑工具配置的参数信息 
 返回: 测试结果
 说明: 1. 使用Golden sample不能正确测试灵敏度;
       2. 这个函数测试的实际上不是灵敏度,而是灵敏度相关的可用于一致性参考的值;
*/
test_result_e act_test_rssi_test(void *arg_buffer)
{
41379510:	6b00      	li	v1,0
    ber_test_arg_t *ber_arg;
    
    int32 ret_val;

    int32 retry_cnt = 0;
41379512:	b42a      	lw	a0,413795b8 <.L45+0x28>
        
    print_log("enter ber_test !");
41379514:	b22a      	lw	v0,413795bc <.L45+0x2c>
41379516:	ea40      	jalr	v0
41379518:	d304      	sw	v1,16(sp)
4137951a:	103a      	b	41379590 <.L45>
4137951c:	6d00      	li	a1,0

    ber_arg = (ber_test_arg_t *)arg_buffer;

retry:
    /** 启动SUT的tx pkt发送
    */
    if(_ber_test_start_att(ber_arg) == FALSE)
    {
        print_log("ber_test start fail !");
        ret_val = FALSE;
        goto ber_test_end;
    }

    sys_mdelay(20);
4137951e:	b12a      	lw	s1,413795c4 <.L45+0x34>
41379520:	6c14      	li	a0,20
41379522:	67c5      	move	a2,a1
41379524:	e940      	jalr	s1
41379526:	6f1d      	li	a3,29
41379528:	19a2 e49e 	jal	41379278 <_ber_test_init>

    /** 蓝牙和变量初始化
    */
    if(_ber_test_init(ber_arg) == FALSE)
4137952c:	940a      	lw	a0,40(sp)
4137952e:	6702      	move	s0,v0
41379530:	2239      	beqz	v0,413795a4 <.L45+0x14>
41379532:	b427      	lw	a0,413795cc <.L45+0x3c>
    {
        print_log("ber_test init fail !");
        ret_val = FALSE;
        goto ber_test_end;
    }   

    print_log("ber att start!");
41379534:	b222      	lw	v0,413795bc <.L45+0x2c>
41379536:	eac0      	jalrc	v0
41379538:	6d00      	li	a1,0

    sys_mdelay(20);
4137953a:	67c5      	move	a2,a1
4137953c:	6c14      	li	a0,20
4137953e:	e940      	jalr	s1
41379540:	6f1d      	li	a3,29
41379542:	b024      	lw	s0,413795d0 <.L45+0x40>

    g_ber_control->rssi_test = TRUE;
41379544:	6f01      	li	a3,1
41379546:	98c0      	lw	a2,0(s0)
41379548:	f0a0 c6e7 	sb	a3,167(a2)
4137954c:	1962 e545 	jal	412f9514 <ber_test_loop_deal>

    ret_val = ber_test_loop_deal(ber_arg);
41379550:	940a      	lw	a0,40(sp)
41379552:	9504      	lw	a1,16(sp)

    retry_cnt++;
41379554:	6722      	move	s1,v0
41379556:	4581      	addiu	a0,a1,1
41379558:	d404      	sw	a0,16(sp)

4137955a <.L47>:
4137955a:	940a      	lw	a0,40(sp)

    ber_test_end:
    /** finish test
    */
    _ber_test_stop_att(ber_arg, ret_val);
4137955c:	19a2 e454 	jal	41379150 <_ber_test_stop_att>
41379560:	67b1      	move	a1,s1
41379562:	6c0c      	li	a0,12
    
    if(sys_get_drv_install_info(DRV_GROUP_BT) > 0)
41379564:	6d00      	li	a1,0
41379566:	b018      	lw	s0,413795c4 <.L45+0x34>
41379568:	67c5      	move	a2,a1
4137956a:	e840      	jalr	s0
4137956c:	67e4      	move	a3,a0
4137956e:	5201      	slti	v0,1
41379570:	610b      	btnez	41379588 <.L47+0x2e>
41379572:	6c00      	li	a0,0
    {    
        bt_drv_controller_poweroff();
41379574:	b218      	lw	v0,413795d4 <.L45+0x44>
41379576:	67a4      	move	a1,a0
41379578:	67c4      	move	a2,a0
4137957a:	ea40      	jalr	v0
4137957c:	6f05      	li	a3,5
4137957e:	6d00      	li	a1,0
        
        sys_drv_uninstall(DRV_GROUP_BT);
41379580:	6c0c      	li	a0,12
41379582:	67c5      	move	a2,a1
41379584:	e840      	jalr	s0
41379586:	6f0b      	li	a3,11
41379588:	9304      	lw	v1,16(sp)
    }     

    if(retry_cnt < 3 && ret_val == FALSE)
4137958a:	5303      	slti	v1,3
4137958c:	600d      	bteqz	413795a8 <.L45+0x18>
4137958e:	290c      	bnez	s1,413795a8 <.L45+0x18>

41379590 <.L45>:
41379590:	19a2 e476 	jal	413791d8 <_ber_test_start_att>
41379594:	940a      	lw	a0,40(sp)
41379596:	6702      	move	s0,v0
41379598:	2ac1      	bnez	v0,4137951c <act_test_rssi_test+0x10>
4137959a:	b40a      	lw	a0,413795c0 <.L45+0x30>
4137959c:	b108      	lw	s1,413795bc <.L45+0x2c>
4137959e:	e9c0      	jalrc	s1
413795a0:	6730      	move	s1,s0
413795a2:	17db      	b	4137955a <.L47>
413795a4:	b409      	lw	a0,413795c8 <.L45+0x38>
413795a6:	17fa      	b	4137959c <.L45+0xc>
413795a8:	940a      	lw	a0,40(sp)
    {               
        goto retry;
    }  

    _ber_test_report_result(ber_arg, ret_val);
413795aa:	67b1      	move	a1,s1
413795ac:	19a2 e400 	jal	41379000 <_ber_test_report_result>
413795b0:	ed11      	zeb	a1
413795b2:	6a00      	li	v0,0
    
    return TEST_PASS;
}
413795b4:	6475      	restore	40,ra,s0-s1
413795b6:	e8a0      	jrc	ra
413795b8:	94ac      	lw	a0,688(sp)
413795ba:	4137      	daddiu	s1,s1,7
413795bc:	9b59      	lw	v0,100(v1)
413795be:	41cf      	addiu	a2,s1,-1
413795c0:	94d0      	lw	a0,832(sp)
413795c2:	4137      	daddiu	s1,s1,7
413795c4:	88dd      	lh	a2,58(s0)
413795c6:	bfc3      	lwu	a2,12(a3)
413795c8:	94e8      	lw	a0,928(sp)
413795ca:	4137      	daddiu	s1,s1,7
413795cc:	94c0      	lw	a0,768(sp)
413795ce:	4137      	daddiu	s1,s1,7
413795d0:	8fcc      	lh	a2,24(a3)
413795d2:	bfc3      	lwu	a2,12(a3)
413795d4:	8fd5      	lh	a2,42(a3)
413795d6:	bfc3      	lwu	a2,12(a3)

413795d8 <bt_drv_name>:
413795d8:	7462 635f 7274 2e6c 7264 0076 0000 0000     bt_ctrl.drv.....
	...
Disassembly of section BANK_CONTROL_1_14:

413b9000 <DoBitRev>:
413b9000:	64b1      	save	8,s0-s1
 * \note
 * \li   结果保存在全局变量BitRev数组中
 *******************************************************************************/
LEN_TYPE DoBitRev(LEN_TYPE N, LEN_TYPE L)
{
413b9002:	f7c0 33a2 	srl	v1,a1,31
    LEN_TYPE Temp1, Temp2;
    LEN_TYPE i;
    for (i = 0; i < (L / 2); i++)
413b9006:	e569      	addu	v0,a1,v1
413b9008:	6900      	li	s1,0
413b900a:	3247      	sra	v0,1
413b900c:	e942      	slt	s1,v0
413b900e:	601d      	bteqz	413b904a <DoBitRev+0x4a>
413b9010:	653a      	move	t9,v0
413b9012:	45af      	addiu	a1,a1,-1
413b9014:	6e01      	li	a2,1
    {
        Temp1 = 0;
        Temp2 = 0;
        if ((N & (1 << i)) != 0)
413b9016:	e9c4      	sllv	a2,s1
413b9018:	6746      	move	v0,a2
413b901a:	6f00      	li	a3,0
413b901c:	ea8c      	and	v0,a0
413b901e:	6707      	move	s0,a3
413b9020:	2201      	beqz	v0,413b9024 <DoBitRev+0x24>
413b9022:	47e1      	addiu	a3,a3,1
        {
            Temp1 = 1;
413b9024:	6b01      	li	v1,1
        }
        
        if ((N & (1 << (L - 1 - i))) != 0)
413b9026:	ed64      	sllv	v1,a1
413b9028:	6743      	move	v0,v1
413b902a:	ea8c      	and	v0,a0
413b902c:	2201      	beqz	v0,413b9030 <DoBitRev+0x30>
413b902e:	6801      	li	s0,1
        {
            Temp2 = 1;
413b9030:	eacf      	not	v0,a2
        }
        
        N &= ~(1 << i);
413b9032:	ec4c      	and	a0,v0
413b9034:	ea6f      	not	v0,v1
        N &= ~(1 << (L - 1 - i));
413b9036:	e904      	sllv	s0,s1
        N |= (Temp2 << i);
413b9038:	ec4c      	and	a0,v0
413b903a:	4121      	addiu	s1,s1,1
413b903c:	67d9      	move	a2,t9
413b903e:	ede4      	sllv	a3,a1
        N |= (Temp1 << (L - 1 - i));
413b9040:	ec0d      	or	a0,s0
413b9042:	e9c2      	slt	s1,a2
413b9044:	eced      	or	a0,a3
413b9046:	45af      	addiu	a1,a1,-1
413b9048:	61e5      	btnez	413b9014 <DoBitRev+0x14>
413b904a:	6744      	move	v0,a0
    }
    return N;
}
413b904c:	6431      	restore	8,s0-s1
413b904e:	e8a0      	jrc	ra

413b9050 <InitBitRev>:
413b9050:	64f4      	save	32,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *   初始化位倒置值数组，供FFT运算时查表用
 * \param[in]  none
 * \param[out] none  
 * \return     none
 * \par
 * \note
 * \li   结果保存在全局变量BitRev数组中
 *******************************************************************************/
void InitBitRev(void)
{
413b9052:	b107      	lw	s1,413b906c <InitBitRev+0x1c>
413b9054:	6800      	li	s0,0
    LEN_TYPE i;
    for (i = 0; i < LENGTH; i++) //求位反转
413b9056:	6790      	move	a0,s0
    {
        BitRev[i] = DoBitRev(i, bL);
413b9058:	6d07      	li	a1,7
413b905a:	19c2 e400 	jal	413b9000 <DoBitRev>
413b905e:	4001      	addiu	s0,s0,1
413b9060:	5080      	slti	s0,128
413b9062:	d940      	sw	v0,0(s1)
413b9064:	4124      	addiu	s1,s1,4
413b9066:	61f7      	btnez	413b9056 <InitBitRev+0x6>
413b9068:	6474      	restore	32,ra,s0-s1
413b906a:	e8a0      	jrc	ra
413b906c:	4804      	addiu	s0,4
413b906e:	419e      	daddiu	a0,s1,-2

413b9070 <FftInput>:
413b9070:	64a1      	save	8,s0
    }
}

/******************************************************************************/
/*!
 * \par  Description:
 *   对输入数据进行倒序处理
 * \param[in]  pIn 输入数据的缓冲区
 * \param[out] pIn 输入数据的缓冲区  
 * \return     none
 * \par
 * \note
 * \li   在调用FftExe之前应该调用该函数对数据进行倒序处理
 *******************************************************************************/
void FftInput(IN_TYPE *pIn)
{
413b9072:	b70b      	lw	a3,413b909c <FftInput+0x2c>
413b9074:	6704      	move	s0,a0
413b9076:	6e00      	li	a2,0
    LEN_TYPE i;
    IN_TYPE Temp;
    for (i = 0; i < LENGTH; i++)
413b9078:	67a4      	move	a1,a0
413b907a:	9f60      	lw	v1,0(a3)
    {
        if (BitRev[i] > i) //如果倒位序比原序大，则交换
413b907c:	ee62      	slt	a2,v1
413b907e:	6006      	bteqz	413b908c <FftInput+0x1c>
413b9080:	3364      	sll	v1,1
        {
            Temp = pIn[i];
            pIn[i] = pIn[BitRev[i]];
413b9082:	e30d      	addu	v1,s0
413b9084:	8d40      	lh	v0,0(a1)
413b9086:	ab80      	lhu	a0,0(v1)
413b9088:	cd80      	sh	a0,0(a1)
413b908a:	cb40      	sh	v0,0(v1)
            pIn[BitRev[i]] = Temp;
413b908c:	46c1      	addiu	a2,a2,1
413b908e:	5680      	slti	a2,128
413b9090:	47e4      	addiu	a3,a3,4
413b9092:	45a2      	addiu	a1,a1,2
413b9094:	61f2      	btnez	413b907a <FftInput+0xa>
413b9096:	6421      	restore	8,s0
413b9098:	e8a0      	jrc	ra
413b909a:	0000      	addiu	s0,sp,0
413b909c:	4804      	addiu	s0,4
413b909e:	419e      	daddiu	a0,s1,-2

413b90a0 <FftExe>:
413b90a0:	f00c 64b5 	save	a0-a2,40,s0-s1
        }
    }
}

/******************************************************************************/
/*!
 * \par  Description:
 *   进行FFT运算
 * \param[in]  pIn 输入数据的缓冲区
 * \param[out] pRe 保存实部的缓冲区 
 * \param[out] pIm 保存虚部的缓冲区  
 * \return     none
 * \par
 * \note
 * \li   在调用该函数之前应该调用FftInput函数对数据进行倒序处理
 *******************************************************************************/
void FftExe(IN_TYPE *pIn, OUT_TYPE *pRe, OUT_TYPE *pIm)
{
413b90a4:	6800      	li	s0,0
    LEN_TYPE i, j;
    LEN_TYPE BlockSize;
    OUT_TYPE tr, ti;
    LEN_TYPE OffSet1, OffSet2;

#ifdef USE_TABLE
    LEN_TYPE OffSet0;
#endif

    long c, s;

    //先计算2点的
    for (j = 0; j < LENGTH; j += 2)
413b90a6:	6730      	move	s1,s0
413b90a8:	67e4      	move	a3,a0
413b90aa:	930b      	lw	v1,44(sp)
    {
        tr = pIn[j + 1];
        pRe[j + 1] = (pIn[j] - tr);
413b90ac:	3408      	sll	a0,s0,2
413b90ae:	e475      	addu	a1,a0,v1
413b90b0:	8fc1      	lh	a2,2(a3)
413b90b2:	8f60      	lh	v1,0(a3)
413b90b4:	4002      	addiu	s0,s0,2
413b90b6:	e3cb      	subu	v0,v1,a2
413b90b8:	dd41      	sw	v0,4(a1)
413b90ba:	920c      	lw	v0,48(sp)
        pIm[j + 1] = 0;
413b90bc:	e3cd      	addu	v1,a2
        pRe[j] = (pIn[j] + tr);
413b90be:	e451      	addu	a0,v0
413b90c0:	5080      	slti	s0,128
413b90c2:	dc21      	sw	s1,4(a0)
413b90c4:	47e4      	addiu	a3,a3,4
413b90c6:	dd60      	sw	v1,0(a1)
413b90c8:	dc20      	sw	s1,0(a0)
        pIm[j] = 0;
413b90ca:	61ef      	btnez	413b90aa <FftExe+0xa>
413b90cc:	6f04      	li	a3,4
    }

    for (BlockSize = 4; BlockSize <= LENGTH; BlockSize <<= 1) //再一层层计算
413b90ce:	d701      	sw	a3,4(sp)
413b90d0:	9601      	lw	a2,4(sp)
413b90d2:	9101      	lw	s1,4(sp)
413b90d4:	6c00      	li	a0,0
    {
        for (j = 0; j < LENGTH; j += BlockSize)
413b90d6:	f7c0 35c2 	srl	a1,a2,31
413b90da:	3127      	sra	s1,1
413b90dc:	d405      	sw	a0,20(sp)
413b90de:	d503      	sw	a1,12(sp)
413b90e0:	d104      	sw	s1,16(sp)
413b90e2:	6d00      	li	a1,0
        {
            for (i = 0; i < (BlockSize / 2); i++)
413b90e4:	d500      	sw	a1,0(sp)
413b90e6:	9701      	lw	a3,4(sp)
413b90e8:	9300      	lw	v1,0(sp)
413b90ea:	32e7      	sra	v0,a3,1
413b90ec:	eb42      	slt	v1,v0
413b90ee:	6059      	bteqz	413b91a2 <FftExe+0x102>
413b90f0:	9605      	lw	a2,20(sp)
413b90f2:	9004      	lw	s0,16(sp)
413b90f4:	37c8      	sll	a3,a2,2
413b90f6:	e611      	addu	a0,a2,s0
413b90f8:	3088      	sll	s0,a0,2
413b90fa:	1026      	b	413b9148 <FftExe+0xa8>
413b90fc:	9306      	lw	v1,24(sp)
            {
#ifndef USE_TABLE
                c=(long)(1024*cos(2*PI*i/BlockSize));
                s=(long)(1024*sin(2*PI*i/BlockSize));
#else
                OffSet0 = LENGTH / BlockSize * i;
                c = COS_TABLE[OffSet0];
                s = SIN_TABLE[OffSet0];
#endif

                OffSet1 = i + j;
                OffSet2 = OffSet1 + BlockSize / 2;
                tr = (OUT_TYPE)((c * pRe[OffSet2] + s * pIm[OffSet2]) / 1024);
                ti = (OUT_TYPE)((c * pIm[OffSet2] - s * pRe[OffSet2]) / 1024);
413b90fe:	3143      	sra	s1,v0,8
413b9100:	ebd8      	mult	v1,a2
413b9102:	312b      	sra	s1,2
413b9104:	ee12      	mflo	a2
413b9106:	ecb8      	mult	a0,a1
413b9108:	ec12      	mflo	a0
413b910a:	e697      	subu	a1,a2,a0
413b910c:	5500      	slti	a1,0
413b910e:	6146      	btnez	413b919c <FftExe+0xfc>
413b9110:	930b      	lw	v1,44(sp)
#ifdef UNITARY  //如果要对结果归一化处理，则每次运算要除以2
                pRe[OffSet2]=(pRe[OffSet1]-tr)/2;
                pIm[OffSet2]=(pIm[OffSet1]-ti)/2;
                pRe[OffSet1]=(pRe[OffSet1]+tr)/2;
                pIm[OffSet1]=(pIm[OffSet1]+ti)/2;
#else
                pRe[OffSet2] = (pRe[OffSet1] - tr);
413b9112:	35a3      	sra	a1,8
413b9114:	e771      	addu	a0,a3,v1
413b9116:	9c40      	lw	v0,0(a0)
413b9118:	6779      	move	v1,t9
413b911a:	e23b      	subu	a2,v0,s1
413b911c:	920c      	lw	v0,48(sp)
                pIm[OffSet2] = (pIm[OffSet1] - ti);
413b911e:	dbc0      	sw	a2,0(v1)
413b9120:	e74d      	addu	v1,a3,v0
413b9122:	9bc0      	lw	a2,0(v1)
413b9124:	35ab      	sra	a1,2
413b9126:	e6ab      	subu	v0,a2,a1
413b9128:	9602      	lw	a2,8(sp)
413b912a:	47e4      	addiu	a3,a3,4
413b912c:	de40      	sw	v0,0(a2)
413b912e:	9cc0      	lw	a2,0(a0)
                pRe[OffSet1] = (pRe[OffSet1] + tr);
413b9130:	4004      	addiu	s0,s0,4
413b9132:	e629      	addu	v0,a2,s1
413b9134:	dc40      	sw	v0,0(a0)
413b9136:	9bc0      	lw	a2,0(v1)
                pIm[OffSet1] = (pIm[OffSet1] + ti);
413b9138:	9200      	lw	v0,0(sp)
413b913a:	e6b1      	addu	a0,a2,a1
413b913c:	9504      	lw	a1,16(sp)
413b913e:	4221      	addiu	s1,v0,1
413b9140:	e9a2      	slt	s1,a1
413b9142:	db80      	sw	a0,0(v1)
413b9144:	d100      	sw	s1,0(sp)
413b9146:	602d      	bteqz	413b91a2 <FftExe+0x102>
413b9148:	9101      	lw	s1,4(sp)
413b914a:	6a80      	li	v0,128
413b914c:	ea3a      	div	zero,v0,s1
413b914e:	9300      	lw	v1,0(sp)
413b9150:	b61b      	lw	a2,413b91bc <FftExe+0x11c>
413b9152:	b11c      	lw	s1,413b91c0 <FftExe+0x120>
413b9154:	ed12      	mflo	a1
413b9156:	ed78      	mult	a1,v1
413b9158:	ec12      	mflo	a0
413b915a:	3584      	sll	a1,a0,1
413b915c:	940b      	lw	a0,44(sp)
413b915e:	e5c9      	addu	v0,a1,a2
413b9160:	e52d      	addu	v1,a1,s1
413b9162:	8ac0      	lh	a2,0(v0)
413b9164:	910c      	lw	s1,48(sp)
413b9166:	e089      	addu	v0,s0,a0
413b9168:	9a80      	lw	a0,0(v0)
413b916a:	8ba0      	lh	a1,0(v1)
413b916c:	e02d      	addu	v1,s0,s1
413b916e:	9b20      	lw	s1,0(v1)
413b9170:	ecd8      	mult	a0,a2
413b9172:	653a      	move	t9,v0
413b9174:	ea12      	mflo	v0
413b9176:	e9b8      	mult	s1,a1
413b9178:	d106      	sw	s1,24(sp)
413b917a:	e912      	mflo	s1
413b917c:	d302      	sw	v1,8(sp)
413b917e:	e229      	addu	v0,s1
413b9180:	5200      	slti	v0,0
413b9182:	60bc      	bteqz	413b90fc <FftExe+0x5c>
413b9184:	9306      	lw	v1,24(sp)
413b9186:	f3e0 4a1f 	addiu	v0,1023
413b918a:	ebd8      	mult	v1,a2
413b918c:	3143      	sra	s1,v0,8
413b918e:	ee12      	mflo	a2
413b9190:	ecb8      	mult	a0,a1
413b9192:	312b      	sra	s1,2
413b9194:	ec12      	mflo	a0
413b9196:	e697      	subu	a1,a2,a0
413b9198:	5500      	slti	a1,0
413b919a:	60ba      	bteqz	413b9110 <FftExe+0x70>
413b919c:	f3e0 4d1f 	addiu	a1,1023
413b91a0:	17b7      	b	413b9110 <FftExe+0x70>
413b91a2:	9605      	lw	a2,20(sp)
413b91a4:	9401      	lw	a0,4(sp)
413b91a6:	e69d      	addu	a3,a2,a0
413b91a8:	5780      	slti	a3,128
413b91aa:	d705      	sw	a3,20(sp)
413b91ac:	619a      	btnez	413b90e2 <FftExe+0x42>
413b91ae:	3484      	sll	a0,1
413b91b0:	5481      	slti	a0,129
413b91b2:	d401      	sw	a0,4(sp)
413b91b4:	618d      	btnez	413b90d0 <FftExe+0x30>
413b91b6:	6435      	restore	40,s0-s1
413b91b8:	e8a0      	jrc	ra
413b91ba:	0000      	addiu	s0,sp,0
413b91bc:	4e84      	addiu	a2,-124
413b91be:	419e      	daddiu	a0,s1,-2
413b91c0:	4e04      	addiu	a2,4
413b91c2:	419e      	daddiu	a0,s1,-2

413b91c4 <sqrt_fixed>:
413b91c4:	b506      	lw	a1,413b91dc <sqrt_fixed+0x18>
#endif
            }
        }
    }
#ifdef UNITARY
    pRe[0]/=2;
    pIm[0]/=2;
#endif
}

/*****************************************/    
/*Function: 开根号处理                                */    
/*入口参数：被开方数，32位整型           */    
/*出口参数：开方结果，16位整型           */    
/****************************************/    
unsigned int sqrt_fixed(unsigned long a)   
{   
    unsigned long i,c;   
    unsigned long b = 0;   
    for(i = 0x40000000; i != 0; i >>= 2)   
413b91c6:	6a00      	li	v0,0
413b91c8:	e54d      	addu	v1,a1,v0
    {   
        c = i + b;   
413b91ca:	ec63      	sltu	a0,v1
        b >>= 1;   
        if(c <= a)   
413b91cc:	3246      	srl	v0,1
413b91ce:	6102      	btnez	413b91d4 <sqrt_fixed+0x10>
413b91d0:	e473      	subu	a0,v1
        {   
            a -= c;   
413b91d2:	e2a9      	addu	v0,a1
            b += i;   
413b91d4:	35aa      	srl	a1,2
413b91d6:	2df8      	bnez	a1,413b91c8 <sqrt_fixed+0x4>
413b91d8:	e8a0      	jrc	ra
        }   
    }   
    return (unsigned int)b;   
}
413b91da:	0000      	addiu	s0,sp,0
413b91dc:	0000      	addiu	s0,sp,0
413b91de:	4000      	addiu	s0,s0,0

413b91e0 <libc_abs>:
413b91e0:	5401      	slti	a0,1

static uint32 libc_abs(int32 value)
{
    if (value > 0)
413b91e2:	6744      	move	v0,a0
    {
        return value;
413b91e4:	6101      	btnez	413b91e8 <libc_abs+0x8>
413b91e6:	e8a0      	jrc	ra
    }
    else
    {
        return (0 - value);
    }
}
413b91e8:	e820      	jr	ra
413b91ea:	ea8b      	neg	v0,a0

413b91ec <mul64>:
413b91ec:	64b1      	save	8,s0-s1

__int64 mul64(__int64 val0, __int64 val1)
{
413b91ee:	ecd9      	multu	a0,a2
    __int64 temp_val = val0 * val1;
413b91f0:	eb10      	mfhi	v1
413b91f2:	ea12      	mflo	v0
413b91f4:	ecf8      	mult	a0,a3
413b91f6:	e912      	mflo	s1
413b91f8:	eeb8      	mult	a2,a1
413b91fa:	e161      	addu	s0,s1,v1
413b91fc:	ec12      	mflo	a0
413b91fe:	e08d      	addu	v1,s0,a0
413b9200:	6431      	restore	8,s0-s1

    return temp_val;
}
413b9202:	e8a0      	jrc	ra

413b9204 <analyse_sound_data>:
413b9204:	f00e 64fe 	save	a0-a3,112,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *   对采集的音频数据进行简单的频谱分析
 * \param[in] pdata 音频数据缓冲区
 * \param[in] sample_rate 采样频率 KHZ 
 * \return    采样序列是否满足频谱特征
 * \par
 * \note
 * \li   要求输入源为固定的1KHZ正弦波，由于无开方运算，不能进行幅值分析，但根据
         实部数据的特征，还是可以大致分析相应的数据特征
 *******************************************************************************/
uint8 analyse_sound_data(IN_TYPE *pdata, uint16 sample_rate, uint32 *p_snr, uint32 *max_point)
{
413b9208:	6724      	move	s1,a0
413b920a:	8c80      	lh	a0,0(a0)
    uint8 i;
    int16 max_value = 0;
    //uint32 *pRe = &Re;   

    uint32 total_value = 0;
    uint32 snr;
    
    uint8 Sig_Max_Point;
    
    __int64 tmp_sum,  tmp1, tmp2,Sig_Max, Noise, Sig;

    int AmpMax; //信号幅度正最大值
    int AmpMin; //信号幅度负最大值    
    
    //计算中心频点位置
    uint8 mean_index = (uint8)(LENGTH / sample_rate);

    AmpMax = pdata[0];
413b920c:	67a4      	move	a1,a0
    AmpMin = pdata[0];
413b920e:	6b00      	li	v1,0

    //找到时域的最大值与最小值
    for (i = 0; i < LENGTH; i++)
413b9210:	3664      	sll	a2,v1,1
    {
        if (AmpMax < pdata[i])
413b9212:	e629      	addu	v0,a2,s1
413b9214:	8a40      	lh	v0,0(v0)
413b9216:	ed42      	slt	a1,v0
413b9218:	6001      	bteqz	413b921c <analyse_sound_data+0x18>
413b921a:	67a2      	move	a1,v0
            AmpMax = pdata[i];
413b921c:	ea82      	slt	v0,a0
        if (AmpMin > pdata[i])
413b921e:	6001      	bteqz	413b9222 <analyse_sound_data+0x1e>
413b9220:	6782      	move	a0,v0
            AmpMin = pdata[i];
413b9222:	4301      	addiu	s0,v1,1
413b9224:	6770      	move	v1,s0
413b9226:	eb11      	zeb	v1
413b9228:	377e      	srl	a3,v1,7
413b922a:	27f2      	beqz	a3,413b9210 <analyse_sound_data+0xc>
413b922c:	18e3 9200 	jal	419e4800 <load_win_data>
    }
    
    load_win_data();
413b9230:	6500      	nop
413b9232:	19c2 e414 	jal	413b9050 <InitBitRev>
          
    //初始化倒序数组
    InitBitRev();
413b9236:	6500      	nop
413b9238:	19c2 e41c 	jal	413b9070 <FftInput>
    
    //倒序序列
    FftInput(pdata); 
413b923c:	6791      	move	a0,s1
413b923e:	b276      	lw	v0,413b9414 <analyse_sound_data+0x210>
    
    //对序列进行fft变换
    FftExe(pdata, Re, Im);   
413b9240:	b676      	lw	a2,413b9418 <analyse_sound_data+0x214>
413b9242:	6791      	move	a0,s1
413b9244:	19c2 e428 	jal	413b90a0 <FftExe>
413b9248:	67a2      	move	a1,v0
413b924a:	6d00      	li	a1,0

    Sig_Max = 0;
413b924c:	6c00      	li	a0,0
413b924e:	6b01      	li	v1,1
    tmp_sum = 0;

    //跳过第一个直流分量，且FFT具有对称特性，分析一半数据
    for (i = 1; i < (LENGTH / 2); i++)
413b9250:	d508      	sw	a1,32(sp)
413b9252:	d409      	sw	a0,36(sp)
413b9254:	d506      	sw	a1,24(sp)
413b9256:	d407      	sw	a0,28(sp)
413b9258:	d316      	sw	v1,88(sp)
413b925a:	9216      	lw	v0,88(sp)
    {        
        Re[i] = libc_abs(Re[i]);
413b925c:	b46e      	lw	a0,413b9414 <analyse_sound_data+0x210>
413b925e:	3048      	sll	s0,v0,2
413b9260:	e095      	addu	a1,s0,a0
413b9262:	9d80      	lw	a0,0(a1)
413b9264:	19c2 e478 	jal	413b91e0 <libc_abs>
413b9268:	d50c      	sw	a1,48(sp)
413b926a:	b76c      	lw	a3,413b9418 <analyse_sound_data+0x214>

        Im[i] = libc_abs(Im[i]);
413b926c:	930c      	lw	v1,48(sp)
413b926e:	e0e1      	addu	s0,a3
413b9270:	9880      	lw	a0,0(s0)
413b9272:	6722      	move	s1,v0
413b9274:	19c2 e478 	jal	413b91e0 <libc_abs>
413b9278:	db40      	sw	v0,0(v1)
413b927a:	f7c0 3723 	sra	a3,s1,31
        
        //libc_print("Re0", Re[i], 2);
        
        //libc_print("Im0", Im[i], 2);

        //注意这里会产生64位的乘法，不能直接用32位乘法，否则数据会出错
        tmp1 = mul64(Re[i], Re[i]);
413b927e:	67d1      	move	a2,s1
413b9280:	6791      	move	a0,s1
413b9282:	67a7      	move	a1,a3
413b9284:	d840      	sw	v0,0(s0)
413b9286:	19c2 e47b 	jal	413b91ec <mul64>
413b928a:	d20d      	sw	v0,52(sp)
413b928c:	960d      	lw	a2,52(sp)
		
		tmp2 = mul64(Im[i], Im[i]);
413b928e:	6702      	move	s0,v0
413b9290:	f7c0 37c3 	sra	a3,a2,31
413b9294:	6786      	move	a0,a2
413b9296:	67a7      	move	a1,a3
413b9298:	19c2 e47b 	jal	413b91ec <mul64>
413b929c:	6723      	move	s1,v1
413b929e:	e051      	addu	a0,s0,v0

		tmp1 += tmp2;
413b92a0:	ec03      	sltu	a0,s0
413b92a2:	e179      	addu	a2,s1,v1
413b92a4:	6738      	move	s1,t8
413b92a6:	9309      	lw	v1,36(sp)
        
        if (Sig_Max < tmp1)
413b92a8:	e1d5      	addu	a1,s1,a2
413b92aa:	eba2      	slt	v1,a1
413b92ac:	6704      	move	s0,a0
413b92ae:	6725      	move	s1,a1
413b92b0:	6105      	btnez	413b92bc <analyse_sound_data+0xb8>
413b92b2:	ed6a      	cmp	a1,v1
413b92b4:	6107      	btnez	413b92c4 <analyse_sound_data+0xc0>
413b92b6:	9608      	lw	a2,32(sp)
413b92b8:	ee83      	sltu	a2,a0
413b92ba:	6004      	bteqz	413b92c4 <analyse_sound_data+0xc0>
413b92bc:	d109      	sw	s1,36(sp)
        {
            Sig_Max = tmp1;
413b92be:	9116      	lw	s1,88(sp)
            Sig_Max_Point = i;
413b92c0:	d008      	sw	s0,32(sp)
413b92c2:	d104      	sw	s1,16(sp)
413b92c4:	9306      	lw	v1,24(sp)
        }   
        
        tmp_sum += tmp1;     
413b92c6:	9006      	lw	s0,24(sp)
413b92c8:	e39d      	addu	a3,v1,a0
413b92ca:	9107      	lw	s1,28(sp)
413b92cc:	ef03      	sltu	a3,s0
413b92ce:	d70e      	sw	a3,56(sp)
413b92d0:	e1b1      	addu	a0,s1,a1
413b92d2:	67d8      	move	a2,t8
413b92d4:	9716      	lw	a3,88(sp)
413b92d6:	e689      	addu	v0,a2,a0
413b92d8:	d20f      	sw	v0,60(sp)
413b92da:	4701      	addiu	s0,a3,1
413b92dc:	e811      	zeb	s0
413b92de:	950e      	lw	a1,56(sp)
413b92e0:	930f      	lw	v1,60(sp)
413b92e2:	5840      	sltiu	s0,64
413b92e4:	d506      	sw	a1,24(sp)
413b92e6:	d307      	sw	v1,28(sp)
413b92e8:	d016      	sw	s0,88(sp)
413b92ea:	61b7      	btnez	413b925a <analyse_sound_data+0x56>
413b92ec:	9504      	lw	a1,16(sp)

        //部分数据打印会出现舍入误差
        //libc_print("Re1", tmp1, 2);

        //libc_print("\n", 0, 0);
    }
    
    libc_print("Sig max point", Sig_Max_Point, 2);
413b92ee:	b14c      	lw	s1,413b941c <analyse_sound_data+0x218>
413b92f0:	6e02      	li	a2,2
413b92f2:	0c44      	la	a0,413b9400 <analyse_sound_data+0x1fc>
413b92f4:	e940      	jalr	s1
413b92f6:	6f4b      	li	a3,75
413b92f8:	9608      	lw	a2,32(sp)
    
   //找到信号能量最大点及索引,只找一半

    Sig = Sig_Max; //最大信号两边各N_sig-1个
413b92fa:	9209      	lw	v0,36(sp)
413b92fc:	6d01      	li	a1,1

    for (i = 1; i < 5; i++)
413b92fe:	d60a      	sw	a2,40(sp)
413b9300:	d20b      	sw	v0,44(sp)
413b9302:	d517      	sw	a1,92(sp)
413b9304:	9317      	lw	v1,92(sp)
    {
        tmp1 = mul64(Re[Sig_Max_Point - i], Re[Sig_Max_Point - i]) + mul64(Im[Sig_Max_Point - i], Im[Sig_Max_Point - i]);
413b9306:	9104      	lw	s1,16(sp)
413b9308:	b643      	lw	a2,413b9414 <analyse_sound_data+0x210>
413b930a:	e173      	subu	a0,s1,v1
413b930c:	3088      	sll	s0,a0,2
413b930e:	e0dd      	addu	a3,s0,a2
413b9310:	9f40      	lw	v0,0(a3)
413b9312:	f7c0 3743 	sra	a3,v0,31
413b9316:	67a7      	move	a1,a3
413b9318:	67c2      	move	a2,v0
413b931a:	19c2 e47b 	jal	413b91ec <mul64>
413b931e:	6782      	move	a0,v0
413b9320:	b53e      	lw	a1,413b9418 <analyse_sound_data+0x214>
413b9322:	d311      	sw	v1,68(sp)
413b9324:	e0a5      	addu	s1,s0,a1
413b9326:	9960      	lw	v1,0(s1)
413b9328:	d210      	sw	v0,64(sp)
413b932a:	f7c0 3763 	sra	a3,v1,31
413b932e:	67a7      	move	a1,a3
413b9330:	67c3      	move	a2,v1
413b9332:	19c2 e47b 	jal	413b91ec <mul64>
413b9336:	6783      	move	a0,v1
413b9338:	9410      	lw	a0,64(sp)
413b933a:	9610      	lw	a2,64(sp)
413b933c:	9711      	lw	a3,68(sp)
413b933e:	e441      	addu	s0,a0,v0
413b9340:	e8c3      	sltu	s0,a2
413b9342:	e769      	addu	v0,a3,v1
413b9344:	9404      	lw	a0,16(sp)
        
        tmp2 = mul64(Re[Sig_Max_Point + i], Re[Sig_Max_Point + i])+ mul64(Im[Sig_Max_Point + i], Im[Sig_Max_Point + i]);
413b9346:	9317      	lw	v1,92(sp)
413b9348:	67b8      	move	a1,t8
413b934a:	e545      	addu	s1,a1,v0
413b934c:	d012      	sw	s0,72(sp)
413b934e:	b632      	lw	a2,413b9414 <analyse_sound_data+0x210>
413b9350:	e461      	addu	s0,a0,v1
413b9352:	d113      	sw	s1,76(sp)
413b9354:	3108      	sll	s1,s0,2
413b9356:	e1dd      	addu	a3,s1,a2
413b9358:	9f40      	lw	v0,0(a3)
413b935a:	f7c0 3743 	sra	a3,v0,31
413b935e:	67a7      	move	a1,a3
413b9360:	67c2      	move	a2,v0
413b9362:	19c2 e47b 	jal	413b91ec <mul64>
413b9366:	6782      	move	a0,v0
413b9368:	b52c      	lw	a1,413b9418 <analyse_sound_data+0x214>
413b936a:	d315      	sw	v1,84(sp)
413b936c:	e1ad      	addu	v1,s1,a1
413b936e:	9b80      	lw	a0,0(v1)
413b9370:	d214      	sw	v0,80(sp)
413b9372:	f7c0 3783 	sra	a3,a0,31
413b9376:	67c4      	move	a2,a0
413b9378:	19c2 e47b 	jal	413b91ec <mul64>
413b937c:	67a7      	move	a1,a3
413b937e:	9714      	lw	a3,80(sp)
413b9380:	9615      	lw	a2,84(sp)
413b9382:	e751      	addu	a0,a3,v0
413b9384:	ece3      	sltu	a0,a3
413b9386:	910a      	lw	s1,40(sp)

        Sig = Sig + tmp1 + tmp2;
413b9388:	9012      	lw	s0,72(sp)
413b938a:	e675      	addu	a1,a2,v1
413b938c:	6758      	move	v0,t8
413b938e:	930b      	lw	v1,44(sp)
413b9390:	e2b5      	addu	a1,v0,a1
413b9392:	9713      	lw	a3,76(sp)
413b9394:	e109      	addu	v0,s1,s0
413b9396:	ea23      	sltu	v0,s1
413b9398:	e3e1      	addu	s0,v1,a3
413b939a:	67d8      	move	a2,t8
413b939c:	9717      	lw	a3,92(sp)
413b939e:	e605      	addu	s1,a2,s0
413b93a0:	e281      	addu	s0,v0,a0
413b93a2:	e843      	sltu	s0,v0
413b93a4:	4781      	addiu	a0,a3,1
413b93a6:	6778      	move	v1,t8
413b93a8:	ec11      	zeb	a0
413b93aa:	e1a9      	addu	v0,s1,a1
413b93ac:	e345      	addu	s1,v1,v0
413b93ae:	5c05      	sltiu	a0,5
413b93b0:	d00a      	sw	s0,40(sp)
413b93b2:	d10b      	sw	s1,44(sp)
413b93b4:	d417      	sw	a0,92(sp)
413b93b6:	61a6      	btnez	413b9304 <analyse_sound_data+0x100>
413b93b8:	930e      	lw	v1,56(sp)
    }

    Noise = tmp_sum - Sig;
413b93ba:	920f      	lw	v0,60(sp)
413b93bc:	e31b      	subu	a2,v1,s0
413b93be:	ebc3      	sltu	v1,a2
413b93c0:	67b8      	move	a1,t8
413b93c2:	e23f      	subu	a3,v0,s1
413b93c4:	e7bf      	subu	a3,a1
413b93c6:	f440 3320 	sll	v1,s1,17

    //libc_print("Sig", Sig, 2);

    //libc_print("Total", tmp_sum, 2);

    //libc_print("Noise", Noise, 2);
    
    snr = (int) ((((int) (Sig >> 15)) / ((int) (Noise >> 10))) << 5);//未取log
413b93ca:	3402      	srl	a0,s0,8
413b93cc:	309e      	srl	s0,a0,7
413b93ce:	f580 32e0 	sll	v0,a3,22
413b93d2:	35c2      	srl	a1,a2,8
413b93d4:	6783      	move	a0,v1
413b93d6:	ec0d      	or	a0,s0
413b93d8:	6762      	move	v1,v0
413b93da:	30aa      	srl	s0,a1,2
413b93dc:	eb0d      	or	v1,s0
413b93de:	ec7a      	div	zero,a0,v1
413b93e0:	b20f      	lw	v0,413b941c <analyse_sound_data+0x218>

    libc_print("SNR", snr, 2);
413b93e2:	0c0c      	la	a0,413b9410 <analyse_sound_data+0x20c>
413b93e4:	6f4b      	li	a3,75
413b93e6:	ee12      	mflo	a2
413b93e8:	30d4      	sll	s0,a2,5
413b93ea:	67b0      	move	a1,s0
413b93ec:	ea40      	jalr	v0
413b93ee:	6e02      	li	a2,2
413b93f0:	9204      	lw	v0,16(sp)

    *p_snr = snr;

    *max_point = Sig_Max_Point;
413b93f2:	971e      	lw	a3,120(sp)
413b93f4:	951f      	lw	a1,124(sp)
413b93f6:	df00      	sw	s0,0(a3)
413b93f8:	dd40      	sw	v0,0(a1)
413b93fa:	6a00      	li	v0,0
    
    return 0;
}
413b93fc:	647e      	restore	112,ra,s0-s1
413b93fe:	e8a0      	jrc	ra
413b9400:	6953      	li	s1,83
413b9402:	2067      	beqz	s0,413b94d2 <thd_test+0x92>
413b9404:	616d      	btnez	413b94e0 <thd_test+0xa0>
413b9406:	2078      	beqz	s0,413b94f8 <thd_test+0xb8>
413b9408:	6f70      	li	a3,112
413b940a:	6e69      	li	a2,105
413b940c:	0074      	addiu	s0,sp,464
413b940e:	0000      	addiu	s0,sp,0
413b9410:	4e53      	addiu	a2,83
413b9412:	0052      	addiu	s0,sp,328
413b9414:	4a04      	addiu	v0,4
413b9416:	419e      	daddiu	a0,s1,-2
413b9418:	4c04      	addiu	a0,4
413b941a:	419e      	daddiu	a0,s1,-2
413b941c:	88dd      	lh	a2,58(s0)
413b941e:	bfc3      	lwu	a2,12(a3)

413b9420 <cal_threadshold>:
413b9420:	b207      	lw	v0,413b943c <cal_threadshold+0x1c>

uint32 cal_threadshold(uint32 threadshold_db)
{
    uint32 i;
    uint32 tmp_val;
    uint32 shift_cnt = threadshold_db / 10;
413b9422:	ec59      	multu	a0,v0
413b9424:	6c01      	li	a0,1

    tmp_val = 1;
413b9426:	eb10      	mfhi	v1
413b9428:	326e      	srl	v0,v1,3
413b942a:	2206      	beqz	v0,413b9438 <cal_threadshold+0x18>
    for(i = 0; i < shift_cnt; i++)
413b942c:	6762      	move	v1,v0
413b942e:	3688      	sll	a2,a0,2
    {
        tmp_val *= 10;
413b9430:	e695      	addu	a1,a2,a0
413b9432:	436f      	addiu	v1,v1,-1
413b9434:	34a4      	sll	a0,a1,1
413b9436:	2bfb      	bnez	v1,413b942e <cal_threadshold+0xe>
413b9438:	e820      	jr	ra
    }

    return tmp_val;
}
413b943a:	6744      	move	v0,a0
413b943c:	cccd      	sh	a2,26(a0)
413b943e:	cccc      	sh	a2,24(a0)

413b9440 <thd_test>:
413b9440:	f004 64f6 	save	a0,48,ra,s0-s1


uint32 thd_test(void *buffer_addr, channel_test_arg_t *channel_test_arg)
{
413b9444:	6a01      	li	v0,1
    int32 i;

    uint32 snr;
    uint32 max_point;

    uint32 ret_val = TRUE;
413b9446:	6725      	move	s1,a1
413b9448:	d206      	sw	v0,24(sp)
413b944a:	6764      	move	v1,a0
413b944c:	6dff      	li	a1,255
413b944e:	ace1      	lhu	a3,2(a0)

    IN_TYPE *p_data_buffer = (IN_TYPE *)buffer_addr;

    //read_temp_file(1, LINEIN_SOUND_DATA_ADDR, SOUND_DATA_LEN);

    //左右声道互换
    for(i = 0; i < (LENGTH * 2); i++)
    {
        p_data_buffer[i + (LENGTH * 2)] = p_data_buffer[i * 2 + 1];
413b9450:	45af      	addiu	a1,a1,-1
413b9452:	f200 cbe0 	sh	a3,512(v1)
413b9456:	acc0      	lhu	a2,0(a0)
        p_data_buffer[i] = p_data_buffer[i * 2];
413b9458:	5500      	slti	a1,0
413b945a:	cbc0      	sh	a2,0(v1)
413b945c:	4484      	addiu	a0,a0,4
413b945e:	4362      	addiu	v1,v1,2
413b9460:	60f6      	bteqz	413b944e <thd_test+0xe>
413b9462:	a160      	lbu	v1,0(s1)
    }   

    if(channel_test_arg->test_left_ch == TRUE)
413b9464:	7301      	cmpi	v1,1
413b9466:	6106      	btnez	413b9474 <thd_test+0x34>
413b9468:	a182      	lbu	a0,2(s1)
    {
        if(channel_test_arg->test_left_ch_SNR == TRUE)
413b946a:	7401      	cmpi	a0,1
413b946c:	600f      	bteqz	413b948c <thd_test+0x4c>
413b946e:	6d00      	li	a1,0
        {
            analyse_sound_data(p_data_buffer, ADC_SAMPLE_RATE, &snr, &max_point);

            if(snr >= cal_threadshold(channel_test_arg->left_ch_SNR_threadshold) 
                && channel_test_arg->left_ch_max_sig_point == max_point)
            {
                ret_val = TRUE;
            }
            else
            {
                ret_val = FALSE;
            }

            channel_test_arg->left_ch_SNR_threadshold = snr;
            channel_test_arg->left_ch_max_sig_point = max_point;

            if(g_test_mode == TEST_MODE_CARD)
            {
                DEBUG_ATT_PRINT("left SNR:", snr, 2);
                DEBUG_ATT_PRINT("left Max Sig Point:", max_point, 2);
            }
        }
        else
        {
            channel_test_arg->left_ch_SNR_threadshold = 0;
413b9470:	d9a3      	sw	a1,12(s1)
413b9472:	c9aa      	sh	a1,20(s1)
            channel_test_arg->left_ch_max_sig_point = 0;
413b9474:	a141      	lbu	v0,1(s1)
        }
    }


    if(channel_test_arg->test_right_ch == TRUE)
413b9476:	7201      	cmpi	v0,1
413b9478:	6106      	btnez	413b9486 <thd_test+0x46>
413b947a:	a1c3      	lbu	a2,3(s1)
    {
        if(channel_test_arg->test_right_ch_SNR == TRUE)
413b947c:	7601      	cmpi	a2,1
413b947e:	602c      	bteqz	413b94d8 <thd_test+0x98>
413b9480:	6d00      	li	a1,0
        {
            analyse_sound_data(&p_data_buffer[(LENGTH * 2)], ADC_SAMPLE_RATE, &snr, &max_point);

            if(snr >= cal_threadshold(channel_test_arg->right_ch_SNR_threadshold) 
                && channel_test_arg->right_ch_max_sig_point == max_point)
            {
                if(ret_val == TRUE)
                {
                    ret_val = TRUE;
                }
            }
            else
            {
                ret_val = FALSE;
            }

            channel_test_arg->right_ch_SNR_threadshold = snr;
            channel_test_arg->right_ch_max_sig_point = max_point;

            if(g_test_mode == TEST_MODE_CARD)
            {
                DEBUG_ATT_PRINT("right SNR:", snr, 2);
                DEBUG_ATT_PRINT("right Max Sig Point:", max_point, 2);
            }            
        }
        else
        {
            channel_test_arg->right_ch_SNR_threadshold = 0;
413b9482:	d9a4      	sw	a1,16(s1)
413b9484:	c9ab      	sh	a1,22(s1)
            channel_test_arg->right_ch_max_sig_point = 0;
413b9486:	9206      	lw	v0,24(sp)
        }   
    }
    
    return ret_val;
}
413b9488:	6476      	restore	48,ra,s0-s1
413b948a:	e8a0      	jrc	ra
413b948c:	940c      	lw	a0,48(sp)
413b948e:	6d10      	li	a1,16
413b9490:	0604      	addiu	a2,sp,16
413b9492:	19c2 e481 	jal	413b9204 <analyse_sound_data>
413b9496:	0705      	addiu	a3,sp,20
413b9498:	19c2 e508 	jal	413b9420 <cal_threadshold>
413b949c:	9983      	lw	a0,12(s1)
413b949e:	9504      	lw	a1,16(sp)
413b94a0:	ed43      	sltu	a1,v0
413b94a2:	6116      	btnez	413b94d0 <thd_test+0x90>
413b94a4:	a94a      	lhu	v0,20(s1)
413b94a6:	9305      	lw	v1,20(sp)
413b94a8:	6e01      	li	a2,1
413b94aa:	ea6e      	xor	v0,v1
413b94ac:	d606      	sw	a2,24(sp)
413b94ae:	2a11      	bnez	v0,413b94d2 <thd_test+0x92>
413b94b0:	b430      	lw	a0,413b9570 <thd_test+0x130>
413b94b2:	d9a3      	sw	a1,12(s1)
413b94b4:	c96a      	sh	v1,20(s1)
413b94b6:	a460      	lbu	v1,0(a0)
413b94b8:	2bdd      	bnez	v1,413b9474 <thd_test+0x34>
413b94ba:	b02f      	lw	s0,413b9574 <thd_test+0x134>
413b94bc:	0c1c      	la	a0,413b952c <thd_test+0xec>
413b94be:	6e02      	li	a2,2
413b94c0:	e840      	jalr	s0
413b94c2:	6f4b      	li	a3,75
413b94c4:	9505      	lw	a1,20(sp)
413b94c6:	0c1d      	la	a0,413b9538 <thd_test+0xf8>
413b94c8:	6e02      	li	a2,2
413b94ca:	e840      	jalr	s0
413b94cc:	6f4b      	li	a3,75
413b94ce:	17d2      	b	413b9474 <thd_test+0x34>
413b94d0:	9305      	lw	v1,20(sp)
413b94d2:	6f00      	li	a3,0
413b94d4:	d706      	sw	a3,24(sp)
413b94d6:	17ec      	b	413b94b0 <thd_test+0x70>
413b94d8:	940c      	lw	a0,48(sp)
413b94da:	6d10      	li	a1,16
413b94dc:	f200 4c00 	addiu	a0,512
413b94e0:	0604      	addiu	a2,sp,16
413b94e2:	19c2 e481 	jal	413b9204 <analyse_sound_data>
413b94e6:	0705      	addiu	a3,sp,20
413b94e8:	19c2 e508 	jal	413b9420 <cal_threadshold>
413b94ec:	9984      	lw	a0,16(s1)
413b94ee:	9504      	lw	a1,16(sp)
413b94f0:	ed43      	sltu	a1,v0
413b94f2:	6118      	btnez	413b9524 <thd_test+0xe4>
413b94f4:	a9eb      	lhu	a3,22(s1)
413b94f6:	9305      	lw	v1,20(sp)
413b94f8:	ef6e      	xor	a3,v1
413b94fa:	2f15      	bnez	a3,413b9526 <thd_test+0xe6>
413b94fc:	9406      	lw	a0,24(sp)
413b94fe:	2402      	beqz	a0,413b9504 <thd_test+0xc4>
413b9500:	6a01      	li	v0,1
413b9502:	d206      	sw	v0,24(sp)
413b9504:	b71b      	lw	a3,413b9570 <thd_test+0x130>
413b9506:	d9a4      	sw	a1,16(s1)
413b9508:	c96b      	sh	v1,22(s1)
413b950a:	a760      	lbu	v1,0(a3)
413b950c:	2bbc      	bnez	v1,413b9486 <thd_test+0x46>
413b950e:	b01a      	lw	s0,413b9574 <thd_test+0x134>
413b9510:	0c0f      	la	a0,413b954c <thd_test+0x10c>
413b9512:	6e02      	li	a2,2
413b9514:	e840      	jalr	s0
413b9516:	6f4b      	li	a3,75
413b9518:	9505      	lw	a1,20(sp)
413b951a:	0c10      	la	a0,413b9558 <thd_test+0x118>
413b951c:	6e02      	li	a2,2
413b951e:	e840      	jalr	s0
413b9520:	6f4b      	li	a3,75
413b9522:	17b1      	b	413b9486 <thd_test+0x46>
413b9524:	9305      	lw	v1,20(sp)
413b9526:	6e00      	li	a2,0
413b9528:	d606      	sw	a2,24(sp)
413b952a:	17ec      	b	413b9504 <thd_test+0xc4>
413b952c:	656c      	move	t3,a0
413b952e:	7466      	cmpi	a0,102
413b9530:	5320      	slti	v1,32
413b9532:	524e      	slti	v0,78
413b9534:	003a      	addiu	s0,sp,232
413b9536:	0000      	addiu	s0,sp,0
413b9538:	656c      	move	t3,a0
413b953a:	7466      	cmpi	a0,102
413b953c:	4d20      	addiu	a1,32
413b953e:	7861      	sd	v1,8(s0)
413b9540:	5320      	slti	v1,32
413b9542:	6769      	move	v1,t1
413b9544:	5020      	slti	s0,32
413b9546:	696f      	li	s1,111
413b9548:	746e      	cmpi	a0,110
413b954a:	003a      	addiu	s0,sp,232
413b954c:	6972      	li	s1,114
413b954e:	6867      	li	s0,103
413b9550:	2074      	beqz	s0,413b963a <thd_test+0x1fa>
413b9552:	4e53      	addiu	a2,83
413b9554:	3a52      	ld	v0,144(v0)
413b9556:	0000      	addiu	s0,sp,0
413b9558:	6972      	li	s1,114
413b955a:	6867      	li	s0,103
413b955c:	2074      	beqz	s0,413b9646 <thd_test+0x206>
413b955e:	614d      	btnez	413b95fa <thd_test+0x1ba>
413b9560:	2078      	beqz	s0,413b9652 <thd_test+0x212>
413b9562:	6953      	li	s1,83
413b9564:	2067      	beqz	s0,413b9634 <thd_test+0x1f4>
413b9566:	6f50      	li	a3,80
413b9568:	6e69      	li	a2,105
413b956a:	3a74      	ld	v1,160(v0)
413b956c:	0000      	addiu	s0,sp,0
413b956e:	0000      	addiu	s0,sp,0
413b9570:	8dc9      	lh	a2,18(a1)
413b9572:	bfc3      	lwu	a2,12(a3)
413b9574:	88dd      	lh	a2,58(s0)
413b9576:	bfc3      	lwu	a2,12(a3)
Disassembly of section BANK_CONTROL_1_39:

419e4800 <load_win_data>:
419e4800:	e8a0      	jrc	ra
419e4802:	6500      	nop

419e4804 <BitRev>:
	...

419e4a04 <Re>:
	...

419e4c04 <Im>:
	...

419e4e04 <SIN_TABLE>:
419e4e04:	0000 0032 0064 0096 00c8 00f9 0129 0159     ..2.d.......).Y.
419e4e14:	0188 01b6 01e3 020e 0239 0262 028a 02b0     ........9.b.....
419e4e24:	02d4 02f7 0318 0336 0353 036e 0387 039e     ......6.S.n.....
419e4e34:	03b2 03c4 03d4 03e1 03ec 03f5 03fb 03ff     ................
419e4e44:	0400 03ff 03fb 03f5 03ec 03e1 03d4 03c4     ................
419e4e54:	03b2 039e 0387 036e 0353 0336 0318 02f7     ......n.S.6.....
419e4e64:	02d4 02b0 028a 0262 0239 020e 01e3 01b6     ......b.9.......
419e4e74:	0188 0159 0129 00f9 00c8 0096 0064 0032     ..Y.).......d.2.

419e4e84 <COS_TABLE>:
419e4e84:	0400 03ff 03fb 03f5 03ec 03e1 03d4 03c4     ................
419e4e94:	03b2 039e 0387 036e 0353 0336 0318 02f7     ......n.S.6.....
419e4ea4:	02d4 02b0 028a 0262 0239 020e 01e3 01b6     ......b.9.......
419e4eb4:	0188 0159 0129 00f9 00c8 0096 0064 0032     ..Y.).......d.2.
419e4ec4:	0000 ffce ff9c ff6a ff38 ff07 fed7 fea7     ......j.8.......
419e4ed4:	fe78 fe4a fe1d fdf2 fdc7 fd9e fd76 fd50     x.J.........v.P.
419e4ee4:	fd2c fd09 fce8 fcca fcad fc92 fc79 fc62     ,...........y.b.
419e4ef4:	fc4e fc3c fc2c fc1f fc14 fc0b fc05 fc01     N.<.,...........
Disassembly of section BANK_CONTROL_1_40:

41a10000 <XYZ_072>:
41a10000:	27bdffd0 	addiu	sp,sp,-48
41a10004:	afb20020 	sw	s2,32(sp)
41a10008:	a0e00000 	sb	zero,0(a3)
41a1000c:	00809021 	move	s2,a0
41a10010:	24840004 	addiu	a0,a0,4
41a10014:	afb40028 	sw	s4,40(sp)
41a10018:	afb30024 	sw	s3,36(sp)
41a1001c:	00c0a021 	move	s4,a2
41a10020:	afb1001c 	sw	s1,28(sp)
41a10024:	afb00018 	sw	s0,24(sp)
41a10028:	00e09821 	move	s3,a3
41a1002c:	afbf002c 	sw	ra,44(sp)
41a10030:	0c6840c5 	jal	41a10314 <XYZ_069>
41a10034:	00a08821 	move	s1,a1
41a10038:	3c03bfc4 	lui	v1,0xbfc4
41a1003c:	247088d5 	addiu	s0,v1,-30507
41a10040:	02802021 	move	a0,s4
41a10044:	02402821 	move	a1,s2
41a10048:	24060128 	li	a2,296
41a1004c:	00003821 	move	a3,zero
41a10050:	1440003f 	bnez	v0,41a10150 <XYZ_072+0x150>
41a10054:	2403000b 	li	v1,11
41a10058:	240f0001 	li	t7,1
41a1005c:	0200f809 	jalr	s0
41a10060:	a26f0000 	sb	t7,0(s3)
41a10064:	240e038a 	li	t6,906
41a10068:	02202021 	move	a0,s1
41a1006c:	2645038a 	addiu	a1,s2,906
41a10070:	24060005 	li	a2,5
41a10074:	00003821 	move	a3,zero
41a10078:	0200f809 	jalr	s0
41a1007c:	afae0010 	sw	t6,16(sp)
41a10080:	8fad0010 	lw	t5,16(sp)
41a10084:	8e240008 	lw	a0,8(s1)
41a10088:	25ac0005 	addiu	t4,t5,5
41a1008c:	00002821 	move	a1,zero
41a10090:	24060020 	li	a2,32
41a10094:	24070001 	li	a3,1
41a10098:	0200f809 	jalr	s0
41a1009c:	afac0010 	sw	t4,16(sp)
41a100a0:	8e24000c 	lw	a0,12(s1)
41a100a4:	00002821 	move	a1,zero
41a100a8:	24060020 	li	a2,32
41a100ac:	0200f809 	jalr	s0
41a100b0:	24070001 	li	a3,1
41a100b4:	8fab0010 	lw	t3,16(sp)
41a100b8:	8e240008 	lw	a0,8(s1)
41a100bc:	024b2821 	addu	a1,s2,t3
41a100c0:	2406001e 	li	a2,30
41a100c4:	0200f809 	jalr	s0
41a100c8:	00003821 	move	a3,zero
41a100cc:	8fa70010 	lw	a3,16(sp)
41a100d0:	8e24000c 	lw	a0,12(s1)
41a100d4:	24ea001e 	addiu	t2,a3,30
41a100d8:	024a2821 	addu	a1,s2,t2
41a100dc:	2406001e 	li	a2,30
41a100e0:	00003821 	move	a3,zero
41a100e4:	0200f809 	jalr	s0
41a100e8:	afaa0010 	sw	t2,16(sp)
41a100ec:	8fa60010 	lw	a2,16(sp)
41a100f0:	26240010 	addiu	a0,s1,16
41a100f4:	24c9001e 	addiu	t1,a2,30
41a100f8:	02492821 	addu	a1,s2,t1
41a100fc:	24060010 	li	a2,16
41a10100:	00003821 	move	a3,zero
41a10104:	0200f809 	jalr	s0
41a10108:	afa90010 	sw	t1,16(sp)
41a1010c:	8fa50010 	lw	a1,16(sp)
41a10110:	26240031 	addiu	a0,s1,49
41a10114:	24a80021 	addiu	t0,a1,33
41a10118:	02482821 	addu	a1,s2,t0
41a1011c:	24060015 	li	a2,21
41a10120:	00003821 	move	a3,zero
41a10124:	0200f809 	jalr	s0
41a10128:	afa80010 	sw	t0,16(sp)
41a1012c:	24020001 	li	v0,1
41a10130:	2684011e 	addiu	a0,s4,286
41a10134:	27a50010 	addiu	a1,sp,16
41a10138:	24060002 	li	a2,2
41a1013c:	24070002 	li	a3,2
41a10140:	0200f809 	jalr	s0
41a10144:	afa20010 	sw	v0,16(sp)
41a10148:	24030018 	li	v1,24
41a1014c:	0002180a 	movz	v1,zero,v0
41a10150:	8fbf002c 	lw	ra,44(sp)
41a10154:	8fb40028 	lw	s4,40(sp)
41a10158:	8fb30024 	lw	s3,36(sp)
41a1015c:	8fb20020 	lw	s2,32(sp)
41a10160:	8fb1001c 	lw	s1,28(sp)
41a10164:	8fb00018 	lw	s0,24(sp)
41a10168:	00601021 	move	v0,v1
41a1016c:	03e00008 	jr	ra
41a10170:	27bd0030 	addiu	sp,sp,48

41a10174 <XYZ_070>:
41a10174:	27bdffd8 	addiu	sp,sp,-40
41a10178:	3c0b6666 	lui	t3,0x6666
41a1017c:	afb20018 	sw	s2,24(sp)
41a10180:	356a6667 	ori	t2,t3,0x6667
41a10184:	7c059620 	seh	s2,a1
41a10188:	024a0018 	mult	s2,t2
41a1018c:	001247c3 	sra	t0,s2,0x1f
41a10190:	00004810 	mfhi	t1
41a10194:	3c03bfc4 	lui	v1,0xbfc4
41a10198:	000938c3 	sra	a3,t1,0x3
41a1019c:	00e82823 	subu	a1,a3,t0
41a101a0:	afb3001c 	sw	s3,28(sp)
41a101a4:	afb10014 	sw	s1,20(sp)
41a101a8:	afb00010 	sw	s0,16(sp)
41a101ac:	afbf0020 	sw	ra,32(sp)
41a101b0:	00c08021 	move	s0,a2
41a101b4:	00809821 	move	s3,a0
41a101b8:	30b100ff 	andi	s1,a1,0xff
41a101bc:	00c02021 	move	a0,a2
41a101c0:	00002821 	move	a1,zero
41a101c4:	24060014 	li	a2,20
41a101c8:	246288d5 	addiu	v0,v1,-30507
41a101cc:	0040f809 	jalr	v0
41a101d0:	24070001 	li	a3,1
41a101d4:	12200015 	beqz	s1,41a1022c <XYZ_070+0xb8>
41a101d8:	00004021 	move	t0,zero
41a101dc:	00086080 	sll	t4,t0,0x2
41a101e0:	01883021 	addu	a2,t4,t0
41a101e4:	00062080 	sll	a0,a2,0x2
41a101e8:	00933821 	addu	a3,a0,s3
41a101ec:	00003021 	move	a2,zero
41a101f0:	00d07021 	addu	t6,a2,s0
41a101f4:	00e61021 	addu	v0,a3,a2
41a101f8:	90590000 	lbu	t9,0(v0)
41a101fc:	91d80000 	lbu	t8,0(t6)
41a10200:	24df0001 	addiu	ra,a2,1
41a10204:	33e600ff 	andi	a2,ra,0xff
41a10208:	03197826 	xor	t7,t8,t9
41a1020c:	2ccd0014 	sltiu	t5,a2,20
41a10210:	15a0fff7 	bnez	t5,41a101f0 <XYZ_070+0x7c>
41a10214:	a1cf0000 	sb	t7,0(t6)
41a10218:	25050001 	addiu	a1,t0,1
41a1021c:	30a800ff 	andi	t0,a1,0xff
41a10220:	0111182b 	sltu	v1,t0,s1
41a10224:	1460ffee 	bnez	v1,41a101e0 <XYZ_070+0x6c>
41a10228:	00086080 	sll	t4,t0,0x2
41a1022c:	00114080 	sll	t0,s1,0x2
41a10230:	01113821 	addu	a3,t0,s1
41a10234:	00071080 	sll	v0,a3,0x2
41a10238:	02428823 	subu	s1,s2,v0
41a1023c:	322800ff 	andi	t0,s1,0xff
41a10240:	1100000c 	beqz	t0,41a10274 <XYZ_070+0x100>
41a10244:	00003021 	move	a2,zero
41a10248:	00533821 	addu	a3,v0,s3
41a1024c:	00d09821 	addu	s3,a2,s0
41a10250:	00e66021 	addu	t4,a3,a2
41a10254:	918b0000 	lbu	t3,0(t4)
41a10258:	926a0000 	lbu	t2,0(s3)
41a1025c:	24c40001 	addiu	a0,a2,1
41a10260:	308600ff 	andi	a2,a0,0xff
41a10264:	014b4826 	xor	t1,t2,t3
41a10268:	00c8902b 	sltu	s2,a2,t0
41a1026c:	1640fff7 	bnez	s2,41a1024c <XYZ_070+0xd8>
41a10270:	a2690000 	sb	t1,0(s3)
41a10274:	00002821 	move	a1,zero
41a10278:	00b06821 	addu	t5,a1,s0
41a1027c:	91af0000 	lbu	t7,0(t5)
41a10280:	24b80001 	addiu	t8,a1,1
41a10284:	330500ff 	andi	a1,t8,0xff
41a10288:	000f7027 	nor	t6,zero,t7
41a1028c:	2ca60014 	sltiu	a2,a1,20
41a10290:	14c0fff9 	bnez	a2,41a10278 <XYZ_070+0x104>
41a10294:	a1ae0000 	sb	t6,0(t5)
41a10298:	8fbf0020 	lw	ra,32(sp)
41a1029c:	8fb3001c 	lw	s3,28(sp)
41a102a0:	8fb20018 	lw	s2,24(sp)
41a102a4:	8fb10014 	lw	s1,20(sp)
41a102a8:	8fb00010 	lw	s0,16(sp)
41a102ac:	03e00008 	jr	ra
41a102b0:	27bd0028 	addiu	sp,sp,40

41a102b4 <XYZ_071>:
41a102b4:	27bdffd0 	addiu	sp,sp,-48
41a102b8:	afb00028 	sw	s0,40(sp)
41a102bc:	00a08021 	move	s0,a1
41a102c0:	7c062e20 	seh	a1,a2
41a102c4:	27a60010 	addiu	a2,sp,16
41a102c8:	afbf002c 	sw	ra,44(sp)
41a102cc:	afa00010 	sw	zero,16(sp)
41a102d0:	afa00014 	sw	zero,20(sp)
41a102d4:	afa00018 	sw	zero,24(sp)
41a102d8:	afa0001c 	sw	zero,28(sp)
41a102dc:	0c68405d 	jal	41a10174 <XYZ_070>
41a102e0:	afa00020 	sw	zero,32(sp)
41a102e4:	3c03bfc4 	lui	v1,0xbfc4
41a102e8:	02002821 	move	a1,s0
41a102ec:	27a40010 	addiu	a0,sp,16
41a102f0:	24060014 	li	a2,20
41a102f4:	246288d5 	addiu	v0,v1,-30507
41a102f8:	0040f809 	jalr	v0
41a102fc:	24070002 	li	a3,2
41a10300:	8fbf002c 	lw	ra,44(sp)
41a10304:	8fb00028 	lw	s0,40(sp)
41a10308:	7c021420 	seb	v0,v0
41a1030c:	03e00008 	jr	ra
41a10310:	27bd0030 	addiu	sp,sp,48

41a10314 <XYZ_069>:
41a10314:	27bdffc8 	addiu	sp,sp,-56
41a10318:	afbf0030 	sw	ra,48(sp)
41a1031c:	908503e6 	lbu	a1,998(a0)
41a10320:	00805021 	move	t2,a0
41a10324:	3c0341a1 	lui	v1,0x41a1
41a10328:	30a4001f 	andi	a0,a1,0x1f
41a1032c:	00041140 	sll	v0,a0,0x5
41a10330:	246b040c 	addiu	t3,v1,1036
41a10334:	27ad0010 	addiu	t5,sp,16
41a10338:	004b3021 	addu	a2,v0,t3
41a1033c:	00003821 	move	a3,zero
41a10340:	01a04021 	move	t0,t5
41a10344:	00ea7021 	addu	t6,a3,t2
41a10348:	90d80000 	lbu	t8,0(a2)
41a1034c:	91cf03e8 	lbu	t7,1000(t6)
41a10350:	24f90001 	addiu	t9,a3,1
41a10354:	7c193c20 	seb	a3,t9
41a10358:	01f86026 	xor	t4,t7,t8
41a1035c:	28e90014 	slti	t1,a3,20
41a10360:	a1cc03e8 	sb	t4,1000(t6)
41a10364:	24c60001 	addiu	a2,a2,1
41a10368:	a10c0000 	sb	t4,0(t0)
41a1036c:	1520fff5 	bnez	t1,41a10344 <XYZ_069+0x30>
41a10370:	25080001 	addiu	t0,t0,1
41a10374:	24050014 	li	a1,20
41a10378:	01a53821 	addu	a3,t5,a1
41a1037c:	24bf0001 	addiu	ra,a1,1
41a10380:	7c1f2c20 	seb	a1,ra
41a10384:	90e8ffec 	lbu	t0,-20(a3)
41a10388:	28a60020 	slti	a2,a1,32
41a1038c:	14c0fffa 	bnez	a2,41a10378 <XYZ_069+0x64>
41a10390:	a0e80000 	sb	t0,0(a3)
41a10394:	00006021 	move	t4,zero
41a10398:	000c4940 	sll	t1,t4,0x5
41a1039c:	00004021 	move	t0,zero
41a103a0:	01a03821 	move	a3,t5
41a103a4:	01283021 	addu	a2,t1,t0
41a103a8:	00cbf821 	addu	ra,a2,t3
41a103ac:	90f80000 	lbu	t8,0(a3)
41a103b0:	93f90000 	lbu	t9,0(ra)
41a103b4:	00ca1821 	addu	v1,a2,t2
41a103b8:	90650000 	lbu	a1,0(v1)
41a103bc:	250f0001 	addiu	t7,t0,1
41a103c0:	03197026 	xor	t6,t8,t9
41a103c4:	7c0f4420 	seb	t0,t7
41a103c8:	01c51026 	xor	v0,t6,a1
41a103cc:	29040020 	slti	a0,t0,32
41a103d0:	a0620000 	sb	v0,0(v1)
41a103d4:	1480fff3 	bnez	a0,41a103a4 <XYZ_069+0x90>
41a103d8:	24e70001 	addiu	a3,a3,1
41a103dc:	25870001 	addiu	a3,t4,1
41a103e0:	7c076420 	seb	t4,a3
41a103e4:	2989001f 	slti	t1,t4,31
41a103e8:	1520ffec 	bnez	t1,41a1039c <XYZ_069+0x88>
41a103ec:	000c4940 	sll	t1,t4,0x5
41a103f0:	254503e8 	addiu	a1,t2,1000
41a103f4:	2544ffff 	addiu	a0,t2,-1
41a103f8:	0c6840ad 	jal	41a102b4 <XYZ_071>
41a103fc:	240603e9 	li	a2,1001
41a10400:	8fbf0030 	lw	ra,48(sp)
41a10404:	03e00008 	jr	ra
41a10408:	27bd0038 	addiu	sp,sp,56

41a1040c <XYZ_900>:
41a1040c:	e4012b16 dfc13d0e f58f350f 2ea048e2     .+...=...5...H..
41a1041c:	ea576a1c 03e29a6d 9c84e8ec cfbaca87     .jW.m...........
41a1042c:	f26f5cdb 50e97232 e91b0642 ffa48f9d     .\o.2r.PB.......
41a1043c:	b7596466 423c15d0 47522527 557c0983     fdY...<B'%RG..|U
41a1044c:	fa12c11d 60f8aa7c f33a65c6 5ea74413     ....|..`.e:..D.^
41a1045c:	917e22c7 8af298df 77322c08 3dff726a     ."~......,2wjr.=
41a1046c:	be0c13a6 76e94b3e 91938535 1014259b     ....>K.v5....%..
41a1047c:	a9394908 1c069c9a 12aef94b 5508fa94     .I9.....K......U
41a1048c:	105805aa e4768029 dc674bac 6d1987df     ..X.).v..Kg....m
41a1049c:	8c7c6642 29018df7 60c7ba35 d3b7e14d     Bf|....)5..`M...
41a104ac:	67b0e3e7 6740383e d3a7d876 70a472d4     ...g>8@gv....r.p
41a104bc:	a05131b6 abaf4f40 f8f78c52 beaf9874     .1Q.@O..R...t...
41a104cc:	47d7236e 4e1b5da1 c2d997a2 f8b97926     n#.G.].N....&y..
41a104dc:	6d045eae 98a7d0d5 5faace6a d2b8f9e4     .^.m....j.._....
41a104ec:	55cc1ebe 6f0f70cb f8cb2881 557e5d8c     ...U.p.o.(...]~U
41a104fc:	a9c927d3 f5c0a685 7bc0ed79 bdc3361c     .'......y..{.6..
41a1050c:	77a88ea5 cd39e060 8b60659a 492bfc33     ...w`.9..e`.3.+I
41a1051c:	ba67caa8 29f9af44 8530715d e016e5e0     ..g.D..)]q0.....
41a1052c:	abc24425 2648f342 59093f01 cede7ff5     %D..B.H&.?.Y....
41a1053c:	c6382349 c647d155 6a9bee5b 3c720d9d     I#8.U.G.[..j..r<
41a1054c:	ddf93936 7084d3f1 101205e9 bc6ecb62     69.....p....b.n.
41a1055c:	7334cb3f 17c46ff6 25ebe80d 86a0df5c     ?.4s.o.....%\...
41a1056c:	4ab9c38c c1387ebb 93d00817 27cf3e0f     ...J.~8......>.'
41a1057c:	e772a071 33417bee 5caffb4d d9dcf755     q.r..{A3M..\U...
41a1058c:	ea7d14f2 d3d608e3 1752faa0 70ce101b     ..}.......R....p
41a1059c:	b4cfb9b6 53429b25 7c572b67 83a172ff     ....%.BSg+W|.r..
41a105ac:	11d308cd 0a9c30ae 45732501 e978fe7a     .....0...%sEz.x.
41a105bc:	0a5d3ff6 48459f35 81fe4804 4182c4c2     .?].5.EH.H.....A
41a105cc:	67b1a2de 0c5b3b6a e66eb406 12ef150e     ...gj;[...n.....
41a105dc:	49d77c3c 065b9cf3 ec452bf1 10af4599     <|.I..[..+E..E..
41a105ec:	49666017 3d027585 a815e4ae 95b7dfd7     .`fI.u.=........
41a105fc:	55b32da3 623d4619 f9660888 3ea3b34a     .-.U.F=b..f.J..>
41a1060c:	af207985 a241a7ed 9384a88f 1eb08846     .y ...A.....F...
41a1061c:	160b5888 014b28c6 61548d7d fb94571d     .X...(K.}.Ta.W..
41a1062c:	a4ea6b84 5e1b9886 f6cd53db a9f0440b     .k.....^.S...D..
41a1063c:	da1fcdb0 b1ead05e 16df70e1 97d0c244     ....^....p..D...
41a1064c:	9388caf9 a3124cf6 9f162f91 7c2aef7b     .....L.../..{.*|
41a1065c:	16bff147 49fc7bd6 84eed991 fb84eda8     G....{.I........
41a1066c:	0c2d842d 26eead4e 2761b281 329a3a14     -.-.N..&..a'.:.2
41a1067c:	a7acf62f 3757aac6 26942302 8412e5d3     /.....W7.#.&....
41a1068c:	764353dc 83f67991 d84c4aef b47d7631     .SCv.y...JL.1v}.
41a1069c:	5c78b2e3 71f7f49d 64dbd7f9 62368bad     ..x\...q...d..6b
41a106ac:	3238d52c cab37b9e 7898b383 69f69b46     ,.82.{.....xF..i
41a106bc:	82db57a0 69aa3b8a 1df41a01 19a88f80     .W...;.i........
41a106cc:	7956e278 09b43878 f1148d5c a1237a35     x.Vyx8..\...5z#.
41a106dc:	f9aa83e1 3a815bbe f94783dc 8424e4d1     .....[.:..G...$.
41a106ec:	8ab851fd ee70e3f5 5755a6b4 2eb9e3b5     .Q....p...UW....
41a106fc:	014826fa 70794acd e9d67661 646340cd     .&H..Jypav...@cd
41a1070c:	6ee4dd1f 3d3eb339 0bf6e428 0da97a6c     ...n9.>=(...lz..
41a1071c:	335ed4cd 74de03f7 69e0d351 805f4858     ..^3...tQ..iXH_.
41a1072c:	1661738f 34171ce7 ba937a14 6121bc3a     .sa....4.z..:.!a
41a1073c:	89e754a9 86b5f776 26307618 91e85043     .T..v....v0&CP..
41a1074c:	9ad9a86b 9d79e18f 16f7139f d7ebe1f7     k.....y.........
41a1075c:	45a75ed5 3b6e7e4a a285aa62 472fa1fb     .^.EJ~n;b...../G
41a1076c:	ccf0cf9d b43cb991 2268e579 5c2e1daa     ......<.y.h"...\
41a1077c:	282a3b86 c2d1883e 973b32c9 c448d7a7     .;*(>....2;...H.
41a1078c:	a21bdd65 21d420ba 180c4038 552e7740     e.... .!8@..@w.U
41a1079c:	c96578b5 435a2d2e 719ed541 66077668     .xe..-ZCA..qhv.f
41a107ac:	df261cfc 5ae4a718 47509b53 ffe1c576     ..&....ZS.PGv...
41a107bc:	1f29104b c158575c ddf7b1c3 13afd124     K.).\WX.....$...
41a107cc:	2afb13b1 47c5cf06 0cbda058 cb3dbbf2     ...*...GX.....=.
41a107dc:	c9a39101 3576b64e 7c84ec22 c4b90be1     ....N.v5"..|....
41a107ec:	84f61bae 654076bf be2a1f6c aabd9501     .....v@el.*.....
41a107fc:	4686f209 246b52b1 4d4b8f47 42569598     ...F.Rk$G.KM..VB

41a1080c <XYZ_062>:
41a1080c:	00806021 	move	t4,a0
41a10810:	00a05821 	move	t3,a1
41a10814:	00c05021 	move	t2,a2
41a10818:	00002821 	move	a1,zero
41a1081c:	00c02021 	move	a0,a2
41a10820:	24a20001 	addiu	v0,a1,1
41a10824:	a0850000 	sb	a1,0(a0)
41a10828:	7c022e20 	seh	a1,v0
41a1082c:	28a30100 	slti	v1,a1,256
41a10830:	1460fffb 	bnez	v1,41a10820 <XYZ_062+0x14>
41a10834:	24840001 	addiu	a0,a0,1
41a10838:	a1400100 	sb	zero,256(t2)
41a1083c:	a1400101 	sb	zero,257(t2)
41a10840:	00001821 	move	v1,zero
41a10844:	00004821 	move	t1,zero
41a10848:	00004021 	move	t0,zero
41a1084c:	24620001 	addiu	v0,v1,1
41a10850:	004b001a 	div	zero,v0,t3
41a10854:	016001f4 	teq	t3,zero,0x7
41a10858:	010a3021 	addu	a2,t0,t2
41a1085c:	006c1821 	addu	v1,v1,t4
41a10860:	90790000 	lbu	t9,0(v1)
41a10864:	90c50000 	lbu	a1,0(a2)
41a10868:	250f0001 	addiu	t7,t0,1
41a1086c:	0325c021 	addu	t8,t9,a1
41a10870:	03094021 	addu	t0,t8,t1
41a10874:	310900ff 	andi	t1,t0,0xff
41a10878:	012a6821 	addu	t5,t1,t2
41a1087c:	91ae0000 	lbu	t6,0(t5)
41a10880:	7c0f4620 	seh	t0,t7
41a10884:	29040100 	slti	a0,t0,256
41a10888:	a0ce0000 	sb	t6,0(a2)
41a1088c:	a1a50000 	sb	a1,0(t5)
41a10890:	00003810 	mfhi	a3
41a10894:	1480ffed 	bnez	a0,41a1084c <XYZ_062+0x40>
41a10898:	30e300ff 	andi	v1,a3,0xff
41a1089c:	03e00008 	jr	ra
41a108a0:	00000000 	nop

41a108a4 <XYZ_063>:
41a108a4:	00c04821 	move	t1,a2
41a108a8:	00a05821 	move	t3,a1
41a108ac:	00806021 	move	t4,a0
41a108b0:	90c80100 	lbu	t0,256(a2)
41a108b4:	90c70101 	lbu	a3,257(a2)
41a108b8:	18a00017 	blez	a1,41a10918 <XYZ_063+0x74>
41a108bc:	00005021 	move	t2,zero
41a108c0:	25060001 	addiu	a2,t0,1
41a108c4:	30c800ff 	andi	t0,a2,0xff
41a108c8:	01092821 	addu	a1,t0,t1
41a108cc:	90b90000 	lbu	t9,0(a1)
41a108d0:	018a3021 	addu	a2,t4,t2
41a108d4:	03272021 	addu	a0,t9,a3
41a108d8:	308700ff 	andi	a3,a0,0xff
41a108dc:	00e91821 	addu	v1,a3,t1
41a108e0:	906d0000 	lbu	t5,0(v1)
41a108e4:	254a0001 	addiu	t2,t2,1
41a108e8:	a0ad0000 	sb	t5,0(a1)
41a108ec:	a0790000 	sb	t9,0(v1)
41a108f0:	90b80000 	lbu	t8,0(a1)
41a108f4:	90cd0000 	lbu	t5,0(a2)
41a108f8:	03197821 	addu	t7,t8,t9
41a108fc:	31ee00ff 	andi	t6,t7,0xff
41a10900:	01c91021 	addu	v0,t6,t1
41a10904:	90440000 	lbu	a0,0(v0)
41a10908:	014b282a 	slt	a1,t2,t3
41a1090c:	01a41826 	xor	v1,t5,a0
41a10910:	14a0ffeb 	bnez	a1,41a108c0 <XYZ_063+0x1c>
41a10914:	a0c30000 	sb	v1,0(a2)
41a10918:	a1270101 	sb	a3,257(t1)
41a1091c:	03e00008 	jr	ra
41a10920:	a1280100 	sb	t0,256(t1)

41a10924 <XYZ_064>:
41a10924:	27bdffe0 	addiu	sp,sp,-32
41a10928:	afb00010 	sw	s0,16(sp)
41a1092c:	8fb00030 	lw	s0,48(sp)
41a10930:	afb20018 	sw	s2,24(sp)
41a10934:	afb10014 	sw	s1,20(sp)
41a10938:	00e09021 	move	s2,a3
41a1093c:	00c08821 	move	s1,a2
41a10940:	afbf001c 	sw	ra,28(sp)
41a10944:	0c684203 	jal	41a1080c <XYZ_062>
41a10948:	02003021 	move	a2,s0
41a1094c:	02202021 	move	a0,s1
41a10950:	02402821 	move	a1,s2
41a10954:	02003021 	move	a2,s0
41a10958:	8fbf001c 	lw	ra,28(sp)
41a1095c:	8fb20018 	lw	s2,24(sp)
41a10960:	8fb10014 	lw	s1,20(sp)
41a10964:	8fb00010 	lw	s0,16(sp)
41a10968:	08684229 	j	41a108a4 <XYZ_063>
41a1096c:	27bd0020 	addiu	sp,sp,32

41a10970 <XYZ_065>:
41a10970:	08684249 	j	41a10924 <XYZ_064>
41a10974:	00000000 	nop

41a10978 <XYZ_067>:
41a10978:	27bdffb8 	addiu	sp,sp,-72
41a1097c:	afb1003c 	sw	s1,60(sp)
41a10980:	afb00038 	sw	s0,56(sp)
41a10984:	00e08821 	move	s1,a3
41a10988:	00c08021 	move	s0,a2
41a1098c:	00a03821 	move	a3,a1
41a10990:	24060020 	li	a2,32
41a10994:	afbf0040 	sw	ra,64(sp)
41a10998:	0c6845ee 	jal	41a117b8 <XYZ_023>
41a1099c:	27a50018 	addiu	a1,sp,24
41a109a0:	8fa20058 	lw	v0,88(sp)
41a109a4:	02003021 	move	a2,s0
41a109a8:	02203821 	move	a3,s1
41a109ac:	27a40018 	addiu	a0,sp,24
41a109b0:	24050020 	li	a1,32
41a109b4:	0c684249 	jal	41a10924 <XYZ_064>
41a109b8:	afa20010 	sw	v0,16(sp)
41a109bc:	8fbf0040 	lw	ra,64(sp)
41a109c0:	8fb1003c 	lw	s1,60(sp)
41a109c4:	8fb00038 	lw	s0,56(sp)
41a109c8:	03e00008 	jr	ra
41a109cc:	27bd0048 	addiu	sp,sp,72

41a109d0 <XYZ_034>:
41a109d0:	24020001 	li	v0,1
41a109d4:	00003821 	move	a3,zero
41a109d8:	2403000f 	li	v1,15
41a109dc:	10a2000b 	beq	a1,v0,41a10a0c <XYZ_034+0x3c>
41a109e0:	2406000f 	li	a2,15
41a109e4:	00032880 	sll	a1,v1,0x2
41a109e8:	00a41021 	addu	v0,a1,a0
41a109ec:	8c430000 	lw	v1,0(v0)
41a109f0:	14600009 	bnez	v1,41a10a18 <XYZ_034+0x48>
41a109f4:	2442fffc 	addiu	v0,v0,-4
41a109f8:	24c6ffff 	addiu	a2,a2,-1
41a109fc:	04c3fffc 	bgezl	a2,41a109f0 <XYZ_034+0x20>
41a10a00:	8c430000 	lw	v1,0(v0)
41a10a04:	03e00008 	jr	ra
41a10a08:	00e01021 	move	v0,a3
41a10a0c:	24030007 	li	v1,7
41a10a10:	1000fff4 	b	41a109e4 <XYZ_034+0x14>
41a10a14:	24060007 	li	a2,7
41a10a18:	00602021 	move	a0,v1
41a10a1c:	00063940 	sll	a3,a2,0x5
41a10a20:	2403001f 	li	v1,31
41a10a24:	10000003 	b	41a10a34 <XYZ_034+0x64>
41a10a28:	24050001 	li	a1,1
41a10a2c:	0460fff5 	bltz	v1,41a10a04 <XYZ_034+0x34>
41a10a30:	00000000 	nop
41a10a34:	00654004 	sllv	t0,a1,v1
41a10a38:	00883024 	and	a2,a0,t0
41a10a3c:	50c0fffb 	beqzl	a2,41a10a2c <XYZ_034+0x5c>
41a10a40:	2463ffff 	addiu	v1,v1,-1
41a10a44:	00e33821 	addu	a3,a3,v1
41a10a48:	03e00008 	jr	ra
41a10a4c:	00e01021 	move	v0,a3

41a10a50 <XYZ_036>:
41a10a50:	24a5001c 	addiu	a1,a1,28
41a10a54:	2484001c 	addiu	a0,a0,28
41a10a58:	00004021 	move	t0,zero
41a10a5c:	24070007 	li	a3,7
41a10a60:	8c830000 	lw	v1,0(a0)
41a10a64:	8ca90000 	lw	t1,0(a1)
41a10a68:	24e7ffff 	addiu	a3,a3,-1
41a10a6c:	0123102b 	sltu	v0,t1,v1
41a10a70:	0069302b 	sltu	a2,v1,t1
41a10a74:	2484fffc 	addiu	a0,a0,-4
41a10a78:	14400007 	bnez	v0,41a10a98 <XYZ_036+0x48>
41a10a7c:	24a5fffc 	addiu	a1,a1,-4
41a10a80:	54c00008 	bnezl	a2,41a10aa4 <XYZ_036+0x54>
41a10a84:	2408ffff 	li	t0,-1
41a10a88:	04e3fff6 	bgezl	a3,41a10a64 <XYZ_036+0x14>
41a10a8c:	8c830000 	lw	v1,0(a0)
41a10a90:	03e00008 	jr	ra
41a10a94:	01001021 	move	v0,t0
41a10a98:	24080001 	li	t0,1
41a10a9c:	03e00008 	jr	ra
41a10aa0:	01001021 	move	v0,t0
41a10aa4:	03e00008 	jr	ra
41a10aa8:	01001021 	move	v0,t0

41a10aac <XYZ_037>:
41a10aac:	24030007 	li	v1,7
41a10ab0:	8ca20000 	lw	v0,0(a1)
41a10ab4:	2463ffff 	addiu	v1,v1,-1
41a10ab8:	ac820000 	sw	v0,0(a0)
41a10abc:	24a50004 	addiu	a1,a1,4
41a10ac0:	0461fffb 	bgez	v1,41a10ab0 <XYZ_037+0x4>
41a10ac4:	24840004 	addiu	a0,a0,4
41a10ac8:	03e00008 	jr	ra
41a10acc:	00000000 	nop

41a10ad0 <XYZ_038>:
41a10ad0:	18a00005 	blez	a1,41a10ae8 <XYZ_038+0x18>
41a10ad4:	00000000 	nop
41a10ad8:	24a5ffff 	addiu	a1,a1,-1
41a10adc:	ac800000 	sw	zero,0(a0)
41a10ae0:	14a0fffd 	bnez	a1,41a10ad8 <XYZ_038+0x8>
41a10ae4:	24840004 	addiu	a0,a0,4
41a10ae8:	03e00008 	jr	ra
41a10aec:	00000000 	nop

41a10af0 <XYZ_039>:
41a10af0:	2407000f 	li	a3,15
41a10af4:	8ca80000 	lw	t0,0(a1)
41a10af8:	8cc30000 	lw	v1,0(a2)
41a10afc:	24e7ffff 	addiu	a3,a3,-1
41a10b00:	01031026 	xor	v0,t0,v1
41a10b04:	ac820000 	sw	v0,0(a0)
41a10b08:	24a50004 	addiu	a1,a1,4
41a10b0c:	24840004 	addiu	a0,a0,4
41a10b10:	04e1fff8 	bgez	a3,41a10af4 <XYZ_039+0x4>
41a10b14:	24c60004 	addiu	a2,a2,4
41a10b18:	03e00008 	jr	ra
41a10b1c:	00000000 	nop

41a10b20 <XYZ_041>:
41a10b20:	00804821 	move	t1,a0
41a10b24:	00a04021 	move	t0,a1
41a10b28:	00003821 	move	a3,zero
41a10b2c:	00075080 	sll	t2,a3,0x2
41a10b30:	01483021 	addu	a2,t2,t0
41a10b34:	01491021 	addu	v0,t2,t1
41a10b38:	8c450000 	lw	a1,0(v0)
41a10b3c:	8cc30000 	lw	v1,0(a2)
41a10b40:	24e70001 	addiu	a3,a3,1
41a10b44:	28e40008 	slti	a0,a3,8
41a10b48:	ac430000 	sw	v1,0(v0)
41a10b4c:	1480fff7 	bnez	a0,41a10b2c <XYZ_041+0xc>
41a10b50:	acc50000 	sw	a1,0(a2)
41a10b54:	03e00008 	jr	ra
41a10b58:	00000000 	nop

41a10b5c <XYZ_042>:
41a10b5c:	28aa0000 	slti	t2,a1,0
41a10b60:	24a8001f 	addiu	t0,a1,31
41a10b64:	00aa400a 	movz	t0,a1,t2
41a10b68:	00084943 	sra	t1,t0,0x5
41a10b6c:	01205021 	move	t2,t1
41a10b70:	00093940 	sll	a3,t1,0x5
41a10b74:	00a74823 	subu	t1,a1,a3
41a10b78:	24060001 	li	a2,1
41a10b7c:	000a2880 	sll	a1,t2,0x2
41a10b80:	01261004 	sllv	v0,a2,t1
41a10b84:	00a41821 	addu	v1,a1,a0
41a10b88:	244bffff 	addiu	t3,v0,-1
41a10b8c:	2463001c 	addiu	v1,v1,28
41a10b90:	24060007 	li	a2,7
41a10b94:	2485001c 	addiu	a1,a0,28
41a10b98:	8cac0000 	lw	t4,0(a1)
41a10b9c:	24c6ffff 	addiu	a2,a2,-1
41a10ba0:	ac6c0000 	sw	t4,0(v1)
41a10ba4:	24a5fffc 	addiu	a1,a1,-4
41a10ba8:	04c1fffb 	bgez	a2,41a10b98 <XYZ_042+0x3c>
41a10bac:	2463fffc 	addiu	v1,v1,-4
41a10bb0:	19400008 	blez	t2,41a10bd4 <XYZ_042+0x78>
41a10bb4:	240d0020 	li	t5,32
41a10bb8:	00801821 	move	v1,a0
41a10bbc:	01401021 	move	v0,t2
41a10bc0:	2442ffff 	addiu	v0,v0,-1
41a10bc4:	ac600000 	sw	zero,0(v1)
41a10bc8:	1440fffd 	bnez	v0,41a10bc0 <XYZ_042+0x64>
41a10bcc:	24630004 	addiu	v1,v1,4
41a10bd0:	240d0020 	li	t5,32
41a10bd4:	254c0008 	addiu	t4,t2,8
41a10bd8:	01a94023 	subu	t0,t5,t1
41a10bdc:	19800010 	blez	t4,41a10c20 <XYZ_042+0xc4>
41a10be0:	00003821 	move	a3,zero
41a10be4:	01803021 	move	a2,t4
41a10be8:	00802821 	move	a1,a0
41a10bec:	8cb80000 	lw	t8,0(a1)
41a10bf0:	24c6ffff 	addiu	a2,a2,-1
41a10bf4:	0138c804 	sllv	t9,t8,t1
41a10bf8:	03277825 	or	t7,t9,a3
41a10bfc:	01187006 	srlv	t6,t8,t0
41a10c00:	acaf0000 	sw	t7,0(a1)
41a10c04:	01cb3824 	and	a3,t6,t3
41a10c08:	14c0fff8 	bnez	a2,41a10bec <XYZ_042+0x90>
41a10c0c:	24a50004 	addiu	a1,a1,4
41a10c10:	10e00003 	beqz	a3,41a10c20 <XYZ_042+0xc4>
41a10c14:	000c1880 	sll	v1,t4,0x2
41a10c18:	00645821 	addu	t3,v1,a0
41a10c1c:	ad670000 	sw	a3,0(t3)
41a10c20:	03e00008 	jr	ra
41a10c24:	00000000 	nop

41a10c28 <XYZ_043>:
41a10c28:	27bdffd0 	addiu	sp,sp,-48
41a10c2c:	3c0741d4 	lui	a3,0x41d4
41a10c30:	afb10014 	sw	s1,20(sp)
41a10c34:	24f1a300 	addiu	s1,a3,-23808
41a10c38:	afb40020 	sw	s4,32(sp)
41a10c3c:	afb00010 	sw	s0,16(sp)
41a10c40:	0080a021 	move	s4,a0
41a10c44:	00a08021 	move	s0,a1
41a10c48:	02202021 	move	a0,s1
41a10c4c:	24050010 	li	a1,16
41a10c50:	afbf0028 	sw	ra,40(sp)
41a10c54:	afb50024 	sw	s5,36(sp)
41a10c58:	afb3001c 	sw	s3,28(sp)
41a10c5c:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10c60:	afb20018 	sw	s2,24(sp)
41a10c64:	02802021 	move	a0,s4
41a10c68:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10c6c:	24050008 	li	a1,8
41a10c70:	3c0641d4 	lui	a2,0x41d4
41a10c74:	24d5b080 	addiu	s5,a2,-20352
41a10c78:	24040001 	li	a0,1
41a10c7c:	ae840000 	sw	a0,0(s4)
41a10c80:	24050008 	li	a1,8
41a10c84:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10c88:	02a02021 	move	a0,s5
41a10c8c:	3c0341d4 	lui	v1,0x41d4
41a10c90:	2472a000 	addiu	s2,v1,-24576
41a10c94:	02002821 	move	a1,s0
41a10c98:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10c9c:	02402021 	move	a0,s2
41a10ca0:	3c0241d4 	lui	v0,0x41d4
41a10ca4:	2453a880 	addiu	s3,v0,-22400
41a10ca8:	3c0541a1 	lui	a1,0x41a1
41a10cac:	24a51714 	addiu	a1,a1,5908
41a10cb0:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10cb4:	02602021 	move	a0,s3
41a10cb8:	1000001d 	b	41a10d30 <XYZ_043+0x108>
41a10cbc:	02402021 	move	a0,s2
41a10cc0:	02602021 	move	a0,s3
41a10cc4:	0c684274 	jal	41a109d0 <XYZ_034>
41a10cc8:	24050001 	li	a1,1
41a10ccc:	02028023 	subu	s0,s0,v0
41a10cd0:	02402021 	move	a0,s2
41a10cd4:	06000023 	bltz	s0,41a10d64 <XYZ_043+0x13c>
41a10cd8:	02602821 	move	a1,s3
41a10cdc:	02202021 	move	a0,s1
41a10ce0:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10ce4:	02602821 	move	a1,s3
41a10ce8:	02202021 	move	a0,s1
41a10cec:	0c6842d7 	jal	41a10b5c <XYZ_042>
41a10cf0:	02002821 	move	a1,s0
41a10cf4:	02203021 	move	a2,s1
41a10cf8:	02402021 	move	a0,s2
41a10cfc:	0c6842bc 	jal	41a10af0 <XYZ_039>
41a10d00:	02402821 	move	a1,s2
41a10d04:	02202021 	move	a0,s1
41a10d08:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10d0c:	02a02821 	move	a1,s5
41a10d10:	02202021 	move	a0,s1
41a10d14:	0c6842d7 	jal	41a10b5c <XYZ_042>
41a10d18:	02002821 	move	a1,s0
41a10d1c:	02802021 	move	a0,s4
41a10d20:	02802821 	move	a1,s4
41a10d24:	0c6842bc 	jal	41a10af0 <XYZ_039>
41a10d28:	02203021 	move	a2,s1
41a10d2c:	02402021 	move	a0,s2
41a10d30:	0c684274 	jal	41a109d0 <XYZ_034>
41a10d34:	24050001 	li	a1,1
41a10d38:	1440ffe1 	bnez	v0,41a10cc0 <XYZ_043+0x98>
41a10d3c:	00408021 	move	s0,v0
41a10d40:	8fbf0028 	lw	ra,40(sp)
41a10d44:	8fb50024 	lw	s5,36(sp)
41a10d48:	8fb40020 	lw	s4,32(sp)
41a10d4c:	8fb3001c 	lw	s3,28(sp)
41a10d50:	8fb20018 	lw	s2,24(sp)
41a10d54:	8fb10014 	lw	s1,20(sp)
41a10d58:	8fb00010 	lw	s0,16(sp)
41a10d5c:	03e00008 	jr	ra
41a10d60:	27bd0030 	addiu	sp,sp,48
41a10d64:	0c6842c8 	jal	41a10b20 <XYZ_041>
41a10d68:	00108023 	negu	s0,s0
41a10d6c:	02802021 	move	a0,s4
41a10d70:	0c6842c8 	jal	41a10b20 <XYZ_041>
41a10d74:	02a02821 	move	a1,s5
41a10d78:	1000ffd9 	b	41a10ce0 <XYZ_043+0xb8>
41a10d7c:	02202021 	move	a0,s1

41a10d80 <XYZ_045>:
41a10d80:	27bdffe8 	addiu	sp,sp,-24
41a10d84:	00002821 	move	a1,zero
41a10d88:	afb00010 	sw	s0,16(sp)
41a10d8c:	afbf0014 	sw	ra,20(sp)
41a10d90:	0c684274 	jal	41a109d0 <XYZ_034>
41a10d94:	00808021 	move	s0,a0
41a10d98:	2444001f 	addiu	a0,v0,31
41a10d9c:	28430000 	slti	v1,v0,0
41a10da0:	0083100b 	movn	v0,a0,v1
41a10da4:	00021143 	sra	v0,v0,0x5
41a10da8:	24470001 	addiu	a3,v0,1
41a10dac:	18e00010 	blez	a3,41a10df0 <XYZ_045+0x70>
41a10db0:	00003021 	move	a2,zero
41a10db4:	00e02821 	move	a1,a3
41a10db8:	02002021 	move	a0,s0
41a10dbc:	8c880000 	lw	t0,0(a0)
41a10dc0:	24a5ffff 	addiu	a1,a1,-1
41a10dc4:	00085040 	sll	t2,t0,0x1
41a10dc8:	01464825 	or	t1,t2,a2
41a10dcc:	ac890000 	sw	t1,0(a0)
41a10dd0:	000837c2 	srl	a2,t0,0x1f
41a10dd4:	14a0fff9 	bnez	a1,41a10dbc <XYZ_045+0x3c>
41a10dd8:	24840004 	addiu	a0,a0,4
41a10ddc:	10c00005 	beqz	a2,41a10df4 <XYZ_045+0x74>
41a10de0:	8fbf0014 	lw	ra,20(sp)
41a10de4:	00075880 	sll	t3,a3,0x2
41a10de8:	01702821 	addu	a1,t3,s0
41a10dec:	aca60000 	sw	a2,0(a1)
41a10df0:	8fbf0014 	lw	ra,20(sp)
41a10df4:	8fb00010 	lw	s0,16(sp)
41a10df8:	03e00008 	jr	ra
41a10dfc:	27bd0018 	addiu	sp,sp,24

41a10e00 <XYZ_046>:
41a10e00:	27bdffd8 	addiu	sp,sp,-40
41a10e04:	00a02021 	move	a0,a1
41a10e08:	afb20018 	sw	s2,24(sp)
41a10e0c:	00a09021 	move	s2,a1
41a10e10:	00002821 	move	a1,zero
41a10e14:	afb3001c 	sw	s3,28(sp)
41a10e18:	afb00010 	sw	s0,16(sp)
41a10e1c:	00c09821 	move	s3,a2
41a10e20:	afbf0020 	sw	ra,32(sp)
41a10e24:	0c684274 	jal	41a109d0 <XYZ_034>
41a10e28:	afb10014 	sw	s1,20(sp)
41a10e2c:	2450ff17 	addiu	s0,v0,-233
41a10e30:	02402021 	move	a0,s2
41a10e34:	0c684294 	jal	41a10a50 <XYZ_036>
41a10e38:	02602821 	move	a1,s3
41a10e3c:	06000015 	bltz	s0,41a10e94 <XYZ_046+0x94>
41a10e40:	3c0241d4 	lui	v0,0x41d4
41a10e44:	2451ac00 	addiu	s1,v0,-21504
41a10e48:	02202021 	move	a0,s1
41a10e4c:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10e50:	24050010 	li	a1,16
41a10e54:	02202021 	move	a0,s1
41a10e58:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10e5c:	02602821 	move	a1,s3
41a10e60:	02002821 	move	a1,s0
41a10e64:	0c6842d7 	jal	41a10b5c <XYZ_042>
41a10e68:	02202021 	move	a0,s1
41a10e6c:	02402021 	move	a0,s2
41a10e70:	02402821 	move	a1,s2
41a10e74:	0c6842bc 	jal	41a10af0 <XYZ_039>
41a10e78:	02203021 	move	a2,s1
41a10e7c:	02402021 	move	a0,s2
41a10e80:	0c684274 	jal	41a109d0 <XYZ_034>
41a10e84:	00002821 	move	a1,zero
41a10e88:	2450ff17 	addiu	s0,v0,-233
41a10e8c:	0601ffef 	bgez	s0,41a10e4c <XYZ_046+0x4c>
41a10e90:	02202021 	move	a0,s1
41a10e94:	8fbf0020 	lw	ra,32(sp)
41a10e98:	8fb3001c 	lw	s3,28(sp)
41a10e9c:	8fb20018 	lw	s2,24(sp)
41a10ea0:	8fb10014 	lw	s1,20(sp)
41a10ea4:	8fb00010 	lw	s0,16(sp)
41a10ea8:	03e00008 	jr	ra
41a10eac:	27bd0028 	addiu	sp,sp,40

41a10eb0 <XYZ_047>:
41a10eb0:	27bdffd8 	addiu	sp,sp,-40
41a10eb4:	3c0341d4 	lui	v1,0x41d4
41a10eb8:	afb40020 	sw	s4,32(sp)
41a10ebc:	2474b200 	addiu	s4,v1,-19968
41a10ec0:	afb3001c 	sw	s3,28(sp)
41a10ec4:	afb00010 	sw	s0,16(sp)
41a10ec8:	00809821 	move	s3,a0
41a10ecc:	00a08021 	move	s0,a1
41a10ed0:	02802021 	move	a0,s4
41a10ed4:	24050008 	li	a1,8
41a10ed8:	afbf0024 	sw	ra,36(sp)
41a10edc:	afb20018 	sw	s2,24(sp)
41a10ee0:	afb10014 	sw	s1,20(sp)
41a10ee4:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10ee8:	00c08821 	move	s1,a2
41a10eec:	3c0241d4 	lui	v0,0x41d4
41a10ef0:	2452a400 	addiu	s2,v0,-23552
41a10ef4:	02402021 	move	a0,s2
41a10ef8:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a10efc:	24050010 	li	a1,16
41a10f00:	02002821 	move	a1,s0
41a10f04:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10f08:	02802021 	move	a0,s4
41a10f0c:	02202821 	move	a1,s1
41a10f10:	0c6842ab 	jal	41a10aac <XYZ_037>
41a10f14:	02402021 	move	a0,s2
41a10f18:	24100001 	li	s0,1
41a10f1c:	240b0008 	li	t3,8
41a10f20:	00008821 	move	s1,zero
41a10f24:	000b502a 	slt	t2,zero,t3
41a10f28:	02804021 	move	t0,s4
41a10f2c:	24070007 	li	a3,7
41a10f30:	00004821 	move	t1,zero
41a10f34:	8d050000 	lw	a1,0(t0)
41a10f38:	00b02024 	and	a0,a1,s0
41a10f3c:	5080000f 	beqzl	a0,41a10f7c <XYZ_047+0xcc>
41a10f40:	24e7ffff 	addiu	a3,a3,-1
41a10f44:	5140000d 	beqzl	t2,41a10f7c <XYZ_047+0xcc>
41a10f48:	24e7ffff 	addiu	a3,a3,-1
41a10f4c:	02403021 	move	a2,s2
41a10f50:	01332021 	addu	a0,t1,s3
41a10f54:	01602821 	move	a1,t3
41a10f58:	8c8d0000 	lw	t5,0(a0)
41a10f5c:	8cce0000 	lw	t6,0(a2)
41a10f60:	24a5ffff 	addiu	a1,a1,-1
41a10f64:	01ae6026 	xor	t4,t5,t6
41a10f68:	ac8c0000 	sw	t4,0(a0)
41a10f6c:	24c60004 	addiu	a2,a2,4
41a10f70:	14a0fff9 	bnez	a1,41a10f58 <XYZ_047+0xa8>
41a10f74:	24840004 	addiu	a0,a0,4
41a10f78:	24e7ffff 	addiu	a3,a3,-1
41a10f7c:	25080004 	addiu	t0,t0,4
41a10f80:	04e1ffec 	bgez	a3,41a10f34 <XYZ_047+0x84>
41a10f84:	25290004 	addiu	t1,t1,4
41a10f88:	2406001f 	li	a2,31
41a10f8c:	5226000d 	beql	s1,a2,41a10fc4 <XYZ_047+0x114>
41a10f90:	26310001 	addiu	s1,s1,1
41a10f94:	0c684360 	jal	41a10d80 <XYZ_045>
41a10f98:	02402021 	move	a0,s2
41a10f9c:	02402021 	move	a0,s2
41a10fa0:	0c684274 	jal	41a109d0 <XYZ_034>
41a10fa4:	00002821 	move	a1,zero
41a10fa8:	2448001f 	addiu	t0,v0,31
41a10fac:	28490000 	slti	t1,v0,0
41a10fb0:	0109100b 	movn	v0,t0,t1
41a10fb4:	00023943 	sra	a3,v0,0x5
41a10fb8:	00108040 	sll	s0,s0,0x1
41a10fbc:	24eb0001 	addiu	t3,a3,1
41a10fc0:	26310001 	addiu	s1,s1,1
41a10fc4:	2a2a0020 	slti	t2,s1,32
41a10fc8:	5540ffd7 	bnezl	t2,41a10f28 <XYZ_047+0x78>
41a10fcc:	000b502a 	slt	t2,zero,t3
41a10fd0:	8fbf0024 	lw	ra,36(sp)
41a10fd4:	8fb40020 	lw	s4,32(sp)
41a10fd8:	8fb3001c 	lw	s3,28(sp)
41a10fdc:	8fb20018 	lw	s2,24(sp)
41a10fe0:	8fb10014 	lw	s1,20(sp)
41a10fe4:	8fb00010 	lw	s0,16(sp)
41a10fe8:	03e00008 	jr	ra
41a10fec:	27bd0028 	addiu	sp,sp,40

41a10ff0 <XYZ_048>:
41a10ff0:	24070007 	li	a3,7
41a10ff4:	8ca80000 	lw	t0,0(a1)
41a10ff8:	8cc30000 	lw	v1,0(a2)
41a10ffc:	24e7ffff 	addiu	a3,a3,-1
41a11000:	01031026 	xor	v0,t0,v1
41a11004:	ac820000 	sw	v0,0(a0)
41a11008:	24a50004 	addiu	a1,a1,4
41a1100c:	24840004 	addiu	a0,a0,4
41a11010:	04e1fff8 	bgez	a3,41a10ff4 <XYZ_048+0x4>
41a11014:	24c60004 	addiu	a2,a2,4
41a11018:	03e00008 	jr	ra
41a1101c:	00000000 	nop

41a11020 <XYZ_049>:
41a11020:	00804021 	move	t0,a0
41a11024:	8ca90004 	lw	t1,4(a1)
41a11028:	00003821 	move	a3,zero
41a1102c:	8ca60000 	lw	a2,0(a1)
41a11030:	01072821 	addu	a1,t0,a3
41a11034:	90c30000 	lbu	v1,0(a2)
41a11038:	90aa0000 	lbu	t2,0(a1)
41a1103c:	24e70001 	addiu	a3,a3,1
41a11040:	01431026 	xor	v0,t2,v1
41a11044:	28e4001d 	slti	a0,a3,29
41a11048:	a0a20000 	sb	v0,0(a1)
41a1104c:	1480fff8 	bnez	a0,41a11030 <XYZ_049+0x10>
41a11050:	24c60001 	addiu	a2,a2,1
41a11054:	01203021 	move	a2,t1
41a11058:	2407001d 	li	a3,29
41a1105c:	01075821 	addu	t3,t0,a3
41a11060:	90ce0000 	lbu	t6,0(a2)
41a11064:	916d0000 	lbu	t5,0(t3)
41a11068:	24e70001 	addiu	a3,a3,1
41a1106c:	01ae6026 	xor	t4,t5,t6
41a11070:	28e90020 	slti	t1,a3,32
41a11074:	a16c0000 	sb	t4,0(t3)
41a11078:	1520fff8 	bnez	t1,41a1105c <XYZ_049+0x3c>
41a1107c:	24c60001 	addiu	a2,a2,1
41a11080:	03e00008 	jr	ra
41a11084:	00000000 	nop

41a11088 <XYZ_051>:
41a11088:	27bdffc8 	addiu	sp,sp,-56
41a1108c:	afbf0030 	sw	ra,48(sp)
41a11090:	afb7002c 	sw	s7,44(sp)
41a11094:	afb60028 	sw	s6,40(sp)
41a11098:	afb50024 	sw	s5,36(sp)
41a1109c:	afb40020 	sw	s4,32(sp)
41a110a0:	afb3001c 	sw	s3,28(sp)
41a110a4:	afb20018 	sw	s2,24(sp)
41a110a8:	afb10014 	sw	s1,20(sp)
41a110ac:	afb00010 	sw	s0,16(sp)
41a110b0:	0080b821 	move	s7,a0
41a110b4:	8cc40000 	lw	a0,0(a2)
41a110b8:	00c0b021 	move	s6,a2
41a110bc:	00a0a821 	move	s5,a1
41a110c0:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a110c4:	24050008 	li	a1,8
41a110c8:	8ec40004 	lw	a0,4(s6)
41a110cc:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a110d0:	24050008 	li	a1,8
41a110d4:	3c0841d4 	lui	t0,0x41d4
41a110d8:	2512a100 	addiu	s2,t0,-24320
41a110dc:	02402021 	move	a0,s2
41a110e0:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a110e4:	24050010 	li	a1,16
41a110e8:	3c0741d4 	lui	a3,0x41d4
41a110ec:	24f1ae00 	addiu	s1,a3,-20992
41a110f0:	02202021 	move	a0,s1
41a110f4:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a110f8:	24050010 	li	a1,16
41a110fc:	3c0541d4 	lui	a1,0x41d4
41a11100:	24b3a500 	addiu	s3,a1,-23296
41a11104:	8ea60004 	lw	a2,4(s5)
41a11108:	8ee50004 	lw	a1,4(s7)
41a1110c:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a11110:	02602021 	move	a0,s3
41a11114:	3c0441d4 	lui	a0,0x41d4
41a11118:	2494a600 	addiu	s4,a0,-23040
41a1111c:	8ea60000 	lw	a2,0(s5)
41a11120:	8ee50000 	lw	a1,0(s7)
41a11124:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a11128:	02802021 	move	a0,s4
41a1112c:	02202021 	move	a0,s1
41a11130:	0c68430a 	jal	41a10c28 <XYZ_043>
41a11134:	02802821 	move	a1,s4
41a11138:	3c0341d4 	lui	v1,0x41d4
41a1113c:	2470ad00 	addiu	s0,v1,-21248
41a11140:	02002021 	move	a0,s0
41a11144:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11148:	24050010 	li	a1,16
41a1114c:	02002021 	move	a0,s0
41a11150:	02202821 	move	a1,s1
41a11154:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a11158:	02603021 	move	a2,s3
41a1115c:	3c0241a1 	lui	v0,0x41a1
41a11160:	24551714 	addiu	s5,v0,5908
41a11164:	02002021 	move	a0,s0
41a11168:	02002821 	move	a1,s0
41a1116c:	0c684380 	jal	41a10e00 <XYZ_046>
41a11170:	02a03021 	move	a2,s5
41a11174:	3c0641a1 	lui	a2,0x41a1
41a11178:	24c61798 	addiu	a2,a2,6040
41a1117c:	02602021 	move	a0,s3
41a11180:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a11184:	02002821 	move	a1,s0
41a11188:	02402021 	move	a0,s2
41a1118c:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11190:	24050010 	li	a1,16
41a11194:	02402021 	move	a0,s2
41a11198:	02002821 	move	a1,s0
41a1119c:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a111a0:	02003021 	move	a2,s0
41a111a4:	02402021 	move	a0,s2
41a111a8:	02402821 	move	a1,s2
41a111ac:	0c684380 	jal	41a10e00 <XYZ_046>
41a111b0:	02a03021 	move	a2,s5
41a111b4:	02202021 	move	a0,s1
41a111b8:	02602821 	move	a1,s3
41a111bc:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a111c0:	02403021 	move	a2,s2
41a111c4:	8ec40000 	lw	a0,0(s6)
41a111c8:	02202821 	move	a1,s1
41a111cc:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a111d0:	02803021 	move	a2,s4
41a111d4:	8ee50000 	lw	a1,0(s7)
41a111d8:	8ec60000 	lw	a2,0(s6)
41a111dc:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a111e0:	02602021 	move	a0,s3
41a111e4:	8ee60004 	lw	a2,4(s7)
41a111e8:	8ec50000 	lw	a1,0(s6)
41a111ec:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a111f0:	02802021 	move	a0,s4
41a111f4:	02202021 	move	a0,s1
41a111f8:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a111fc:	24050010 	li	a1,16
41a11200:	02202021 	move	a0,s1
41a11204:	02602821 	move	a1,s3
41a11208:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a1120c:	02003021 	move	a2,s0
41a11210:	02202021 	move	a0,s1
41a11214:	02202821 	move	a1,s1
41a11218:	0c684380 	jal	41a10e00 <XYZ_046>
41a1121c:	02a03021 	move	a2,s5
41a11220:	8ec40004 	lw	a0,4(s6)
41a11224:	02202821 	move	a1,s1
41a11228:	02803021 	move	a2,s4
41a1122c:	8fbf0030 	lw	ra,48(sp)
41a11230:	8fb7002c 	lw	s7,44(sp)
41a11234:	8fb60028 	lw	s6,40(sp)
41a11238:	8fb50024 	lw	s5,36(sp)
41a1123c:	8fb40020 	lw	s4,32(sp)
41a11240:	8fb3001c 	lw	s3,28(sp)
41a11244:	8fb20018 	lw	s2,24(sp)
41a11248:	8fb10014 	lw	s1,20(sp)
41a1124c:	8fb00010 	lw	s0,16(sp)
41a11250:	086843fc 	j	41a10ff0 <XYZ_048>
41a11254:	27bd0038 	addiu	sp,sp,56

41a11258 <XYZ_052>:
41a11258:	27bdffc8 	addiu	sp,sp,-56
41a1125c:	afbf0030 	sw	ra,48(sp)
41a11260:	afb7002c 	sw	s7,44(sp)
41a11264:	afb60028 	sw	s6,40(sp)
41a11268:	afb50024 	sw	s5,36(sp)
41a1126c:	afb40020 	sw	s4,32(sp)
41a11270:	afb3001c 	sw	s3,28(sp)
41a11274:	afb20018 	sw	s2,24(sp)
41a11278:	afb10014 	sw	s1,20(sp)
41a1127c:	afb00010 	sw	s0,16(sp)
41a11280:	0080b821 	move	s7,a0
41a11284:	8ca40000 	lw	a0,0(a1)
41a11288:	00a0b021 	move	s6,a1
41a1128c:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11290:	24050008 	li	a1,8
41a11294:	8ec40004 	lw	a0,4(s6)
41a11298:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a1129c:	24050008 	li	a1,8
41a112a0:	3c0941d4 	lui	t1,0x41d4
41a112a4:	2533a700 	addiu	s3,t1,-22784
41a112a8:	02602021 	move	a0,s3
41a112ac:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a112b0:	24050010 	li	a1,16
41a112b4:	3c0841d4 	lui	t0,0x41d4
41a112b8:	2514af80 	addiu	s4,t0,-20608
41a112bc:	02802021 	move	a0,s4
41a112c0:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a112c4:	24050010 	li	a1,16
41a112c8:	3c0741d4 	lui	a3,0x41d4
41a112cc:	24f2ab00 	addiu	s2,a3,-21760
41a112d0:	02402021 	move	a0,s2
41a112d4:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a112d8:	24050010 	li	a1,16
41a112dc:	8ee50000 	lw	a1,0(s7)
41a112e0:	0c68430a 	jal	41a10c28 <XYZ_043>
41a112e4:	02402021 	move	a0,s2
41a112e8:	3c0541d4 	lui	a1,0x41d4
41a112ec:	24b1a980 	addiu	s1,a1,-22144
41a112f0:	02202021 	move	a0,s1
41a112f4:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a112f8:	24050010 	li	a1,16
41a112fc:	8ee60004 	lw	a2,4(s7)
41a11300:	02202021 	move	a0,s1
41a11304:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a11308:	02402821 	move	a1,s2
41a1130c:	3c0441a1 	lui	a0,0x41a1
41a11310:	24951714 	addiu	s5,a0,5908
41a11314:	02202821 	move	a1,s1
41a11318:	02202021 	move	a0,s1
41a1131c:	0c684380 	jal	41a10e00 <XYZ_046>
41a11320:	02a03021 	move	a2,s5
41a11324:	3c0341d4 	lui	v1,0x41d4
41a11328:	2470a200 	addiu	s0,v1,-24064
41a1132c:	8ee50000 	lw	a1,0(s7)
41a11330:	02002021 	move	a0,s0
41a11334:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a11338:	02203021 	move	a2,s1
41a1133c:	3c0241a1 	lui	v0,0x41a1
41a11340:	24461798 	addiu	a2,v0,6040
41a11344:	02402021 	move	a0,s2
41a11348:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a1134c:	02002821 	move	a1,s0
41a11350:	02602021 	move	a0,s3
41a11354:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11358:	24050010 	li	a1,16
41a1135c:	02602021 	move	a0,s3
41a11360:	02002821 	move	a1,s0
41a11364:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a11368:	02003021 	move	a2,s0
41a1136c:	02602021 	move	a0,s3
41a11370:	02602821 	move	a1,s3
41a11374:	0c684380 	jal	41a10e00 <XYZ_046>
41a11378:	02a03021 	move	a2,s5
41a1137c:	8ec40000 	lw	a0,0(s6)
41a11380:	02603021 	move	a2,s3
41a11384:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a11388:	02402821 	move	a1,s2
41a1138c:	02202021 	move	a0,s1
41a11390:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11394:	24050010 	li	a1,16
41a11398:	3c0641a1 	lui	a2,0x41a1
41a1139c:	02002821 	move	a1,s0
41a113a0:	02402021 	move	a0,s2
41a113a4:	0c6843fc 	jal	41a10ff0 <XYZ_048>
41a113a8:	24c61774 	addiu	a2,a2,6004
41a113ac:	8ec60000 	lw	a2,0(s6)
41a113b0:	02202021 	move	a0,s1
41a113b4:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a113b8:	02402821 	move	a1,s2
41a113bc:	02a03021 	move	a2,s5
41a113c0:	02202021 	move	a0,s1
41a113c4:	0c684380 	jal	41a10e00 <XYZ_046>
41a113c8:	02202821 	move	a1,s1
41a113cc:	02802021 	move	a0,s4
41a113d0:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a113d4:	24050010 	li	a1,16
41a113d8:	8ee50000 	lw	a1,0(s7)
41a113dc:	02802021 	move	a0,s4
41a113e0:	0c6843ac 	jal	41a10eb0 <XYZ_047>
41a113e4:	00a03021 	move	a2,a1
41a113e8:	02802021 	move	a0,s4
41a113ec:	02802821 	move	a1,s4
41a113f0:	0c684380 	jal	41a10e00 <XYZ_046>
41a113f4:	02a03021 	move	a2,s5
41a113f8:	8ec40004 	lw	a0,4(s6)
41a113fc:	02202821 	move	a1,s1
41a11400:	02803021 	move	a2,s4
41a11404:	8fbf0030 	lw	ra,48(sp)
41a11408:	8fb7002c 	lw	s7,44(sp)
41a1140c:	8fb60028 	lw	s6,40(sp)
41a11410:	8fb50024 	lw	s5,36(sp)
41a11414:	8fb40020 	lw	s4,32(sp)
41a11418:	8fb3001c 	lw	s3,28(sp)
41a1141c:	8fb20018 	lw	s2,24(sp)
41a11420:	8fb10014 	lw	s1,20(sp)
41a11424:	8fb00010 	lw	s0,16(sp)
41a11428:	086843fc 	j	41a10ff0 <XYZ_048>
41a1142c:	27bd0038 	addiu	sp,sp,56

41a11430 <XYZ_053>:
41a11430:	27bdffc8 	addiu	sp,sp,-56
41a11434:	afbf0030 	sw	ra,48(sp)
41a11438:	afb5002c 	sw	s5,44(sp)
41a1143c:	afb40028 	sw	s4,40(sp)
41a11440:	afb30024 	sw	s3,36(sp)
41a11444:	afb20020 	sw	s2,32(sp)
41a11448:	afb1001c 	sw	s1,28(sp)
41a1144c:	afb00018 	sw	s0,24(sp)
41a11450:	3c0c41d4 	lui	t4,0x41d4
41a11454:	3c0a41d4 	lui	t2,0x41d4
41a11458:	0080a021 	move	s4,a0
41a1145c:	8cc40000 	lw	a0,0(a2)
41a11460:	00c08821 	move	s1,a2
41a11464:	258ba800 	addiu	t3,t4,-22528
41a11468:	2549aa80 	addiu	t1,t2,-21888
41a1146c:	00a09821 	move	s3,a1
41a11470:	24050008 	li	a1,8
41a11474:	afab0010 	sw	t3,16(sp)
41a11478:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a1147c:	afa90014 	sw	t1,20(sp)
41a11480:	8e240004 	lw	a0,4(s1)
41a11484:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11488:	24050008 	li	a1,8
41a1148c:	8fa40010 	lw	a0,16(sp)
41a11490:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a11494:	24050008 	li	a1,8
41a11498:	8fa40014 	lw	a0,20(sp)
41a1149c:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a114a0:	24050008 	li	a1,8
41a114a4:	02802021 	move	a0,s4
41a114a8:	0c684274 	jal	41a109d0 <XYZ_034>
41a114ac:	24050001 	li	a1,1
41a114b0:	28450000 	slti	a1,v0,0
41a114b4:	2444001f 	addiu	a0,v0,31
41a114b8:	0045200a 	movz	a0,v0,a1
41a114bc:	00403821 	move	a3,v0
41a114c0:	00041143 	sra	v0,a0,0x5
41a114c4:	00024080 	sll	t0,v0,0x2
41a114c8:	8fa40010 	lw	a0,16(sp)
41a114cc:	8e650000 	lw	a1,0(s3)
41a114d0:	01143021 	addu	a2,t0,s4
41a114d4:	00021940 	sll	v1,v0,0x5
41a114d8:	00e38023 	subu	s0,a3,v1
41a114dc:	8cd20000 	lw	s2,0(a2)
41a114e0:	0c6842ab 	jal	41a10aac <XYZ_037>
41a114e4:	2455ffff 	addiu	s5,v0,-1
41a114e8:	8fa40014 	lw	a0,20(sp)
41a114ec:	8e650004 	lw	a1,4(s3)
41a114f0:	2610ffff 	addiu	s0,s0,-1
41a114f4:	0c6842ab 	jal	41a10aac <XYZ_037>
41a114f8:	00000000 	nop
41a114fc:	06000019 	bltz	s0,41a11564 <XYZ_053+0x134>
41a11500:	27a40010 	addiu	a0,sp,16
41a11504:	0c684496 	jal	41a11258 <XYZ_052>
41a11508:	02202821 	move	a1,s1
41a1150c:	8fa40010 	lw	a0,16(sp)
41a11510:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11514:	8e250000 	lw	a1,0(s1)
41a11518:	8fa40014 	lw	a0,20(sp)
41a1151c:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11520:	8e250004 	lw	a1,4(s1)
41a11524:	240f0001 	li	t7,1
41a11528:	020f7004 	sllv	t6,t7,s0
41a1152c:	01d26824 	and	t5,t6,s2
41a11530:	27a40010 	addiu	a0,sp,16
41a11534:	02602821 	move	a1,s3
41a11538:	02203021 	move	a2,s1
41a1153c:	11a0ffef 	beqz	t5,41a114fc <XYZ_053+0xcc>
41a11540:	2610ffff 	addiu	s0,s0,-1
41a11544:	0c684422 	jal	41a11088 <XYZ_051>
41a11548:	00000000 	nop
41a1154c:	8fa40010 	lw	a0,16(sp)
41a11550:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11554:	8e250000 	lw	a1,0(s1)
41a11558:	8fa40014 	lw	a0,20(sp)
41a1155c:	1000ffe5 	b	41a114f4 <XYZ_053+0xc4>
41a11560:	8e250004 	lw	a1,4(s1)
41a11564:	06a00025 	bltz	s5,41a115fc <XYZ_053+0x1cc>
41a11568:	00159080 	sll	s2,s5,0x2
41a1156c:	0254a021 	addu	s4,s2,s4
41a11570:	8e920000 	lw	s2,0(s4)
41a11574:	10000003 	b	41a11584 <XYZ_053+0x154>
41a11578:	2410001f 	li	s0,31
41a1157c:	0602001d 	bltzl	s0,41a115f4 <XYZ_053+0x1c4>
41a11580:	26b5ffff 	addiu	s5,s5,-1
41a11584:	27a40010 	addiu	a0,sp,16
41a11588:	0c684496 	jal	41a11258 <XYZ_052>
41a1158c:	02202821 	move	a1,s1
41a11590:	8fa40010 	lw	a0,16(sp)
41a11594:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11598:	8e250000 	lw	a1,0(s1)
41a1159c:	8fa40014 	lw	a0,20(sp)
41a115a0:	0c6842ab 	jal	41a10aac <XYZ_037>
41a115a4:	8e250004 	lw	a1,4(s1)
41a115a8:	241f0001 	li	ra,1
41a115ac:	021fc804 	sllv	t9,ra,s0
41a115b0:	0332c024 	and	t8,t9,s2
41a115b4:	27a40010 	addiu	a0,sp,16
41a115b8:	02602821 	move	a1,s3
41a115bc:	02203021 	move	a2,s1
41a115c0:	1300ffee 	beqz	t8,41a1157c <XYZ_053+0x14c>
41a115c4:	2610ffff 	addiu	s0,s0,-1
41a115c8:	0c684422 	jal	41a11088 <XYZ_051>
41a115cc:	00000000 	nop
41a115d0:	8fa40010 	lw	a0,16(sp)
41a115d4:	0c6842ab 	jal	41a10aac <XYZ_037>
41a115d8:	8e250000 	lw	a1,0(s1)
41a115dc:	8fa40014 	lw	a0,20(sp)
41a115e0:	0c6842ab 	jal	41a10aac <XYZ_037>
41a115e4:	8e250004 	lw	a1,4(s1)
41a115e8:	0601ffe7 	bgez	s0,41a11588 <XYZ_053+0x158>
41a115ec:	27a40010 	addiu	a0,sp,16
41a115f0:	26b5ffff 	addiu	s5,s5,-1
41a115f4:	06a1ffde 	bgez	s5,41a11570 <XYZ_053+0x140>
41a115f8:	2694fffc 	addiu	s4,s4,-4
41a115fc:	8e240000 	lw	a0,0(s1)
41a11600:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11604:	8fa50010 	lw	a1,16(sp)
41a11608:	8e240004 	lw	a0,4(s1)
41a1160c:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11610:	8fa50014 	lw	a1,20(sp)
41a11614:	8fbf0030 	lw	ra,48(sp)
41a11618:	8fb5002c 	lw	s5,44(sp)
41a1161c:	8fb40028 	lw	s4,40(sp)
41a11620:	8fb30024 	lw	s3,36(sp)
41a11624:	8fb20020 	lw	s2,32(sp)
41a11628:	8fb1001c 	lw	s1,28(sp)
41a1162c:	8fb00018 	lw	s0,24(sp)
41a11630:	00001021 	move	v0,zero
41a11634:	03e00008 	jr	ra
41a11638:	27bd0038 	addiu	sp,sp,56

41a1163c <XYZ_057>:
41a1163c:	27bdffe8 	addiu	sp,sp,-24
41a11640:	afbf0014 	sw	ra,20(sp)
41a11644:	afb00010 	sw	s0,16(sp)
41a11648:	3c0241a1 	lui	v0,0x41a1
41a1164c:	00808021 	move	s0,a0
41a11650:	8c840000 	lw	a0,0(a0)
41a11654:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11658:	24451754 	addiu	a1,v0,5972
41a1165c:	8e040004 	lw	a0,4(s0)
41a11660:	3c0541a1 	lui	a1,0x41a1
41a11664:	0c6842ab 	jal	41a10aac <XYZ_037>
41a11668:	24a51734 	addiu	a1,a1,5940
41a1166c:	8fbf0014 	lw	ra,20(sp)
41a11670:	8fb00010 	lw	s0,16(sp)
41a11674:	00001021 	move	v0,zero
41a11678:	03e00008 	jr	ra
41a1167c:	27bd0018 	addiu	sp,sp,24

41a11680 <XYZ_061>:
41a11680:	3c0841d4 	lui	t0,0x41d4
41a11684:	27bdffd8 	addiu	sp,sp,-40
41a11688:	2503af00 	addiu	v1,t0,-20736
41a1168c:	3c0741d4 	lui	a3,0x41d4
41a11690:	24e2b180 	addiu	v0,a3,-20096
41a11694:	afb20020 	sw	s2,32(sp)
41a11698:	afb1001c 	sw	s1,28(sp)
41a1169c:	00809021 	move	s2,a0
41a116a0:	00a08821 	move	s1,a1
41a116a4:	00602021 	move	a0,v1
41a116a8:	24050008 	li	a1,8
41a116ac:	afbf0024 	sw	ra,36(sp)
41a116b0:	afa20014 	sw	v0,20(sp)
41a116b4:	afa30010 	sw	v1,16(sp)
41a116b8:	afb00018 	sw	s0,24(sp)
41a116bc:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a116c0:	00c08021 	move	s0,a2
41a116c4:	8fa40014 	lw	a0,20(sp)
41a116c8:	0c6842b4 	jal	41a10ad0 <XYZ_038>
41a116cc:	24050008 	li	a1,8
41a116d0:	02002021 	move	a0,s0
41a116d4:	02202821 	move	a1,s1
41a116d8:	0c68450c 	jal	41a11430 <XYZ_053>
41a116dc:	27a60010 	addiu	a2,sp,16
41a116e0:	00408021 	move	s0,v0
41a116e4:	02402021 	move	a0,s2
41a116e8:	14400003 	bnez	v0,41a116f8 <XYZ_061+0x78>
41a116ec:	27a50010 	addiu	a1,sp,16
41a116f0:	0c684408 	jal	41a11020 <XYZ_049>
41a116f4:	00000000 	nop
41a116f8:	02001021 	move	v0,s0
41a116fc:	8fbf0024 	lw	ra,36(sp)
41a11700:	8fb20020 	lw	s2,32(sp)
41a11704:	8fb1001c 	lw	s1,28(sp)
41a11708:	8fb00018 	lw	s0,24(sp)
41a1170c:	03e00008 	jr	ra
41a11710:	27bd0028 	addiu	sp,sp,40

41a11714 <tab_m>:
41a11714:	00000001 00000000 00000400 00000000     ................
	...
41a11730:	00000200                                ....

41a11734 <XYZ_912>:
41a11734:	56fae6a3 56e0c110 f18aeb9b 27a8cd9b     ...V...V.......'
41a11744:	555a67c4 19b7f70f 537dece8 000001db     .gZU......}S....

41a11754 <XYZ_911>:
41a11754:	efad6126 0a4c9d6e 19c26bf5 149563a4     &a..n.L..k...c..
41a11764:	29f22ff4 7e731af1 32ba853a 00000172     ./.)..s~:..2r...

41a11774 <xyz_910>:
41a11774:	00000001 00000000 00000000 00000000     ................
	...

41a11798 <XYZ_913>:
	...

41a117b8 <XYZ_023>:
41a117b8:	27bdffe0 	addiu	sp,sp,-32
41a117bc:	afb10014 	sw	s1,20(sp)
41a117c0:	3c08bfc4 	lui	t0,0xbfc4
41a117c4:	00a08821 	move	s1,a1
41a117c8:	afbf0018 	sw	ra,24(sp)
41a117cc:	afb00010 	sw	s0,16(sp)
41a117d0:	00802821 	move	a1,a0
41a117d4:	00e08021 	move	s0,a3
41a117d8:	02202021 	move	a0,s1
41a117dc:	7c063620 	seh	a2,a2
41a117e0:	250288d5 	addiu	v0,t0,-30507
41a117e4:	0040f809 	jalr	v0
41a117e8:	00003821 	move	a3,zero
41a117ec:	7e071900 	ext	a3,s0,0x4,0x4
41a117f0:	24e60010 	addiu	a2,a3,16
41a117f4:	00d11821 	addu	v1,a2,s1
41a117f8:	90620000 	lbu	v0,0(v1)
41a117fc:	3205000f 	andi	a1,s0,0xf
41a11800:	00b18021 	addu	s0,a1,s1
41a11804:	92040000 	lbu	a0,0(s0)
41a11808:	8fbf0018 	lw	ra,24(sp)
41a1180c:	a2020000 	sb	v0,0(s0)
41a11810:	8fb10014 	lw	s1,20(sp)
41a11814:	8fb00010 	lw	s0,16(sp)
41a11818:	27bd0020 	addiu	sp,sp,32
41a1181c:	03e00008 	jr	ra
41a11820:	a0640000 	sb	a0,0(v1)

41a11824 <XYZ_010>:
41a11824:	3c0241a1 	lui	v0,0x41a1
41a11828:	244c193c 	addiu	t4,v0,6460
41a1182c:	00a06821 	move	t5,a1
41a11830:	00805821 	move	t3,a0
41a11834:	00004821 	move	t1,zero
41a11838:	00a04021 	move	t0,a1
41a1183c:	01805021 	move	t2,t4
41a11840:	00c03821 	move	a3,a2
41a11844:	01692021 	addu	a0,t3,t1
41a11848:	91590000 	lbu	t9,0(t2)
41a1184c:	90980000 	lbu	t8,0(a0)
41a11850:	25290001 	addiu	t1,t1,1
41a11854:	03197826 	xor	t7,t8,t9
41a11858:	a0ef0000 	sb	t7,0(a3)
41a1185c:	91030000 	lbu	v1,0(t0)
41a11860:	29250010 	slti	a1,t1,16
41a11864:	01e37026 	xor	t6,t7,v1
41a11868:	a08e0000 	sb	t6,0(a0)
41a1186c:	24e70001 	addiu	a3,a3,1
41a11870:	254a0001 	addiu	t2,t2,1
41a11874:	14a0fff3 	bnez	a1,41a11844 <XYZ_010+0x20>
41a11878:	25080001 	addiu	t0,t0,1
41a1187c:	25a70010 	addiu	a3,t5,16
41a11880:	25890010 	addiu	t1,t4,16
41a11884:	24c60010 	addiu	a2,a2,16
41a11888:	24080010 	li	t0,16
41a1188c:	01686021 	addu	t4,t3,t0
41a11890:	912e0000 	lbu	t6,0(t1)
41a11894:	91840000 	lbu	a0,0(t4)
41a11898:	25080001 	addiu	t0,t0,1
41a1189c:	008e1026 	xor	v0,a0,t6
41a118a0:	a0c20000 	sb	v0,0(a2)
41a118a4:	90e5fff0 	lbu	a1,-16(a3)
41a118a8:	290a0014 	slti	t2,t0,20
41a118ac:	00456826 	xor	t5,v0,a1
41a118b0:	a18d0000 	sb	t5,0(t4)
41a118b4:	24c60001 	addiu	a2,a2,1
41a118b8:	25290001 	addiu	t1,t1,1
41a118bc:	1540fff3 	bnez	t2,41a1188c <XYZ_010+0x68>
41a118c0:	24e70001 	addiu	a3,a3,1
41a118c4:	03e00008 	jr	ra
41a118c8:	00000000 	nop

41a118cc <XYZ_011>:
41a118cc:	27bdffc0 	addiu	sp,sp,-64
41a118d0:	afb10034 	sw	s1,52(sp)
41a118d4:	afb00030 	sw	s0,48(sp)
41a118d8:	00808821 	move	s1,a0
41a118dc:	00c08021 	move	s0,a2
41a118e0:	00862021 	addu	a0,a0,a2
41a118e4:	27a60018 	addiu	a2,sp,24
41a118e8:	afbf003c 	sw	ra,60(sp)
41a118ec:	afb20038 	sw	s2,56(sp)
41a118f0:	afa00018 	sw	zero,24(sp)
41a118f4:	00e09021 	move	s2,a3
41a118f8:	afa0001c 	sw	zero,28(sp)
41a118fc:	afa00020 	sw	zero,32(sp)
41a11900:	afa00024 	sw	zero,36(sp)
41a11904:	0c684609 	jal	41a11824 <XYZ_010>
41a11908:	afa00028 	sw	zero,40(sp)
41a1190c:	02203021 	move	a2,s1
41a11910:	02003821 	move	a3,s0
41a11914:	27a40018 	addiu	a0,sp,24
41a11918:	24050014 	li	a1,20
41a1191c:	0c68425c 	jal	41a10970 <XYZ_065>
41a11920:	afb20010 	sw	s2,16(sp)
41a11924:	8fbf003c 	lw	ra,60(sp)
41a11928:	8fb20038 	lw	s2,56(sp)
41a1192c:	8fb10034 	lw	s1,52(sp)
41a11930:	8fb00030 	lw	s0,48(sp)
41a11934:	03e00008 	jr	ra
41a11938:	27bd0040 	addiu	sp,sp,64

41a1193c <XYZ_902>:
41a1193c:	56d7f920 a9552430 e525d77a 36b4f8ed      ..V0$U.z.%....6
41a1194c:	af51c541                                A.Q.

41a11950 <XYZ_001>:
41a11950:	27bdffd0 	addiu	sp,sp,-48
41a11954:	afb1001c 	sw	s1,28(sp)
41a11958:	00808821 	move	s1,a0
41a1195c:	00a02021 	move	a0,a1
41a11960:	8fa50040 	lw	a1,64(sp)
41a11964:	afb00018 	sw	s0,24(sp)
41a11968:	26300003 	addiu	s0,s1,3
41a1196c:	240301e9 	li	v1,489
41a11970:	afb40028 	sw	s4,40(sp)
41a11974:	afb30024 	sw	s3,36(sp)
41a11978:	24a50004 	addiu	a1,a1,4
41a1197c:	00e09821 	move	s3,a3
41a11980:	00c0a021 	move	s4,a2
41a11984:	00803821 	move	a3,a0
41a11988:	240601e9 	li	a2,489
41a1198c:	02002021 	move	a0,s0
41a11990:	a7a30010 	sh	v1,16(sp)
41a11994:	afbf002c 	sw	ra,44(sp)
41a11998:	0c684633 	jal	41a118cc <XYZ_011>
41a1199c:	afb20020 	sw	s2,32(sp)
41a119a0:	3c02bfc4 	lui	v0,0xbfc4
41a119a4:	02002021 	move	a0,s0
41a119a8:	27a50010 	addiu	a1,sp,16
41a119ac:	24060002 	li	a2,2
41a119b0:	245288d5 	addiu	s2,v0,-30507
41a119b4:	24070002 	li	a3,2
41a119b8:	24100001 	li	s0,1
41a119bc:	0240f809 	jalr	s2
41a119c0:	a7b00010 	sh	s0,16(sp)
41a119c4:	02202021 	move	a0,s1
41a119c8:	262501ec 	addiu	a1,s1,492
41a119cc:	240601ec 	li	a2,492
41a119d0:	1440001b 	bnez	v0,41a11a40 <XYZ_001+0xf0>
41a119d4:	24030018 	li	v1,24
41a119d8:	240701ec 	li	a3,492
41a119dc:	0c6840ad 	jal	41a102b4 <XYZ_071>
41a119e0:	a7a70010 	sh	a3,16(sp)
41a119e4:	27a40010 	addiu	a0,sp,16
41a119e8:	2625000d 	addiu	a1,s1,13
41a119ec:	24060002 	li	a2,2
41a119f0:	00003821 	move	a3,zero
41a119f4:	14400012 	bnez	v0,41a11a40 <XYZ_001+0xf0>
41a119f8:	24030002 	li	v1,2
41a119fc:	0240f809 	jalr	s2
41a11a00:	a2900000 	sb	s0,0(s4)
41a11a04:	97a90010 	lhu	t1,16(sp)
41a11a08:	8e640018 	lw	a0,24(s3)
41a11a0c:	25280010 	addiu	t0,t1,16
41a11a10:	00002821 	move	a1,zero
41a11a14:	24060020 	li	a2,32
41a11a18:	24070001 	li	a3,1
41a11a1c:	0240f809 	jalr	s2
41a11a20:	a7a80010 	sh	t0,16(sp)
41a11a24:	87a60010 	lh	a2,16(sp)
41a11a28:	8e640018 	lw	a0,24(s3)
41a11a2c:	00d12821 	addu	a1,a2,s1
41a11a30:	00003821 	move	a3,zero
41a11a34:	0240f809 	jalr	s2
41a11a38:	2406001e 	li	a2,30
41a11a3c:	00001821 	move	v1,zero
41a11a40:	8fbf002c 	lw	ra,44(sp)
41a11a44:	8fb40028 	lw	s4,40(sp)
41a11a48:	8fb30024 	lw	s3,36(sp)
41a11a4c:	8fb20020 	lw	s2,32(sp)
41a11a50:	8fb1001c 	lw	s1,28(sp)
41a11a54:	8fb00018 	lw	s0,24(sp)
41a11a58:	00601021 	move	v0,v1
41a11a5c:	03e00008 	jr	ra
41a11a60:	27bd0030 	addiu	sp,sp,48

41a11a64 <XYZ_107>:
41a11a64:	27bdfd18 	addiu	sp,sp,-744
41a11a68:	afb402d0 	sw	s4,720(sp)
41a11a6c:	8fb40308 	lw	s4,776(sp)
41a11a70:	3c04bfc4 	lui	a0,0xbfc4
41a11a74:	268e0600 	addiu	t6,s4,1536
41a11a78:	268d0680 	addiu	t5,s4,1664
41a11a7c:	26880700 	addiu	t0,s4,1792
41a11a80:	26890780 	addiu	t1,s4,1920
41a11a84:	268a0800 	addiu	t2,s4,2048
41a11a88:	268b0880 	addiu	t3,s4,2176
41a11a8c:	268c0900 	addiu	t4,s4,2304
41a11a90:	afb702dc 	sw	s7,732(sp)
41a11a94:	afb502d4 	sw	s5,724(sp)
41a11a98:	afb302cc 	sw	s3,716(sp)
41a11a9c:	249588d5 	addiu	s5,a0,-30507
41a11aa0:	afb102c4 	sw	s1,708(sp)
41a11aa4:	afb002c0 	sw	s0,704(sp)
41a11aa8:	00a09821 	move	s3,a1
41a11aac:	02802021 	move	a0,s4
41a11ab0:	00002821 	move	a1,zero
41a11ab4:	00c08821 	move	s1,a2
41a11ab8:	00e0b821 	move	s7,a3
41a11abc:	24060200 	li	a2,512
41a11ac0:	24070001 	li	a3,1
41a11ac4:	26900200 	addiu	s0,s4,512
41a11ac8:	afbf02e4 	sw	ra,740(sp)
41a11acc:	afae0100 	sw	t6,256(sp)
41a11ad0:	afad0104 	sw	t5,260(sp)
41a11ad4:	afa80280 	sw	t0,640(sp)
41a11ad8:	afa9007c 	sw	t1,124(sp)
41a11adc:	afaa0080 	sw	t2,128(sp)
41a11ae0:	afab02a8 	sw	t3,680(sp)
41a11ae4:	afac02ac 	sw	t4,684(sp)
41a11ae8:	afbe02e0 	sw	s8,736(sp)
41a11aec:	afb602d8 	sw	s6,728(sp)
41a11af0:	afb202c8 	sw	s2,712(sp)
41a11af4:	a7a00018 	sh	zero,24(sp)
41a11af8:	a3a002a0 	sb	zero,672(sp)
41a11afc:	a3a002a1 	sb	zero,673(sp)
41a11b00:	02a0f809 	jalr	s5
41a11b04:	8fbe0304 	lw	s8,772(sp)
41a11b08:	02002021 	move	a0,s0
41a11b0c:	00002821 	move	a1,zero
41a11b10:	24060200 	li	a2,512
41a11b14:	02a0f809 	jalr	s5
41a11b18:	24070001 	li	a3,1
41a11b1c:	3c0341a1 	lui	v1,0x41a1
41a11b20:	2476233c 	addiu	s6,v1,9020
41a11b24:	02602021 	move	a0,s3
41a11b28:	02c02821 	move	a1,s6
41a11b2c:	24060010 	li	a2,16
41a11b30:	02a0f809 	jalr	s5
41a11b34:	24070002 	li	a3,2
41a11b38:	7c021420 	seb	v0,v0
41a11b3c:	14400045 	bnez	v0,41a11c54 <XYZ_107+0x1f0>
41a11b40:	24030003 	li	v1,3
41a11b44:	927901ee 	lbu	t9,494(s3)
41a11b48:	02002021 	move	a0,s0
41a11b4c:	3326000f 	andi	a2,t9,0xf
41a11b50:	a2260000 	sb	a2,0(s1)
41a11b54:	927801fe 	lbu	t8,510(s3)
41a11b58:	24060400 	li	a2,1024
41a11b5c:	3307000f 	andi	a3,t8,0xf
41a11b60:	a2e70000 	sb	a3,0(s7)
41a11b64:	82320000 	lb	s2,0(s1)
41a11b68:	00003821 	move	a3,zero
41a11b6c:	00127a40 	sll	t7,s2,0x9
41a11b70:	01f32821 	addu	a1,t7,s3
41a11b74:	24a50400 	addiu	a1,a1,1024
41a11b78:	02a0f809 	jalr	s5
41a11b7c:	27b20140 	addiu	s2,sp,320
41a11b80:	02002021 	move	a0,s0
41a11b84:	27a500f8 	addiu	a1,sp,248
41a11b88:	02403021 	move	a2,s2
41a11b8c:	0c684000 	jal	41a10000 <XYZ_072>
41a11b90:	27a702a0 	addiu	a3,sp,672
41a11b94:	1440002e 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11b98:	00408021 	move	s0,v0
41a11b9c:	823f0000 	lb	ra,0(s1)
41a11ba0:	82e20000 	lb	v0,0(s7)
41a11ba4:	02802021 	move	a0,s4
41a11ba8:	03e2b821 	addu	s7,ra,v0
41a11bac:	00178a40 	sll	s1,s7,0x9
41a11bb0:	02338021 	addu	s0,s1,s3
41a11bb4:	26050a00 	addiu	a1,s0,2560
41a11bb8:	24060200 	li	a2,512
41a11bbc:	02a0f809 	jalr	s5
41a11bc0:	00003821 	move	a3,zero
41a11bc4:	02802021 	move	a0,s4
41a11bc8:	03c02821 	move	a1,s8
41a11bcc:	27a602a1 	addiu	a2,sp,673
41a11bd0:	27a70268 	addiu	a3,sp,616
41a11bd4:	0c684654 	jal	41a11950 <XYZ_001>
41a11bd8:	afb20010 	sw	s2,16(sp)
41a11bdc:	1440001c 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11be0:	00408021 	move	s0,v0
41a11be4:	27b20020 	addiu	s2,sp,32
41a11be8:	02402021 	move	a0,s2
41a11bec:	00002821 	move	a1,zero
41a11bf0:	2406005b 	li	a2,91
41a11bf4:	02a0f809 	jalr	s5
41a11bf8:	24070001 	li	a3,1
41a11bfc:	02402021 	move	a0,s2
41a11c00:	02602821 	move	a1,s3
41a11c04:	2406002a 	li	a2,42
41a11c08:	02a0f809 	jalr	s5
41a11c0c:	00003821 	move	a3,zero
41a11c10:	02c02821 	move	a1,s6
41a11c14:	02402021 	move	a0,s2
41a11c18:	24060010 	li	a2,16
41a11c1c:	02a0f809 	jalr	s5
41a11c20:	24070002 	li	a3,2
41a11c24:	7c02b420 	seb	s6,v0
41a11c28:	16c00009 	bnez	s6,41a11c50 <XYZ_107+0x1ec>
41a11c2c:	24100003 	li	s0,3
41a11c30:	83a30038 	lb	v1,56(sp)
41a11c34:	240c007e 	li	t4,126
41a11c38:	146c0005 	bne	v1,t4,41a11c50 <XYZ_107+0x1ec>
41a11c3c:	24100008 	li	s0,8
41a11c40:	8faa0034 	lw	t2,52(sp)
41a11c44:	240b0200 	li	t3,512
41a11c48:	114b000f 	beq	t2,t3,41a11c88 <XYZ_107+0x224>
41a11c4c:	24100003 	li	s0,3
41a11c50:	02001821 	move	v1,s0
41a11c54:	8fbf02e4 	lw	ra,740(sp)
41a11c58:	8fbe02e0 	lw	s8,736(sp)
41a11c5c:	8fb702dc 	lw	s7,732(sp)
41a11c60:	8fb602d8 	lw	s6,728(sp)
41a11c64:	8fb502d4 	lw	s5,724(sp)
41a11c68:	8fb402d0 	lw	s4,720(sp)
41a11c6c:	8fb302cc 	lw	s3,716(sp)
41a11c70:	8fb202c8 	lw	s2,712(sp)
41a11c74:	8fb102c4 	lw	s1,708(sp)
41a11c78:	8fb002c0 	lw	s0,704(sp)
41a11c7c:	00601021 	move	v0,v1
41a11c80:	03e00008 	jr	ra
41a11c84:	27bd02e8 	addiu	sp,sp,744
41a11c88:	93a80039 	lbu	t0,57(sp)
41a11c8c:	240900e1 	li	t1,225
41a11c90:	1509fff0 	bne	t0,t1,41a11c54 <XYZ_107+0x1f0>
41a11c94:	02001821 	move	v1,s0
41a11c98:	3c0e41a1 	lui	t6,0x41a1
41a11c9c:	25c52354 	addiu	a1,t6,9044
41a11ca0:	27a4003a 	addiu	a0,sp,58
41a11ca4:	24060010 	li	a2,16
41a11ca8:	02a0f809 	jalr	s5
41a11cac:	24070002 	li	a3,2
41a11cb0:	7c026c20 	seb	t5,v0
41a11cb4:	15a0ffe7 	bnez	t5,41a11c54 <XYZ_107+0x1f0>
41a11cb8:	02001821 	move	v1,s0
41a11cbc:	2676002a 	addiu	s6,s3,42
41a11cc0:	27a4004a 	addiu	a0,sp,74
41a11cc4:	02c02821 	move	a1,s6
41a11cc8:	24060031 	li	a2,49
41a11ccc:	02a0f809 	jalr	s5
41a11cd0:	00003821 	move	a3,zero
41a11cd4:	83a5005a 	lb	a1,90(sp)
41a11cd8:	24040003 	li	a0,3
41a11cdc:	14a4ffdc 	bne	a1,a0,41a11c50 <XYZ_107+0x1ec>
41a11ce0:	24100005 	li	s0,5
41a11ce4:	8fa4007c 	lw	a0,124(sp)
41a11ce8:	00002821 	move	a1,zero
41a11cec:	24060020 	li	a2,32
41a11cf0:	02a0f809 	jalr	s5
41a11cf4:	24070001 	li	a3,1
41a11cf8:	8fa40080 	lw	a0,128(sp)
41a11cfc:	00002821 	move	a1,zero
41a11d00:	24060020 	li	a2,32
41a11d04:	02a0f809 	jalr	s5
41a11d08:	24070001 	li	a3,1
41a11d0c:	8fa4007c 	lw	a0,124(sp)
41a11d10:	2665005b 	addiu	a1,s3,91
41a11d14:	2406001e 	li	a2,30
41a11d18:	02a0f809 	jalr	s5
41a11d1c:	00003821 	move	a3,zero
41a11d20:	8fa40080 	lw	a0,128(sp)
41a11d24:	26650079 	addiu	a1,s3,121
41a11d28:	2406001e 	li	a2,30
41a11d2c:	02a0f809 	jalr	s5
41a11d30:	00003821 	move	a3,zero
41a11d34:	83a500fc 	lb	a1,252(sp)
41a11d38:	0c68458f 	jal	41a1163c <XYZ_057>
41a11d3c:	27a402a8 	addiu	a0,sp,680
41a11d40:	1440ffc3 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11d44:	00408021 	move	s0,v0
41a11d48:	27b1005b 	addiu	s1,sp,91
41a11d4c:	8fa60280 	lw	a2,640(sp)
41a11d50:	02202021 	move	a0,s1
41a11d54:	0c6845a0 	jal	41a11680 <XYZ_061>
41a11d58:	27a5007c 	addiu	a1,sp,124
41a11d5c:	1440ffbc 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11d60:	00408021 	move	s0,v0
41a11d64:	8fa402fc 	lw	a0,764(sp)
41a11d68:	02202821 	move	a1,s1
41a11d6c:	24060020 	li	a2,32
41a11d70:	02a0f809 	jalr	s5
41a11d74:	00003821 	move	a3,zero
41a11d78:	26700097 	addiu	s0,s3,151
41a11d7c:	8fa402fc 	lw	a0,764(sp)
41a11d80:	02003021 	move	a2,s0
41a11d84:	00002821 	move	a1,zero
41a11d88:	24070169 	li	a3,361
41a11d8c:	27b10084 	addiu	s1,sp,132
41a11d90:	0c68425e 	jal	41a10978 <XYZ_067>
41a11d94:	afbe0010 	sw	s8,16(sp)
41a11d98:	02002821 	move	a1,s0
41a11d9c:	02202021 	move	a0,s1
41a11da0:	24060002 	li	a2,2
41a11da4:	02a0f809 	jalr	s5
41a11da8:	00003821 	move	a3,zero
41a11dac:	24060002 	li	a2,2
41a11db0:	02202821 	move	a1,s1
41a11db4:	27a40018 	addiu	a0,sp,24
41a11db8:	02a0f809 	jalr	s5
41a11dbc:	00003821 	move	a3,zero
41a11dc0:	87a60018 	lh	a2,24(sp)
41a11dc4:	240f00fb 	li	t7,251
41a11dc8:	24d80099 	addiu	t8,a2,153
41a11dcc:	24100003 	li	s0,3
41a11dd0:	14cfff9f 	bne	a2,t7,41a11c50 <XYZ_107+0x1ec>
41a11dd4:	7c181e20 	seh	v1,t8
41a11dd8:	00732821 	addu	a1,v1,s3
41a11ddc:	27a4008c 	addiu	a0,sp,140
41a11de0:	2406006c 	li	a2,108
41a11de4:	02a0f809 	jalr	s5
41a11de8:	00003821 	move	a3,zero
41a11dec:	83b9008c 	lb	t9,140(sp)
41a11df0:	24130002 	li	s3,2
41a11df4:	1733ff96 	bne	t9,s3,41a11c50 <XYZ_107+0x1ec>
41a11df8:	24100004 	li	s0,4
41a11dfc:	3c1f41a1 	lui	ra,0x41a1
41a11e00:	27e52350 	addiu	a1,ra,9040
41a11e04:	27a4008d 	addiu	a0,sp,141
41a11e08:	24060004 	li	a2,4
41a11e0c:	02a0f809 	jalr	s5
41a11e10:	24070002 	li	a3,2
41a11e14:	7c02bc20 	seb	s7,v0
41a11e18:	16e0ff8d 	bnez	s7,41a11c50 <XYZ_107+0x1ec>
41a11e1c:	24100003 	li	s0,3
41a11e20:	3c1241a1 	lui	s2,0x41a1
41a11e24:	2645234c 	addiu	a1,s2,9036
41a11e28:	27a40091 	addiu	a0,sp,145
41a11e2c:	24060004 	li	a2,4
41a11e30:	02a0f809 	jalr	s5
41a11e34:	24070002 	li	a3,2
41a11e38:	7c021420 	seb	v0,v0
41a11e3c:	1440ff84 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11e40:	83a300b5 	lb	v1,181(sp)
41a11e44:	240cffbe 	li	t4,-66
41a11e48:	146cff81 	bne	v1,t4,41a11c50 <XYZ_107+0x1ec>
41a11e4c:	24100005 	li	s0,5
41a11e50:	8fa40300 	lw	a0,768(sp)
41a11e54:	00002821 	move	a1,zero
41a11e58:	24060200 	li	a2,512
41a11e5c:	02a0f809 	jalr	s5
41a11e60:	24070001 	li	a3,1
41a11e64:	8fa90300 	lw	t1,768(sp)
41a11e68:	27b700b6 	addiu	s7,sp,182
41a11e6c:	253301ec 	addiu	s3,t1,492
41a11e70:	00003821 	move	a3,zero
41a11e74:	268401dc 	addiu	a0,s4,476
41a11e78:	02e02821 	move	a1,s7
41a11e7c:	02a0f809 	jalr	s5
41a11e80:	24060010 	li	a2,16
41a11e84:	02802021 	move	a0,s4
41a11e88:	240501ec 	li	a1,492
41a11e8c:	0c68405d 	jal	41a10174 <XYZ_070>
41a11e90:	02603021 	move	a2,s3
41a11e94:	8faa0300 	lw	t2,768(sp)
41a11e98:	02802821 	move	a1,s4
41a11e9c:	915001f4 	lbu	s0,500(t2)
41a11ea0:	01402021 	move	a0,t2
41a11ea4:	020a8821 	addu	s1,s0,t2
41a11ea8:	02003021 	move	a2,s0
41a11eac:	02a0f809 	jalr	s5
41a11eb0:	00003821 	move	a3,zero
41a11eb4:	02e02821 	move	a1,s7
41a11eb8:	02202021 	move	a0,s1
41a11ebc:	24060010 	li	a2,16
41a11ec0:	02a0f809 	jalr	s5
41a11ec4:	00003821 	move	a3,zero
41a11ec8:	240b01dc 	li	t3,476
41a11ecc:	01703023 	subu	a2,t3,s0
41a11ed0:	02142821 	addu	a1,s0,s4
41a11ed4:	26240010 	addiu	a0,s1,16
41a11ed8:	02a0f809 	jalr	s5
41a11edc:	00003821 	move	a3,zero
41a11ee0:	8fa60300 	lw	a2,768(sp)
41a11ee4:	02602021 	move	a0,s3
41a11ee8:	24050010 	li	a1,16
41a11eec:	240701ec 	li	a3,492
41a11ef0:	0c684249 	jal	41a10924 <XYZ_064>
41a11ef4:	afbe0010 	sw	s8,16(sp)
41a11ef8:	02c02021 	move	a0,s6
41a11efc:	27a500e4 	addiu	a1,sp,228
41a11f00:	0c6840ad 	jal	41a102b4 <XYZ_071>
41a11f04:	240601c2 	li	a2,450
41a11f08:	1440ff51 	bnez	v0,41a11c50 <XYZ_107+0x1ec>
41a11f0c:	24100002 	li	s0,2
41a11f10:	27a40144 	addiu	a0,sp,324
41a11f14:	27a50095 	addiu	a1,sp,149
41a11f18:	24060010 	li	a2,16
41a11f1c:	02a0f809 	jalr	s5
41a11f20:	24070002 	li	a3,2
41a11f24:	7c028420 	seb	s0,v0
41a11f28:	12000003 	beqz	s0,41a11f38 <XYZ_107+0x4d4>
41a11f2c:	8fa402f8 	lw	a0,760(sp)
41a11f30:	1000ff47 	b	41a11c50 <XYZ_107+0x1ec>
41a11f34:	24100001 	li	s0,1
41a11f38:	27a502b0 	addiu	a1,sp,688
41a11f3c:	24060010 	li	a2,16
41a11f40:	24070002 	li	a3,2
41a11f44:	afa002b0 	sw	zero,688(sp)
41a11f48:	afa002b4 	sw	zero,692(sp)
41a11f4c:	afa002b8 	sw	zero,696(sp)
41a11f50:	02a0f809 	jalr	s5
41a11f54:	afa002bc 	sw	zero,700(sp)
41a11f58:	1040ff3e 	beqz	v0,41a11c54 <XYZ_107+0x1f0>
41a11f5c:	02001821 	move	v1,s0
41a11f60:	8fa402f8 	lw	a0,760(sp)
41a11f64:	27a500a5 	addiu	a1,sp,165
41a11f68:	24060010 	li	a2,16
41a11f6c:	02a0f809 	jalr	s5
41a11f70:	24070002 	li	a3,2
41a11f74:	7c02a420 	seb	s4,v0
41a11f78:	2410000a 	li	s0,10
41a11f7c:	1000ff34 	b	41a11c50 <XYZ_107+0x1ec>
41a11f80:	0294800a 	movz	s0,s4,s4

41a11f84 <PCFWDecryptInit>:
41a11f84:	27bdffa0 	addiu	sp,sp,-96
41a11f88:	afb00038 	sw	s0,56(sp)
41a11f8c:	afbf005c 	sw	ra,92(sp)
41a11f90:	afbe0058 	sw	s8,88(sp)
41a11f94:	afb70054 	sw	s7,84(sp)
41a11f98:	afb60050 	sw	s6,80(sp)
41a11f9c:	afb5004c 	sw	s5,76(sp)
41a11fa0:	afb40048 	sw	s4,72(sp)
41a11fa4:	afb30044 	sw	s3,68(sp)
41a11fa8:	afb20040 	sw	s2,64(sp)
41a11fac:	afb1003c 	sw	s1,60(sp)
41a11fb0:	00808021 	move	s0,a0
41a11fb4:	24850004 	addiu	a1,a0,4
41a11fb8:	8c830004 	lw	v1,4(a0)
41a11fbc:	8c960000 	lw	s6,0(a0)
41a11fc0:	8c840008 	lw	a0,8(a0)
41a11fc4:	24024800 	li	v0,18432
41a11fc8:	afa5002c 	sw	a1,44(sp)
41a11fcc:	afa40030 	sw	a0,48(sp)
41a11fd0:	8e17000c 	lw	s7,12(s0)
41a11fd4:	8e130010 	lw	s3,16(s0)
41a11fd8:	8e040014 	lw	a0,20(s0)
41a11fdc:	1462006b 	bne	v1,v0,41a1218c <PCFWDecryptInit+0x208>
41a11fe0:	24050030 	li	a1,48
41a11fe4:	24064db0 	li	a2,19888
41a11fe8:	14860068 	bne	a0,a2,41a1218c <PCFWDecryptInit+0x208>
41a11fec:	3c0bbfc4 	lui	t3,0xbfc4
41a11ff0:	257588d5 	addiu	s5,t3,-30507
41a11ff4:	02602021 	move	a0,s3
41a11ff8:	00002821 	move	a1,zero
41a11ffc:	24064db0 	li	a2,19888
41a12000:	02a0f809 	jalr	s5
41a12004:	24070001 	li	a3,1
41a12008:	8fa40030 	lw	a0,48(sp)
41a1200c:	266a0020 	addiu	t2,s3,32
41a12010:	26690030 	addiu	t1,s3,48
41a12014:	26684430 	addiu	t0,s3,17456
41a12018:	02c02821 	move	a1,s6
41a1201c:	27a70029 	addiu	a3,sp,41
41a12020:	27a60028 	addiu	a2,sp,40
41a12024:	afaa0010 	sw	t2,16(sp)
41a12028:	afa90018 	sw	t1,24(sp)
41a1202c:	afa80020 	sw	t0,32(sp)
41a12030:	afb30014 	sw	s3,20(sp)
41a12034:	0c684699 	jal	41a11a64 <XYZ_107>
41a12038:	afb7001c 	sw	s7,28(sp)
41a1203c:	26674230 	addiu	a3,s3,16944
41a12040:	26740230 	addiu	s4,s3,560
41a12044:	afa70034 	sw	a3,52(sp)
41a12048:	14400050 	bnez	v0,41a1218c <PCFWDecryptInit+0x208>
41a1204c:	00402821 	move	a1,v0
41a12050:	8e0d0004 	lw	t5,4(s0)
41a12054:	240c4000 	li	t4,16384
41a12058:	25bef800 	addiu	s8,t5,-2048
41a1205c:	17cc004b 	bne	s8,t4,41a1218c <PCFWDecryptInit+0x208>
41a12060:	24050030 	li	a1,48
41a12064:	02802021 	move	a0,s4
41a12068:	00002821 	move	a1,zero
41a1206c:	24064000 	li	a2,16384
41a12070:	02a0f809 	jalr	s5
41a12074:	24070001 	li	a3,1
41a12078:	83a80028 	lb	t0,40(sp)
41a1207c:	26d00200 	addiu	s0,s6,512
41a12080:	00083a40 	sll	a3,t0,0x9
41a12084:	24f10200 	addiu	s1,a3,512
41a12088:	02002821 	move	a1,s0
41a1208c:	02203021 	move	a2,s1
41a12090:	02802021 	move	a0,s4
41a12094:	02a0f809 	jalr	s5
41a12098:	00003821 	move	a3,zero
41a1209c:	83a60029 	lb	a2,41(sp)
41a120a0:	02112021 	addu	a0,s0,s1
41a120a4:	00062a40 	sll	a1,a2,0x9
41a120a8:	24b00200 	addiu	s0,a1,512
41a120ac:	24920400 	addiu	s2,a0,1024
41a120b0:	02918821 	addu	s1,s4,s1
41a120b4:	02402821 	move	a1,s2
41a120b8:	02003021 	move	a2,s0
41a120bc:	02202021 	move	a0,s1
41a120c0:	02a0f809 	jalr	s5
41a120c4:	00003821 	move	a3,zero
41a120c8:	83a30028 	lb	v1,40(sp)
41a120cc:	83a20029 	lb	v0,41(sp)
41a120d0:	02509021 	addu	s2,s2,s0
41a120d4:	0062f821 	addu	ra,v1,v0
41a120d8:	001fca40 	sll	t9,ra,0x9
41a120dc:	0019c023 	negu	t8,t9
41a120e0:	02302021 	addu	a0,s1,s0
41a120e4:	26450200 	addiu	a1,s2,512
41a120e8:	27063c00 	addiu	a2,t8,15360
41a120ec:	02a0f809 	jalr	s5
41a120f0:	00003821 	move	a3,zero
41a120f4:	8fb00030 	lw	s0,48(sp)
41a120f8:	240e0010 	li	t6,16
41a120fc:	00107e43 	sra	t7,s0,0x19
41a12100:	01cf1023 	subu	v0,t6,t7
41a12104:	58400001 	blezl	v0,41a1210c <PCFWDecryptInit+0x188>
41a12108:	24020001 	li	v0,1
41a1210c:	02808021 	move	s0,s4
41a12110:	24114000 	li	s1,16384
41a12114:	10000005 	b	41a1212c <PCFWDecryptInit+0x1a8>
41a12118:	a7a2002a 	sh	v0,42(sp)
41a1211c:	87a6002a 	lh	a2,42(sp)
41a12120:	0c6848db 	jal	41a1236c <XYZ_N02>
41a12124:	2631fe00 	addiu	s1,s1,-512
41a12128:	26100200 	addiu	s0,s0,512
41a1212c:	2a290200 	slti	t1,s1,512
41a12130:	02002021 	move	a0,s0
41a12134:	1120fff9 	beqz	t1,41a1211c <PCFWDecryptInit+0x198>
41a12138:	02602821 	move	a1,s3
41a1213c:	16200020 	bnez	s1,41a121c0 <PCFWDecryptInit+0x23c>
41a12140:	8fa40034 	lw	a0,52(sp)
41a12144:	02c02021 	move	a0,s6
41a12148:	02802821 	move	a1,s4
41a1214c:	03c03021 	move	a2,s8
41a12150:	02a0f809 	jalr	s5
41a12154:	00003821 	move	a3,zero
41a12158:	26e40104 	addiu	a0,s7,260
41a1215c:	27a5002a 	addiu	a1,sp,42
41a12160:	24060002 	li	a2,2
41a12164:	02a0f809 	jalr	s5
41a12168:	00003821 	move	a3,zero
41a1216c:	02602821 	move	a1,s3
41a12170:	26e40108 	addiu	a0,s7,264
41a12174:	24060020 	li	a2,32
41a12178:	02a0f809 	jalr	s5
41a1217c:	00003821 	move	a3,zero
41a12180:	8fb3002c 	lw	s3,44(sp)
41a12184:	00002821 	move	a1,zero
41a12188:	ae7e0000 	sw	s8,0(s3)
41a1218c:	8fbf005c 	lw	ra,92(sp)
41a12190:	8fbe0058 	lw	s8,88(sp)
41a12194:	8fb70054 	lw	s7,84(sp)
41a12198:	8fb60050 	lw	s6,80(sp)
41a1219c:	8fb5004c 	lw	s5,76(sp)
41a121a0:	8fb40048 	lw	s4,72(sp)
41a121a4:	8fb30044 	lw	s3,68(sp)
41a121a8:	8fb20040 	lw	s2,64(sp)
41a121ac:	8fb1003c 	lw	s1,60(sp)
41a121b0:	8fb00038 	lw	s0,56(sp)
41a121b4:	00a01021 	move	v0,a1
41a121b8:	03e00008 	jr	ra
41a121bc:	27bd0060 	addiu	sp,sp,96
41a121c0:	02002821 	move	a1,s0
41a121c4:	02203021 	move	a2,s1
41a121c8:	02a0f809 	jalr	s5
41a121cc:	00003821 	move	a3,zero
41a121d0:	8fa40034 	lw	a0,52(sp)
41a121d4:	87a6002a 	lh	a2,42(sp)
41a121d8:	0c6848db 	jal	41a1236c <XYZ_N02>
41a121dc:	02602821 	move	a1,s3
41a121e0:	8fa50034 	lw	a1,52(sp)
41a121e4:	02002021 	move	a0,s0
41a121e8:	02203021 	move	a2,s1
41a121ec:	02a0f809 	jalr	s5
41a121f0:	00003821 	move	a3,zero
41a121f4:	1000ffd4 	b	41a12148 <PCFWDecryptInit+0x1c4>
41a121f8:	02c02021 	move	a0,s6

41a121fc <PCFWDecrypt>:
41a121fc:	27bdffc8 	addiu	sp,sp,-56
41a12200:	3c0741d4 	lui	a3,0x41d4
41a12204:	3c03bfc4 	lui	v1,0xbfc4
41a12208:	afb30024 	sw	s3,36(sp)
41a1220c:	3c0241d4 	lui	v0,0x41d4
41a12210:	24f3b500 	addiu	s3,a3,-19200
41a12214:	afbf0030 	sw	ra,48(sp)
41a12218:	afb5002c 	sw	s5,44(sp)
41a1221c:	afb40028 	sw	s4,40(sp)
41a12220:	afb20020 	sw	s2,32(sp)
41a12224:	247488d5 	addiu	s4,v1,-30507
41a12228:	afb1001c 	sw	s1,28(sp)
41a1222c:	afb00018 	sw	s0,24(sp)
41a12230:	2455b300 	addiu	s5,v0,-19712
41a12234:	00c08021 	move	s0,a2
41a12238:	00808821 	move	s1,a0
41a1223c:	00a09021 	move	s2,a1
41a12240:	02602021 	move	a0,s3
41a12244:	00002821 	move	a1,zero
41a12248:	24060020 	li	a2,32
41a1224c:	0280f809 	jalr	s4
41a12250:	24070001 	li	a3,1
41a12254:	02a02021 	move	a0,s5
41a12258:	00002821 	move	a1,zero
41a1225c:	24060200 	li	a2,512
41a12260:	0280f809 	jalr	s4
41a12264:	24070001 	li	a3,1
41a12268:	27a40010 	addiu	a0,sp,16
41a1226c:	26050104 	addiu	a1,s0,260
41a12270:	24060002 	li	a2,2
41a12274:	0280f809 	jalr	s4
41a12278:	00003821 	move	a3,zero
41a1227c:	02602021 	move	a0,s3
41a12280:	26050108 	addiu	a1,s0,264
41a12284:	24060020 	li	a2,32
41a12288:	0280f809 	jalr	s4
41a1228c:	00003821 	move	a3,zero
41a12290:	10000006 	b	41a122ac <PCFWDecrypt+0xb0>
41a12294:	2a460200 	slti	a2,s2,512
41a12298:	87a60010 	lh	a2,16(sp)
41a1229c:	0c6848db 	jal	41a1236c <XYZ_N02>
41a122a0:	2652fe00 	addiu	s2,s2,-512
41a122a4:	26310200 	addiu	s1,s1,512
41a122a8:	2a460200 	slti	a2,s2,512
41a122ac:	02202021 	move	a0,s1
41a122b0:	10c0fff9 	beqz	a2,41a12298 <PCFWDecrypt+0x9c>
41a122b4:	02602821 	move	a1,s3
41a122b8:	16400009 	bnez	s2,41a122e0 <PCFWDecrypt+0xe4>
41a122bc:	8fbf0030 	lw	ra,48(sp)
41a122c0:	8fb5002c 	lw	s5,44(sp)
41a122c4:	8fb40028 	lw	s4,40(sp)
41a122c8:	8fb30024 	lw	s3,36(sp)
41a122cc:	8fb20020 	lw	s2,32(sp)
41a122d0:	8fb1001c 	lw	s1,28(sp)
41a122d4:	8fb00018 	lw	s0,24(sp)
41a122d8:	03e00008 	jr	ra
41a122dc:	27bd0038 	addiu	sp,sp,56
41a122e0:	02a02021 	move	a0,s5
41a122e4:	02202821 	move	a1,s1
41a122e8:	02403021 	move	a2,s2
41a122ec:	0280f809 	jalr	s4
41a122f0:	00003821 	move	a3,zero
41a122f4:	87a60010 	lh	a2,16(sp)
41a122f8:	02a02021 	move	a0,s5
41a122fc:	0c6848db 	jal	41a1236c <XYZ_N02>
41a12300:	02602821 	move	a1,s3
41a12304:	02202021 	move	a0,s1
41a12308:	02a02821 	move	a1,s5
41a1230c:	02403021 	move	a2,s2
41a12310:	0280f809 	jalr	s4
41a12314:	00003821 	move	a3,zero
41a12318:	8fbf0030 	lw	ra,48(sp)
41a1231c:	8fb5002c 	lw	s5,44(sp)
41a12320:	8fb40028 	lw	s4,40(sp)
41a12324:	8fb30024 	lw	s3,36(sp)
41a12328:	8fb20020 	lw	s2,32(sp)
41a1232c:	8fb1001c 	lw	s1,28(sp)
41a12330:	8fb00018 	lw	s0,24(sp)
41a12334:	03e00008 	jr	ra
41a12338:	27bd0038 	addiu	sp,sp,56

41a1233c <FileID>:
41a1233c:	44332211 88776655 ccbbaa99 75ffeedd     ."3DUfw........u

41a1234c <Version_Number_minor_FW>:
41a1234c:	00000008                                ....

41a12350 <Version_Number_major_FW>:
41a12350:	00000808                                ....

41a12354 <ContentID_FW>:
41a12354:	b0f8ad3f 4967af2e 635f85b9 2e8e5e4e     ?.....gI.._cN^..

41a12364 <fw_decrypt_op>:
41a12364:	41a11f84 41a121fc                       ...A.!.A

41a1236c <XYZ_N02>:
41a1236c:	27bdffc0 	addiu	sp,sp,-64
41a12370:	3c1841a1 	lui	t8,0x41a1
41a12374:	afb60038 	sw	s6,56(sp)
41a12378:	afb40030 	sw	s4,48(sp)
41a1237c:	afb50034 	sw	s5,52(sp)
41a12380:	afb3002c 	sw	s3,44(sp)
41a12384:	afb20028 	sw	s2,40(sp)
41a12388:	afb10024 	sw	s1,36(sp)
41a1238c:	afb00020 	sw	s0,32(sp)
41a12390:	2716250c 	addiu	s6,t8,9484
41a12394:	8cb5001c 	lw	s5,28(a1)
41a12398:	8ca30000 	lw	v1,0(a1)
41a1239c:	8ca20004 	lw	v0,4(a1)
41a123a0:	8ca80008 	lw	t0,8(a1)
41a123a4:	8ca9000c 	lw	t1,12(a1)
41a123a8:	8caa0010 	lw	t2,16(a1)
41a123ac:	8cab0014 	lw	t3,20(a1)
41a123b0:	8cac0018 	lw	t4,24(a1)
41a123b4:	8f14250c 	lw	s4,9484(t8)
41a123b8:	8ed3001c 	lw	s3,28(s6)
41a123bc:	8ecd0004 	lw	t5,4(s6)
41a123c0:	8ece0008 	lw	t6,8(s6)
41a123c4:	8ecf000c 	lw	t7,12(s6)
41a123c8:	8ed00010 	lw	s0,16(s6)
41a123cc:	8ed10014 	lw	s1,20(s6)
41a123d0:	8ed20018 	lw	s2,24(s6)
41a123d4:	02833826 	xor	a3,s4,v1
41a123d8:	01a26826 	xor	t5,t5,v0
41a123dc:	01c87026 	xor	t6,t6,t0
41a123e0:	01e97826 	xor	t7,t7,t1
41a123e4:	020a8026 	xor	s0,s0,t2
41a123e8:	022b8826 	xor	s1,s1,t3
41a123ec:	024c9026 	xor	s2,s2,t4
41a123f0:	02759826 	xor	s3,s3,s5
41a123f4:	7c06a620 	seh	s4,a2
41a123f8:	afa70000 	sw	a3,0(sp)
41a123fc:	0080b021 	move	s6,a0
41a12400:	afad0004 	sw	t5,4(sp)
41a12404:	afae0008 	sw	t6,8(sp)
41a12408:	afaf000c 	sw	t7,12(sp)
41a1240c:	afb00010 	sw	s0,16(sp)
41a12410:	afb10014 	sw	s1,20(sp)
41a12414:	afb20018 	sw	s2,24(sp)
41a12418:	afb3001c 	sw	s3,28(sp)
41a1241c:	1a800032 	blez	s4,41a124e8 <XYZ_N02+0x17c>
41a12420:	0000c021 	move	t8,zero
41a12424:	001814c0 	sll	v0,t8,0x13
41a12428:	0002cb83 	sra	t9,v0,0xe
41a1242c:	03361021 	addu	v0,t9,s6
41a12430:	8c4c001c 	lw	t4,28(v0)
41a12434:	27030001 	addiu	v1,t8,1
41a12438:	8c440000 	lw	a0,0(v0)
41a1243c:	8c450004 	lw	a1,4(v0)
41a12440:	8c460008 	lw	a2,8(v0)
41a12444:	8c47000c 	lw	a3,12(v0)
41a12448:	8c480010 	lw	t0,16(v0)
41a1244c:	8c490014 	lw	t1,20(v0)
41a12450:	8c4a0018 	lw	t2,24(v0)
41a12454:	01b05826 	xor	t3,t5,s0
41a12458:	7c03c620 	seh	t8,v1
41a1245c:	008d2026 	xor	a0,a0,t5
41a12460:	018b1826 	xor	v1,t4,t3
41a12464:	00ae2826 	xor	a1,a1,t6
41a12468:	00cf3026 	xor	a2,a2,t7
41a1246c:	00f03826 	xor	a3,a3,s0
41a12470:	01114026 	xor	t0,t0,s1
41a12474:	01324826 	xor	t1,t1,s2
41a12478:	01535026 	xor	t2,t2,s3
41a1247c:	01956026 	xor	t4,t4,s5
41a12480:	0314582a 	slt	t3,t8,s4
41a12484:	01a0c821 	move	t9,t5
41a12488:	ac43001c 	sw	v1,28(v0)
41a1248c:	01c06821 	move	t5,t6
41a12490:	ac440000 	sw	a0,0(v0)
41a12494:	01e07021 	move	t6,t7
41a12498:	ac450004 	sw	a1,4(v0)
41a1249c:	02007821 	move	t7,s0
41a124a0:	ac460008 	sw	a2,8(v0)
41a124a4:	02208021 	move	s0,s1
41a124a8:	ac47000c 	sw	a3,12(v0)
41a124ac:	02408821 	move	s1,s2
41a124b0:	ac480010 	sw	t0,16(v0)
41a124b4:	02609021 	move	s2,s3
41a124b8:	ac490014 	sw	t1,20(v0)
41a124bc:	ac4a0018 	sw	t2,24(v0)
41a124c0:	1560ffd8 	bnez	t3,41a12424 <XYZ_N02+0xb8>
41a124c4:	01809821 	move	s3,t4
41a124c8:	afac001c 	sw	t4,28(sp)
41a124cc:	afb20018 	sw	s2,24(sp)
41a124d0:	afb10014 	sw	s1,20(sp)
41a124d4:	afb00010 	sw	s0,16(sp)
41a124d8:	afaf000c 	sw	t7,12(sp)
41a124dc:	afae0008 	sw	t6,8(sp)
41a124e0:	afad0004 	sw	t5,4(sp)
41a124e4:	afb90000 	sw	t9,0(sp)
41a124e8:	8fb60038 	lw	s6,56(sp)
41a124ec:	8fb50034 	lw	s5,52(sp)
41a124f0:	8fb40030 	lw	s4,48(sp)
41a124f4:	8fb3002c 	lw	s3,44(sp)
41a124f8:	8fb20028 	lw	s2,40(sp)
41a124fc:	8fb10024 	lw	s1,36(sp)
41a12500:	8fb00020 	lw	s0,32(sp)
41a12504:	03e00008 	jr	ra
41a12508:	27bd0040 	addiu	sp,sp,64
41a1250c:	42146ea2 	c0	0x146ea2
41a12510:	892c8e85 	lwl	t4,-29051(t1)
41a12514:	9f9f6d27 	0x9f9f6d27
41a12518:	545fedc3 	bnel	v0,ra,41a0dc28 <COS_TABLE+0x28da4>
41a1251c:	09e5c0ca 	j	47970328 <g_upg_file_pos+0x5c34d4c>
41a12520:	2dfa7e61 	sltiu	k0,t7,32353
41a12524:	4e5322e6 	madd.ps	$f11,$f18,$f4,$f19
41a12528:	b19185b9 	0xb19185b9

41a1252c <fresh_display>:
41a1252c:	64c3      	save	24,ra

#pragma __PRQA_IGNORE_START__

void fresh_display(void)
{
41a1252e:	b72d      	lw	a3,41a125e0 <.LBE2+0x24>
    uint32 temp = (_para.g_write_sector * 100) / ((_para.brec_length + _para.lfi_length) >> 9);
41a12530:	47c4      	addiu	a2,a3,4
41a12532:	f020 a659 	lbu	v0,57(a2)
41a12536:	f020 a678 	lbu	v1,56(a2)
41a1253a:	f020 a69a 	lbu	a0,58(a2)
41a1253e:	3540      	sll	a1,v0,8
41a12540:	ed6d      	or	a1,v1
41a12542:	f020 865b 	lb	v0,59(a2)
41a12546:	3380      	sll	v1,a0,8
41a12548:	3460      	sll	a0,v1,8
41a1254a:	ecad      	or	a0,a1
41a1254c:	f600 3240 	sll	v0,24
41a12550:	ea8d      	or	v0,a0
41a12552:	3544      	sll	a1,v0,1
41a12554:	e54d      	addu	v1,a1,v0
41a12556:	346c      	sll	a0,v1,3
41a12558:	e455      	addu	a1,a0,v0
41a1255a:	a651      	lbu	v0,17(a2)
41a1255c:	a670      	lbu	v1,16(a2)
41a1255e:	a692      	lbu	a0,18(a2)
41a12560:	3240      	sll	v0,8
41a12562:	ea6d      	or	v0,v1
41a12564:	3380      	sll	v1,a0,8
41a12566:	8693      	lb	a0,19(a2)
41a12568:	3360      	sll	v1,8
41a1256a:	eb4d      	or	v1,v0
41a1256c:	f600 3480 	sll	a0,24
41a12570:	f020 a641 	lbu	v0,33(a2)
41a12574:	ec6d      	or	a0,v1
41a12576:	f020 a660 	lbu	v1,32(a2)
41a1257a:	3240      	sll	v0,8
41a1257c:	ea6d      	or	v0,v1
41a1257e:	f020 a662 	lbu	v1,34(a2)
41a12582:	35a8      	sll	a1,2
41a12584:	3360      	sll	v1,8
41a12586:	3360      	sll	v1,8
41a12588:	eb4d      	or	v1,v0
41a1258a:	f020 8643 	lb	v0,35(a2)
41a1258e:	f600 3240 	sll	v0,24
41a12592:	ea6d      	or	v0,v1
41a12594:	e44d      	addu	v1,a0,v0
41a12596:	3663      	sra	a2,v1,8
41a12598:	34c7      	sra	a0,a2,1
41a1259a:	ed9a      	div	zero,a1,a0
41a1259c:	9f60      	lw	v1,0(a3)

    if((temp - g_write_percent) >= 10) 
41a1259e:	ed12      	mflo	a1
41a125a0:	e56b      	subu	v0,a1,v1
41a125a2:	5a0a      	sltiu	v0,10
41a125a4:	6007      	bteqz	41a125b4 <.LBB2>
41a125a6:	b710      	lw	a3,41a125e4 <.LBE2+0x28>
    {
        g_write_percent = temp;

        print_log("Write Percent:%d%", g_write_percent);
    }
    CLEAR_WATCH_DOG;
41a125a8:	6d01      	li	a1,1
41a125aa:	9fc0      	lw	a2,0(a3)
41a125ac:	eead      	or	a2,a1
41a125ae:	dfc0      	sw	a2,0(a3)
41a125b0:	6443      	restore	24,ra
41a125b2:	e8a0      	jrc	ra

41a125b4 <.LBB2>:
41a125b4:	0c06      	la	a0,41a125c8 <.LBE2+0xc>
41a125b6:	1a63 e6d6 	jal	41cf9b58 <print_log>
41a125ba:	dfa0      	sw	a1,0(a3)

41a125bc <.LBE2>:
41a125bc:	b70a      	lw	a3,41a125e4 <.LBE2+0x28>
41a125be:	6d01      	li	a1,1
41a125c0:	9fc0      	lw	a2,0(a3)
41a125c2:	eead      	or	a2,a1
41a125c4:	dfc0      	sw	a2,0(a3)
41a125c6:	6443      	restore	24,ra
41a125c8:	e8a0      	jrc	ra
41a125ca:	0000      	addiu	s0,sp,0
41a125cc:	7257      	cmpi	v0,87
41a125ce:	7469      	cmpi	a0,105
41a125d0:	2065      	beqz	s0,41a1269c <ud_sector_read+0x14>
41a125d2:	6550      	move	s2,s0
41a125d4:	6372      	addiu	sp,912
41a125d6:	6e65      	li	a2,101
41a125d8:	3a74      	ld	v1,160(v0)
41a125da:	6425      	restore	40,s0
41a125dc:	0025      	addiu	s0,sp,148
41a125de:	0000      	addiu	s0,sp,0
41a125e0:	b52c      	lw	a1,41a12690 <ud_sector_read+0x8>
41a125e2:	41d3      	daddiu	a2,s1,3
41a125e4:	001c      	addiu	s0,sp,112
41a125e6:	c012      	sb	s0,18(s0)

41a125e8 <check_sum16>:
41a125e8:	6b00      	li	v1,0
}

/******************************************************************************/
/*!
 * \par  Description:
 *      计算两字节校验和
 * \param[in]    buf   data buffer address
 * \param[in]    len   data length, 2byte uint
 * \param[out]   none
 * \return       the checksum
 * \retval
 * \note
 *******************************************************************************/
uint16 check_sum16(uint16 *buf, UINT32 len)
{
    uint32 index;
    uint16 sum = 0;

    for (index = 0; index < len; index++)
41a125ea:	2507      	beqz	a1,41a125fa <check_sum16+0x12>
41a125ec:	acc0      	lhu	a2,0(a0)
    {
        sum += buf[index];
41a125ee:	45af      	addiu	a1,a1,-1
41a125f0:	e3c9      	addu	v0,v1,a2
41a125f2:	6762      	move	v1,v0
41a125f4:	eb31      	zeh	v1
41a125f6:	4482      	addiu	a0,a0,2
41a125f8:	2df9      	bnez	a1,41a125ec <check_sum16+0x4>
41a125fa:	e820      	jr	ra
    }

    return sum;
}
41a125fc:	6743      	move	v0,v1
	...

41a12600 <ud_sector_write>:
41a12600:	64e5      	save	40,ra,s0

/******************************************************************************/
/*!
 * \par  Description:
 *      封装底层写逻辑扇区接口
 * \param[in]    pbuf           写入数据buffer
 * \param[in]    addr           写入逻辑区地址
 * \param[in]    len            写入长度
 * \return       the result
 * \retval       TRUE succeed  FALSE fail
 * \note
 *******************************************************************************/
int32 ud_sector_write(void *pbuf, uint32 addr, uint32 len)
{
41a12602:	f1e0 681f 	li	s0,511
    int32 ret_val;
    ud_sector_param_t ud_sec_param;

    if ((addr & 0x1ff) != 0)
41a12606:	e8ac      	and	s0,a1
41a12608:	6744      	move	v0,a0
41a1260a:	6b00      	li	v1,0
    {
        //非512字节对齐
        return 0;
41a1260c:	2003      	beqz	s0,41a12614 <ud_sector_write+0x14>
41a1260e:	6743      	move	v0,v1
    }

    ud_sec_param.file_offset = (addr >> 9);
    ud_sec_param.sec_num = (len + 0x1ff) >> 9;
    ud_sec_param.sram_addr = (uint32) pbuf;

    ret_val = (int32) base_fw_write(ud_sec_param.file_offset, ud_sec_param.sram_addr, ud_sec_param.sec_num);

    if (ret_val == -1)
    {
        return 0;
    }
    else
    {
        _para.g_write_sector += ud_sec_param.sec_num;
        fresh_display();
        return 1;
    }
}
41a12610:	6465      	restore	40,ra,s0
41a12612:	e8a0      	jrc	ra
41a12614:	f1e0 4e1f 	addiu	a2,511
41a12618:	34a2      	srl	a0,a1,8
41a1261a:	36c2      	srl	a2,8
41a1261c:	3486      	srl	a0,1
41a1261e:	36c6      	srl	a2,1
41a12620:	d206      	sw	v0,24(sp)
41a12622:	67a2      	move	a1,v0
41a12624:	b217      	lw	v0,41a12680 <ud_sector_write+0x80>
41a12626:	d404      	sw	a0,16(sp)
41a12628:	d605      	sw	a2,20(sp)
41a1262a:	ea40      	jalr	v0
41a1262c:	6f0a      	li	a3,10
41a1262e:	ea4f      	not	v0
41a12630:	6770      	move	v1,s0
41a12632:	22ed      	beqz	v0,41a1260e <ud_sector_write+0xe>
41a12634:	b514      	lw	a1,41a12684 <ud_sector_write+0x84>
41a12636:	45a4      	addiu	a1,a1,4
41a12638:	f020 a559 	lbu	v0,57(a1)
41a1263c:	f020 a59a 	lbu	a0,58(a1)
41a12640:	f020 a5f8 	lbu	a3,56(a1)
41a12644:	3380      	sll	v1,a0,8
41a12646:	3640      	sll	a2,v0,8
41a12648:	f020 855b 	lb	v0,59(a1)
41a1264c:	eeed      	or	a2,a3
41a1264e:	3760      	sll	a3,v1,8
41a12650:	9405      	lw	a0,20(sp)
41a12652:	efcd      	or	a3,a2
41a12654:	f600 3340 	sll	v1,v0,24
41a12658:	ebed      	or	v1,a3
41a1265a:	e39d      	addu	a3,v1,a0
41a1265c:	36e2      	srl	a2,a3,8
41a1265e:	f600 33e2 	srl	v1,a3,24
41a12662:	32c2      	srl	v0,a2,8
41a12664:	f020 c57b 	sb	v1,59(a1)
41a12668:	f020 c5f8 	sb	a3,56(a1)
41a1266c:	f020 c5d9 	sb	a2,57(a1)
41a12670:	f020 c55a 	sb	v0,58(a1)
41a12674:	1903 494b 	jal	41a1252c <fresh_display>
41a12678:	6500      	nop
41a1267a:	6b01      	li	v1,1
41a1267c:	17c8      	b	41a1260e <ud_sector_write+0xe>
41a1267e:	0000      	addiu	s0,sp,0
41a12680:	8fdd      	lh	a2,58(a3)
41a12682:	bfc3      	lwu	a2,12(a3)
41a12684:	b52c      	lw	a1,41a12734 <brec_sector_write+0x68>
41a12686:	41d3      	daddiu	a2,s1,3

41a12688 <ud_sector_read>:
41a12688:	64c5      	save	40,ra
/******************************************************************************/
/*!
 * \par  Description:
 *      封装底层读逻辑扇区接口
 * \param[in]    pbuf           读入数据buffer
 * \param[in]    addr           读入逻辑区地址
 * \param[in]    len            读入长度
 * \return       the result
 * \retval       0 succeed  -1 fail
 * \note
 *******************************************************************************/
int32 ud_sector_read(void *pbuf, uint32 addr, uint32 len)
{
41a1268a:	f1e0 6a1f 	li	v0,511
    int32 ret_val;
    ud_sector_param_t ud_sec_param;

    if ((addr & 0x1ff) != 0)
41a1268e:	eaac      	and	v0,a1
41a12690:	67e4      	move	a3,a0
41a12692:	6b00      	li	v1,0
    {
        //非512字节对齐
        return 0;
41a12694:	2203      	beqz	v0,41a1269c <ud_sector_read+0x14>
41a12696:	6743      	move	v0,v1
    }

    ud_sec_param.file_offset = addr >> 9;
    ud_sec_param.sec_num = (len + 0x1ff) >> 9;
    ud_sec_param.sram_addr = (uint32) pbuf;

    ret_val = (int32) base_fw_read(ud_sec_param.file_offset, ud_sec_param.sram_addr, ud_sec_param.sec_num);
    if (ret_val == -1)
    {
        return 0;
    }
    return 1;
}
41a12698:	6445      	restore	40,ra
41a1269a:	e8a0      	jrc	ra
41a1269c:	f1e0 4e1f 	addiu	a2,511
41a126a0:	33a2      	srl	v1,a1,8
41a126a2:	36c2      	srl	a2,8
41a126a4:	3466      	srl	a0,v1,1
41a126a6:	36c6      	srl	a2,1
41a126a8:	b208      	lw	v0,41a126c8 <ud_sector_read+0x40>
41a126aa:	d404      	sw	a0,16(sp)
41a126ac:	d706      	sw	a3,24(sp)
41a126ae:	67a7      	move	a1,a3
41a126b0:	d605      	sw	a2,20(sp)
41a126b2:	ea40      	jalr	v0
41a126b4:	6f0b      	li	a3,11
41a126b6:	ec4f      	not	a0,v0
41a126b8:	5c01      	sltiu	a0,1
41a126ba:	6778      	move	v1,t8
41a126bc:	5b01      	sltiu	v1,1
41a126be:	6778      	move	v1,t8
41a126c0:	6743      	move	v0,v1
41a126c2:	6445      	restore	40,ra
41a126c4:	e8a0      	jrc	ra
41a126c6:	0000      	addiu	s0,sp,0
41a126c8:	8fdd      	lh	a2,58(a3)
41a126ca:	bfc3      	lwu	a2,12(a3)

41a126cc <brec_sector_write>:
41a126cc:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *      封装底层brec逻辑扇区接口
 * \param[in]    pbuf           读入数据buffer
 * \param[in]    addr           读入逻辑区地址
 * \param[in]    len            读入长度
 * \return       the result
 * \retval       0 succeed  -1 fail
 * \note
 *******************************************************************************/
bool brec_sector_write(void *pbuf, uint32 addr, uint32 len)
{
41a126ce:	f1e0 6a1f 	li	v0,511
    int32 ret_val;
    ud_sector_param_t ud_sec_param;
    uint16 *p_lfi_length;
    uint32 lfi_sector_total;
    if ((addr & 0x1ff) != 0)
41a126d2:	eaac      	and	v0,a1
41a126d4:	6724      	move	s1,a0
41a126d6:	6b00      	li	v1,0
    {
        //非512字节对齐
        return FALSE;
41a126d8:	2a38      	bnez	v0,41a1274a <brec_sector_write+0x7e>
41a126da:	253a      	beqz	a1,41a12750 <brec_sector_write+0x84>
    }

    if (addr == 0)
41a126dc:	b22d      	lw	v0,41a12790 <brec_sector_write+0xc4>
41a126de:	4204      	addiu	s0,v0,4
41a126e0:	34a2      	srl	a0,a1,8
    {
        lfi_sector_total = (_para.lfi_length + 511) / 512;
        p_lfi_length = (uint16 *) (pbuf);
        p_lfi_length += 4;
        *p_lfi_length = (uint16)(lfi_sector_total);
    }

    ud_sec_param.file_offset = addr >> 0x9;
41a126e2:	f1f0 46ef 	addiu	a3,a2,511
    ud_sec_param.sec_num = (len + 0x1ff) >> 9;
41a126e6:	f040 a0a9 	lbu	a1,73(s0)
    ud_sec_param.sram_addr = (uint32) pbuf;

    if(_para.fw_mode == 1)
41a126ea:	36e2      	srl	a2,a3,8
41a126ec:	36c6      	srl	a2,1
41a126ee:	7501      	cmpi	a1,1
41a126f0:	3486      	srl	a0,1
41a126f2:	d605      	sw	a2,20(sp)
41a126f4:	d106      	sw	s1,24(sp)
41a126f6:	6102      	btnez	41a126fc <brec_sector_write+0x30>
41a126f8:	b327      	lw	v1,41a12794 <brec_sector_write+0xc8>
    {
        ud_sec_param.file_offset |= (1 << 31);    
41a126fa:	ec6d      	or	a0,v1
41a126fc:	b227      	lw	v0,41a12798 <brec_sector_write+0xcc>
    }

    ret_val = (int32) base_brec_write(ud_sec_param.file_offset, ud_sec_param.sram_addr, ud_sec_param.sec_num);
41a126fe:	d404      	sw	a0,16(sp)
41a12700:	67b1      	move	a1,s1
41a12702:	ea40      	jalr	v0
41a12704:	6f09      	li	a3,9
41a12706:	ea4f      	not	v0
    //ret_val = (int32) base_fw_read(ud_sec_param.file_offset, ud_sec_param.sram_addr, ud_sec_param.sec_num);
    if (ret_val == -1)
41a12708:	6b00      	li	v1,0
    {
        return FALSE;
41a1270a:	221f      	beqz	v0,41a1274a <brec_sector_write+0x7e>
41a1270c:	f020 a059 	lbu	v0,57(s0)
    }
    else
    {
        _para.g_write_sector += ud_sec_param.sec_num;
41a12710:	f020 a07a 	lbu	v1,58(s0)
41a12714:	f020 a0b8 	lbu	a1,56(s0)
41a12718:	3460      	sll	a0,v1,8
41a1271a:	f020 80db 	lb	a2,59(s0)
41a1271e:	3740      	sll	a3,v0,8
41a12720:	efad      	or	a3,a1
41a12722:	3580      	sll	a1,a0,8
41a12724:	9205      	lw	v0,20(sp)
41a12726:	eded      	or	a1,a3
41a12728:	f600 33c0 	sll	v1,a2,24
41a1272c:	ebad      	or	v1,a1
41a1272e:	e359      	addu	a2,v1,v0
41a12730:	34c2      	srl	a0,a2,8
41a12732:	3782      	srl	a3,a0,8
41a12734:	f600 35c2 	srl	a1,a2,24
41a12738:	f020 c0d8 	sb	a2,56(s0)
41a1273c:	f020 c099 	sb	a0,57(s0)
41a12740:	f020 c0fa 	sb	a3,58(s0)
41a12744:	f020 c0bb 	sb	a1,59(s0)
41a12748:	6b01      	li	v1,1
        return TRUE;
41a1274a:	6743      	move	v0,v1
    }
}
41a1274c:	6476      	restore	48,ra,s0-s1
41a1274e:	e8a0      	jrc	ra
41a12750:	b710      	lw	a3,41a1278c <brec_sector_write+0xc0>
41a12752:	4704      	addiu	s0,a3,4
41a12754:	f020 a041 	lbu	v0,33(s0)
41a12758:	f020 a060 	lbu	v1,32(s0)
41a1275c:	f020 a082 	lbu	a0,34(s0)
41a12760:	3740      	sll	a3,v0,8
41a12762:	ef6d      	or	a3,v1
41a12764:	3380      	sll	v1,a0,8
41a12766:	f020 8083 	lb	a0,35(s0)
41a1276a:	3360      	sll	v1,8
41a1276c:	ebed      	or	v1,a3
41a1276e:	f600 3780 	sll	a3,a0,24
41a12772:	ef6d      	or	a3,v1
41a12774:	f1f0 474f 	addiu	v0,a3,511
41a12778:	5200      	slti	v0,0
41a1277a:	6104      	btnez	41a12784 <brec_sector_write+0xb8>
41a1277c:	3343      	sra	v1,v0,8
41a1277e:	3467      	sra	a0,v1,1
41a12780:	c984      	sh	a0,8(s1)
41a12782:	17ae      	b	41a126e0 <brec_sector_write+0x14>
41a12784:	f3f0 474e 	addiu	v0,a3,1022
41a12788:	3343      	sra	v1,v0,8
41a1278a:	3467      	sra	a0,v1,1
41a1278c:	c984      	sh	a0,8(s1)
41a1278e:	17a8      	b	41a126e0 <brec_sector_write+0x14>
41a12790:	b52c      	lw	a1,41a12840 <brec_write+0x90>
41a12792:	41d3      	daddiu	a2,s1,3
41a12794:	0000      	addiu	s0,sp,0
41a12796:	8000      	lb	s0,0(s0)
41a12798:	8fdd      	lh	a2,58(a3)
41a1279a:	bfc3      	lwu	a2,12(a3)

41a1279c <check_sum32>:
41a1279c:	6b00      	li	v1,0

/******************************************************************************/
/*!
 * \par  Description:
 *      计算四字节校验和
 * \param[in]    buf   data buffer address
 * \param[in]    len   data length, 4byte uint
 * \param[out]   none
 * \return       the checksum
 * \retval
 * \note
 *******************************************************************************/
uint32 check_sum32(uint32 *buf, uint32 len)
{
    uint32 index;
    uint32 sum = 0;

    for (index = 0; index < len; index++)
41a1279e:	2505      	beqz	a1,41a127aa <check_sum32+0xe>
41a127a0:	9c40      	lw	v0,0(a0)
    {
        sum += buf[index];
41a127a2:	45af      	addiu	a1,a1,-1
41a127a4:	e34d      	addu	v1,v0
41a127a6:	4484      	addiu	a0,a0,4
41a127a8:	2dfb      	bnez	a1,41a127a0 <check_sum32+0x4>
41a127aa:	e820      	jr	ra
    }

    return sum;
}
41a127ac:	6743      	move	v0,v1
	...

41a127b0 <brec_write>:
41a127b0:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *      读出brec修改nor id后写入nor
 * \param[in]    None           文件句柄
 * \return       bool
 * \retval       写入操作时返回值
 * \note
 *******************************************************************************/
bool brec_write(void)
{
41a127b2:	b232      	lw	v0,41a12878 <brec_write+0xc8>
    int32 ret_val;
    uint16 sector_num;
    uint32 write_addr = 0;

    uint16 sector_total = (uint16)((_para.brec_length + 511) / 512);
41a127b4:	6d00      	li	a1,0
41a127b6:	d505      	sw	a1,20(sp)
41a127b8:	42a4      	addiu	a1,v0,4
41a127ba:	a571      	lbu	v1,17(a1)
41a127bc:	a5f2      	lbu	a3,18(a1)
41a127be:	a530      	lbu	s1,16(a1)
41a127c0:	3460      	sll	a0,v1,8
41a127c2:	8553      	lb	v0,19(a1)
41a127c4:	36e0      	sll	a2,a3,8
41a127c6:	ec2d      	or	a0,s1
41a127c8:	33c0      	sll	v1,a2,8
41a127ca:	eb8d      	or	v1,a0
41a127cc:	f600 3440 	sll	a0,v0,24
41a127d0:	ec6d      	or	a0,v1
41a127d2:	f1f0 444f 	addiu	v0,a0,511
41a127d6:	5200      	slti	v0,0
41a127d8:	6144      	btnez	41a12862 <brec_write+0xb2>
41a127da:	3143      	sra	s1,v0,8
41a127dc:	a555      	lbu	v0,21(a1)
    //Mbrec_write();
    //vfs_file_seek(_para.g_file_sys_id, _para.brec_offset, SEEK_SET, _para.file_handle);
    g_upg_file_pos = _para.brec_offset;
41a127de:	3627      	sra	a2,s1,1
41a127e0:	a594      	lbu	a0,20(a1)
41a127e2:	a576      	lbu	v1,22(a1)
41a127e4:	6726      	move	s1,a2
41a127e6:	3640      	sll	a2,v0,8
41a127e8:	ee8d      	or	a2,a0
41a127ea:	3760      	sll	a3,v1,8
41a127ec:	8597      	lb	a0,23(a1)
41a127ee:	33e0      	sll	v1,a3,8
41a127f0:	ebcd      	or	v1,a2
41a127f2:	f600 3280 	sll	v0,a0,24
41a127f6:	b722      	lw	a3,41a1287c <brec_write+0xcc>
41a127f8:	ea6d      	or	v0,v1
41a127fa:	6e04      	li	a2,4

    _para.progress = WRITE_BREC;
41a127fc:	df40      	sw	v0,0(a3)
41a127fe:	679d      	move	a0,sp
41a12800:	f020 c5dc 	sb	a2,60(a1)
41a12804:	a454      	lbu	v0,20(a0)
41a12806:	677d      	move	v1,sp
41a12808:	f020 c55d 	sb	v0,61(a1)
41a1280c:	a3f4      	lbu	a3,20(v1)
41a1280e:	67dd      	move	a2,sp
41a12810:	f020 c5fe 	sb	a3,62(a1)
41a12814:	a694      	lbu	a0,20(a2)
41a12816:	e931      	zeh	s1
41a12818:	f020 c59f 	sb	a0,63(a1)
41a1281c:	211b      	beqz	s1,41a12854 <brec_write+0xa4>
    while (sector_total > 0)
    {
        if (sector_total > 32)
        {
            sector_num = 32;
        }
        else
        {
            sector_num = sector_total;
        }

        ret_val = _read_file(16 * 1024);
        if (ret_val == 0)
        {
            //解密失败
            return FALSE;
        }
        ret_val = brec_sector_write((uint32 *) BUFFER_ADDR, write_addr, sector_num << 9);
        if (ret_val == 0)
        {
            return FALSE;
        }
        write_addr += sector_num << 9;
        sector_total -= sector_num;
41a1281e:	6d20      	li	a1,32
41a12820:	5921      	sltiu	s1,33
41a12822:	d504      	sw	a1,16(sp)
41a12824:	6001      	bteqz	41a12828 <brec_write+0x78>
41a12826:	d104      	sw	s1,16(sp)
41a12828:	b216      	lw	v0,41a12880 <brec_write+0xd0>
41a1282a:	f008 6c00 	li	a0,16384
41a1282e:	eac0      	jalrc	v0
41a12830:	2216      	beqz	v0,41a1285e <brec_write+0xae>
41a12832:	9704      	lw	a3,16(sp)
41a12834:	b414      	lw	a0,41a12884 <brec_write+0xd4>
41a12836:	30e0      	sll	s0,a3,8
41a12838:	3004      	sll	s0,1
41a1283a:	9505      	lw	a1,20(sp)
41a1283c:	1903 49b3 	jal	41a126cc <brec_sector_write>
41a12840:	67d0      	move	a2,s0
41a12842:	220d      	beqz	v0,41a1285e <brec_write+0xae>
41a12844:	9304      	lw	v1,16(sp)
41a12846:	9505      	lw	a1,20(sp)
41a12848:	e173      	subu	a0,s1,v1
41a1284a:	e519      	addu	a2,a1,s0
41a1284c:	6724      	move	s1,a0
41a1284e:	d605      	sw	a2,20(sp)
41a12850:	e931      	zeh	s1
41a12852:	29e5      	bnez	s1,41a1281e <brec_write+0x6e>
41a12854:	0c05      	la	a0,41a12868 <brec_write+0xb8>
    }

    print_log("brec write over");
41a12856:	1a63 e6d6 	jal	41cf9b58 <print_log>
41a1285a:	6500      	nop
41a1285c:	6a01      	li	v0,1

    return TRUE;
41a1285e:	6475      	restore	40,ra,s0-s1
}
41a12860:	e8a0      	jrc	ra
41a12862:	f3f0 444e 	addiu	v0,a0,1022
41a12866:	17b9      	b	41a127da <brec_write+0x2a>
41a12868:	7262      	cmpi	v0,98
41a1286a:	6365      	addiu	sp,808
41a1286c:	7720      	cmpi	a3,32
41a1286e:	6972      	li	s1,114
41a12870:	6574      	move	s3,a0
41a12872:	6f20      	li	a3,32
41a12874:	6576      	move	s3,a2
41a12876:	0072      	addiu	s0,sp,456
41a12878:	b52c      	lw	a1,41a12928 <mbrec_write+0xa0>
41a1287a:	41d3      	daddiu	a2,s1,3
41a1287c:	b5dc      	lw	a1,41a12bec <lfi_write+0x15c>
41a1287e:	41d3      	daddiu	a2,s1,3
41a12880:	2f99      	bnez	a3,41a127b4 <brec_write+0x4>
41a12882:	41a1      	addiu	a1,s1,1
41a12884:	0000      	addiu	s0,sp,0
41a12886:	0003      	addiu	s0,sp,12

41a12888 <mbrec_write>:
41a12888:	64f7      	save	56,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *      读出brec修改nor id后写入nor
 * \param[in]    None           文件句柄
 * \return       bool
 * \retval       写入操作时返回值
 * \note
 *******************************************************************************/
bool mbrec_write(void)
{
41a1288a:	b32d      	lw	v1,41a1293c <mbrec_write+0xb4>
    int32 ret_val;
    ud_sector_param_t ud_sec_param;

    uint16 sector_total = (uint16)((_para.mbrec_length + 511) / 512);
41a1288c:	43a4      	addiu	a1,v1,4
41a1288e:	a529      	lbu	s1,9(a1)
41a12890:	a5ea      	lbu	a3,10(a1)
41a12892:	a508      	lbu	s0,8(a1)
41a12894:	854b      	lb	v0,11(a1)
41a12896:	3420      	sll	a0,s1,8
41a12898:	36e0      	sll	a2,a3,8
41a1289a:	ec0d      	or	a0,s0
41a1289c:	33c0      	sll	v1,a2,8
41a1289e:	eb8d      	or	v1,a0
41a128a0:	f600 3440 	sll	a0,v0,24
41a128a4:	ec6d      	or	a0,v1
41a128a6:	f1f0 444f 	addiu	v0,a0,511
41a128aa:	5200      	slti	v0,0
41a128ac:	6138      	btnez	41a1291e <mbrec_write+0x96>
41a128ae:	3243      	sra	v0,8
41a128b0:	a50d      	lbu	s0,13(a1)
    //vfs_file_seek(_para.g_file_sys_id, _para.mbrec_offset, SEEK_SET, _para.file_handle);
	g_upg_file_pos = _para.mbrec_offset;
41a128b2:	a5ce      	lbu	a2,14(a1)
41a128b4:	3147      	sra	s1,v0,1
41a128b6:	a5ec      	lbu	a3,12(a1)
41a128b8:	e931      	zeh	s1
41a128ba:	d108      	sw	s1,32(sp)
41a128bc:	33c0      	sll	v1,a2,8
41a128be:	852f      	lb	s1,15(a1)
41a128c0:	3200      	sll	v0,s0,8
41a128c2:	eaed      	or	v0,a3
41a128c4:	3060      	sll	s0,v1,8
41a128c6:	e84d      	or	s0,v0
41a128c8:	f600 3720 	sll	a3,s1,24
41a128cc:	b61d      	lw	a2,41a12940 <mbrec_write+0xb8>
41a128ce:	ef0d      	or	a3,s0
41a128d0:	6908      	li	s1,8

    _para.progress = WRITE_MBREC;
41a128d2:	6800      	li	s0,0
41a128d4:	b21c      	lw	v0,41a12944 <mbrec_write+0xbc>

    ret_val = _read_file(_para.mbrec_length);
41a128d6:	dee0      	sw	a3,0(a2)
41a128d8:	f020 c53c 	sb	s1,60(a1)
41a128dc:	f020 c51d 	sb	s0,61(a1)
41a128e0:	f020 c51e 	sb	s0,62(a1)
41a128e4:	f020 c51f 	sb	s0,63(a1)
41a128e8:	eac0      	jalrc	v0
41a128ea:	6770      	move	v1,s0
    if (ret_val == 0)
    {
        //解密失败
        return FALSE;
41a128ec:	2a03      	bnez	v0,41a128f4 <mbrec_write+0x6c>
41a128ee:	6743      	move	v0,v1
    }
    
    ud_sec_param.file_offset = 0;
    ud_sec_param.sec_num = sector_total;
    ud_sec_param.sram_addr = (uint32) BUFFER_ADDR;

    ret_val = (int32) base_mbrec_write(ud_sec_param.file_offset, ud_sec_param.sram_addr, ud_sec_param.sec_num);

    if (ret_val == -1)
    {
        return FALSE;
    }
  
    PRINT_INFO("mbrec write over");

    return TRUE;
}
41a128f0:	6477      	restore	56,ra,s0-s1
41a128f2:	e8a0      	jrc	ra
41a128f4:	9308      	lw	v1,32(sp)
41a128f6:	b515      	lw	a1,41a12948 <mbrec_write+0xc0>
41a128f8:	b215      	lw	v0,41a1294c <mbrec_write+0xc4>
41a128fa:	d305      	sw	v1,20(sp)
41a128fc:	d506      	sw	a1,24(sp)
41a128fe:	67c3      	move	a2,v1
41a12900:	d004      	sw	s0,16(sp)
41a12902:	6790      	move	a0,s0
41a12904:	ea40      	jalr	v0
41a12906:	67f1      	move	a3,s1
41a12908:	ed4f      	not	a1,v0
41a1290a:	6770      	move	v1,s0
41a1290c:	25f0      	beqz	a1,41a128ee <mbrec_write+0x66>
41a1290e:	b211      	lw	v0,41a12950 <mbrec_write+0xc8>
41a12910:	0c05      	la	a0,41a12924 <mbrec_write+0x9c>
41a12912:	67b0      	move	a1,s0
41a12914:	67d0      	move	a2,s0
41a12916:	ea40      	jalr	v0
41a12918:	6f4b      	li	a3,75
41a1291a:	6b01      	li	v1,1
41a1291c:	17e8      	b	41a128ee <mbrec_write+0x66>
41a1291e:	f3f0 444e 	addiu	v0,a0,1022
41a12922:	17c5      	b	41a128ae <mbrec_write+0x26>
41a12924:	493c      	addiu	s1,60
41a12926:	203e      	beqz	s0,41a129a4 <lfi_check+0x50>
41a12928:	626d      	sw	ra,436(sp)
41a1292a:	6572      	move	s3,v0
41a1292c:	2063      	beqz	s0,41a129f4 <lfi_check+0xa0>
41a1292e:	7277      	cmpi	v0,119
41a12930:	7469      	cmpi	a0,105
41a12932:	2065      	beqz	s0,41a129fe <lfi_check+0xaa>
41a12934:	766f      	cmpi	a2,111
41a12936:	7265      	cmpi	v0,101
41a12938:	0000      	addiu	s0,sp,0
41a1293a:	0000      	addiu	s0,sp,0
41a1293c:	b52c      	lw	a1,41a129ec <lfi_check+0x98>
41a1293e:	41d3      	daddiu	a2,s1,3
41a12940:	b5dc      	lw	a1,41a12cb0 <part_write+0xa8>
41a12942:	41d3      	daddiu	a2,s1,3
41a12944:	2f99      	bnez	a3,41a12878 <brec_write+0xc8>
41a12946:	41a1      	addiu	a1,s1,1
41a12948:	0000      	addiu	s0,sp,0
41a1294a:	0003      	addiu	s0,sp,12
41a1294c:	8fdd      	lh	a2,58(a3)
41a1294e:	bfc3      	lwu	a2,12(a3)
41a12950:	88dd      	lh	a2,58(s0)
41a12952:	bfc3      	lwu	a2,12(a3)

41a12954 <lfi_check>:
41a12954:	64f7      	save	56,ra,s0-s1


/******************************************************************************/
/*!
 * \par  Description:
 *      校验写入固件区的数据是否正确
 * \param[in]    none
 * \return       upgrade_status_e
 * \retval       校验结果返回值
 * \note
 *******************************************************************************/
bool lfi_check(void)
{
41a12956:	b64c      	lw	a2,41a12a84 <lfi_check+0x130>
    LFIHead_t *lfi_head;
    LFIHead_dir_t *lfi_dir;
    uint32 check_sum;
    uint32 index;
    uint8 *buf;
    uint32 sector_num;
    uint32 sector_total;
    uint32 addr;

    lfi_head = (LFIHead_t *) BUFFER_ADDR;
    lfi_dir = (LFIHead_dir_t *) BUFFER_ADDR;

    //读入前8K
    ud_sector_read((uint32 *) BUFFER_ADDR, _para.lfi_start_addr * 512, 0x2000);
41a12958:	b14a      	lw	s1,41a12a80 <lfi_check+0x12c>
41a1295a:	4604      	addiu	s0,a2,4
41a1295c:	f040 a0a1 	lbu	a1,65(s0)
41a12960:	f040 a0e2 	lbu	a3,66(s0)
41a12964:	f040 a060 	lbu	v1,64(s0)
41a12968:	34e0      	sll	a0,a3,8
41a1296a:	32a0      	sll	v0,a1,8
41a1296c:	ea6d      	or	v0,v1
41a1296e:	3680      	sll	a2,a0,8
41a12970:	ee4d      	or	a2,v0
41a12972:	35c0      	sll	a1,a2,8
41a12974:	6791      	move	a0,s1
41a12976:	f004 6e00 	li	a2,8192
41a1297a:	1903 49a2 	jal	41a12688 <ud_sector_read>
41a1297e:	35a4      	sll	a1,1
41a12980:	6791      	move	a0,s1

    //计算头部校验和
    check_sum = check_sum16((uint16*) BUFFER_ADDR, (sizeof(LFIHead_t) - 2) / 2);
41a12982:	1903 497a 	jal	41a125e8 <check_sum16>
41a12986:	6dff      	li	a1,255
41a12988:	f1e0 a97e 	lhu	v1,510(s1)
    if (check_sum != lfi_head->Headchecksum)
41a1298c:	eb4e      	xor	v1,v0
41a1298e:	6a00      	li	v0,0
    {
        return FALSE;
41a12990:	2b71      	bnez	v1,41a12a74 <lfi_check+0x120>
41a12992:	6a00      	li	v0,0
    }

    //SD区文件校验用另外8K空间
    buf = (uint8 *) (BUFFER_ADDR + 0x2000);

    for (index = 0; index < 240; index++)
41a12994:	d204      	sw	v0,16(sp)
41a12996:	67f1      	move	a3,s1
41a12998:	f200 8780 	lb	a0,512(a3)
    {
        if (0 == lfi_dir->diritem[index].filename[0])
41a1299c:	246a      	beqz	a0,41a12a72 <lfi_check+0x11e>
41a1299e:	f200 a7d5 	lbu	a2,533(a3)
        {
            break;
        }

        sector_total = (uint32)(lfi_dir->diritem[index].length / 0x200);
41a129a2:	f200 a736 	lbu	s1,534(a3)
41a129a6:	f200 a794 	lbu	a0,532(a3)
41a129aa:	f200 a757 	lbu	v0,535(a3)
41a129ae:	3320      	sll	v1,s1,8
41a129b0:	35c0      	sll	a1,a2,8
41a129b2:	ed8d      	or	a1,a0
41a129b4:	3660      	sll	a2,v1,8
41a129b6:	eead      	or	a2,a1
41a129b8:	f600 3440 	sll	a0,v0,24
41a129bc:	eccd      	or	a0,a2
41a129be:	3182      	srl	s1,a0,8
41a129c0:	3526      	srl	a1,s1,1
41a129c2:	d506      	sw	a1,24(sp)
41a129c4:	f200 a751 	lbu	v0,529(a3)
        addr = (lfi_dir->diritem[index].offset << 9);
41a129c8:	f200 a7d2 	lbu	a2,530(a3)
41a129cc:	f200 a770 	lbu	v1,528(a3)
41a129d0:	b52f      	lw	a1,41a12a8c <lfi_check+0x138>
        addr += _para.lfi_start_addr * 512;
41a129d2:	3140      	sll	s1,v0,8
41a129d4:	34c0      	sll	a0,a2,8
41a129d6:	b62e      	lw	a2,41a12a8c <lfi_check+0x138>
41a129d8:	e96d      	or	s1,v1
41a129da:	3480      	sll	a0,8
41a129dc:	f040 a561 	lbu	v1,65(a1)
41a129e0:	ec2d      	or	a0,s1
41a129e2:	f040 a622 	lbu	s1,66(a2)
41a129e6:	f040 a540 	lbu	v0,64(a1)
41a129ea:	3360      	sll	v1,8
41a129ec:	3520      	sll	a1,s1,8
41a129ee:	eb4d      	or	v1,v0
41a129f0:	32a0      	sll	v0,a1,8
41a129f2:	ea6d      	or	v0,v1
41a129f4:	e299      	addu	a2,v0,a0
41a129f6:	9306      	lw	v1,24(sp)
        check_sum = 0;

        while (sector_total != 0)
        {
            if (sector_total > 16)
            {
                sector_num = 16;
            }
            else
            {
                sector_num = sector_total;
            }

            if (TRUE != ud_sector_read(buf, addr, sector_num << 9))
            {
                return FALSE;
            }

            check_sum = check_sum + check_sum32((uint32*) buf, sector_num * 512 / 4);

            addr += (sector_num << 9);
            sector_total -= sector_num;
41a129f8:	31c0      	sll	s1,a2,8
41a129fa:	6d00      	li	a1,0
41a129fc:	3124      	sll	s1,1
41a129fe:	d507      	sw	a1,28(sp)
41a12a00:	231f      	beqz	v1,41a12a40 <lfi_check+0xec>
41a12a02:	9506      	lw	a1,24(sp)
41a12a04:	6810      	li	s0,16
41a12a06:	5d11      	sltiu	a1,17
41a12a08:	d005      	sw	s0,20(sp)
41a12a0a:	6001      	bteqz	41a12a0e <lfi_check+0xba>
41a12a0c:	d505      	sw	a1,20(sp)
41a12a0e:	9505      	lw	a1,20(sp)
41a12a10:	b41e      	lw	a0,41a12a88 <lfi_check+0x134>
41a12a12:	32a0      	sll	v0,a1,8
41a12a14:	3044      	sll	s0,v0,1
41a12a16:	67b1      	move	a1,s1
41a12a18:	67d0      	move	a2,s0
41a12a1a:	1903 49a2 	jal	41a12688 <ud_sector_read>
41a12a1e:	d708      	sw	a3,32(sp)
41a12a20:	7201      	cmpi	v0,1
41a12a22:	612a      	btnez	41a12a78 <lfi_check+0x124>
41a12a24:	b419      	lw	a0,41a12a88 <lfi_check+0x134>
41a12a26:	1903 49e7 	jal	41a1279c <check_sum32>
41a12a2a:	350a      	srl	a1,s0,2
41a12a2c:	9706      	lw	a3,24(sp)
41a12a2e:	9507      	lw	a1,28(sp)
41a12a30:	9305      	lw	v1,20(sp)
41a12a32:	e559      	addu	a2,a1,v0
41a12a34:	e773      	subu	a0,a3,v1
41a12a36:	d607      	sw	a2,28(sp)
41a12a38:	e105      	addu	s1,s0
41a12a3a:	d406      	sw	a0,24(sp)
41a12a3c:	9708      	lw	a3,32(sp)
41a12a3e:	2ce1      	bnez	a0,41a12a02 <lfi_check+0xae>
41a12a40:	f200 a75d 	lbu	v0,541(a3)
        }

        if (lfi_dir->diritem[index].checksum != check_sum)
41a12a44:	f200 a7dc 	lbu	a2,540(a3)
41a12a48:	f200 a77e 	lbu	v1,542(a3)
41a12a4c:	3540      	sll	a1,v0,8
41a12a4e:	edcd      	or	a1,a2
41a12a50:	3460      	sll	a0,v1,8
41a12a52:	f200 a7df 	lbu	a2,543(a3)
41a12a56:	3380      	sll	v1,a0,8
41a12a58:	ebad      	or	v1,a1
41a12a5a:	f600 32c0 	sll	v0,a2,24
41a12a5e:	9407      	lw	a0,28(sp)
41a12a60:	ea6d      	or	v0,v1
41a12a62:	ea8e      	xor	v0,a0
41a12a64:	2a09      	bnez	v0,41a12a78 <lfi_check+0x124>
41a12a66:	9404      	lw	a0,16(sp)
41a12a68:	4f20      	addiu	a3,32
41a12a6a:	44a1      	addiu	a1,a0,1
41a12a6c:	5df0      	sltiu	a1,240
41a12a6e:	d504      	sw	a1,16(sp)
41a12a70:	6193      	btnez	41a12998 <lfi_check+0x44>
41a12a72:	6a01      	li	v0,1
        {
            return FALSE;
        }

    }

    return TRUE;
41a12a74:	6477      	restore	56,ra,s0-s1
}
41a12a76:	e8a0      	jrc	ra
41a12a78:	6a00      	li	v0,0
41a12a7a:	6477      	restore	56,ra,s0-s1
41a12a7c:	e8a0      	jrc	ra
41a12a7e:	0000      	addiu	s0,sp,0
41a12a80:	0000      	addiu	s0,sp,0
41a12a82:	0003      	addiu	s0,sp,12
41a12a84:	b52c      	lw	a1,41a12b34 <lfi_write+0xa4>
41a12a86:	41d3      	daddiu	a2,s1,3
41a12a88:	2000      	beqz	s0,41a12a8a <lfi_check+0x136>
41a12a8a:	0003      	addiu	s0,sp,12
41a12a8c:	b530      	lw	a1,41a12b4c <lfi_write+0xbc>
41a12a8e:	41d3      	daddiu	a2,s1,3

41a12a90 <lfi_write>:
41a12a90:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *      读取固件升级文件并写入固件区
 * \param[in]    None           文件句柄
 * \return       bool
 * \retval       写入操作时返回值
 * \note
 *******************************************************************************/
bool lfi_write(void)
{
41a12a92:	b259      	lw	v0,41a12bf4 <lfi_write+0x164>
    int32 ret_val;
    uint32 sector_num;
    LFIHead_t *lfi_head;
    uint16 check_sum;
    uint32 write_addr;

    uint32 sector_total = (uint32)((_para.lfi_length + 511) / 512);
41a12a94:	4224      	addiu	s1,v0,4
41a12a96:	f020 a161 	lbu	v1,33(s1)
41a12a9a:	f020 a1c2 	lbu	a2,34(s1)
41a12a9e:	f020 a1e0 	lbu	a3,32(s1)
41a12aa2:	3460      	sll	a0,v1,8
41a12aa4:	35c0      	sll	a1,a2,8
41a12aa6:	f020 8143 	lb	v0,35(s1)
41a12aaa:	eced      	or	a0,a3
41a12aac:	33a0      	sll	v1,a1,8
41a12aae:	eb8d      	or	v1,a0
41a12ab0:	f600 3240 	sll	v0,24
41a12ab4:	ea6d      	or	v0,v1
41a12ab6:	f1f0 426f 	addiu	v1,v0,511
41a12aba:	5300      	slti	v1,0
41a12abc:	f080 610d 	btnez	41a12bda <lfi_write+0x14a>
41a12ac0:	3263      	sra	v0,v1,8
41a12ac2:	f020 a1c5 	lbu	a2,37(s1)

    lfi_head = (LFIHead_t *) BUFFER_ADDR;

    //准备解析FW
    //vfs_file_seek(_para.g_file_sys_id, _para.lfi_offset, SEEK_SET, _para.file_handle);
    g_upg_file_pos = _para.lfi_offset;
41a12ac6:	f020 a186 	lbu	a0,38(s1)
41a12aca:	3747      	sra	a3,v0,1
41a12acc:	f020 a1a4 	lbu	a1,36(s1)
41a12ad0:	3380      	sll	v1,a0,8
41a12ad2:	d705      	sw	a3,20(sp)
41a12ad4:	32c0      	sll	v0,a2,8
41a12ad6:	f020 81e7 	lb	a3,39(s1)
41a12ada:	eaad      	or	v0,a1
41a12adc:	3660      	sll	a2,v1,8
41a12ade:	ee4d      	or	a2,v0
41a12ae0:	b447      	lw	a0,41a12bfc <lfi_write+0x16c>
41a12ae2:	f600 35e0 	sll	a1,a3,24
41a12ae6:	edcd      	or	a1,a2
41a12ae8:	b246      	lw	v0,41a12c00 <lfi_write+0x170>

    //读取并解析FW前16K数据
    ret_val = _read_file(16 * 1024);
41a12aea:	dca0      	sw	a1,0(a0)
41a12aec:	f008 6c00 	li	a0,16384
41a12af0:	eac0      	jalrc	v0
41a12af2:	6762      	move	v1,v0
    if (ret_val == 0)
    {
        //解密失败
        return FALSE;
41a12af4:	2a03      	bnez	v0,41a12afc <lfi_write+0x6c>
41a12af6:	6743      	move	v0,v1
    }

    _para.progress = READ_LFI;

    libc_memcpy(&lfi_head->udisk_setting, &_para.udisk_setting, sizeof(_para.udisk_setting));

    libc_memcpy(&lfi_head->UsbSetupInfo, _para.UsbSetupInfo, sizeof(_para.UsbSetupInfo));

    libc_memcpy(&(lfi_head->CapInfo.vm_disk_cap), _para.CapInfo, sizeof(_para.CapInfo));

    //计算校验和
    check_sum = check_sum16((uint16*) BUFFER_ADDR, (sizeof(LFIHead_t) - 2) / 2);

    //写入头部校验和
    lfi_head->Headchecksum = check_sum;

    write_addr = _para.lfi_start_addr * 512;

    //写入16K数据
    ret_val = ud_sector_write((uint32 *) BUFFER_ADDR, write_addr, 16 * 1024);

    if (ret_val == 0)
    {
        return FALSE;
    }
    else
    {
        write_addr += 16 * 1024;
    }

    sector_total -= 32;

    while (sector_total > 0)
    {
        if (sector_total > 32)
        {
            sector_num = 32;
        }
        else
        {
            sector_num = sector_total;
        }

        ret_val = _read_file(16 * 1024);
        if (ret_val == 0)
        {
            //解密失败
            return FALSE;
        }

        ret_val = ud_sector_write((uint32 *) BUFFER_ADDR, write_addr, sector_num << 9);
        if (ret_val == 0)
        {
            return FALSE;
        }

        write_addr += sector_num << 9;
        sector_total -= sector_num;
    }

    _para.progress = WRITE_LFI;

    print_log("lfi write over");

    return TRUE;
}
41a12af8:	6476      	restore	48,ra,s0-s1
41a12afa:	e8a0      	jrc	ra
41a12afc:	6c00      	li	a0,0
41a12afe:	f020 c19d 	sb	a0,61(s1)
41a12b02:	f020 c19e 	sb	a0,62(s1)
41a12b06:	f020 c19f 	sb	a0,63(s1)
41a12b0a:	b53b      	lw	a1,41a12bf4 <lfi_write+0x164>
41a12b0c:	b43b      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b0e:	6b06      	li	v1,6
41a12b10:	b03d      	lw	s0,41a12c04 <lfi_write+0x174>
41a12b12:	f020 c17c 	sb	v1,60(s1)
41a12b16:	4c4f      	addiu	a0,79
41a12b18:	4d4c      	addiu	a1,76
41a12b1a:	6e01      	li	a2,1
41a12b1c:	e840      	jalr	s0
41a12b1e:	6f00      	li	a3,0
41a12b20:	b436      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b22:	b535      	lw	a1,41a12bf4 <lfi_write+0x164>
41a12b24:	4c50      	addiu	a0,80
41a12b26:	4d50      	addiu	a1,80
41a12b28:	6e30      	li	a2,48
41a12b2a:	e840      	jalr	s0
41a12b2c:	6f00      	li	a3,0
41a12b2e:	b433      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b30:	67b1      	move	a1,s1
41a12b32:	6e10      	li	a2,16
41a12b34:	6f00      	li	a3,0
41a12b36:	4c28      	addiu	a0,40
41a12b38:	e840      	jalr	s0
41a12b3a:	4d7c      	addiu	a1,124
41a12b3c:	b42f      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b3e:	1903 497a 	jal	41a125e8 <check_sum16>
41a12b42:	6dff      	li	a1,255
41a12b44:	b02d      	lw	s0,41a12bf8 <lfi_write+0x168>
41a12b46:	f1e0 c85e 	sh	v0,510(s0)
41a12b4a:	f040 a1c2 	lbu	a2,66(s1)
41a12b4e:	f040 a141 	lbu	v0,65(s1)
41a12b52:	f040 a1e0 	lbu	a3,64(s1)
41a12b56:	35c0      	sll	a1,a2,8
41a12b58:	3340      	sll	v1,v0,8
41a12b5a:	ebed      	or	v1,a3
41a12b5c:	34a0      	sll	a0,a1,8
41a12b5e:	ec6d      	or	a0,v1
41a12b60:	3080      	sll	s0,a0,8
41a12b62:	3004      	sll	s0,1
41a12b64:	b425      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b66:	f008 6e00 	li	a2,16384
41a12b6a:	1903 4980 	jal	41a12600 <ud_sector_write>
41a12b6e:	67b0      	move	a1,s0
41a12b70:	6762      	move	v1,v0
41a12b72:	22c1      	beqz	v0,41a12af6 <lfi_write+0x66>
41a12b74:	f008 4800 	addiu	s0,16384
41a12b78:	d006      	sw	s0,24(sp)
41a12b7a:	9005      	lw	s0,20(sp)
41a12b7c:	48e0      	addiu	s0,-32
41a12b7e:	2019      	beqz	s0,41a12bb2 <lfi_write+0x122>
41a12b80:	6d20      	li	a1,32
41a12b82:	5821      	sltiu	s0,33
41a12b84:	d504      	sw	a1,16(sp)
41a12b86:	6001      	bteqz	41a12b8a <lfi_write+0xfa>
41a12b88:	d004      	sw	s0,16(sp)
41a12b8a:	b21e      	lw	v0,41a12c00 <lfi_write+0x170>
41a12b8c:	f008 6c00 	li	a0,16384
41a12b90:	eac0      	jalrc	v0
41a12b92:	2226      	beqz	v0,41a12be0 <lfi_write+0x150>
41a12b94:	9604      	lw	a2,16(sp)
41a12b96:	b419      	lw	a0,41a12bf8 <lfi_write+0x168>
41a12b98:	31c0      	sll	s1,a2,8
41a12b9a:	3124      	sll	s1,1
41a12b9c:	9506      	lw	a1,24(sp)
41a12b9e:	1903 4980 	jal	41a12600 <ud_sector_write>
41a12ba2:	67d1      	move	a2,s1
41a12ba4:	221d      	beqz	v0,41a12be0 <lfi_write+0x150>
41a12ba6:	9306      	lw	v1,24(sp)
41a12ba8:	9704      	lw	a3,16(sp)
41a12baa:	e331      	addu	a0,v1,s1
41a12bac:	d406      	sw	a0,24(sp)
41a12bae:	e0e3      	subu	s0,a3
41a12bb0:	28e7      	bnez	s0,41a12b80 <lfi_write+0xf0>
41a12bb2:	b211      	lw	v0,41a12bf4 <lfi_write+0x164>
41a12bb4:	6e00      	li	a2,0
41a12bb6:	42a4      	addiu	a1,v0,4
41a12bb8:	6f07      	li	a3,7
41a12bba:	f020 c5fc 	sb	a3,60(a1)
41a12bbe:	f020 c5dd 	sb	a2,61(a1)
41a12bc2:	f020 c5de 	sb	a2,62(a1)
41a12bc6:	f020 c5df 	sb	a2,63(a1)
41a12bca:	0c07      	la	a0,41a12be4 <lfi_write+0x154>
41a12bcc:	1a63 e6d6 	jal	41cf9b58 <print_log>
41a12bd0:	6500      	nop
41a12bd2:	6b01      	li	v1,1
41a12bd4:	6743      	move	v0,v1
41a12bd6:	6476      	restore	48,ra,s0-s1
41a12bd8:	e8a0      	jrc	ra
41a12bda:	f3f0 426e 	addiu	v1,v0,1022
41a12bde:	1770      	b	41a12ac0 <lfi_write+0x30>
41a12be0:	6762      	move	v1,v0
41a12be2:	1789      	b	41a12af6 <lfi_write+0x66>
41a12be4:	666c      	0x666c
41a12be6:	2069      	beqz	s0,41a12cba <part_write+0xb2>
41a12be8:	7277      	cmpi	v0,119
41a12bea:	7469      	cmpi	a0,105
41a12bec:	2065      	beqz	s0,41a12cb8 <part_write+0xb0>
41a12bee:	766f      	cmpi	a2,111
41a12bf0:	7265      	cmpi	v0,101
41a12bf2:	0000      	addiu	s0,sp,0
41a12bf4:	b52c      	lw	a1,41a12ca4 <part_write+0x9c>
41a12bf6:	41d3      	daddiu	a2,s1,3
41a12bf8:	0000      	addiu	s0,sp,0
41a12bfa:	0003      	addiu	s0,sp,12
41a12bfc:	b5dc      	lw	a1,41a12f6c <decrypt_init+0x34>
41a12bfe:	41d3      	daddiu	a2,s1,3
41a12c00:	2f99      	bnez	a3,41a12b34 <lfi_write+0xa4>
41a12c02:	41a1      	addiu	a1,s1,1
41a12c04:	88d5      	lh	a2,42(s0)
41a12c06:	bfc3      	lwu	a2,12(a3)

41a12c08 <part_write>:
41a12c08:	64f5      	save	40,ra,s0-s1

bool part_write(void)
{
41a12c0a:	b260      	lw	v0,41a12d88 <part_write+0x180>
    int32 ret_val;
    uint16 sector_num;
    uint32 write_addr = 0;

    uint16 sector_total = (uint16)((_para.part_tbl_length + 511) / 512);
41a12c0c:	6800      	li	s0,0
41a12c0e:	d005      	sw	s0,20(sp)
41a12c10:	4204      	addiu	s0,v0,4
41a12c12:	f020 a069 	lbu	v1,41(s0)
41a12c16:	f020 a0ca 	lbu	a2,42(s0)
41a12c1a:	f020 a0e8 	lbu	a3,40(s0)
41a12c1e:	3460      	sll	a0,v1,8
41a12c20:	35c0      	sll	a1,a2,8
41a12c22:	f020 804b 	lb	v0,43(s0)
41a12c26:	eced      	or	a0,a3
41a12c28:	33a0      	sll	v1,a1,8
41a12c2a:	eb8d      	or	v1,a0
41a12c2c:	f600 3240 	sll	v0,24
41a12c30:	ea6d      	or	v0,v1
41a12c32:	f1f0 428f 	addiu	a0,v0,511
41a12c36:	5400      	slti	a0,0
41a12c38:	f080 6113 	btnez	41a12d62 <part_write+0x15a>
41a12c3c:	6f0b      	li	a3,11

    _para.progress = WRITE_PART_TABLE;
41a12c3e:	f020 c0fc 	sb	a3,60(s0)
41a12c42:	677d      	move	v1,sp
41a12c44:	a3d4      	lbu	a2,20(v1)
41a12c46:	675d      	move	v0,sp
41a12c48:	f020 c0dd 	sb	a2,61(s0)
41a12c4c:	a2f4      	lbu	a3,20(v0)
41a12c4e:	677d      	move	v1,sp
41a12c50:	f020 c0fe 	sb	a3,62(s0)
41a12c54:	a3d4      	lbu	a2,20(v1)
41a12c56:	f020 a04d 	lbu	v0,45(s0)
    
    g_upg_file_pos = _para.part_tbl_offset;
41a12c5a:	f020 a0ec 	lbu	a3,44(s0)
41a12c5e:	f020 a06e 	lbu	v1,46(s0)
41a12c62:	f020 c0df 	sb	a2,63(s0)
41a12c66:	3640      	sll	a2,v0,8
41a12c68:	eeed      	or	a2,a3
41a12c6a:	f020 804f 	lb	v0,47(s0)
41a12c6e:	3483      	sra	a0,8
41a12c70:	3760      	sll	a3,v1,8
41a12c72:	3587      	sra	a1,a0,1
41a12c74:	33e0      	sll	v1,a3,8
41a12c76:	ebcd      	or	v1,a2
41a12c78:	ed31      	zeh	a1
41a12c7a:	f600 3740 	sll	a3,v0,24
41a12c7e:	b644      	lw	a2,41a12d8c <part_write+0x184>
41a12c80:	ef6d      	or	a3,v1
41a12c82:	34a0      	sll	a0,a1,8

    ret_val = _read_file(sector_total << 9);
41a12c84:	b243      	lw	v0,41a12d90 <part_write+0x188>
41a12c86:	dee0      	sw	a3,0(a2)
41a12c88:	ea40      	jalr	v0
41a12c8a:	3484      	sll	a0,1
41a12c8c:	9305      	lw	v1,20(sp)
      
    if (ret_val == 0)
    {
        return FALSE;
41a12c8e:	2a03      	bnez	v0,41a12c96 <part_write+0x8e>
41a12c90:	6743      	move	v0,v1
    }

    base_part_table_write((uint8 *) BUFFER_ADDR);
 
    sector_total = (uint16)((_para.part_length + 511) / 512);
	
	g_upg_file_pos = _para.part_offset;

    _para.progress = WRITE_PART;
    
    while (sector_total > 0)
    {
        if (sector_total > 32)
        {
            sector_num = 32;
        }
        else
        {
            sector_num = sector_total;
        }

        ret_val = _read_file(16 * 1024);
        if (ret_val == 0)
        {
            //解密失败
            return FALSE;
        }
        ret_val = base_part_data_write((uint32 *)BUFFER_ADDR, write_addr, sector_num << 9);
        if (ret_val == 0)
        {
            return FALSE;
        }
        write_addr += sector_num << 9;
        sector_total -= sector_num;
    }

    PRINT_INFO("part write over");
  
    return TRUE;    
}
41a12c92:	6475      	restore	40,ra,s0-s1
41a12c94:	e8a0      	jrc	ra
41a12c96:	9505      	lw	a1,20(sp)
41a12c98:	b43f      	lw	a0,41a12d94 <part_write+0x18c>
41a12c9a:	b140      	lw	s1,41a12d98 <part_write+0x190>
41a12c9c:	67c5      	move	a2,a1
41a12c9e:	e940      	jalr	s1
41a12ca0:	6f07      	li	a3,7
41a12ca2:	f020 a091 	lbu	a0,49(s0)
41a12ca6:	f020 a072 	lbu	v1,50(s0)
41a12caa:	f020 a0f0 	lbu	a3,48(s0)
41a12cae:	3280      	sll	v0,a0,8
41a12cb0:	3660      	sll	a2,v1,8
41a12cb2:	f020 80b3 	lb	a1,51(s0)
41a12cb6:	eaed      	or	v0,a3
41a12cb8:	31c0      	sll	s1,a2,8
41a12cba:	e94d      	or	s1,v0
41a12cbc:	f600 34a0 	sll	a0,a1,24
41a12cc0:	ec2d      	or	a0,s1
41a12cc2:	f1f0 444f 	addiu	v0,a0,511
41a12cc6:	5200      	slti	v0,0
41a12cc8:	6151      	btnez	41a12d6c <part_write+0x164>
41a12cca:	3143      	sra	s1,v0,8
41a12ccc:	f020 a0d6 	lbu	a2,54(s0)
41a12cd0:	f020 a055 	lbu	v0,53(s0)
41a12cd4:	3727      	sra	a3,s1,1
41a12cd6:	f020 a074 	lbu	v1,52(s0)
41a12cda:	35c0      	sll	a1,a2,8
41a12cdc:	6727      	move	s1,a3
41a12cde:	3440      	sll	a0,v0,8
41a12ce0:	f020 80f7 	lb	a3,55(s0)
41a12ce4:	ec6d      	or	a0,v1
41a12ce6:	33a0      	sll	v1,a1,8
41a12ce8:	eb8d      	or	v1,a0
41a12cea:	f600 32e0 	sll	v0,a3,24
41a12cee:	b628      	lw	a2,41a12d8c <part_write+0x184>
41a12cf0:	ea6d      	or	v0,v1
41a12cf2:	6d0a      	li	a1,10
41a12cf4:	de40      	sw	v0,0(a2)
41a12cf6:	679d      	move	a0,sp
41a12cf8:	f020 c0bc 	sb	a1,60(s0)
41a12cfc:	a4f4      	lbu	a3,20(a0)
41a12cfe:	677d      	move	v1,sp
41a12d00:	f020 c0fd 	sb	a3,61(s0)
41a12d04:	a3d4      	lbu	a2,20(v1)
41a12d06:	675d      	move	v0,sp
41a12d08:	f020 c0de 	sb	a2,62(s0)
41a12d0c:	a2b4      	lbu	a1,20(v0)
41a12d0e:	e931      	zeh	s1
41a12d10:	f020 c0bf 	sb	a1,63(s0)
41a12d14:	211c      	beqz	s1,41a12d4e <part_write+0x146>
41a12d16:	6c20      	li	a0,32
41a12d18:	5921      	sltiu	s1,33
41a12d1a:	d404      	sw	a0,16(sp)
41a12d1c:	6001      	bteqz	41a12d20 <part_write+0x118>
41a12d1e:	d104      	sw	s1,16(sp)
41a12d20:	b21c      	lw	v0,41a12d90 <part_write+0x188>
41a12d22:	f008 6c00 	li	a0,16384
41a12d26:	eac0      	jalrc	v0
41a12d28:	221f      	beqz	v0,41a12d68 <part_write+0x160>
41a12d2a:	9504      	lw	a1,16(sp)
41a12d2c:	b41a      	lw	a0,41a12d94 <part_write+0x18c>
41a12d2e:	30a0      	sll	s0,a1,8
41a12d30:	3004      	sll	s0,1
41a12d32:	9505      	lw	a1,20(sp)
41a12d34:	b219      	lw	v0,41a12d98 <part_write+0x190>
41a12d36:	67d0      	move	a2,s0
41a12d38:	ea40      	jalr	v0
41a12d3a:	6f0c      	li	a3,12
41a12d3c:	2215      	beqz	v0,41a12d68 <part_write+0x160>
41a12d3e:	9304      	lw	v1,16(sp)
41a12d40:	9405      	lw	a0,20(sp)
41a12d42:	e17b      	subu	a2,s1,v1
41a12d44:	e41d      	addu	a3,a0,s0
41a12d46:	6726      	move	s1,a2
41a12d48:	d705      	sw	a3,20(sp)
41a12d4a:	e931      	zeh	s1
41a12d4c:	29e4      	bnez	s1,41a12d16 <part_write+0x10e>
41a12d4e:	6d00      	li	a1,0
41a12d50:	b213      	lw	v0,41a12d9c <part_write+0x194>
41a12d52:	0c09      	la	a0,41a12d74 <part_write+0x16c>
41a12d54:	67c5      	move	a2,a1
41a12d56:	ea40      	jalr	v0
41a12d58:	6f4b      	li	a3,75
41a12d5a:	6b01      	li	v1,1
41a12d5c:	6743      	move	v0,v1
41a12d5e:	6475      	restore	40,ra,s0-s1
41a12d60:	e8a0      	jrc	ra
41a12d62:	f3f0 428e 	addiu	a0,v0,1022
41a12d66:	176a      	b	41a12c3c <part_write+0x34>
41a12d68:	6762      	move	v1,v0
41a12d6a:	1792      	b	41a12c90 <part_write+0x88>
41a12d6c:	f3f0 444e 	addiu	v0,a0,1022
41a12d70:	17ac      	b	41a12cca <part_write+0xc2>
41a12d72:	0000      	addiu	s0,sp,0
41a12d74:	493c      	addiu	s1,60
41a12d76:	203e      	beqz	s0,41a12df4 <_read_file_translate+0x4>
41a12d78:	6170      	btnez	41a12e5a <_read_file_translate+0x6a>
41a12d7a:	7472      	cmpi	a0,114
41a12d7c:	7720      	cmpi	a3,32
41a12d7e:	6972      	li	s1,114
41a12d80:	6574      	move	s3,a0
41a12d82:	6f20      	li	a3,32
41a12d84:	6576      	move	s3,a2
41a12d86:	0072      	addiu	s0,sp,456
41a12d88:	b52c      	lw	a1,41a12e38 <_read_file_translate+0x48>
41a12d8a:	41d3      	daddiu	a2,s1,3
41a12d8c:	b5dc      	lw	a1,41a130fc <search_content+0x44>
41a12d8e:	41d3      	daddiu	a2,s1,3
41a12d90:	2f99      	bnez	a3,41a12cc4 <part_write+0xbc>
41a12d92:	41a1      	addiu	a1,s1,1
41a12d94:	0000      	addiu	s0,sp,0
41a12d96:	0003      	addiu	s0,sp,12
41a12d98:	8fdd      	lh	a2,58(a3)
41a12d9a:	bfc3      	lwu	a2,12(a3)
41a12d9c:	88dd      	lh	a2,58(s0)
41a12d9e:	bfc3      	lwu	a2,12(a3)

41a12da0 <upgrade_fw_write>:
41a12da0:	64c3      	save	24,ra
/******************************************************************************/
/*!
 * \par  Description:
 *  装载物理介质和文件系统，并检测是否存在升级文件
 * \param[in]    disk_type 磁盘类型
 * \param[out]   none
 * \return       none
 * \ingroup      upgrade
 * \note
 *******************************************************************************/
bool upgrade_fw_write(void)
{
41a12da2:	1903 49ec 	jal	41a127b0 <brec_write>
    int32 ret_val;
    uint8 *p_temp_buffer = (uint8 *) BT_VRAM_BUFF;

    if(brec_write() != TRUE)
41a12da6:	6500      	nop
41a12da8:	7201      	cmpi	v0,1
41a12daa:	611c      	btnez	41a12de4 <.L120>
41a12dac:	1903 4aa4 	jal	41a12a90 <lfi_write>
    {
        goto err_ret; 
    }

    if(lfi_write() != TRUE)
41a12db0:	6500      	nop
41a12db2:	7201      	cmpi	v0,1
41a12db4:	6117      	btnez	41a12de4 <.L120>
41a12db6:	b30e      	lw	v1,41a12dec <.L120+0x8>
    {
        goto err_ret; 
    }

    if(_para.fw_mode == 1)  
41a12db8:	f040 a34d 	lbu	v0,77(v1)
41a12dbc:	7201      	cmpi	v0,1
41a12dbe:	600d      	bteqz	41a12dda <upgrade_fw_write+0x3a>
41a12dc0:	1903 4a22 	jal	41a12888 <mbrec_write>
    {
        if(part_write() != TRUE)
        {
            goto err_ret;    
        } 
    }  

    if(mbrec_write() != TRUE)
41a12dc4:	6500      	nop
41a12dc6:	7201      	cmpi	v0,1
41a12dc8:	610d      	btnez	41a12de4 <.L120>
41a12dca:	1903 4a55 	jal	41a12954 <lfi_check>
    {
        goto err_ret; 
    }

    if(lfi_check() != TRUE)
41a12dce:	6500      	nop
41a12dd0:	7201      	cmpi	v0,1
41a12dd2:	6a01      	li	v0,1
    {
        goto err_ret;    
    }   

    //立即退出，避免执行bank函数
    return TRUE;
41a12dd4:	6107      	btnez	41a12de4 <.L120>
41a12dd6:	6443      	restore	24,ra
    
err_ret: 
    return FALSE;
}
41a12dd8:	e8a0      	jrc	ra
41a12dda:	1903 4b02 	jal	41a12c08 <part_write>
41a12dde:	6500      	nop
41a12de0:	7201      	cmpi	v0,1
41a12de2:	60ee      	bteqz	41a12dc0 <upgrade_fw_write+0x20>

41a12de4 <.L120>:
41a12de4:	6a00      	li	v0,0
41a12de6:	6443      	restore	24,ra
41a12de8:	e8a0      	jrc	ra
41a12dea:	0000      	addiu	s0,sp,0
41a12dec:	b52c      	lw	a1,41a12e9c <_read_file_translate+0xac>
41a12dee:	41d3      	daddiu	a2,s1,3

41a12df0 <_read_file_translate>:
41a12df0:	f008 64f7 	save	a0-a1,56,ra,s0-s1
 * \return       the read len
 * \note
 *******************************************************************************/
uint32 _read_file_translate(uint8 *read_buffer, uint32 read_len)
{
41a12df4:	b748      	lw	a3,41a12f14 <_read_file_translate+0x124>
    uint32 read_file_offset;
    uint32 decrypt_mode;
    uint32 once_read_len;
    //uint32 true_read;
    uint32 need_read_len;
    uint32 true_read_offset;
    uint32 ret_val = 0;

    //vfs_file_tell(_para.g_file_sys_id, &read_file_offset, _para.file_handle);
    read_file_offset = g_upg_file_pos;
41a12df6:	9f40      	lw	v0,0(a3)
41a12df8:	6c01      	li	a0,1

    if (read_file_offset < MIN_ONCE_READ_LEN)
    {
        decrypt_mode = 0;

        //前18k数据需要整体读取并解密
        if (read_file_offset != 0)
        {
            //vfs_file_seek(_para.g_file_sys_id, 0, SEEK_SET, _para.file_handle);
            g_upg_file_pos = 0;
        }
    } 
    else
    {
        decrypt_mode = 1;
41a12dfa:	f009 5a00 	sltiu	v0,18432
41a12dfe:	d204      	sw	v0,16(sp)
41a12e00:	6762      	move	v1,v0
41a12e02:	d405      	sw	a0,20(sp)
41a12e04:	6003      	bteqz	41a12e0c <_read_file_translate+0x1c>
41a12e06:	6a00      	li	v0,0
41a12e08:	d205      	sw	v0,20(sp)
41a12e0a:	2b5b      	bnez	v1,41a12ec2 <_read_file_translate+0xd2>
41a12e0c:	950f      	lw	a1,60(sp)
    }

    //true_read = 1;

    need_read_len = read_len;
41a12e0e:	d506      	sw	a1,24(sp)
41a12e10:	255d      	beqz	a1,41a12ecc <_read_file_translate+0xdc>

    //有可能出现需要多次读取数据，且跨越解密头的数据
    while (need_read_len != 0)
    {
        if (need_read_len < MIN_ONCE_READ_LEN)
        {
            once_read_len = need_read_len;
        }
        else
        {
            once_read_len = MIN_ONCE_READ_LEN;
        }

        //至少保证读取18k数据
        if ((once_read_len < MIN_ONCE_READ_LEN) && (decrypt_mode == 0))
        {
            once_read_len = MIN_ONCE_READ_LEN;
        }

        //if (true_read == 1)
        {
            //读取文件
            //vfs_file_read(_para.g_file_sys_id,  once_read_len, _para.file_handle);
            att_test_fread(g_decrypt.pInOutBuffer, once_read_len, g_upgrade_file_offset + g_upg_file_pos);
            
            g_upg_file_pos += once_read_len;

            if (decrypt_mode == 0)
            {
                g_decrypt.InOutLen = DECRYPT_USR_BUF_LEN;

                PRINT_INFO("firt decrypt init");
                PCFWDecryptInit(&g_decrypt);
                once_read_len = (uint32) g_decrypt.InOutLen;

                PRINT_INFO("firt decrypt over");
            }
            else
            {
                PCFWDecrypt(g_decrypt.pInOutBuffer, (void *) once_read_len, g_decrypt.pGLBuffer);
            }
        }

        if (once_read_len != 0)
        {
            if (decrypt_mode != 0)
            {
                libc_memcpy(read_buffer, g_decrypt.pInOutBuffer, once_read_len);

            }
            else
            {
                //判断解密头数据是否超过16k的长度
                if (once_read_len > read_file_offset)
                {
                    once_read_len = once_read_len - read_file_offset;
                }
                else
                {
                    //超过，则实际解密长度为18k减去应有的长度
                    once_read_len = MIN_ONCE_READ_LEN - read_file_offset;
                }

                if (read_file_offset != 0)
                {
                    true_read_offset = (uint32)(read_file_offset - (uint32) g_firmware_offset);
                }
                else
                {
                    true_read_offset = 0;
                }

                libc_memcpy(read_buffer, g_decrypt.pInOutBuffer + true_read_offset, once_read_len);
                decrypt_mode = 1;
            }

            need_read_len -= once_read_len;
            read_buffer += once_read_len;
41a12e12:	9206      	lw	v0,24(sp)
41a12e14:	f009 6800 	li	s0,18432
41a12e18:	f009 5a00 	sltiu	v0,18432
41a12e1c:	6005      	bteqz	41a12e28 <_read_file_translate+0x38>
41a12e1e:	9605      	lw	a2,20(sp)
41a12e20:	6702      	move	s0,v0
41a12e22:	2e02      	bnez	a2,41a12e28 <_read_file_translate+0x38>
41a12e24:	f009 6800 	li	s0,18432
41a12e28:	b53d      	lw	a1,41a12f1c <_read_file_translate+0x12c>
41a12e2a:	b13c      	lw	s1,41a12f18 <_read_file_translate+0x128>
41a12e2c:	9dc0      	lw	a2,0(a1)
41a12e2e:	9980      	lw	a0,0(s1)
41a12e30:	b23c      	lw	v0,41a12f20 <_read_file_translate+0x130>
41a12e32:	e679      	addu	a2,v1
41a12e34:	d708      	sw	a3,32(sp)
41a12e36:	ea40      	jalr	v0
41a12e38:	67b0      	move	a1,s0
41a12e3a:	9708      	lw	a3,32(sp)
41a12e3c:	9205      	lw	v0,20(sp)
41a12e3e:	9f80      	lw	a0,0(a3)
41a12e40:	e40d      	addu	v1,a0,s0
41a12e42:	df60      	sw	v1,0(a3)
41a12e44:	2a37      	bnez	v0,41a12eb4 <_read_file_translate+0xc4>
41a12e46:	9505      	lw	a1,20(sp)
41a12e48:	b337      	lw	v1,41a12f24 <_read_file_translate+0x134>
41a12e4a:	f009 4a00 	addiu	v0,18432
41a12e4e:	67c5      	move	a2,a1
41a12e50:	6f4b      	li	a3,75
41a12e52:	0c25      	la	a0,41a12ee4 <_read_file_translate+0xf4>
41a12e54:	eb40      	jalr	v1
41a12e56:	d941      	sw	v0,4(s1)
41a12e58:	b034      	lw	s0,41a12f28 <_read_file_translate+0x138>
41a12e5a:	e840      	jalr	s0
41a12e5c:	6791      	move	a0,s1
41a12e5e:	9505      	lw	a1,20(sp)
41a12e60:	b331      	lw	v1,41a12f24 <_read_file_translate+0x134>
41a12e62:	0c27      	la	a0,41a12efc <_read_file_translate+0x10c>
41a12e64:	67c5      	move	a2,a1
41a12e66:	6f4b      	li	a3,75
41a12e68:	eb40      	jalr	v1
41a12e6a:	9901      	lw	s0,4(s1)
41a12e6c:	201e      	beqz	s0,41a12eaa <_read_file_translate+0xba>
41a12e6e:	9405      	lw	a0,20(sp)
41a12e70:	2c30      	bnez	a0,41a12ed2 <_read_file_translate+0xe2>
41a12e72:	9404      	lw	a0,16(sp)
41a12e74:	ec03      	sltu	a0,s0
41a12e76:	e083      	subu	s0,a0
41a12e78:	6103      	btnez	41a12e80 <_read_file_translate+0x90>
41a12e7a:	f009 6d00 	li	a1,18432
41a12e7e:	e583      	subu	s0,a1,a0
41a12e80:	9304      	lw	v1,16(sp)
41a12e82:	2303      	beqz	v1,41a12e8a <_read_file_translate+0x9a>
41a12e84:	b42c      	lw	a0,41a12f34 <_read_file_translate+0x144>
41a12e86:	9ce0      	lw	a3,0(a0)
41a12e88:	e3ef      	subu	v1,a3
41a12e8a:	b524      	lw	a1,41a12f18 <_read_file_translate+0x128>
41a12e8c:	940e      	lw	a0,56(sp)
41a12e8e:	9dc0      	lw	a2,0(a1)
41a12e90:	b228      	lw	v0,41a12f30 <_read_file_translate+0x140>
41a12e92:	e675      	addu	a1,a2,v1
41a12e94:	6f00      	li	a3,0
41a12e96:	ea40      	jalr	v0
41a12e98:	67d0      	move	a2,s0
41a12e9a:	6b01      	li	v1,1
41a12e9c:	d305      	sw	v1,20(sp)
41a12e9e:	9206      	lw	v0,24(sp)
41a12ea0:	940e      	lw	a0,56(sp)
41a12ea2:	e20f      	subu	v1,v0,s0
41a12ea4:	e41d      	addu	a3,a0,s0
41a12ea6:	d306      	sw	v1,24(sp)
41a12ea8:	d70e      	sw	a3,56(sp)
41a12eaa:	9606      	lw	a2,24(sp)
41a12eac:	260f      	beqz	a2,41a12ecc <_read_file_translate+0xdc>
41a12eae:	b71a      	lw	a3,41a12f14 <_read_file_translate+0x124>
41a12eb0:	9f60      	lw	v1,0(a3)
41a12eb2:	17af      	b	41a12e12 <_read_file_translate+0x22>
41a12eb4:	b719      	lw	a3,41a12f18 <_read_file_translate+0x128>
41a12eb6:	b21e      	lw	v0,41a12f2c <_read_file_translate+0x13c>
41a12eb8:	9f80      	lw	a0,0(a3)
41a12eba:	9fc3      	lw	a2,12(a3)
41a12ebc:	ea40      	jalr	v0
41a12ebe:	67b0      	move	a1,s0
41a12ec0:	17d5      	b	41a12e6c <_read_file_translate+0x7c>
41a12ec2:	950f      	lw	a1,60(sp)
41a12ec4:	6762      	move	v1,v0
41a12ec6:	df40      	sw	v0,0(a3)
41a12ec8:	d506      	sw	a1,24(sp)
41a12eca:	2da3      	bnez	a1,41a12e12 <_read_file_translate+0x22>
41a12ecc:	920f      	lw	v0,60(sp)
        }
    }

    return read_len;
}
41a12ece:	6477      	restore	56,ra,s0-s1
41a12ed0:	e8a0      	jrc	ra
41a12ed2:	b612      	lw	a2,41a12f18 <_read_file_translate+0x128>
41a12ed4:	940e      	lw	a0,56(sp)
41a12ed6:	9ea0      	lw	a1,0(a2)
41a12ed8:	b216      	lw	v0,41a12f30 <_read_file_translate+0x140>
41a12eda:	67d0      	move	a2,s0
41a12edc:	ea40      	jalr	v0
41a12ede:	6f00      	li	a3,0
41a12ee0:	17de      	b	41a12e9e <_read_file_translate+0xae>
41a12ee2:	0000      	addiu	s0,sp,0
41a12ee4:	493c      	addiu	s1,60
41a12ee6:	203e      	beqz	s0,41a12f64 <decrypt_init+0x2c>
41a12ee8:	6966      	li	s1,102
41a12eea:	7472      	cmpi	a0,114
41a12eec:	6420      	restore	128,s0
41a12eee:	6365      	addiu	sp,808
41a12ef0:	7972      	sd	v1,144(s1)
41a12ef2:	7470      	cmpi	a0,112
41a12ef4:	6920      	li	s1,32
41a12ef6:	696e      	li	s1,110
41a12ef8:	0074      	addiu	s0,sp,464
41a12efa:	0000      	addiu	s0,sp,0
41a12efc:	493c      	addiu	s1,60
41a12efe:	203e      	beqz	s0,41a12f7c <decrypt_init+0x44>
41a12f00:	6966      	li	s1,102
41a12f02:	7472      	cmpi	a0,114
41a12f04:	6420      	restore	128,s0
41a12f06:	6365      	addiu	sp,808
41a12f08:	7972      	sd	v1,144(s1)
41a12f0a:	7470      	cmpi	a0,112
41a12f0c:	6f20      	li	a3,32
41a12f0e:	6576      	move	s3,a2
41a12f10:	0072      	addiu	s0,sp,456
41a12f12:	0000      	addiu	s0,sp,0
41a12f14:	b5dc      	lw	a1,41a13284 <search_content+0x1cc>
41a12f16:	41d3      	daddiu	a2,s1,3
41a12f18:	b5bc      	lw	a1,41a13208 <search_content+0x150>
41a12f1a:	41d3      	daddiu	a2,s1,3
41a12f1c:	b5d4      	lw	a1,41a1326c <search_content+0x1b4>
41a12f1e:	41d3      	daddiu	a2,s1,3
41a12f20:	892d      	lh	s1,26(s1)
41a12f22:	bfc3      	lwu	a2,12(a3)
41a12f24:	88dd      	lh	a2,58(s0)
41a12f26:	bfc3      	lwu	a2,12(a3)
41a12f28:	1f84 41a1 	jalx	42710684 <g_upg_file_pos+0x9d50a8>
41a12f2c:	21fc      	beqz	s1,41a12f26 <_read_file_translate+0x136>
41a12f2e:	41a1      	addiu	a1,s1,1
41a12f30:	88d5      	lh	a2,42(s0)
41a12f32:	bfc3      	lwu	a2,12(a3)
41a12f34:	b520      	lw	a1,41a12fb4 <check_key_offset_exist+0x4>
41a12f36:	41d3      	daddiu	a2,s1,3

41a12f38 <decrypt_init>:
41a12f38:	64c3      	save	24,ra

void decrypt_init(void)
{
41a12f3a:	b50f      	lw	a1,41a12f74 <decrypt_init+0x3c>
    int32 file_len = 0;

    g_decrypt.initusebuffer = (uint8 *) DECRYPT_INIT_BUF_ADDR;
41a12f3c:	b70f      	lw	a3,41a12f78 <decrypt_init+0x40>
41a12f3e:	b410      	lw	a0,41a12f7c <decrypt_init+0x44>
    g_decrypt.initusebufferlen = DECRYPT_INIT_BUF_LEN;
    g_decrypt.pInOutBuffer = (uint8 *) DECRYPT_USE_BUF_ADDR;
41a12f40:	dde4      	sw	a3,16(a1)
41a12f42:	b711      	lw	a3,41a12f84 <decrypt_init+0x4c>
    g_decrypt.InOutLen = DECRYPT_USR_BUF_LEN;
    g_decrypt.pGLBuffer = (uint8 *) DECRYPT_GL_BUF_ADDR;

    //vfs_file_get_size(_para.g_file_sys_id, &file_len, _para.file_handle, 0);
    g_decrypt.FileLength = (long) g_upg_file_len;
41a12f44:	f5a9 6e10 	li	a2,19888
41a12f48:	ddc5      	sw	a2,20(a1)
41a12f4a:	b20e      	lw	v0,41a12f80 <decrypt_init+0x48>
41a12f4c:	9fc0      	lw	a2,0(a3)
41a12f4e:	dd80      	sw	a0,0(a1)
41a12f50:	f009 6b00 	li	v1,18432
41a12f54:	b40d      	lw	a0,41a12f88 <decrypt_init+0x50>

    g_upg_file_pos = 0;
41a12f56:	dd61      	sw	v1,4(a1)
41a12f58:	dd43      	sw	v0,12(a1)
41a12f5a:	ddc2      	sw	a2,8(a1)
41a12f5c:	b30c      	lw	v1,41a12f8c <decrypt_init+0x54>

    g_write_percent = 0;
41a12f5e:	6d00      	li	a1,0
41a12f60:	dca0      	sw	a1,0(a0)
41a12f62:	b20d      	lw	v0,41a12f94 <decrypt_init+0x5c>

    libc_memset(&_para, 0, sizeof(_para));
41a12f64:	b40b      	lw	a0,41a12f90 <decrypt_init+0x58>
41a12f66:	dba0      	sw	a1,0(v1)
41a12f68:	6e8c      	li	a2,140
41a12f6a:	ea40      	jalr	v0
41a12f6c:	6f01      	li	a3,1
41a12f6e:	6443      	restore	24,ra
41a12f70:	e8a0      	jrc	ra
41a12f72:	0000      	addiu	s0,sp,0
41a12f74:	b5bc      	lw	a1,41a13264 <search_content+0x1ac>
41a12f76:	41d3      	daddiu	a2,s1,3
41a12f78:	0000      	addiu	s0,sp,0
41a12f7a:	0003      	addiu	s0,sp,12
41a12f7c:	b000      	lw	s0,41a12f7c <decrypt_init+0x44>
41a12f7e:	0002      	addiu	s0,sp,8
41a12f80:	f800      	ld	s0,0(sp)
41a12f82:	0002      	addiu	s0,sp,8
41a12f84:	b5d8      	lw	a1,41a132e4 <search_content+0x22c>
41a12f86:	41d3      	daddiu	a2,s1,3
41a12f88:	b5dc      	lw	a1,41a132f8 <search_content+0x240>
41a12f8a:	41d3      	daddiu	a2,s1,3
41a12f8c:	b52c      	lw	a1,41a1303c <parse_firmware+0x4c>
41a12f8e:	41d3      	daddiu	a2,s1,3
41a12f90:	b530      	lw	a1,41a13050 <parse_firmware+0x60>
41a12f92:	41d3      	daddiu	a2,s1,3
41a12f94:	88d5      	lh	a2,42(s0)
41a12f96:	bfc3      	lwu	a2,12(a3)

41a12f98 <_read_file>:
41a12f98:	64c3      	save	24,ra
} 

/******************************************************************************/
/*!
 * \par  Description:
 *	  读取文件数据并解密
 * \param[in]    read_len       读取的数据长度
 * \param[in]    fp             文件句柄
 * \return       the result
 * \note
 *******************************************************************************/
uint32 _read_file(uint32 read_len)
{
41a12f9a:	67a4      	move	a1,a0
41a12f9c:	b204      	lw	v0,41a12fac <_read_file+0x14>
    uint32 read_bytes;

    read_bytes = _read_file_translate(BUFFER_ADDR, read_len);
41a12f9e:	b403      	lw	a0,41a12fa8 <_read_file+0x10>
41a12fa0:	eac0      	jalrc	v0
41a12fa2:	6443      	restore	24,ra

    return read_bytes;
}
41a12fa4:	e8a0      	jrc	ra
41a12fa6:	0000      	addiu	s0,sp,0
41a12fa8:	0000      	addiu	s0,sp,0
41a12faa:	0003      	addiu	s0,sp,12
41a12fac:	2df1      	bnez	a1,41a12f90 <decrypt_init+0x58>
41a12fae:	41a1      	addiu	a1,s1,1

41a12fb0 <check_key_offset_exist>:
41a12fb0:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
 * \note
 *******************************************************************************/
static AFI_DIR_t *check_key_offset_exist(char *buffer, uint32 buffer_len, const uint8 *key_word, uint8 key_len,
        uint8 offset)
{
41a12fb4:	675d      	move	v0,sp
41a12fb6:	d704      	sw	a3,16(sp)
41a12fb8:	f020 a298 	lbu	a0,56(v0)
41a12fbc:	6900      	li	s1,0
    uint32 str_len = 0;

    while (str_len < buffer_len)
    {
        if (libc_memcmp(&buffer[str_len + offset], key_word, (uint32) key_len) == 0)
        {
            return (AFI_DIR_t *) (&buffer[str_len]);
        }
        else
        {
            str_len += 32;
41a12fbe:	250e      	beqz	a1,41a12fdc <check_key_offset_exist+0x2c>
41a12fc0:	930a      	lw	v1,40(sp)
41a12fc2:	e461      	addu	s0,a0,v1
41a12fc4:	950c      	lw	a1,48(sp)
41a12fc6:	9604      	lw	a2,16(sp)
41a12fc8:	b309      	lw	v1,41a12fec <check_key_offset_exist+0x3c>
41a12fca:	6790      	move	a0,s0
41a12fcc:	eb40      	jalr	v1
41a12fce:	6f02      	li	a3,2
41a12fd0:	2208      	beqz	v0,41a12fe2 <check_key_offset_exist+0x32>
41a12fd2:	950b      	lw	a1,44(sp)
41a12fd4:	4920      	addiu	s1,32
41a12fd6:	e9a3      	sltu	s1,a1
41a12fd8:	4820      	addiu	s0,32
41a12fda:	61f4      	btnez	41a12fc4 <check_key_offset_exist+0x14>
41a12fdc:	6a00      	li	v0,0
        }
    }

    return NULL;
41a12fde:	6475      	restore	40,ra,s0-s1
}
41a12fe0:	e8a0      	jrc	ra
41a12fe2:	940a      	lw	a0,40(sp)
41a12fe4:	e429      	addu	v0,a0,s1
41a12fe6:	6475      	restore	40,ra,s0-s1
41a12fe8:	e8a0      	jrc	ra
41a12fea:	0000      	addiu	s0,sp,0
41a12fec:	88d5      	lh	a2,42(s0)
41a12fee:	bfc3      	lwu	a2,12(a3)

41a12ff0 <parse_firmware>:
41a12ff0:	64e3      	save	24,ra,s0

void parse_firmware(void)
{
41a12ff2:	b02f      	lw	s0,41a130ac <parse_firmware+0xbc>
    mbrec_head_info *mbrec_head;

    //vfs_file_seek(_para.g_file_sys_id, _para.mbrec_offset, SEEK_SET, _para.file_handle);
    g_upg_file_pos = _para.mbrec_offset;
41a12ff4:	a04d      	lbu	v0,13(s0)
41a12ff6:	a08e      	lbu	a0,14(s0)
41a12ff8:	a0ac      	lbu	a1,12(s0)
41a12ffa:	3380      	sll	v1,a0,8
41a12ffc:	3740      	sll	a3,v0,8
41a12ffe:	80cf      	lb	a2,15(s0)
41a13000:	efad      	or	a3,a1
41a13002:	3560      	sll	a1,v1,8
41a13004:	eded      	or	a1,a3
41a13006:	f600 34c0 	sll	a0,a2,24
41a1300a:	b328      	lw	v1,41a130a8 <parse_firmware+0xb8>
41a1300c:	ecad      	or	a0,a1
41a1300e:	b229      	lw	v0,41a130b0 <parse_firmware+0xc0>

    _read_file(512);
41a13010:	db80      	sw	a0,0(v1)
41a13012:	f200 6c00 	li	a0,512
41a13016:	eac0      	jalrc	v0
41a13018:	b227      	lw	v0,41a130b0 <parse_firmware+0xc0>

    mbrec_head = (mbrec_head_info *) BUFFER_ADDR;
41a1301a:	aa43      	lhu	v0,6(v0)

    if (mbrec_head->brec_backup_blk_addr != 0)
41a1301c:	2210      	beqz	v0,41a1303e <parse_firmware+0x4e>
41a1301e:	6c80      	li	a0,128
    {
        _para.lfi_start_addr = LFI_OFFSET;
41a13020:	6f00      	li	a3,0
41a13022:	6e01      	li	a2,1
41a13024:	eb8b      	neg	v1,a0
41a13026:	f040 c060 	sb	v1,64(s0)
41a1302a:	f040 c0c1 	sb	a2,65(s0)
41a1302e:	f040 c0e2 	sb	a3,66(s0)
41a13032:	f040 c0e3 	sb	a3,67(s0)
41a13036:	f040 c0c9 	sb	a2,73(s0)

        _para.fw_mode = 1;
41a1303a:	6463      	restore	24,ra,s0
    }
    else
    {
        _para.fw_mode = 0;

        _para.lfi_start_addr = ((_para.brec_length + 511) / 512) + 2;
    }

    return;
}
41a1303c:	e8a0      	jrc	ra
41a1303e:	a0b1      	lbu	a1,17(s0)
41a13040:	a072      	lbu	v1,18(s0)
41a13042:	a090      	lbu	a0,16(s0)
41a13044:	36a0      	sll	a2,a1,8
41a13046:	3760      	sll	a3,v1,8
41a13048:	f040 c049 	sb	v0,73(s0)
41a1304c:	8053      	lb	v0,19(s0)
41a1304e:	ee8d      	or	a2,a0
41a13050:	35e0      	sll	a1,a3,8
41a13052:	edcd      	or	a1,a2
41a13054:	f600 3240 	sll	v0,24
41a13058:	eaad      	or	v0,a1
41a1305a:	f1f0 426f 	addiu	v1,v0,511
41a1305e:	5300      	slti	v1,0
41a13060:	6111      	btnez	41a13084 <parse_firmware+0x94>
41a13062:	3563      	sra	a1,v1,8
41a13064:	33a7      	sra	v1,a1,1
41a13066:	43c2      	addiu	a2,v1,2
41a13068:	34c2      	srl	a0,a2,8
41a1306a:	3782      	srl	a3,a0,8
41a1306c:	f600 32c2 	srl	v0,a2,24
41a13070:	f040 c0c0 	sb	a2,64(s0)
41a13074:	f040 c081 	sb	a0,65(s0)
41a13078:	f040 c0e2 	sb	a3,66(s0)
41a1307c:	f040 c043 	sb	v0,67(s0)
41a13080:	6463      	restore	24,ra,s0
41a13082:	e8a0      	jrc	ra
41a13084:	f3f0 426e 	addiu	v1,v0,1022
41a13088:	3563      	sra	a1,v1,8
41a1308a:	33a7      	sra	v1,a1,1
41a1308c:	43c2      	addiu	a2,v1,2
41a1308e:	34c2      	srl	a0,a2,8
41a13090:	3782      	srl	a3,a0,8
41a13092:	f600 32c2 	srl	v0,a2,24
41a13096:	f040 c0c0 	sb	a2,64(s0)
41a1309a:	f040 c081 	sb	a0,65(s0)
41a1309e:	f040 c0e2 	sb	a3,66(s0)
41a130a2:	f040 c043 	sb	v0,67(s0)
41a130a6:	17ec      	b	41a13080 <parse_firmware+0x90>
41a130a8:	b5dc      	lw	a1,41a13418 <search_content+0x360>
41a130aa:	41d3      	daddiu	a2,s1,3
41a130ac:	b530      	lw	a1,41a1316c <search_content+0xb4>
41a130ae:	41d3      	daddiu	a2,s1,3
41a130b0:	2f99      	bnez	a3,41a12fe4 <check_key_offset_exist+0x34>
41a130b2:	41a1      	addiu	a1,s1,1
41a130b4:	0000      	addiu	s0,sp,0
41a130b6:	0003      	addiu	s0,sp,12

41a130b8 <search_content>:
41a130b8:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *  搜索目录项
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      search_content
 * \note
 *******************************************************************************/

int search_content(void)
{
41a130ba:	b0df      	lw	s0,41a13434 <search_content+0x37c>
    AFI_DIR_t *dir_p = NULL;

    print_log("start decrypt...");
41a130bc:	0cc9      	la	a0,41a133e0 <search_content+0x328>
41a130be:	e8c0      	jalrc	s0
41a130c0:	b3de      	lw	v1,41a13434 <search_content+0x37c>

    decrypt_init();
41a130c2:	f009 6900 	li	s1,18432

    print_log("decrypt init over");

    _read_file(MIN_ONCE_READ_LEN);
41a130c6:	ebc0      	jalrc	v1
41a130c8:	0ccb      	la	a0,41a133f0 <search_content+0x338>
41a130ca:	e8c0      	jalrc	s0
41a130cc:	b2dc      	lw	v0,41a13438 <search_content+0x380>
41a130ce:	ea40      	jalr	v0
41a130d0:	6791      	move	a0,s1
41a130d2:	b5dc      	lw	a1,41a13440 <search_content+0x388>


    if (base_upg_init(BUFFER_ADDR) != 0)
41a130d4:	b2dc      	lw	v0,41a13444 <search_content+0x38c>
41a130d6:	6c0f      	li	a0,15
41a130d8:	6e00      	li	a2,0
41a130da:	ea40      	jalr	v0
41a130dc:	6f06      	li	a3,6
41a130de:	d206      	sw	v0,24(sp)
41a130e0:	f160 2a18 	bnez	v0,41a133d4 <search_content+0x31c>
41a130e4:	b3da      	lw	v1,41a1344c <search_content+0x394>
    {
        print_log("decrypt file err");

        return -1;
    }


    g_firmware_offset = (uint32)(DECRYPT_USR_BUF_LEN - g_decrypt.InOutLen);
41a130e6:	b7d9      	lw	a3,41a13448 <search_content+0x390>
41a130e8:	9ba1      	lw	a1,4(v1)
41a130ea:	6e00      	li	a2,0
    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, lfi_name, 11, 0);
41a130ec:	e1ab      	subu	v0,s1,a1
41a130ee:	df40      	sw	v0,0(a3)
41a130f0:	b4d4      	lw	a0,41a13440 <search_content+0x388>
41a130f2:	d604      	sw	a2,16(sp)
41a130f4:	b6d7      	lw	a2,41a13450 <search_content+0x398>
41a130f6:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a130fa:	6f0b      	li	a3,11
41a130fc:	6d01      	li	a1,1
    if (dir_p != NULL)
    {
        _para.lfi_length = dir_p->length;
        _para.lfi_offset = dir_p->offset + g_firmware_offset;
    }
    else
    {
        return -1;
41a130fe:	6782      	move	a0,v0
41a13100:	ebab      	neg	v1,a1
41a13102:	f160 2204 	beqz	v0,41a133ce <search_content+0x316>
41a13106:	9a65      	lw	v1,20(v0)
41a13108:	b1d3      	lw	s1,41a13454 <search_content+0x39c>
41a1310a:	3062      	srl	s0,v1,8
41a1310c:	3202      	srl	v0,s0,8
41a1310e:	f600 3562 	srl	a1,v1,24
41a13112:	f020 c160 	sb	v1,32(s1)
41a13116:	f020 c101 	sb	s0,33(s1)
41a1311a:	f020 c142 	sb	v0,34(s1)
41a1311e:	f020 c1a3 	sb	a1,35(s1)
41a13122:	9cc4      	lw	a2,16(a0)
41a13124:	b4c9      	lw	a0,41a13448 <search_content+0x390>
41a13126:	9ce0      	lw	a3,0(a0)
41a13128:	b4c6      	lw	a0,41a13440 <search_content+0x388>
    }

    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, nor_id_name, 11, 0);
41a1312a:	e6ed      	addu	v1,a2,a3
41a1312c:	3062      	srl	s0,v1,8
41a1312e:	f600 3562 	srl	a1,v1,24
41a13132:	3202      	srl	v0,s0,8
41a13134:	b7c6      	lw	a3,41a1344c <search_content+0x394>
41a13136:	f020 c164 	sb	v1,36(s1)
41a1313a:	f020 c105 	sb	s0,37(s1)
41a1313e:	f020 c146 	sb	v0,38(s1)
41a13142:	f020 c1a7 	sb	a1,39(s1)
41a13146:	6e00      	li	a2,0
41a13148:	9fa1      	lw	a1,4(a3)
41a1314a:	d604      	sw	a2,16(sp)
41a1314c:	b6c3      	lw	a2,41a13458 <search_content+0x3a0>
41a1314e:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a13152:	6f0b      	li	a3,11
41a13154:	6c01      	li	a0,1
    if (dir_p != NULL)
    {
        _para.nor_id_length = dir_p->length;
        _para.nor_id_offset = dir_p->offset + g_firmware_offset;
    }
    else
    {
        return -1;
41a13156:	68ff      	li	s0,255
41a13158:	67a2      	move	a1,v0
41a1315a:	eb8b      	neg	v1,a0
41a1315c:	f120 2217 	beqz	v0,41a133ce <search_content+0x316>
41a13160:	9ae5      	lw	a3,20(v0)
41a13162:	32e2      	srl	v0,a3,8
41a13164:	67c7      	move	a2,a3
41a13166:	ee0c      	and	a2,s0
41a13168:	6762      	move	v1,v0
41a1316a:	3442      	srl	a0,v0,8
41a1316c:	c1d8      	sb	a2,24(s1)
41a1316e:	b2b7      	lw	v0,41a13448 <search_content+0x390>
41a13170:	f600 36e2 	srl	a2,a3,24
41a13174:	eb0c      	and	v1,s0
41a13176:	ec0c      	and	a0,s0
41a13178:	c19a      	sb	a0,26(s1)
41a1317a:	c1db      	sb	a2,27(s1)
41a1317c:	c179      	sb	v1,25(s1)
41a1317e:	9d64      	lw	v1,16(a1)
41a13180:	9aa0      	lw	a1,0(v0)
41a13182:	e3ad      	addu	v1,a1
41a13184:	3662      	srl	a2,v1,8
41a13186:	6783      	move	a0,v1
41a13188:	ec0c      	and	a0,s0
41a1318a:	67e6      	move	a3,a2
41a1318c:	32c2      	srl	v0,a2,8
41a1318e:	c19c      	sb	a0,28(s1)
41a13190:	f600 3562 	srl	a1,v1,24
41a13194:	b4ae      	lw	a0,41a1344c <search_content+0x394>
    }

    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, brec_name, 11, 0);
41a13196:	ef0c      	and	a3,s0
41a13198:	ea0c      	and	v0,s0
41a1319a:	c1fd      	sb	a3,29(s1)
41a1319c:	c15e      	sb	v0,30(s1)
41a1319e:	c1bf      	sb	a1,31(s1)
41a131a0:	9ca1      	lw	a1,4(a0)
41a131a2:	6f00      	li	a3,0
41a131a4:	b6ae      	lw	a2,41a1345c <search_content+0x3a4>
41a131a6:	b4a7      	lw	a0,41a13440 <search_content+0x388>
41a131a8:	d704      	sw	a3,16(sp)
41a131aa:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a131ae:	6f0b      	li	a3,11
41a131b0:	6e01      	li	a2,1
    if (dir_p != NULL)
    {
        _para.brec_length = dir_p->length;
        _para.brec_offset = dir_p->offset + g_firmware_offset;
    }
    else
    {
        return -1;
41a131b2:	67a2      	move	a1,v0
41a131b4:	ebcb      	neg	v1,a2
41a131b6:	f100 220a 	beqz	v0,41a133ce <search_content+0x316>
41a131ba:	9a85      	lw	a0,20(v0)
41a131bc:	3682      	srl	a2,a0,8
41a131be:	67e4      	move	a3,a0
41a131c0:	ef0c      	and	a3,s0
41a131c2:	6766      	move	v1,a2
41a131c4:	32c2      	srl	v0,a2,8
41a131c6:	c1f0      	sb	a3,16(s1)
41a131c8:	b6a0      	lw	a2,41a13448 <search_content+0x390>
41a131ca:	f600 3782 	srl	a3,a0,24
41a131ce:	eb0c      	and	v1,s0
41a131d0:	ea0c      	and	v0,s0
41a131d2:	c152      	sb	v0,18(s1)
41a131d4:	c1f3      	sb	a3,19(s1)
41a131d6:	c171      	sb	v1,17(s1)
41a131d8:	9d64      	lw	v1,16(a1)
41a131da:	9ea0      	lw	a1,0(a2)
41a131dc:	e3ad      	addu	v1,a1
41a131de:	3762      	srl	a3,v1,8
41a131e0:	6743      	move	v0,v1
41a131e2:	ea0c      	and	v0,s0
41a131e4:	6787      	move	a0,a3
41a131e6:	36e2      	srl	a2,a3,8
41a131e8:	c154      	sb	v0,20(s1)
41a131ea:	f600 3562 	srl	a1,v1,24
41a131ee:	ec0c      	and	a0,s0
41a131f0:	ee0c      	and	a2,s0
41a131f2:	b297      	lw	v0,41a1344c <search_content+0x394>
    }

    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, mbrec_name, 11, 0);
41a131f4:	c195      	sb	a0,21(s1)
41a131f6:	c1d6      	sb	a2,22(s1)
41a131f8:	c1b7      	sb	a1,23(s1)
41a131fa:	6c00      	li	a0,0
41a131fc:	9aa1      	lw	a1,4(v0)
41a131fe:	b699      	lw	a2,41a13460 <search_content+0x3a8>
41a13200:	d404      	sw	a0,16(sp)
41a13202:	b490      	lw	a0,41a13440 <search_content+0x388>
41a13204:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a13208:	6f0b      	li	a3,11
41a1320a:	6f01      	li	a3,1
    if (dir_p != NULL)
    {
        _para.mbrec_length = dir_p->length;
        _para.mbrec_offset = dir_p->offset + g_firmware_offset;
    }
    else
    {
        return -1;
41a1320c:	67a2      	move	a1,v0
41a1320e:	ebeb      	neg	v1,a3
41a13210:	f0c0 221d 	beqz	v0,41a133ce <search_content+0x316>
41a13214:	9a85      	lw	a0,20(v0)
41a13216:	3782      	srl	a3,a0,8
41a13218:	6744      	move	v0,a0
41a1321a:	67c7      	move	a2,a3
41a1321c:	ea0c      	and	v0,s0
41a1321e:	ee0c      	and	a2,s0
41a13220:	33e2      	srl	v1,a3,8
41a13222:	c148      	sb	v0,8(s1)
41a13224:	c1c9      	sb	a2,9(s1)
41a13226:	f600 3282 	srl	v0,a0,24
41a1322a:	b688      	lw	a2,41a13448 <search_content+0x390>
41a1322c:	eb0c      	and	v1,s0
41a1322e:	c14b      	sb	v0,11(s1)
41a13230:	c16a      	sb	v1,10(s1)
41a13232:	9d64      	lw	v1,16(a1)
41a13234:	9ee0      	lw	a3,0(a2)
41a13236:	e3f9      	addu	a2,v1,a3
41a13238:	32c2      	srl	v0,a2,8
41a1323a:	67a6      	move	a1,a2
41a1323c:	ed0c      	and	a1,s0
41a1323e:	6782      	move	a0,v0
41a13240:	3742      	srl	a3,v0,8
41a13242:	c1ac      	sb	a1,12(s1)
41a13244:	ec0c      	and	a0,s0
41a13246:	f600 35c2 	srl	a1,a2,24
41a1324a:	ef0c      	and	a3,s0
41a1324c:	b280      	lw	v0,41a1344c <search_content+0x394>
    }

    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, part_table_name, 11, 0);
41a1324e:	c18d      	sb	a0,13(s1)
41a13250:	c1ee      	sb	a3,14(s1)
41a13252:	c1af      	sb	a1,15(s1)
41a13254:	6c00      	li	a0,0
41a13256:	9aa1      	lw	a1,4(v0)
41a13258:	b683      	lw	a2,41a13464 <search_content+0x3ac>
41a1325a:	d404      	sw	a0,16(sp)
41a1325c:	b479      	lw	a0,41a13440 <search_content+0x388>
41a1325e:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a13262:	6f0b      	li	a3,11
41a13264:	67a2      	move	a1,v0
41a13266:	2227      	beqz	v0,41a132b6 <search_content+0x1fe>
    if (dir_p != NULL)
41a13268:	9ac5      	lw	a2,20(v0)
    {
        _para.part_tbl_length = dir_p->length;
41a1326a:	34c2      	srl	a0,a2,8
41a1326c:	67e6      	move	a3,a2
41a1326e:	ef0c      	and	a3,s0
41a13270:	6764      	move	v1,a0
41a13272:	3282      	srl	v0,a0,8
41a13274:	f020 c1e8 	sb	a3,40(s1)
41a13278:	eb0c      	and	v1,s0
41a1327a:	f600 37c2 	srl	a3,a2,24
41a1327e:	ea0c      	and	v0,s0
41a13280:	b472      	lw	a0,41a13448 <search_content+0x390>
        _para.part_tbl_offset = dir_p->offset + g_firmware_offset;
41a13282:	f020 c14a 	sb	v0,42(s1)
41a13286:	f020 c1eb 	sb	a3,43(s1)
41a1328a:	f020 c169 	sb	v1,41(s1)
41a1328e:	9d64      	lw	v1,16(a1)
41a13290:	9ca0      	lw	a1,0(a0)
41a13292:	e3ad      	addu	v1,a1
41a13294:	3762      	srl	a3,v1,8
41a13296:	6743      	move	v0,v1
41a13298:	67c7      	move	a2,a3
41a1329a:	34e2      	srl	a0,a3,8
41a1329c:	ea0c      	and	v0,s0
41a1329e:	ee0c      	and	a2,s0
41a132a0:	ec0c      	and	a0,s0
41a132a2:	f600 3562 	srl	a1,v1,24
41a132a6:	f020 c14c 	sb	v0,44(s1)
41a132aa:	f020 c1cd 	sb	a2,45(s1)
41a132ae:	f020 c18e 	sb	a0,46(s1)
41a132b2:	f020 c1af 	sb	a1,47(s1)
41a132b6:	b266      	lw	v0,41a1344c <search_content+0x394>
    }

    dir_p = check_key_offset_exist(BUFFER_ADDR, (uint32) g_decrypt.InOutLen, part_data_name, 11, 0);
41a132b8:	6e00      	li	a2,0
41a132ba:	9aa1      	lw	a1,4(v0)
41a132bc:	b461      	lw	a0,41a13440 <search_content+0x388>
41a132be:	d604      	sw	a2,16(sp)
41a132c0:	b66a      	lw	a2,41a13468 <search_content+0x3b0>
41a132c2:	1903 4bec 	jal	41a12fb0 <check_key_offset_exist>
41a132c6:	6f0b      	li	a3,11
41a132c8:	67a2      	move	a1,v0
41a132ca:	2227      	beqz	v0,41a1331a <search_content+0x262>
    if (dir_p != NULL)
41a132cc:	9ac5      	lw	a2,20(v0)
    {
        _para.part_length = dir_p->length;
41a132ce:	37c2      	srl	a3,a2,8
41a132d0:	6786      	move	a0,a2
41a132d2:	ec0c      	and	a0,s0
41a132d4:	6767      	move	v1,a3
41a132d6:	32e2      	srl	v0,a3,8
41a132d8:	f020 c190 	sb	a0,48(s1)
41a132dc:	eb0c      	and	v1,s0
41a132de:	ea0c      	and	v0,s0
41a132e0:	f600 34c2 	srl	a0,a2,24
41a132e4:	f020 c152 	sb	v0,50(s1)
41a132e8:	f020 c193 	sb	a0,51(s1)
41a132ec:	f020 c171 	sb	v1,49(s1)
41a132f0:	9d64      	lw	v1,16(a1)
        _para.part_offset = dir_p->offset + g_firmware_offset;
41a132f2:	b556      	lw	a1,41a13448 <search_content+0x390>
41a132f4:	9de0      	lw	a3,0(a1)
41a132f6:	e3f5      	addu	a1,v1,a3
41a132f8:	37a2      	srl	a3,a1,8
41a132fa:	6745      	move	v0,a1
41a132fc:	67c7      	move	a2,a3
41a132fe:	34e2      	srl	a0,a3,8
41a13300:	ea0c      	and	v0,s0
41a13302:	ee0c      	and	a2,s0
41a13304:	ec0c      	and	a0,s0
41a13306:	f600 30a2 	srl	s0,a1,24
41a1330a:	f020 c154 	sb	v0,52(s1)
41a1330e:	f020 c1d5 	sb	a2,53(s1)
41a13312:	f020 c196 	sb	a0,54(s1)
41a13316:	f020 c117 	sb	s0,55(s1)
41a1331a:	b055      	lw	s0,41a1346c <search_content+0x3b4>
    }
    
    
    //get USB SN type
    sys_get_fw_info(&(_para.udisk_setting), FW_INFO_USB_SN_TYPE_ADDR, FW_INFO_USB_SN_TYPE_LEN);
41a1331c:	6791      	move	a0,s1
41a1331e:	4c48      	addiu	a0,72
41a13320:	6d4f      	li	a1,79
41a13322:	6e01      	li	a2,1
41a13324:	e840      	jalr	s0
41a13326:	6f1b      	li	a3,27
41a13328:	6791      	move	a0,s1

    //获取USB序列号
    sys_get_fw_info(&(_para.UsbSetupInfo), FW_INFO_USB_ID_ADDR, FW_INFO_USB_ID_LEN);
41a1332a:	4c4c      	addiu	a0,76
41a1332c:	6d50      	li	a1,80
41a1332e:	6e30      	li	a2,48
41a13330:	e840      	jalr	s0
41a13332:	6f1b      	li	a3,27
41a13334:	6791      	move	a0,s1

    //获取相关盘符信息
    sys_get_fw_info(&(_para.CapInfo), FW_INFO_CAPINFO_ADDR, FW_INFO_CAPINFO_LEN);
41a13336:	4c7c      	addiu	a0,124
41a13338:	6d28      	li	a1,40
41a1333a:	6e10      	li	a2,16
41a1333c:	e840      	jalr	s0
41a1333e:	6f1b      	li	a3,27
41a13340:	6d02      	li	a1,2
    _para.progress = SEARCH_FMU;
41a13342:	f020 c1bc 	sb	a1,60(s1)
41a13346:	679d      	move	a0,sp
41a13348:	a478      	lbu	v1,24(a0)
41a1334a:	6f00      	li	a3,0
41a1334c:	f020 c17d 	sb	v1,61(s1)
41a13350:	f020 c1fe 	sb	a3,62(s1)
41a13354:	675d      	move	v0,sp
41a13356:	a2d8      	lbu	a2,24(v0)
41a13358:	f020 c1df 	sb	a2,63(s1)
41a1335c:	1903 4bfc 	jal	41a12ff0 <parse_firmware>

    parse_firmware();
41a13360:	6500      	nop
41a13362:	f040 a1a9 	lbu	a1,73(s1)

    if(_para.fw_mode == 1)
41a13366:	7501      	cmpi	a1,1
41a13368:	6113      	btnez	41a13390 <search_content+0x2d8>
41a1336a:	f020 a169 	lbu	v1,41(s1)
    {
        if(_para.part_tbl_length == 0)
41a1336e:	f020 a1ca 	lbu	a2,42(s1)
41a13372:	f020 a1e8 	lbu	a3,40(s1)
41a13376:	3460      	sll	a0,v1,8
41a13378:	35c0      	sll	a1,a2,8
41a1337a:	f020 814b 	lb	v0,43(s1)
41a1337e:	eced      	or	a0,a3
41a13380:	33a0      	sll	v1,a1,8
41a13382:	eb8d      	or	v1,a0
41a13384:	f600 3640 	sll	a2,v0,24
41a13388:	ee6d      	or	a2,v1
41a1338a:	6f01      	li	a3,1
        {
            return -1;
41a1338c:	ebeb      	neg	v1,a3
41a1338e:	261f      	beqz	a2,41a133ce <search_content+0x316>
41a13390:	6d00      	li	a1,0
        }
    }    

    PRINT_INFO("search file over");
41a13392:	b137      	lw	s1,41a1346c <search_content+0x3b4>
41a13394:	67c5      	move	a2,a1
41a13396:	0c1d      	la	a0,41a13408 <search_content+0x350>
41a13398:	e940      	jalr	s1
41a1339a:	6f4b      	li	a3,75
41a1339c:	6d00      	li	a1,0

    //擦除VRAM
    base_clear_vram();
41a1339e:	b02a      	lw	s0,41a13444 <search_content+0x38c>
41a133a0:	67c5      	move	a2,a1
41a133a2:	6c08      	li	a0,8
41a133a4:	e840      	jalr	s0
41a133a6:	6f06      	li	a3,6
41a133a8:	6d00      	li	a1,0
	
    //解除写保护
    base_set_disable_write_protect();
41a133aa:	67c5      	move	a2,a1
41a133ac:	6c20      	li	a0,32
41a133ae:	e840      	jalr	s0
41a133b0:	6f06      	li	a3,6
41a133b2:	6c00      	li	a0,0

    sys_drv_uninstall(DRV_GROUP_STG_BASE);
41a133b4:	67a4      	move	a1,a0
41a133b6:	67c4      	move	a2,a0
41a133b8:	e940      	jalr	s1
41a133ba:	6f0b      	li	a3,11
41a133bc:	6c00      	li	a0,0
    
    if (sys_drv_install(DRV_GROUP_STG_BASE, 0, nor_drv_name) != 0)
41a133be:	b62d      	lw	a2,41a13470 <search_content+0x3b8>
41a133c0:	67a4      	move	a1,a0
41a133c2:	e940      	jalr	s1
41a133c4:	6f0a      	li	a3,10
41a133c6:	6c01      	li	a0,1
    {
        return -1;
41a133c8:	eb8b      	neg	v1,a0
41a133ca:	2a01      	bnez	v0,41a133ce <search_content+0x316>
41a133cc:	6762      	move	v1,v0
    }     

    return 0;
41a133ce:	6743      	move	v0,v1
	

    return 0;
}
41a133d0:	6476      	restore	48,ra,s0-s1
41a133d2:	e8a0      	jrc	ra
41a133d4:	0c13      	la	a0,41a1341c <search_content+0x364>
41a133d6:	e8c0      	jalrc	s0
41a133d8:	6c01      	li	a0,1
41a133da:	eb8b      	neg	v1,a0
41a133dc:	17f8      	b	41a133ce <search_content+0x316>
41a133de:	0000      	addiu	s0,sp,0
41a133e0:	7473      	cmpi	a0,115
41a133e2:	7261      	cmpi	v0,97
41a133e4:	2074      	beqz	s0,41a134ce <reboot_to_card_product+0x12>
41a133e6:	6564      	move	v1,a0
41a133e8:	7263      	cmpi	v0,99
41a133ea:	7079      	cmpi	s0,121
41a133ec:	2e74      	bnez	a2,41a134d6 <reboot_to_card_product+0x1a>
41a133ee:	2e2e      	bnez	a2,41a1344c <search_content+0x394>
41a133f0:	0000      	addiu	s0,sp,0
41a133f2:	0000      	addiu	s0,sp,0
41a133f4:	6564      	move	v1,a0
41a133f6:	7263      	cmpi	v0,99
41a133f8:	7079      	cmpi	s0,121
41a133fa:	2074      	beqz	s0,41a134e4 <reboot_to_card_product+0x28>
41a133fc:	6e69      	li	a2,105
41a133fe:	7469      	cmpi	a0,105
41a13400:	6f20      	li	a3,32
41a13402:	6576      	move	s3,a2
41a13404:	0072      	addiu	s0,sp,456
41a13406:	0000      	addiu	s0,sp,0
41a13408:	493c      	addiu	s1,60
41a1340a:	203e      	beqz	s0,41a13488 <att_fw_swtch_deal+0x14>
41a1340c:	6573      	move	s3,v1
41a1340e:	7261      	cmpi	v0,97
41a13410:	6863      	li	s0,99
41a13412:	6620      	0x6620
41a13414:	6c69      	li	a0,105
41a13416:	2065      	beqz	s0,41a134e2 <reboot_to_card_product+0x26>
41a13418:	766f      	cmpi	a2,111
41a1341a:	7265      	cmpi	v0,101
41a1341c:	0000      	addiu	s0,sp,0
41a1341e:	0000      	addiu	s0,sp,0
41a13420:	6564      	move	v1,a0
41a13422:	7263      	cmpi	v0,99
41a13424:	7079      	cmpi	s0,121
41a13426:	2074      	beqz	s0,41a13510 <.LBE2+0x1a>
41a13428:	6966      	li	s1,102
41a1342a:	656c      	move	t3,a0
41a1342c:	6520      	move	at,s0
41a1342e:	7272      	cmpi	v0,114
41a13430:	0000      	addiu	s0,sp,0
41a13432:	0000      	addiu	s0,sp,0
41a13434:	9b59      	lw	v0,100(v1)
41a13436:	41cf      	addiu	a2,s1,-1
41a13438:	2f39      	bnez	a3,41a134ac <att_fw_swtch_deal+0x38>
41a1343a:	41a1      	addiu	a1,s1,1
41a1343c:	2f99      	bnez	a3,41a13370 <search_content+0x2b8>
41a1343e:	41a1      	addiu	a1,s1,1
41a13440:	0000      	addiu	s0,sp,0
41a13442:	0003      	addiu	s0,sp,12
41a13444:	8fdd      	lh	a2,58(a3)
41a13446:	bfc3      	lwu	a2,12(a3)
41a13448:	b520      	lw	a1,41a134c8 <reboot_to_card_product+0xc>
41a1344a:	41d3      	daddiu	a2,s1,3
41a1344c:	b5bc      	lw	a1,41a1373c <part_table_name+0x4>
41a1344e:	41d3      	daddiu	a2,s1,3
41a13450:	3768      	sll	a3,v1,2
41a13452:	41a1      	addiu	a1,s1,1
41a13454:	b530      	lw	a1,41a13514 <.LBE2+0x1e>
41a13456:	41d3      	daddiu	a2,s1,3
41a13458:	375c      	sll	a3,v0,7
41a1345a:	41a1      	addiu	a1,s1,1
41a1345c:	3750      	sll	a3,v0,4
41a1345e:	41a1      	addiu	a1,s1,1
41a13460:	3744      	sll	a3,v0,1
41a13462:	41a1      	addiu	a1,s1,1
41a13464:	3738      	sll	a3,s1,6
41a13466:	41a1      	addiu	a1,s1,1
41a13468:	372c      	sll	a3,s1,3
41a1346a:	41a1      	addiu	a1,s1,1
41a1346c:	88dd      	lh	a2,58(s0)
41a1346e:	bfc3      	lwu	a2,12(a3)
41a13470:	3720      	sll	a3,s1,8
41a13472:	41a1      	addiu	a1,s1,1

41a13474 <att_fw_swtch_deal>:
41a13474:	64e3      	save	24,ra,s0

static void sys_reboot(void)
{    
    DEBUG_ATT_PRINT("reboot...", 0, 0);
    
    sys_local_irq_save();
    
    ENABLE_WATCH_DOG(1);
    
    while(1);
}


int32 att_fw_swtch_deal(void)
{
41a13476:	b00e      	lw	s0,41a134ac <att_fw_swtch_deal+0x38>
    int32 ret_val;
    att_swtich_fw_arg_t *att_switch_fw_arg;

    libc_memset((uint8 *)STUB_ATT_RW_TEMP_BUFFER, 0, 40);
41a13478:	b20e      	lw	v0,41a134b0 <att_fw_swtch_deal+0x3c>
41a1347a:	6790      	move	a0,s0
41a1347c:	6d00      	li	a1,0
41a1347e:	6e28      	li	a2,40
41a13480:	ea40      	jalr	v0
41a13482:	6f01      	li	a3,1
41a13484:	6b3c      	li	v1,60

    att_switch_fw_arg = (att_swtich_fw_arg_t *)STUB_ATT_RW_TEMP_BUFFER;
    
	//小机重启到ATT工具枚举的超时时间
    att_switch_fw_arg->reboot_timeout = 60;
41a13486:	b20c      	lw	v0,41a134b4 <att_fw_swtch_deal+0x40>

    ret_val = att_write_data(STUB_CMD_ATT_REBOOT_TIMEOUT, 32, STUB_ATT_RW_TEMP_BUFFER);
41a13488:	c066      	sb	v1,6(s0)
41a1348a:	f400 6c0b 	li	a0,1035
41a1348e:	6d20      	li	a1,32
41a13490:	ea40      	jalr	v0
41a13492:	67d0      	move	a2,s0
41a13494:	2202      	beqz	v0,41a1349a <att_fw_swtch_deal+0x26>

    if(ret_val == 0)
41a13496:	6463      	restore	24,ra,s0
    {
        ret_val = att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);

        return TRUE;
    }    
}
41a13498:	e8a0      	jrc	ra
41a1349a:	67a2      	move	a1,v0
41a1349c:	b207      	lw	v0,41a134b8 <att_fw_swtch_deal+0x44>
41a1349e:	f4e0 6c1e 	li	a0,1278
41a134a2:	ea40      	jalr	v0
41a134a4:	67d0      	move	a2,s0
41a134a6:	6a01      	li	v0,1
41a134a8:	6463      	restore	24,ra,s0
41a134aa:	e8a0      	jrc	ra
41a134ac:	a000      	lbu	s0,0(s0)
41a134ae:	9fc3      	lw	a2,12(a3)
41a134b0:	88d5      	lh	a2,42(s0)
41a134b2:	bfc3      	lwu	a2,12(a3)
41a134b4:	88e5      	lh	a3,10(s0)
41a134b6:	bfc3      	lwu	a2,12(a3)
41a134b8:	890d      	lh	s0,26(s1)
41a134ba:	bfc3      	lwu	a2,12(a3)

41a134bc <reboot_to_card_product>:
41a134bc:	64f4      	save	32,ra,s0-s1


void reboot_to_card_product(void)
{
41a134be:	6c00      	li	a0,0
    uint8* buf = (uint8*) STUB_ATT_READ_BANK_BUFFER;

    sys_os_sched_lock();
41a134c0:	b018      	lw	s0,41a13520 <.LBE2+0x2a>
41a134c2:	67a4      	move	a1,a0
41a134c4:	67c4      	move	a2,a0
41a134c6:	b116      	lw	s1,41a1351c <.LBE2+0x26>
41a134c8:	e840      	jalr	s0
41a134ca:	6f33      	li	a3,51
41a134cc:	6d00      	li	a1,0

    DEBUG_ATT_PRINT("reboot_to_card_product...", 0, 0);
41a134ce:	67c5      	move	a2,a1
41a134d0:	0c0c      	la	a0,41a13500 <.LBE2+0xa>
41a134d2:	e840      	jalr	s0
41a134d4:	6f4b      	li	a3,75
41a134d6:	b214      	lw	v0,41a13524 <.LBE2+0x2e>

    /* 擦除 MBREC
     */
    libc_memset(buf, 0, 512);
41a134d8:	6791      	move	a0,s1
41a134da:	6d00      	li	a1,0
41a134dc:	f200 6e00 	li	a2,512
41a134e0:	ea40      	jalr	v0
41a134e2:	6f01      	li	a3,1
41a134e4:	1903 4d1d 	jal	41a13474 <att_fw_swtch_deal>

    att_fw_swtch_deal();
41a134e8:	6500      	nop

41a134ea <.LBB2>:
41a134ea:	b010      	lw	s0,41a13528 <.LBE2+0x32>

    // base_mbrec_write(0, buf, 1);
    {
        void (*PHY_CPU_Write)(uint32, uint8*, uint32) = (void*)0xbfc0dd95;
41a134ec:	6c00      	li	a0,0
        PHY_CPU_Write(0x0, buf, 512);
41a134ee:	f200 6e00 	li	a2,512
41a134f2:	e840      	jalr	s0
41a134f4:	67b1      	move	a1,s1

41a134f6 <.LBE2>:
41a134f6:	b20e      	lw	v0,41a1352c <.LBE2+0x36>
    }

    /* 重启从 FLASH 引导失败后再从卡启动烧录固件
     */
    ENABLE_WATCH_DOG(0);
41a134f8:	6b51      	li	v1,81
41a134fa:	da60      	sw	v1,0(v0)
41a134fc:	17ff      	b	41a134fc <.LBE2+0x6>
41a134fe:	0000      	addiu	s0,sp,0
41a13500:	6572      	move	s3,v0
41a13502:	6f62      	li	a3,98
41a13504:	746f      	cmpi	a0,111
41a13506:	745f      	cmpi	a0,95
41a13508:	5f6f      	sltiu	a3,111
41a1350a:	6163      	btnez	41a135d2 <.L53+0x42>
41a1350c:	6472      	restore	16,ra,s0-s1
41a1350e:	705f      	cmpi	s0,95
41a13510:	6f72      	li	a3,114
41a13512:	7564      	cmpi	a1,100
41a13514:	7463      	cmpi	a0,99
41a13516:	2e2e      	bnez	a2,41a13574 <upgrade_deal+0x18>
41a13518:	002e      	addiu	s0,sp,184
41a1351a:	0000      	addiu	s0,sp,0
41a1351c:	a200      	lbu	s0,0(v0)
41a1351e:	9fc3      	lw	a2,12(a3)
41a13520:	88dd      	lh	a2,58(s0)
41a13522:	bfc3      	lwu	a2,12(a3)
41a13524:	88d5      	lh	a2,42(s0)
41a13526:	bfc3      	lwu	a2,12(a3)
41a13528:	dd95      	sw	a0,84(a1)
41a1352a:	bfc0      	lwu	a2,0(a3)
41a1352c:	001c      	addiu	s0,sp,112
41a1352e:	c012      	sb	s0,18(s0)

41a13530 <check_upg_drv>:
41a13530:	64e3      	save	24,ra,s0

    while (1)
        ;
}

int32 check_upg_drv(void)
{
41a13532:	6d00      	li	a1,0
    sd_handle upg_handle;

    upg_handle = sys_sd_fopen(nor_drv_name);
41a13534:	b408      	lw	a0,41a13554 <check_upg_drv+0x24>
41a13536:	b009      	lw	s0,41a13558 <check_upg_drv+0x28>
41a13538:	67c5      	move	a2,a1
41a1353a:	e840      	jalr	s0
41a1353c:	6f0d      	li	a3,13
41a1353e:	6762      	move	v1,v0

    if (upg_handle != 0)
    {
        sys_sd_fclose(upg_handle);
        return TRUE;    
    }

    return FALSE;
41a13540:	2206      	beqz	v0,41a1354e <check_upg_drv+0x1e>
41a13542:	6d00      	li	a1,0
41a13544:	6782      	move	a0,v0
41a13546:	67c5      	move	a2,a1
41a13548:	e840      	jalr	s0
41a1354a:	6f0e      	li	a3,14
41a1354c:	6b01      	li	v1,1
41a1354e:	6743      	move	v0,v1
}
41a13550:	6463      	restore	24,ra,s0
41a13552:	e8a0      	jrc	ra
41a13554:	3720      	sll	a3,s1,8
41a13556:	41a1      	addiu	a1,s1,1
41a13558:	88dd      	lh	a2,58(s0)
41a1355a:	bfc3      	lwu	a2,12(a3)

41a1355c <upgrade_deal>:
41a1355c:	64f5      	save	40,ra,s0-s1

int32 upgrade_deal(void)
{
41a1355e:	b32e      	lw	v1,41a13614 <.L53+0x84>
    int retry_count = 0;
    int irq_flag;
    int fp;

    if ((g_att_version == 1) && (g_support_norflash_wp == TRUE))
41a13560:	6900      	li	s1,0
41a13562:	a340      	lbu	v0,0(v1)
41a13564:	7201      	cmpi	v0,1
41a13566:	6104      	btnez	41a13570 <upgrade_deal+0x14>
41a13568:	b52c      	lw	a1,41a13618 <.L53+0x88>
41a1356a:	a580      	lbu	a0,0(a1)
41a1356c:	7401      	cmpi	a0,1
41a1356e:	6016      	bteqz	41a1359c <.L53+0xc>
41a13570:	1903 4d2f 	jal	41a134bc <reboot_to_card_product>
    {
        if (check_upg_drv() == FALSE)
        {
            reboot_to_card_product();    
        }
        
        if (g_test_ap_info->stub_phy_type == STUB_PHY_USB)
        {
            irq_flag = act_readl(INTC_MSK);
            DEBUG_ATT_PRINT("intc msk:", irq_flag, 2);
            act_writel(act_readl(INTC_MSK) & (~(1 << INTC_MSK_USB_IM)), INTC_MSK);
        }
        else
        {
            irq_flag = sys_local_irq_save();
        }
    }
    else
    {
        reboot_to_card_product();
41a13574:	6500      	nop

41a13576 <.L51>:
41a13576:	1903 4ddd 	jal	41a13774 <upgrade_fw_check>
    }

    start: if (upgrade_fw_check() == FALSE)
41a1357a:	6500      	nop
41a1357c:	2209      	beqz	v0,41a13590 <.L53>
41a1357e:	1903 4c2e 	jal	41a130b8 <search_content>
        goto retry;

    if (search_content() != 0)
41a13582:	6500      	nop
41a13584:	6702      	move	s0,v0
41a13586:	2a04      	bnez	v0,41a13590 <.L53>
41a13588:	1903 4b68 	jal	41a12da0 <upgrade_fw_write>
        goto retry;

    if (!upgrade_fw_write())
41a1358c:	6500      	nop
41a1358e:	2a2a      	bnez	v0,41a135e4 <.L53+0x54>

41a13590 <.L53>:
41a13590:	4121      	addiu	s1,s1,1
        goto retry;

    if (g_test_ap_info->stub_phy_type == STUB_PHY_USB)
    {
        act_writel(irq_flag, INTC_MSK);
    }
    else
    {
        sys_local_irq_restore(irq_flag);
    }

    return TRUE;

    retry: if (++retry_count < 3)
41a13592:	5103      	slti	s1,3
41a13594:	61f0      	btnez	41a13576 <.L51>
41a13596:	6a00      	li	v0,0
        goto start;

    return FALSE;
41a13598:	6475      	restore	40,ra,s0-s1
}
41a1359a:	e8a0      	jrc	ra
41a1359c:	1903 4d4c 	jal	41a13530 <check_upg_drv>
41a135a0:	6500      	nop
41a135a2:	2214      	beqz	v0,41a135cc <.L53+0x3c>
41a135a4:	b21e      	lw	v0,41a1361c <.L53+0x8c>
41a135a6:	9ae0      	lw	a3,0(v0)
41a135a8:	a7c3      	lbu	a2,3(a3)
41a135aa:	2e14      	bnez	a2,41a135d4 <.L53+0x44>
41a135ac:	b01d      	lw	s0,41a13620 <.L53+0x90>
41a135ae:	b21e      	lw	v0,41a13624 <.L53+0x94>
41a135b0:	98c0      	lw	a2,0(s0)
41a135b2:	0c16      	la	a0,41a13608 <.L53+0x78>
41a135b4:	67a6      	move	a1,a2
41a135b6:	d604      	sw	a2,16(sp)
41a135b8:	6f4b      	li	a3,75
41a135ba:	ea40      	jalr	v0
41a135bc:	6e02      	li	a2,2
41a135be:	9880      	lw	a0,0(s0)
41a135c0:	f400 6d01 	li	a1,1025
41a135c4:	ebab      	neg	v1,a1
41a135c6:	ec6c      	and	a0,v1
41a135c8:	d880      	sw	a0,0(s0)
41a135ca:	17d5      	b	41a13576 <.L51>
41a135cc:	1903 4d2f 	jal	41a134bc <reboot_to_card_product>
41a135d0:	6500      	nop
41a135d2:	17e8      	b	41a135a4 <.L53+0x14>
41a135d4:	b214      	lw	v0,41a13624 <.L53+0x94>
41a135d6:	6791      	move	a0,s1
41a135d8:	67b1      	move	a1,s1
41a135da:	67d1      	move	a2,s1
41a135dc:	ea40      	jalr	v0
41a135de:	6f2d      	li	a3,45
41a135e0:	d204      	sw	v0,16(sp)
41a135e2:	17c9      	b	41a13576 <.L51>
41a135e4:	b30e      	lw	v1,41a1361c <.L53+0x8c>
41a135e6:	9b80      	lw	a0,0(v1)
41a135e8:	a4e3      	lbu	a3,3(a0)
41a135ea:	2f06      	bnez	a3,41a135f8 <.L53+0x68>
41a135ec:	b50d      	lw	a1,41a13620 <.L53+0x90>
41a135ee:	9604      	lw	a2,16(sp)
41a135f0:	6a01      	li	v0,1
41a135f2:	ddc0      	sw	a2,0(a1)
41a135f4:	6475      	restore	40,ra,s0-s1
41a135f6:	e8a0      	jrc	ra
41a135f8:	9404      	lw	a0,16(sp)
41a135fa:	b20b      	lw	v0,41a13624 <.L53+0x94>
41a135fc:	67b0      	move	a1,s0
41a135fe:	67d0      	move	a2,s0
41a13600:	ea40      	jalr	v0
41a13602:	6f2e      	li	a3,46
41a13604:	6a01      	li	v0,1
41a13606:	17f6      	b	41a135f4 <.L53+0x64>
41a13608:	6e69      	li	a2,105
41a1360a:	6374      	addiu	sp,928
41a1360c:	6d20      	li	a1,32
41a1360e:	6b73      	li	v1,115
41a13610:	003a      	addiu	s0,sp,232
41a13612:	0000      	addiu	s0,sp,0
41a13614:	8dc8      	lh	a2,16(a1)
41a13616:	bfc3      	lwu	a2,12(a3)
41a13618:	8dc0      	lh	a2,0(a1)
41a1361a:	bfc3      	lwu	a2,12(a3)
41a1361c:	8df4      	lh	a3,40(a1)
41a1361e:	bfc3      	lwu	a2,12(a3)
41a13620:	0004      	addiu	s0,sp,16
41a13622:	c00b      	sb	s0,11(s0)
41a13624:	88dd      	lh	a2,58(s0)
41a13626:	bfc3      	lwu	a2,12(a3)

41a13628 <act_test_product_test>:
41a13628:	64e3      	save	24,ra,s0

/*
 * 量产测试.
 */
test_result_e act_test_product_test(void *arg_buffer)
{
41a1362a:	b31a      	lw	v1,41a13690 <.LBE3+0x2a>
    int32 ret_val;
    return_result_t *return_data;

    //对于ATS2825可能重启之后要再次发START命令，需要区分之前有没有
    //量产过，如果已经量产过，直接上报结果并返回就OK了
    if (g_skip_product_test == FALSE)
41a1362c:	a340      	lbu	v0,0(v1)
41a1362e:	6b01      	li	v1,1
    {    
        ret_val = upgrade_deal();
    }
    else
    {
        ret_val = TRUE;
41a13630:	2223      	beqz	v0,41a13678 <.LBE3+0x12>
41a13632:	7301      	cmpi	v1,1
    }

    if (ret_val == TRUE)
41a13634:	6118      	btnez	41a13666 <.LBE3>
41a13636:	1903 4d1d 	jal	41a13474 <att_fw_swtch_deal>
    {
        att_fw_swtch_deal();
41a1363a:	6500      	nop
41a1363c:	6c00      	li	a0,0
       
        stub_close();
41a1363e:	b216      	lw	v0,41a13694 <.LBE3+0x2e>
41a13640:	67a4      	move	a1,a0
41a13642:	67c4      	move	a2,a0
41a13644:	ea40      	jalr	v0
41a13646:	6f01      	li	a3,1

41a13648 <.LBB3>:
41a13648:	6d00      	li	a1,0
41a1364a:	b014      	lw	s0,41a13698 <.LBE3+0x32>
41a1364c:	67c5      	move	a2,a1
41a1364e:	0c0e      	la	a0,41a13684 <.LBE3+0x1e>
41a13650:	e840      	jalr	s0
41a13652:	6f4b      	li	a3,75
41a13654:	6c00      	li	a0,0
41a13656:	67a4      	move	a1,a0
41a13658:	67c4      	move	a2,a0
41a1365a:	e840      	jalr	s0
41a1365c:	6f2d      	li	a3,45
41a1365e:	b410      	lw	a0,41a1369c <.LBE3+0x36>
41a13660:	6d53      	li	a1,83
41a13662:	dca0      	sw	a1,0(a0)
41a13664:	17ff      	b	41a13664 <.LBB3+0x1c>

41a13666 <.LBE3>:
41a13666:	b40f      	lw	a0,41a136a0 <.LBE3+0x3a>

        sys_reboot();
    }
    else
    {
        /* 量产失败后不自动重启, 避免反复重启量产, 需要断电或强制重启.
         */
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
41a13668:	6f0e      	li	a3,14

        return_data->test_id = TESTID_PRODUCT_TEST;
41a1366a:	6e00      	li	a2,0
        return_data->test_result = 0;
41a1366c:	b00e      	lw	s0,41a136a4 <.LBE3+0x3e>

        act_test_report_result(return_data, 4);
41a1366e:	cce3      	sh	a3,6(a0)
41a13670:	c4c8      	sb	a2,8(a0)
41a13672:	e840      	jalr	s0
41a13674:	6d04      	li	a1,4
41a13676:	17ff      	b	41a13676 <.LBE3+0x10>
41a13678:	1903 4d57 	jal	41a1355c <upgrade_deal>
41a1367c:	6500      	nop
41a1367e:	6762      	move	v1,v0
41a13680:	17d8      	b	41a13632 <act_test_product_test+0xa>
41a13682:	0000      	addiu	s0,sp,0
41a13684:	6572      	move	s3,v0
41a13686:	6f62      	li	a3,98
41a13688:	746f      	cmpi	a0,111
41a1368a:	2e2e      	bnez	a2,41a136e8 <act_test_prepare_product+0x40>
41a1368c:	002e      	addiu	s0,sp,184
41a1368e:	0000      	addiu	s0,sp,0
41a13690:	8dcb      	lh	a2,22(a1)
41a13692:	bfc3      	lwu	a2,12(a3)
41a13694:	8fd9      	lh	a2,50(a3)
41a13696:	bfc3      	lwu	a2,12(a3)
41a13698:	88dd      	lh	a2,58(s0)
41a1369a:	bfc3      	lwu	a2,12(a3)
41a1369c:	001c      	addiu	s0,sp,112
41a1369e:	c012      	sb	s0,18(s0)
41a136a0:	a100      	lbu	s0,0(s1)
41a136a2:	9fc3      	lw	a2,12(a3)
41a136a4:	9b41      	lw	v0,4(v1)
41a136a6:	41cb      	addiu	a2,s1,-5

41a136a8 <act_test_prepare_product>:
41a136a8:	64c3      	save	24,ra

        while (1)
            ;
    }
}

test_result_e act_test_prepare_product(void *arg_buffer)
{
41a136aa:	b319      	lw	v1,41a1370c <act_test_prepare_product+0x64>
    return_result_t *return_data;

    if(g_support_norflash_wp == TRUE)
41a136ac:	a340      	lbu	v0,0(v1)
41a136ae:	7201      	cmpi	v0,1
41a136b0:	6012      	bteqz	41a136d6 <act_test_prepare_product+0x2e>
41a136b2:	6d00      	li	a1,0
    {
        base_set_disable_write_protect();        
    }  

    //该测试项必须卡中量产固件才可以测试成功
    if (sys_detect_disk(DRV_GROUP_STG_CARD) != -1)
41a136b4:	b218      	lw	v0,41a13714 <act_test_prepare_product+0x6c>
41a136b6:	6c01      	li	a0,1
41a136b8:	67c5      	move	a2,a1
41a136ba:	ea40      	jalr	v0
41a136bc:	6f09      	li	a3,9
41a136be:	ec4f      	not	a0,v0
41a136c0:	2c18      	bnez	a0,41a136f2 <act_test_prepare_product+0x4a>
41a136c2:	b416      	lw	a0,41a13718 <act_test_prepare_product+0x70>
    {
        reboot_to_card_product(); 
    }      

    return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);
41a136c4:	6e0d      	li	a2,13

    return_data->test_id = TESTID_PREPARE_PRODUCT_TEST;
41a136c6:	6d01      	li	a1,1

    return_data->test_result = 1;
41a136c8:	b215      	lw	v0,41a1371c <act_test_prepare_product+0x74>

    act_test_report_result(return_data, 4);
41a136ca:	c4a8      	sb	a1,8(a0)
41a136cc:	ccc3      	sh	a2,6(a0)
41a136ce:	ea40      	jalr	v0
41a136d0:	6d04      	li	a1,4
41a136d2:	6443      	restore	24,ra
}
41a136d4:	e8a0      	jrc	ra
41a136d6:	6d00      	li	a1,0
41a136d8:	b20e      	lw	v0,41a13710 <act_test_prepare_product+0x68>
41a136da:	67c5      	move	a2,a1
41a136dc:	6c20      	li	a0,32
41a136de:	ea40      	jalr	v0
41a136e0:	6f06      	li	a3,6
41a136e2:	6d00      	li	a1,0
41a136e4:	b20c      	lw	v0,41a13714 <act_test_prepare_product+0x6c>
41a136e6:	6c01      	li	a0,1
41a136e8:	67c5      	move	a2,a1
41a136ea:	ea40      	jalr	v0
41a136ec:	6f09      	li	a3,9
41a136ee:	ec4f      	not	a0,v0
41a136f0:	24e8      	beqz	a0,41a136c2 <act_test_prepare_product+0x1a>
41a136f2:	1903 4d2f 	jal	41a134bc <reboot_to_card_product>
41a136f6:	6500      	nop
41a136f8:	b408      	lw	a0,41a13718 <act_test_prepare_product+0x70>
41a136fa:	6e0d      	li	a2,13
41a136fc:	6d01      	li	a1,1
41a136fe:	b208      	lw	v0,41a1371c <act_test_prepare_product+0x74>
41a13700:	c4a8      	sb	a1,8(a0)
41a13702:	ccc3      	sh	a2,6(a0)
41a13704:	ea40      	jalr	v0
41a13706:	6d04      	li	a1,4
41a13708:	6443      	restore	24,ra
41a1370a:	e8a0      	jrc	ra
41a1370c:	8dc0      	lh	a2,0(a1)
41a1370e:	bfc3      	lwu	a2,12(a3)
41a13710:	8fdd      	lh	a2,58(a3)
41a13712:	bfc3      	lwu	a2,12(a3)
41a13714:	88dd      	lh	a2,58(s0)
41a13716:	bfc3      	lwu	a2,12(a3)
41a13718:	a100      	lbu	s0,0(s1)
41a1371a:	9fc3      	lw	a2,12(a3)
41a1371c:	9b41      	lw	v0,4(v1)
41a1371e:	41cb      	addiu	a2,s1,-5

41a13720 <nor_drv_name>:
41a13720:	6f6e 5f72 7075 2e67 7264 0076               nor_upg.drv.

41a1372c <part_data_name>:
41a1372c:	4150 5452 2020 2020 4942 004e               PART    BIN.

41a13738 <part_table_name>:
41a13738:	4150 5452 4254 204c 4942 004e               PARTTBL BIN.

41a13744 <mbrec_name>:
41a13744:	4f4e 4d52 5242 4345 4942 004e               NORMBRECBIN.

41a13750 <brec_name>:
41a13750:	4f4e 4252 4552 2043 4942 004e               NORBREC BIN.

41a1375c <nor_id_name>:
41a1375c:	4f4e 5f52 4449 2020 4942 004e               NOR_ID  BIN.

41a13768 <lfi_name>:
41a13768:	5746 4d49 4741 2045 5746 0020               FWIMAGE FW .

41a13774 <upgrade_fw_check>:
41a13774:	64f5      	save	40,ra,s0-s1

const uint8 fw_ascfile_name[] = "UPGRADE.HEX";

bool upgrade_fw_check(void)
{
41a13776:	b013      	lw	s0,41a137c0 <upgrade_fw_check+0x4c>
    uint32 i;
    atf_head_t *atf_head;
    uint8 *data_buffer = (uint8 *)ATT_MPDATA_TEMP_BUFFER;
41a13778:	b213      	lw	v0,41a137c4 <upgrade_fw_check+0x50>
    
    att_test_fread(data_buffer, 512, 0);
41a1377a:	6790      	move	a0,s0
41a1377c:	f200 6d00 	li	a1,512
41a13780:	ea40      	jalr	v0
41a13782:	6e00      	li	a2,0
41a13784:	6900      	li	s1,0

    atf_head = (atf_head_t *) data_buffer;

    for (i = 0; i < (512 / sizeof(atf_dir_t)); i++)
41a13786:	6770      	move	v1,s0
41a13788:	6703      	move	s0,v1
    {
        if (libc_memcmp(atf_head->atf_dir[i].filename, fw_ascfile_name, 10) == 0)
41a1378a:	4820      	addiu	s0,32
41a1378c:	b50f      	lw	a1,41a137c8 <upgrade_fw_check+0x54>
41a1378e:	b210      	lw	v0,41a137cc <upgrade_fw_check+0x58>
41a13790:	d304      	sw	v1,16(sp)
41a13792:	6790      	move	a0,s0
41a13794:	6e0a      	li	a2,10
41a13796:	ea40      	jalr	v0
41a13798:	6f02      	li	a3,2
41a1379a:	9304      	lw	v1,16(sp)
41a1379c:	2207      	beqz	v0,41a137ac <upgrade_fw_check+0x38>
41a1379e:	4121      	addiu	s1,s1,1
41a137a0:	5910      	sltiu	s1,16
41a137a2:	6770      	move	v1,s0
41a137a4:	61f1      	btnez	41a13788 <upgrade_fw_check+0x14>
41a137a6:	6a00      	li	v0,0
        {
            g_upgrade_file_offset = atf_head->atf_dir[i].offset;
            g_upg_file_len = atf_head->atf_dir[i].length;
            return TRUE;
        }
    }  

    return FALSE;
41a137a8:	6475      	restore	40,ra,s0-s1
}
41a137aa:	e8a0      	jrc	ra
41a137ac:	9b8c      	lw	a0,48(v1)
41a137ae:	b509      	lw	a1,41a137d0 <upgrade_fw_check+0x5c>
41a137b0:	6a01      	li	v0,1
41a137b2:	dd80      	sw	a0,0(a1)
41a137b4:	9b0d      	lw	s0,52(v1)
41a137b6:	b308      	lw	v1,41a137d4 <upgrade_fw_check+0x60>
41a137b8:	db00      	sw	s0,0(v1)
41a137ba:	6475      	restore	40,ra,s0-s1
41a137bc:	e8a0      	jrc	ra
41a137be:	0000      	addiu	s0,sp,0
41a137c0:	a608      	lbu	s0,8(a2)
41a137c2:	9fc3      	lw	a2,12(a3)
41a137c4:	892d      	lh	s1,26(s1)
41a137c6:	bfc3      	lwu	a2,12(a3)
41a137c8:	37d8      	sll	a3,a2,6
41a137ca:	41a1      	addiu	a1,s1,1
41a137cc:	88d5      	lh	a2,42(s0)
41a137ce:	bfc3      	lwu	a2,12(a3)
41a137d0:	b5d4      	lw	a1,41a13b20 <fw_ascfile_name+0x348>
41a137d2:	41d3      	daddiu	a2,s1,3
41a137d4:	b5d8      	lw	a1,41a13b34 <fw_ascfile_name+0x35c>
41a137d6:	41d3      	daddiu	a2,s1,3

41a137d8 <fw_ascfile_name>:
41a137d8:	5055 5247 4441 2e45 4548 0058               UPGRADE.HEX.
Disassembly of section BANK_CONTROL_1_50:

41cb9a00 <byte_to_unicode>:
41cb9a00:	ec11      	zeb	a0
 *******************************************************************************/
#include "ap_manager_test.h"

int32 byte_to_unicode(uint8 byte_value, uint16 *unicode_buffer)
{
41cb9a02:	5c0a      	sltiu	a0,10
    if((byte_value >= 0) && (byte_value <= 9))
41cb9a04:	6006      	bteqz	41cb9a12 <byte_to_unicode+0x12>
41cb9a06:	4c30      	addiu	a0,48
    {
        byte_value = (byte_value + '0');    
41cb9a08:	6744      	move	v0,a0
    }
    else if((byte_value >= 10) && (byte_value <= 15))
    {
        byte_value = byte_value - 10 + 'A';
41cb9a0a:	ea11      	zeb	v0
41cb9a0c:	cd40      	sh	v0,0(a1)
    }
    else
    {
        byte_value = 0;
    }  

    *unicode_buffer = byte_value; 
41cb9a0e:	e820      	jr	ra

    return 1;
}
41cb9a10:	6a01      	li	v0,1
41cb9a12:	6744      	move	v0,a0
41cb9a14:	4af6      	addiu	v0,-10
41cb9a16:	5a06      	sltiu	v0,6
41cb9a18:	6a00      	li	v0,0
41cb9a1a:	60f8      	bteqz	41cb9a0c <byte_to_unicode+0xc>
41cb9a1c:	4c37      	addiu	a0,55
41cb9a1e:	6744      	move	v0,a0
41cb9a20:	ea11      	zeb	v0
41cb9a22:	17f4      	b	41cb9a0c <byte_to_unicode+0xc>

41cb9a24 <two_bytes_to_unicode>:
41cb9a24:	64f5      	save	40,ra,s0-s1

int32 two_bytes_to_unicode(uint8 byte_value, uint16 *unicode_buffer, uint32 base)
{
41cb9a26:	6724      	move	s1,a0
41cb9a28:	e911      	zeb	s1
41cb9a2a:	6b00      	li	v1,0
    uint8 temp_value;
    uint32 i;
    int32 trans_len = 0;

    for(i = 0; i < 2; i++)
41cb9a2c:	6705      	move	s0,a1
41cb9a2e:	2b11      	bnez	v1,41cb9a52 <two_bytes_to_unicode+0x2e>
    {
        if(i == 0)
41cb9a30:	e9db      	divu	zero,s1,a2
        {
            temp_value = byte_value / base;
41cb9a32:	ec12      	mflo	a0
41cb9a34:	67b0      	move	a1,s0
        }
        else
        {
            temp_value = byte_value % base; 
        }

        trans_len++;
    
        byte_to_unicode(temp_value, &(unicode_buffer[i]));
41cb9a36:	ec11      	zeb	a0
41cb9a38:	d304      	sw	v1,16(sp)
41cb9a3a:	1a43 e680 	jal	41cb9a00 <byte_to_unicode>
41cb9a3e:	d605      	sw	a2,20(sp)
41cb9a40:	9304      	lw	v1,16(sp)
41cb9a42:	4002      	addiu	s0,s0,2
41cb9a44:	4361      	addiu	v1,v1,1
41cb9a46:	5b02      	sltiu	v1,2
41cb9a48:	9605      	lw	a2,20(sp)
41cb9a4a:	61f1      	btnez	41cb9a2e <two_bytes_to_unicode+0xa>
41cb9a4c:	6a02      	li	v0,2
    }

    return trans_len;
}
41cb9a4e:	6475      	restore	40,ra,s0-s1
41cb9a50:	e8a0      	jrc	ra
41cb9a52:	e9db      	divu	zero,s1,a2
41cb9a54:	ec10      	mfhi	a0
41cb9a56:	6500      	nop
41cb9a58:	17ed      	b	41cb9a34 <two_bytes_to_unicode+0x10>
	...

41cb9a5c <bytes_to_unicode>:
41cb9a5c:	f00e 64f4 	save	a0-a3,32,ra,s0-s1

void bytes_to_unicode(uint8 *byte_buffer, uint8 byte_index, uint8 byte_len, uint16 *unicode_buffer, uint16 *unicode_len)
{
41cb9a60:	ee11      	zeb	a2
41cb9a62:	ed11      	zeb	a1
41cb9a64:	2612      	beqz	a2,41cb9a8a <bytes_to_unicode+0x2e>
    uint32 i;

    int32 trans_len;
    
    for(i = 0; i < byte_len; i++)
41cb9a66:	e585      	addu	s1,a1,a0
41cb9a68:	6706      	move	s0,a2
41cb9a6a:	a180      	lbu	a0,0(s1)
    {
        trans_len = two_bytes_to_unicode(byte_buffer[byte_index - i], unicode_buffer, 16);
41cb9a6c:	950b      	lw	a1,44(sp)
41cb9a6e:	1a43 e689 	jal	41cb9a24 <two_bytes_to_unicode>
41cb9a72:	6e10      	li	a2,16
41cb9a74:	940c      	lw	a0,48(sp)

        unicode_buffer += trans_len;

        *unicode_len += trans_len;
41cb9a76:	960b      	lw	a2,44(sp)
41cb9a78:	ac60      	lhu	v1,0(a0)
41cb9a7a:	3744      	sll	a3,v0,1
41cb9a7c:	e6f5      	addu	a1,a2,a3
41cb9a7e:	e269      	addu	v0,v1
41cb9a80:	400f      	addiu	s0,s0,-1
41cb9a82:	d50b      	sw	a1,44(sp)
41cb9a84:	cc40      	sh	v0,0(a0)
41cb9a86:	412f      	addiu	s1,s1,-1
41cb9a88:	28f0      	bnez	s0,41cb9a6a <bytes_to_unicode+0xe>
41cb9a8a:	6474      	restore	32,ra,s0-s1
    }

    return;
41cb9a8c:	e8a0      	jrc	ra
	...

41cb9a90 <uint32_to_unicode>:
41cb9a90:	f00c 64f6 	save	a0-a2,48,ra,s0-s1
}


void uint32_to_unicode(uint32 value, uint16 *unicode_buffer, uint16 *unicode_len, uint32 base)
{
41cb9a94:	6900      	li	s1,0
    uint32 i;
    uint32 trans_byte;
    uint8 temp_data[12];
    uint32 div_val;

    i = 0;
41cb9a96:	241c      	beqz	a0,41cb9ad0 <uint32_to_unicode+0x40>

    trans_byte = 0;

    div_val = value;
    
    while(div_val != 0)
    {
        temp_data[i] = div_val % base;
        div_val = div_val / base;
        i++;
41cb9a98:	0304      	addiu	v1,sp,16
41cb9a9a:	ecfb      	divu	zero,a0,a3
41cb9a9c:	4121      	addiu	s1,s1,1
41cb9a9e:	ec10      	mfhi	a0
41cb9aa0:	ea12      	mflo	v0
41cb9aa2:	c380      	sb	a0,0(v1)
41cb9aa4:	ec12      	mflo	a0
41cb9aa6:	4361      	addiu	v1,v1,1
41cb9aa8:	2af8      	bnez	v0,41cb9a9a <uint32_to_unicode+0xa>
41cb9aaa:	2112      	beqz	s1,41cb9ad0 <uint32_to_unicode+0x40>
    }
    
    while(i != 0)
    {
        trans_byte = byte_to_unicode(temp_data[i-1], unicode_buffer);
        unicode_buffer += trans_byte;
        *unicode_len += trans_byte;
        i--;
41cb9aac:	0304      	addiu	v1,sp,16
41cb9aae:	e161      	addu	s0,s1,v1
41cb9ab0:	f7ff a09f 	lbu	a0,-1(s0)
41cb9ab4:	950d      	lw	a1,52(sp)
41cb9ab6:	1a43 e680 	jal	41cb9a00 <byte_to_unicode>
41cb9aba:	412f      	addiu	s1,s1,-1
41cb9abc:	950d      	lw	a1,52(sp)
41cb9abe:	3344      	sll	v1,v0,1
41cb9ac0:	e571      	addu	a0,a1,v1
41cb9ac2:	950e      	lw	a1,56(sp)
41cb9ac4:	d40d      	sw	a0,52(sp)
41cb9ac6:	ade0      	lhu	a3,0(a1)
41cb9ac8:	400f      	addiu	s0,s0,-1
41cb9aca:	e2f9      	addu	a2,v0,a3
41cb9acc:	cdc0      	sh	a2,0(a1)
41cb9ace:	29f0      	bnez	s1,41cb9ab0 <uint32_to_unicode+0x20>
41cb9ad0:	6476      	restore	48,ra,s0-s1
    }

    return; 
41cb9ad2:	e8a0      	jrc	ra

41cb9ad4 <int32_to_unicode>:
41cb9ad4:	f00c 64f7 	save	a0-a2,56,ra,s0-s1
}

void int32_to_unicode(int32 value, uint16 *unicode_buffer, uint16 *unicode_len, uint32 base)
{
41cb9ad8:	6725      	move	s1,a1
41cb9ada:	2c07      	bnez	a0,41cb9aea <int32_to_unicode+0x16>
    uint32 i;
    uint32 trans_byte;
    uint8 temp_data[12];
    uint32 div_val;

    if(value == 0)
41cb9adc:	6d30      	li	a1,48
    {
        *unicode_buffer = '0';
41cb9ade:	c9a0      	sh	a1,0(s1)
41cb9ae0:	ae80      	lhu	a0,0(a2)
        *unicode_len += 1;
41cb9ae2:	4441      	addiu	v0,a0,1
41cb9ae4:	ce40      	sh	v0,0(a2)
41cb9ae6:	6477      	restore	56,ra,s0-s1
        return;
    }

    i = 0;
    trans_byte = 0;

    if(value < 0)
    {
        *unicode_buffer = '-';
        unicode_buffer++;
        *unicode_len += 1;
        value = 0 - value;
    }

    div_val = value;
    
    while(div_val != 0)
    {
        temp_data[i] = div_val % base;
        div_val = div_val / base;
        i++;
    }
    
    while(i != 0)
    {
        trans_byte = byte_to_unicode(temp_data[i-1], unicode_buffer);
        unicode_buffer += trans_byte;
        *unicode_len += trans_byte; 
        i--;
    }

    return; 
}
41cb9ae8:	e8a0      	jrc	ra
41cb9aea:	6e00      	li	a2,0
41cb9aec:	ecc2      	slt	a0,a2
41cb9aee:	611f      	btnez	41cb9b2e <int32_to_unicode+0x5a>
41cb9af0:	24fa      	beqz	a0,41cb9ae6 <int32_to_unicode+0x12>
41cb9af2:	0304      	addiu	v1,sp,16
41cb9af4:	ecfb      	divu	zero,a0,a3
41cb9af6:	46c1      	addiu	a2,a2,1
41cb9af8:	ec10      	mfhi	a0
41cb9afa:	ea12      	mflo	v0
41cb9afc:	c380      	sb	a0,0(v1)
41cb9afe:	ec12      	mflo	a0
41cb9b00:	4361      	addiu	v1,v1,1
41cb9b02:	2af8      	bnez	v0,41cb9af4 <int32_to_unicode+0x20>
41cb9b04:	26f0      	beqz	a2,41cb9ae6 <int32_to_unicode+0x12>
41cb9b06:	0704      	addiu	a3,sp,16
41cb9b08:	e6e1      	addu	s0,a2,a3
41cb9b0a:	f7ff a09f 	lbu	a0,-1(s0)
41cb9b0e:	67b1      	move	a1,s1
41cb9b10:	1a43 e680 	jal	41cb9a00 <byte_to_unicode>
41cb9b14:	d608      	sw	a2,32(sp)
41cb9b16:	9510      	lw	a1,64(sp)
41cb9b18:	9608      	lw	a2,32(sp)
41cb9b1a:	ad60      	lhu	v1,0(a1)
41cb9b1c:	3444      	sll	a0,v0,1
41cb9b1e:	46cf      	addiu	a2,a2,-1
41cb9b20:	e269      	addu	v0,v1
41cb9b22:	e185      	addu	s1,a0
41cb9b24:	cd40      	sh	v0,0(a1)
41cb9b26:	400f      	addiu	s0,s0,-1
41cb9b28:	2ef0      	bnez	a2,41cb9b0a <int32_to_unicode+0x36>
41cb9b2a:	6477      	restore	56,ra,s0-s1
41cb9b2c:	e8a0      	jrc	ra
41cb9b2e:	6b2d      	li	v1,45
41cb9b30:	cd60      	sh	v1,0(a1)
41cb9b32:	9310      	lw	v1,64(sp)
41cb9b34:	4522      	addiu	s1,a1,2
41cb9b36:	aba0      	lhu	a1,0(v1)
41cb9b38:	ec8b      	neg	a0
41cb9b3a:	4541      	addiu	v0,a1,1
41cb9b3c:	cb40      	sh	v0,0(v1)
41cb9b3e:	17d8      	b	41cb9af0 <int32_to_unicode+0x1c>

41cb9b40 <act_test_report_result>:
41cb9b40:	64f6      	save	48,ra,s0-s1


int32 act_test_report_result(uint8 *write_data, uint16 payload_len)
{
41cb9b42:	6705      	move	s0,a1
41cb9b44:	6a05      	li	v0,5
    int ret_val;
    uint8 cmd_data[8];
    
    stub_ext_param_t ext_param;

    ((return_result_t*)write_data)->timeout = 5;  // 获取测试项超时
41cb9b46:	6724      	move	s1,a0
41cb9b48:	e831      	zeh	s0
41cb9b4a:	c449      	sb	v0,9(a0)
41cb9b4c:	b20c      	lw	v0,41cb9b7c <act_test_report_result+0x3c>
    
    while(1)
    {
        //ext_param.opcode = STUB_CMD_ATT_REPORT_TRESULT;
        //ext_param.payload_len = payload_len;
        //ext_param.rw_buffer = write_data; 
        
        //ret_val = stub_ext_write(&ext_param);
        
        ret_val = att_write_data(STUB_CMD_ATT_REPORT_TRESULT, payload_len, write_data);
41cb9b4e:	f400 6c06 	li	a0,1030
41cb9b52:	67b0      	move	a1,s0
41cb9b54:	ea40      	jalr	v0
41cb9b56:	67d1      	move	a2,s1
41cb9b58:	2af9      	bnez	v0,41cb9b4c <act_test_report_result+0xc>
          
        if(ret_val == 0)
41cb9b5a:	67a2      	move	a1,v0
        {   
            //ext_param.payload_len = 0;
            //ext_param.rw_buffer = cmd_data;
            
            //ret_val = <i>stub_ext_read</i>(&ext_param);
            ret_val = att_read_data(STUB_CMD_ATT_REPORT_TRESULT, 0, cmd_data);
41cb9b5c:	b209      	lw	v0,41cb9b80 <act_test_report_result+0x40>
41cb9b5e:	f400 6c06 	li	a0,1030
41cb9b62:	ea40      	jalr	v0
41cb9b64:	0604      	addiu	a2,sp,16
41cb9b66:	2af2      	bnez	v0,41cb9b4c <act_test_report_result+0xc>
        
            if(ret_val == 0)
41cb9b68:	679d      	move	a0,sp
            {
                //确认是ACK数据
                if (cmd_data[1] == 0x04 && cmd_data[2] == 0xfe)
41cb9b6a:	a4b1      	lbu	a1,17(a0)
41cb9b6c:	7504      	cmpi	a1,4
41cb9b6e:	61ee      	btnez	41cb9b4c <act_test_report_result+0xc>
41cb9b70:	a4d2      	lbu	a2,18(a0)
41cb9b72:	76fe      	cmpi	a2,254
41cb9b74:	61eb      	btnez	41cb9b4c <act_test_report_result+0xc>
41cb9b76:	6476      	restore	48,ra,s0-s1
                {
                    break;
                }       
            }
        }
    }

    return ret_val;
}
41cb9b78:	e8a0      	jrc	ra
41cb9b7a:	0000      	addiu	s0,sp,0
41cb9b7c:	88e5      	lh	a3,10(s0)
41cb9b7e:	bfc3      	lwu	a2,12(a3)
41cb9b80:	890d      	lh	s0,26(s1)
41cb9b82:	bfc3      	lwu	a2,12(a3)

41cb9b84 <act_test_change_test_timeout>:
41cb9b84:	64f4      	save	32,ra,s0-s1
    


void act_test_change_test_timeout(uint16 timeout)
{
41cb9b86:	b010      	lw	s0,41cb9bc4 <act_test_change_test_timeout+0x40>
    uint32 ret_val;

    uint8 *cmd_data;

    cmd_data = (uint8*)STUB_ATT_RW_TEMP_BUFFER;
41cb9b88:	ec31      	zeh	a0
41cb9b8a:	6a00      	li	v0,0

    //该超时时间以秒为单位，取决于最长测试项所使用的时间
    cmd_data[6] = (timeout & 0xff);  // 测试项正常工作超时
    cmd_data[7] = ((timeout >> 8) & 0xff);
    cmd_data[8] = 0;
41cb9b8c:	c086      	sb	a0,6(s0)
41cb9b8e:	b10f      	lw	s1,41cb9bc8 <act_test_change_test_timeout+0x44>
    cmd_data[9] = 0;  

    ret_val = att_write_data(STUB_CMD_ATT_GET_TEST_ID, 4, STUB_ATT_RW_TEMP_BUFFER);
41cb9b90:	3482      	srl	a0,8
41cb9b92:	c087      	sb	a0,7(s0)
41cb9b94:	c048      	sb	v0,8(s0)
41cb9b96:	c049      	sb	v0,9(s0)
41cb9b98:	f400 6c04 	li	a0,1028
41cb9b9c:	6d04      	li	a1,4
41cb9b9e:	e940      	jalr	s1
41cb9ba0:	67d0      	move	a2,s0
41cb9ba2:	2202      	beqz	v0,41cb9ba8 <act_test_change_test_timeout+0x24>

    if(ret_val == 0)
41cb9ba4:	6474      	restore	32,ra,s0-s1
    {    
        ret_val = att_read_data(STUB_CMD_ATT_GET_TEST_ID, 4, STUB_ATT_RW_TEMP_BUFFER);

        if(ret_val == 0)
        {   
            //回复ACK
            ret_val = att_write_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);  
        }
    } 

    return;
}
41cb9ba6:	e8a0      	jrc	ra
41cb9ba8:	b209      	lw	v0,41cb9bc8 <act_test_change_test_timeout+0x44>
41cb9baa:	f400 6c04 	li	a0,1028
41cb9bae:	6d04      	li	a1,4
41cb9bb0:	ea40      	jalr	v0
41cb9bb2:	67d0      	move	a2,s0
41cb9bb4:	2af7      	bnez	v0,41cb9ba4 <act_test_change_test_timeout+0x20>
41cb9bb6:	f4e0 6c1e 	li	a0,1278
41cb9bba:	67a2      	move	a1,v0
41cb9bbc:	e940      	jalr	s1
41cb9bbe:	67d0      	move	a2,s0
41cb9bc0:	6474      	restore	32,ra,s0-s1
41cb9bc2:	e8a0      	jrc	ra
41cb9bc4:	a000      	lbu	s0,0(s0)
41cb9bc6:	9fc3      	lw	a2,12(a3)
41cb9bc8:	88e5      	lh	a3,10(s0)
41cb9bca:	bfc3      	lwu	a2,12(a3)
41cb9bcc:	890d      	lh	s0,26(s1)
41cb9bce:	bfc3      	lwu	a2,12(a3)

41cb9bd0 <act_test_read_testid>:
41cb9bd0:	f008 64f5 	save	a0-a1,40,ra,s0-s1

//当收到测试序列测试ID为0xffff后，小机端不要再发任何数据给ATT工具，避免数据ATT工具不响应的情况
int32 act_test_read_testid(uint8 *arg_buffer, uint32 arg_len)
{
41cb9bd4:	b243      	lw	v0,41cb9ce0 <act_test_read_testid+0x110>
    int ret_val;
    uint8 *cmd_data;
    uint8 temp_data[8];

    if(g_test_mode != TEST_MODE_CARD)
41cb9bd6:	a240      	lbu	v0,0(v0)
41cb9bd8:	221b      	beqz	v0,41cb9c10 <act_test_read_testid+0x40>
41cb9bda:	b043      	lw	s0,41cb9ce4 <act_test_read_testid+0x114>
    {  
        cmd_data = (uint8*)STUB_ATT_RW_TEMP_BUFFER;
41cb9bdc:	6c00      	li	a0,0

        //该超时时间以秒为单位，取决于最长测试项所使用的时间
        cmd_data[6] = 20;  // 测试项正常工作超时
        cmd_data[7] = 0;
41cb9bde:	6d14      	li	a1,20
41cb9be0:	b342      	lw	v1,41cb9ce8 <act_test_read_testid+0x118>
        cmd_data[8] = 0;
        cmd_data[9] = 0;
        
        ret_val = att_write_data(STUB_CMD_ATT_GET_TEST_ID, 4, STUB_ATT_RW_TEMP_BUFFER);
41cb9be2:	c0a6      	sb	a1,6(s0)
41cb9be4:	c087      	sb	a0,7(s0)
41cb9be6:	c088      	sb	a0,8(s0)
41cb9be8:	c089      	sb	a0,9(s0)
41cb9bea:	6d04      	li	a1,4
41cb9bec:	f400 6c04 	li	a0,1028
41cb9bf0:	eb40      	jalr	v1
41cb9bf2:	67d0      	move	a2,s0
41cb9bf4:	6722      	move	s1,v0
41cb9bf6:	2220      	beqz	v0,41cb9c38 <act_test_read_testid+0x68>

        if(ret_val == 0)
41cb9bf8:	b03e      	lw	s0,41cb9cf0 <act_test_read_testid+0x120>
        {    
            ret_val = att_read_data(STUB_CMD_ATT_GET_TEST_ID, 4, STUB_ATT_RW_TEMP_BUFFER);

            if(ret_val == 0)
            {   
                cmd_data = (uint8 *)STUB_ATT_RW_TEMP_BUFFER;
                
                g_test_info.test_id = (cmd_data[6] | (cmd_data[7] << 8));

                g_test_info.arg_len = (cmd_data[8] | (cmd_data[9] << 8));

                //TESTID为TESTID_ID_QUIT不回复ACK
                if(g_test_info.test_id != TESTID_ID_QUIT)
                {
                    //回复ACK
                    ret_val = att_write_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);  
                }
                
                if((g_test_info.test_id == TESTID_PRODUCT_TEST)
                    || (g_test_info.test_id == TESTID_FLASHTEST)
                    || (g_test_info.test_id == TESTID_BER_TEST)
                    || (g_test_info.test_id == TESTID_RSSI_TEST))
                {
                    act_test_change_test_timeout(60);                    
                }              
            }
        }

        libc_print("arg len", g_test_info.arg_len, 2);
41cb9bfa:	b240      	lw	v0,41cb9cf8 <act_test_read_testid+0x128>
41cb9bfc:	a8a2      	lhu	a1,4(s0)
41cb9bfe:	0c37      	la	a0,41cb9cd8 <act_test_read_testid+0x108>
41cb9c00:	6e02      	li	a2,2
41cb9c02:	ea40      	jalr	v0
41cb9c04:	6f4b      	li	a3,75
41cb9c06:	a882      	lhu	a0,4(s0)

        if(g_test_info.arg_len != 0)
41cb9c08:	2c3c      	bnez	a0,41cb9c82 <act_test_read_testid+0xb2>
41cb9c0a:	6751      	move	v0,s1
        {
            ret_val = att_write_data(STUB_CMD_ATT_GET_TEST_ARG, 0, STUB_ATT_RW_TEMP_BUFFER);

            if(ret_val == 0)
            {    
                ret_val = att_read_data(STUB_CMD_ATT_GET_TEST_ARG, g_test_info.arg_len, STUB_ATT_RW_TEMP_BUFFER);

                if(ret_val == 0)
                {
                    //避免使用STUB_ATT_RW_TEMP_BUFFER，因为后续还需要使用该buffer解析参数
                    ret_val = att_write_data(STUB_CMD_ATT_ACK, 0, temp_data);                   
                }
            }

            act_test_read_test_arg(g_test_info.test_id, (uint8 *)(STUB_ATT_RW_TEMP_BUFFER + sizeof(stub_ext_cmd_t)), arg_buffer, arg_len);
        }
    }
    else
    {
        ret_val = 0;

        act_test_read_test_info(g_cur_line_num, &g_test_info.test_id, arg_buffer, arg_len);

        if(g_test_info.test_id != 0xff)
        {
            g_cur_line_num++;
        }
    }
    return ret_val;    
}
41cb9c0c:	6475      	restore	40,ra,s0-s1
41cb9c0e:	e8a0      	jrc	ra
41cb9c10:	b63c      	lw	a2,41cb9cfc <act_test_read_testid+0x12c>
41cb9c12:	b038      	lw	s0,41cb9cf0 <act_test_read_testid+0x120>
41cb9c14:	a680      	lbu	a0,0(a2)
41cb9c16:	4002      	addiu	s0,s0,2
41cb9c18:	970b      	lw	a3,44(sp)
41cb9c1a:	6722      	move	s1,v0
41cb9c1c:	960a      	lw	a2,40(sp)
41cb9c1e:	b23a      	lw	v0,41cb9d04 <act_test_read_testid+0x134>
41cb9c20:	ea40      	jalr	v0
41cb9c22:	67b0      	move	a1,s0
41cb9c24:	a8e0      	lhu	a3,0(s0)
41cb9c26:	77ff      	cmpi	a3,255
41cb9c28:	60f0      	bteqz	41cb9c0a <act_test_read_testid+0x3a>
41cb9c2a:	b436      	lw	a0,41cb9d00 <act_test_read_testid+0x130>
41cb9c2c:	6751      	move	v0,s1
41cb9c2e:	a4a0      	lbu	a1,0(a0)
41cb9c30:	4561      	addiu	v1,a1,1
41cb9c32:	c460      	sb	v1,0(a0)
41cb9c34:	6475      	restore	40,ra,s0-s1
41cb9c36:	e8a0      	jrc	ra
41cb9c38:	b12d      	lw	s1,41cb9ce8 <act_test_read_testid+0x118>
41cb9c3a:	f400 6c04 	li	a0,1028
41cb9c3e:	6d04      	li	a1,4
41cb9c40:	e940      	jalr	s1
41cb9c42:	67d0      	move	a2,s0
41cb9c44:	6722      	move	s1,v0
41cb9c46:	2ad8      	bnez	v0,41cb9bf8 <act_test_read_testid+0x28>
41cb9c48:	a0c7      	lbu	a2,7(s0)
41cb9c4a:	b52a      	lw	a1,41cb9cf0 <act_test_read_testid+0x120>
41cb9c4c:	37c0      	sll	a3,a2,8
41cb9c4e:	a0c6      	lbu	a2,6(s0)
41cb9c50:	eeed      	or	a2,a3
41cb9c52:	cdc1      	sh	a2,2(a1)
41cb9c54:	a089      	lbu	a0,9(s0)
41cb9c56:	a048      	lbu	v0,8(s0)
41cb9c58:	3380      	sll	v1,a0,8
41cb9c5a:	b726      	lw	a3,41cb9cf0 <act_test_read_testid+0x120>
41cb9c5c:	ea6d      	or	v0,v1
41cb9c5e:	f7ff 761f 	cmpi	a2,65535
41cb9c62:	cf42      	sh	v0,4(a3)
41cb9c64:	6130      	btnez	41cb9cc6 <act_test_read_testid+0xf6>
41cb9c66:	b323      	lw	v1,41cb9cf0 <act_test_read_testid+0x120>
41cb9c68:	ab41      	lhu	v0,2(v1)
41cb9c6a:	720e      	cmpi	v0,14
41cb9c6c:	6006      	bteqz	41cb9c7a <act_test_read_testid+0xaa>
41cb9c6e:	721a      	cmpi	v0,26
41cb9c70:	6004      	bteqz	41cb9c7a <act_test_read_testid+0xaa>
41cb9c72:	72c5      	cmpi	v0,197
41cb9c74:	6002      	bteqz	41cb9c7a <act_test_read_testid+0xaa>
41cb9c76:	72c6      	cmpi	v0,198
41cb9c78:	61bf      	btnez	41cb9bf8 <act_test_read_testid+0x28>
41cb9c7a:	b21f      	lw	v0,41cb9cf4 <act_test_read_testid+0x124>
41cb9c7c:	ea40      	jalr	v0
41cb9c7e:	6c3c      	li	a0,60
41cb9c80:	17bb      	b	41cb9bf8 <act_test_read_testid+0x28>
41cb9c82:	b11a      	lw	s1,41cb9ce8 <act_test_read_testid+0x118>
41cb9c84:	b618      	lw	a2,41cb9ce4 <act_test_read_testid+0x114>
41cb9c86:	f400 6c05 	li	a0,1029
41cb9c8a:	e940      	jalr	s1
41cb9c8c:	6d00      	li	a1,0
41cb9c8e:	6722      	move	s1,v0
41cb9c90:	220a      	beqz	v0,41cb9ca6 <act_test_read_testid+0xd6>
41cb9c92:	b518      	lw	a1,41cb9cf0 <act_test_read_testid+0x120>
41cb9c94:	960a      	lw	a2,40(sp)
41cb9c96:	ad81      	lhu	a0,2(a1)
41cb9c98:	b519      	lw	a1,41cb9cfc <act_test_read_testid+0x12c>
41cb9c9a:	18a2 e63d 	jal	411798f4 <act_test_read_test_arg>
41cb9c9e:	970b      	lw	a3,44(sp)
41cb9ca0:	6751      	move	v0,s1
41cb9ca2:	6475      	restore	40,ra,s0-s1
41cb9ca4:	e8a0      	jrc	ra
41cb9ca6:	b610      	lw	a2,41cb9ce4 <act_test_read_testid+0x114>
41cb9ca8:	b211      	lw	v0,41cb9cec <act_test_read_testid+0x11c>
41cb9caa:	f400 6c05 	li	a0,1029
41cb9cae:	ea40      	jalr	v0
41cb9cb0:	a8a2      	lhu	a1,4(s0)
41cb9cb2:	6722      	move	s1,v0
41cb9cb4:	2aee      	bnez	v0,41cb9c92 <act_test_read_testid+0xc2>
41cb9cb6:	b30d      	lw	v1,41cb9ce8 <act_test_read_testid+0x118>
41cb9cb8:	f4e0 6c1e 	li	a0,1278
41cb9cbc:	67a2      	move	a1,v0
41cb9cbe:	eb40      	jalr	v1
41cb9cc0:	0604      	addiu	a2,sp,16
41cb9cc2:	6722      	move	s1,v0
41cb9cc4:	17e6      	b	41cb9c92 <act_test_read_testid+0xc2>
41cb9cc6:	67d0      	move	a2,s0
41cb9cc8:	b008      	lw	s0,41cb9ce8 <act_test_read_testid+0x118>
41cb9cca:	f4e0 6c1e 	li	a0,1278
41cb9cce:	e840      	jalr	s0
41cb9cd0:	67b1      	move	a1,s1
41cb9cd2:	6722      	move	s1,v0
41cb9cd4:	17c8      	b	41cb9c66 <act_test_read_testid+0x96>
41cb9cd6:	0000      	addiu	s0,sp,0
41cb9cd8:	7261      	cmpi	v0,97
41cb9cda:	2067      	beqz	s0,41cb9daa <.L37+0x18>
41cb9cdc:	656c      	move	t3,a0
41cb9cde:	006e      	addiu	s0,sp,440
41cb9ce0:	8dc9      	lh	a2,18(a1)
41cb9ce2:	bfc3      	lwu	a2,12(a3)
41cb9ce4:	a000      	lbu	s0,0(s0)
41cb9ce6:	9fc3      	lw	a2,12(a3)
41cb9ce8:	88e5      	lh	a3,10(s0)
41cb9cea:	bfc3      	lwu	a2,12(a3)
41cb9cec:	890d      	lh	s0,26(s1)
41cb9cee:	bfc3      	lwu	a2,12(a3)
41cb9cf0:	8dd4      	lh	a2,40(a1)
41cb9cf2:	bfc3      	lwu	a2,12(a3)
41cb9cf4:	9b85      	lw	a0,20(v1)
41cb9cf6:	41cb      	addiu	a2,s1,-5
41cb9cf8:	88dd      	lh	a2,58(s0)
41cb9cfa:	bfc3      	lwu	a2,12(a3)
41cb9cfc:	a006      	lbu	s0,6(s0)
41cb9cfe:	9fc3      	lw	a2,12(a3)
41cb9d00:	8dcc      	lh	a2,24(a1)
41cb9d02:	bfc3      	lwu	a2,12(a3)
41cb9d04:	9929      	lw	s1,36(s1)
41cb9d06:	4117      	daddiu	s0,s1,7

41cb9d08 <att_flush_rtc_reg>:
41cb9d08:	b30a      	lw	v1,41cb9d30 <att_flush_rtc_reg+0x28>

const att_task_stru_t autotest_ops[] =
{
    {TESTID_MODIFY_BTNAME,              1, 1, 0, 0, act_test_modify_bt_name},

    {TESTID_MODIFY_BLENAME,             1, 1, 0, 0, act_test_modify_bt_ble_name},

    {TESTID_MODIFY_BTADDR,              1, 1, 0, 0, act_test_modify_bt_addr},

    {TESTID_BT_TEST,                    1, 1, 0, 0, act_test_bt_test},

    {TESTID_GPIO_TEST,                  1, 1, 0, 0, act_test_gpio_test},

    {TESTID_GPIO_TEST_ATS2823,          1, 1, 0, 0, act_test_gpio_test_ATS2823},

    {TESTID_LINEIN_CH_TEST_ATS2825,     1, 1, 0, 0, act_test_linein_channel_test_ATS2825},

    {TESTID_LINEIN_CH_TEST_ATS2823,     1, 1, 0, 0, act_test_linein_channel_test_ATS2823},

    {TESTID_MIC_CH_TEST,                1, 1, 0, 0, act_test_mic_channel_test}, 

//    {TESTID_FM_CH_TEST,               1, 1, 0, 0, act_test_fm_channel_test},

    {TESTID_SDCARD_TEST,                1, 1, 0, 0, act_test_sdcard_play_test},

    {TESTID_PRODUCT_TEST,               0, 1, 1, 0, act_test_product_test},

    {TESTID_PREPARE_PRODUCT_TEST,       0, 1, 1, 0, act_test_prepare_product},
	
    {TESTID_UHOST_TEST,                 1, 1, 0, 0, act_test_uhost_play_test},

//    {TESTID_LINEIN_TEST,                1, 1, 0, 0, act_test_linein_play_test},

    {TESTID_MP_TEST,                    0, 1, 0, 0, att_mp_test},

    {TESTID_MP_READ_TEST,               0, 1, 0, 0, att_mp_read_test},

    {TESTID_READ_BTADDR,                1, 1, 0, 0, act_test_read_bt_addr},

    {TESTID_READ_BTNAME,                1, 1, 0, 0, act_test_read_bt_name},

    {TESTID_FTMODE,                     1, 1, 0, 0, act_test_enter_ft_mode},

    {TESTID_BQBMODE,                    1, 1, 0, 0, act_test_enter_BQB_mode},

    {TESTID_FLASHTEST,                  1, 1, 1, 0, act_test_flashtest},

    {TESTID_BER_TEST,                   0, 1, 0, 0, act_test_ber_test},

    {TESTID_RSSI_TEST,                  0, 1, 0, 0, act_test_rssi_test},    
    
    {TESTID_LRADC_TEST,                 1, 1, 0, 0, act_test_lradc_test},

    {TESTID_MODIFY_BTADDR2,             1, 1, 0, 0, act_test_modify_bt_addr},
//    {TESTID_MONITOR,                    act_test_monitor}
};

/************************************** ********************/
/*!
 * \par  Description:
 *  config等待RTCVCC域的寄存器写入
 * \param[in]    none
 * \param[out]   none
 * \return       non
 * \ingroup      config
 * \note
 ******************************************************/
void att_flush_rtc_reg(void)
{
    uint32 i;

    act_writel(0xA596, RTC_REGUPDATA);
41cb9d0a:	f594 6a16 	li	v0,42390
41cb9d0e:	db40      	sw	v0,0(v1)
41cb9d10:	9b80      	lw	a0,0(v1)
    while (act_readl(RTC_REGUPDATA) != 0x5A69)
41cb9d12:	f26b 7409 	cmpi	a0,23145
41cb9d16:	61fc      	btnez	41cb9d10 <att_flush_rtc_reg+0x8>
41cb9d18:	b407      	lw	a0,41cb9d34 <att_flush_rtc_reg+0x2c>
41cb9d1a:	6d01      	li	a1,1
41cb9d1c:	f3e0 6b1f 	li	v1,1023
41cb9d20:	9cc0      	lw	a2,0(a0)
    {
        ;//nothing for QAC
    }

    for (i = 0; i < 256 * 4; i++)
    {
        act_writel((act_readl(WD_CTL) | 0x01), WD_CTL);
41cb9d22:	436f      	addiu	v1,v1,-1
41cb9d24:	eead      	or	a2,a1
41cb9d26:	5300      	slti	v1,0
41cb9d28:	dcc0      	sw	a2,0(a0)
41cb9d2a:	60fa      	bteqz	41cb9d20 <att_flush_rtc_reg+0x18>
41cb9d2c:	e8a0      	jrc	ra
41cb9d2e:	0000      	addiu	s0,sp,0
41cb9d30:	0004      	addiu	s0,sp,16
41cb9d32:	c012      	sb	s0,18(s0)
41cb9d34:	001c      	addiu	s0,sp,112
41cb9d36:	c012      	sb	s0,18(s0)

41cb9d38 <en_play_wake_up>:
41cb9d38:	64c3      	save	24,ra
    }
}

/************************************** ********************/
/*!
 * \par  Description:
 *  config使能play键的唤醒功能
 默认是电源插入和长按唤醒
 * \param[in]    none
 * \param[out]   none
 * \return       non
 * \ingroup      config
 * \note
 ******************************************************/
void en_play_wake_up(void)
{
41cb9d3a:	b408      	lw	a0,41cb9d58 <en_play_wake_up+0x20>
    uint32 tmp;
    tmp = act_readl(WKEN_CTL);
41cb9d3c:	6e02      	li	a2,2

    //tmp |= (1 << WKEN_CTL_SHORT_WKEN) //play短按唤醒
    //| (1 << WKEN_CTL_LONG_WKEN); //play长按唤醒
    
    tmp |= (1 << WKEN_CTL_LONG_WKEN);
41cb9d3e:	9ca0      	lw	a1,0(a0)
41cb9d40:	edcd      	or	a1,a2
41cb9d42:	4edd      	addiu	a2,-35

    tmp &= ~(1 << WKEN_CTL_BT_WK_EN); //禁止BT唤醒
41cb9d44:	edcc      	and	a1,a2
41cb9d46:	dca0      	sw	a1,0(a0)

    act_writel(tmp, WKEN_CTL); //设置唤醒方式
41cb9d48:	1a43 e742 	jal	41cb9d08 <att_flush_rtc_reg>
    att_flush_rtc_reg();
41cb9d4c:	6500      	nop
41cb9d4e:	b304      	lw	v1,41cb9d5c <en_play_wake_up+0x24>
    act_writel(act_readl(WAKE_PD), WAKE_PD); //清pending
41cb9d50:	9b40      	lw	v0,0(v1)
41cb9d52:	db40      	sw	v0,0(v1)
41cb9d54:	6443      	restore	24,ra
41cb9d56:	e8a0      	jrc	ra
41cb9d58:	004c      	addiu	s0,sp,304
41cb9d5a:	c002      	sb	s0,2(s0)
41cb9d5c:	0050      	addiu	s0,sp,320
41cb9d5e:	c002      	sb	s0,2(s0)

41cb9d60 <att_power_off>:
41cb9d60:	64e3      	save	24,ra,s0
}

//进入standby S3BT/S4模式，DV5V，alarm，外部中断，ADC_KEY唤醒，ON_OFF键唤醒，BT唤醒
//不再返回，通过各种唤醒手段将系统reset
void att_power_off(void)
{
41cb9d62:	b21d      	lw	v0,41cb9dd4 <.L37+0x42>
    DISABLE_WATCH_DOG;
41cb9d64:	6b69      	li	v1,105
41cb9d66:	da60      	sw	v1,0(v0)
41cb9d68:	1a43 e74e 	jal	41cb9d38 <en_play_wake_up>
      
    en_play_wake_up();  
41cb9d6c:	6500      	nop
41cb9d6e:	b01b      	lw	s0,41cb9dd8 <.L37+0x46>
41cb9d70:	1006      	b	41cb9d7e <att_power_off+0x1e>
41cb9d72:	6d00      	li	a1,0
    
    while (1)
    {    
        libc_print("dc 5v on", 0, 0);
        
        //等待DC5V关
        if ((act_readl(CHG_DET) & (1 << CHG_DET_UVLO)) == 0)
        {
            break;
        }

        sys_mdelay(500);
41cb9d74:	f1e0 6c14 	li	a0,500
41cb9d78:	67c5      	move	a2,a1
41cb9d7a:	e840      	jalr	s0
41cb9d7c:	6f1d      	li	a3,29
41cb9d7e:	6d00      	li	a1,0
41cb9d80:	67c5      	move	a2,a1
41cb9d82:	0c0f      	la	a0,41cb9dbc <.L37+0x2a>
41cb9d84:	e840      	jalr	s0
41cb9d86:	6f4b      	li	a3,75
41cb9d88:	b615      	lw	a2,41cb9ddc <.L37+0x4a>
41cb9d8a:	6d80      	li	a1,128
41cb9d8c:	9e80      	lw	a0,0(a2)
41cb9d8e:	ecac      	and	a0,a1
41cb9d90:	2cf0      	bnez	a0,41cb9d72 <att_power_off+0x12>

41cb9d92 <.L37>:
41cb9d92:	6d00      	li	a1,0
    }
        
retry: 
    libc_print("poweroff", 0, 0);   
41cb9d94:	b011      	lw	s0,41cb9dd8 <.L37+0x46>
41cb9d96:	67c5      	move	a2,a1
41cb9d98:	0c0c      	la	a0,41cb9dc8 <.L37+0x36>
41cb9d9a:	e840      	jalr	s0
41cb9d9c:	6f4b      	li	a3,75
41cb9d9e:	b711      	lw	a3,41cb9de0 <.L37+0x4e>
    act_writel(0x00, POWER_CTL); //disable All，休眠进S4
41cb9da0:	6e00      	li	a2,0
41cb9da2:	dfc0      	sw	a2,0(a3)
41cb9da4:	f3a1 6c18 	li	a0,3000
    
    sys_mdelay(3000);
41cb9da8:	67a6      	move	a1,a2
41cb9daa:	e840      	jalr	s0
41cb9dac:	6f1d      	li	a3,29
41cb9dae:	b40c      	lw	a0,41cb9ddc <.L37+0x4a>
41cb9db0:	6b80      	li	v1,128
41cb9db2:	9c40      	lw	v0,0(a0)
    
    while (1)
    {        
        //等待DC5V关
        if ((act_readl(CHG_DET) & (1 << CHG_DET_UVLO)) == 0)
41cb9db4:	ea6c      	and	v0,v1
41cb9db6:	2afd      	bnez	v0,41cb9db2 <.L37+0x20>
41cb9db8:	17ec      	b	41cb9d92 <.L37>
41cb9dba:	0000      	addiu	s0,sp,0
41cb9dbc:	6364      	addiu	sp,800
41cb9dbe:	3520      	sll	a1,s1,8
41cb9dc0:	2076      	beqz	s0,41cb9eae <.LBE5+0x30>
41cb9dc2:	6e6f      	li	a2,111
41cb9dc4:	0000      	addiu	s0,sp,0
41cb9dc6:	0000      	addiu	s0,sp,0
41cb9dc8:	6f70      	li	a3,112
41cb9dca:	6577      	move	s3,a3
41cb9dcc:	6f72      	li	a3,114
41cb9dce:	6666      	0x6666
41cb9dd0:	0000      	addiu	s0,sp,0
41cb9dd2:	0000      	addiu	s0,sp,0
41cb9dd4:	001c      	addiu	s0,sp,112
41cb9dd6:	c012      	sb	s0,18(s0)
41cb9dd8:	88dd      	lh	a2,58(s0)
41cb9dda:	bfc3      	lwu	a2,12(a3)
41cb9ddc:	0010      	addiu	s0,sp,64
41cb9dde:	c002      	sb	s0,2(s0)
41cb9de0:	0044      	addiu	s0,sp,272
41cb9de2:	c002      	sb	s0,2(s0)

41cb9de4 <test_dispatch>:
41cb9de4:	64fe      	save	112,ra,s0-s1
        {
            goto retry;
        }
    }    
}

void test_dispatch(void)
{
41cb9de6:	b240      	lw	v0,41cb9ee4 <.LBE5+0x66>
    int ret_val;
    int i;
    uint8 att_cmd_temp_buffer[80];

    act_test_start_deal();
41cb9de8:	eac0      	jalrc	v0
41cb9dea:	0404      	addiu	a0,sp,16
    
    while(1)
    {
        ret_val = act_test_read_testid(att_cmd_temp_buffer, 80);
41cb9dec:	1a43 e6f4 	jal	41cb9bd0 <act_test_read_testid>
41cb9df0:	6d50      	li	a1,80
41cb9df2:	6702      	move	s0,v0
41cb9df4:	2a30      	bnez	v0,41cb9e56 <.LBE4+0x4>

        if(ret_val != 0)
41cb9df6:	b33e      	lw	v1,41cb9eec <.LBE5+0x6e>
        {
            sys_mdelay(100);
            continue;
        }

        if(g_test_info.test_id == TESTID_ID_WAIT)
41cb9df8:	aba1      	lhu	a1,2(v1)
41cb9dfa:	f7ff 751e 	cmpi	a1,65534
41cb9dfe:	6032      	bteqz	41cb9e64 <.LBE4+0x12>
41cb9e00:	f7ff 751f 	cmpi	a1,65535
        {
            sys_mdelay(500);
            continue;
        }        

        if(g_test_info.test_id == TESTID_ID_QUIT)
41cb9e04:	601c      	bteqz	41cb9e3e <test_dispatch+0x5a>
41cb9e06:	b339      	lw	v1,41cb9ee8 <.LBE5+0x6a>
        {
            break;
        }
        
		DEBUG_ATT_PRINT("test_dispatch:", g_test_info.test_id, 2);
41cb9e08:	0c2a      	la	a0,41cb9eb0 <.LBE5+0x32>
41cb9e0a:	6e02      	li	a2,2
41cb9e0c:	eb40      	jalr	v1
41cb9e0e:	6f4b      	li	a3,75
41cb9e10:	b437      	lw	a0,41cb9eec <.LBE5+0x6e>
41cb9e12:	b338      	lw	v1,41cb9ef0 <.LBE5+0x72>
41cb9e14:	aca1      	lhu	a1,2(a0)
41cb9e16:	1004      	b	41cb9e20 <test_dispatch+0x3c>
41cb9e18:	4001      	addiu	s0,s0,1
        for(i = 0; i < sizeof(autotest_ops)/sizeof(att_task_stru_t); i++)
41cb9e1a:	5818      	sltiu	s0,24
41cb9e1c:	4b08      	addiu	v1,8
41cb9e1e:	600d      	bteqz	41cb9e3a <test_dispatch+0x56>
41cb9e20:	abe0      	lhu	a3,0(v1)
        {
            if(autotest_ops[i].test_id == g_test_info.test_id)    
41cb9e22:	efae      	xor	a3,a1
41cb9e24:	2ff9      	bnez	a3,41cb9e18 <test_dispatch+0x34>
41cb9e26:	b234      	lw	v0,41cb9ef4 <.LBE5+0x76>
            {
                if(g_test_mode == TEST_MODE_CARD)
41cb9e28:	a2c0      	lbu	a2,0(v0)
41cb9e2a:	2e04      	bnez	a2,41cb9e34 <test_dispatch+0x50>
41cb9e2c:	a322      	lbu	s1,2(v1)
                {
                    if(autotest_ops[i].support_card_test == 0)
41cb9e2e:	6e01      	li	a2,1
41cb9e30:	e9cc      	and	s1,a2
41cb9e32:	211d      	beqz	s1,41cb9e6e <.LBB5>
41cb9e34:	9b41      	lw	v0,4(v1)
                    {
                        att_write_test_info("Unsupport card test: ", g_test_info.test_id, 1);
                        act_test_report_test_log(FALSE, g_test_info.test_id);
                        break;
                    }
                }
                autotest_ops[i].test_func(att_cmd_temp_buffer); 
41cb9e36:	ea40      	jalr	v0
41cb9e38:	0404      	addiu	a0,sp,16
41cb9e3a:	7018      	cmpi	s0,24
                break;                  
            }
        } 

        if(i == sizeof(autotest_ops)/sizeof(att_task_stru_t))
41cb9e3c:	61d6      	btnez	41cb9dea <test_dispatch+0x6>
41cb9e3e:	b42e      	lw	a0,41cb9ef4 <.LBE5+0x76>
        {
            //DEBUG_ATT_PRINT("unknown id", 0, 0);

            break;
        }
    }

    if(g_test_mode != TEST_MODE_USB)
41cb9e40:	a4a0      	lbu	a1,0(a0)
41cb9e42:	7501      	cmpi	a1,1
41cb9e44:	601f      	bteqz	41cb9e84 <.LBE5+0x6>

41cb9e46 <.LBB4>:
41cb9e46:	b32e      	lw	v1,41cb9efc <.LBE5+0x7e>
    {
        write_log_file(TRUE);
41cb9e48:	eb40      	jalr	v1
41cb9e4a:	6c01      	li	a0,1
41cb9e4c:	1a83 e680 	jal	41d39a00 <led_flash_ok>
        //sys_mdelay(5000);
        //sys_reboot();         
        led_flash_ok();         
41cb9e50:	6500      	nop

41cb9e52 <.LBE4>:
41cb9e52:	647e      	restore	112,ra,s0-s1
    } 
    else
    {          
        att_write_test_info("Test time: ", sys_get_ab_timer() - g_test_base_time, 1);
        stub_close();
        //sys_mdelay(5000);
        //sys_reboot();
    }
}
41cb9e54:	e8a0      	jrc	ra
41cb9e56:	6d00      	li	a1,0
41cb9e58:	6c64      	li	a0,100
41cb9e5a:	67c5      	move	a2,a1
41cb9e5c:	b023      	lw	s0,41cb9ee8 <.LBE5+0x6a>
41cb9e5e:	e840      	jalr	s0
41cb9e60:	6f1d      	li	a3,29
41cb9e62:	17c3      	b	41cb9dea <test_dispatch+0x6>
41cb9e64:	f1e0 6c14 	li	a0,500
41cb9e68:	67a2      	move	a1,v0
41cb9e6a:	67c2      	move	a2,v0
41cb9e6c:	17f7      	b	41cb9e5c <.LBE4+0xa>

41cb9e6e <.LBB5>:
41cb9e6e:	b223      	lw	v0,41cb9ef8 <.LBE5+0x7a>
41cb9e70:	0c14      	la	a0,41cb9ec0 <.LBE5+0x42>
41cb9e72:	eac0      	jalrc	v0
41cb9e74:	b61e      	lw	a2,41cb9ee8 <.LBE5+0x6a>
41cb9e76:	6791      	move	a0,s1
41cb9e78:	1802 e437 	jal	410390dc <act_test_report_test_log>
41cb9e7c:	aea1      	lhu	a1,2(a2)

41cb9e7e <.LBE5>:
41cb9e7e:	7018      	cmpi	s0,24
41cb9e80:	61b4      	btnez	41cb9dea <test_dispatch+0x6>
41cb9e82:	17dd      	b	41cb9e3e <test_dispatch+0x5a>
41cb9e84:	6c00      	li	a0,0
41cb9e86:	b219      	lw	v0,41cb9ee8 <.LBE5+0x6a>
41cb9e88:	67a4      	move	a1,a0
41cb9e8a:	67c4      	move	a2,a0
41cb9e8c:	ea40      	jalr	v0
41cb9e8e:	6f1c      	li	a3,28
41cb9e90:	b61c      	lw	a2,41cb9f00 <.LBE5+0x82>
41cb9e92:	b31a      	lw	v1,41cb9ef8 <.LBE5+0x7a>
41cb9e94:	9ee0      	lw	a3,0(a2)
41cb9e96:	0c11      	la	a0,41cb9ed8 <.LBE5+0x5a>
41cb9e98:	e2f7      	subu	a1,v0,a3
41cb9e9a:	eb40      	jalr	v1
41cb9e9c:	6e01      	li	a2,1
41cb9e9e:	6c00      	li	a0,0
41cb9ea0:	b219      	lw	v0,41cb9f04 <.LBE5+0x86>
41cb9ea2:	67a4      	move	a1,a0
41cb9ea4:	67c4      	move	a2,a0
41cb9ea6:	ea40      	jalr	v0
41cb9ea8:	6f01      	li	a3,1
41cb9eaa:	647e      	restore	112,ra,s0-s1
41cb9eac:	e8a0      	jrc	ra
41cb9eae:	0000      	addiu	s0,sp,0
41cb9eb0:	6574      	move	s3,a0
41cb9eb2:	7473      	cmpi	a0,115
41cb9eb4:	645f      	restore	120,ra,s1
41cb9eb6:	7369      	cmpi	v1,105
41cb9eb8:	6170      	btnez	41cb9f9a <autotest_ops+0x92>
41cb9eba:	6374      	addiu	sp,928
41cb9ebc:	3a68      	ld	v1,64(v0)
41cb9ebe:	0000      	addiu	s0,sp,0
41cb9ec0:	6e55      	li	a2,85
41cb9ec2:	7573      	cmpi	a1,115
41cb9ec4:	7070      	cmpi	s0,112
41cb9ec6:	726f      	cmpi	v0,111
41cb9ec8:	2074      	beqz	s0,41cb9fb2 <autotest_ops+0xaa>
41cb9eca:	6163      	btnez	41cb9f92 <autotest_ops+0x8a>
41cb9ecc:	6472      	restore	16,ra,s0-s1
41cb9ece:	7420      	cmpi	a0,32
41cb9ed0:	7365      	cmpi	v1,101
41cb9ed2:	3a74      	ld	v1,160(v0)
41cb9ed4:	0020      	addiu	s0,sp,128
41cb9ed6:	0000      	addiu	s0,sp,0
41cb9ed8:	6554      	move	s2,a0
41cb9eda:	7473      	cmpi	a0,115
41cb9edc:	7420      	cmpi	a0,32
41cb9ede:	6d69      	li	a1,105
41cb9ee0:	3a65      	ld	v1,40(v0)
41cb9ee2:	0020      	addiu	s0,sp,128
41cb9ee4:	90ed      	lw	s0,948(sp)
41cb9ee6:	4107      	addiu	s0,s1,7
41cb9ee8:	88dd      	lh	a2,58(s0)
41cb9eea:	bfc3      	lwu	a2,12(a3)
41cb9eec:	8dd4      	lh	a2,40(a1)
41cb9eee:	bfc3      	lwu	a2,12(a3)
41cb9ef0:	9f08      	lw	s0,32(a3)
41cb9ef2:	41cb      	addiu	a2,s1,-5
41cb9ef4:	8dc9      	lh	a2,18(a1)
41cb9ef6:	bfc3      	lwu	a2,12(a3)
41cb9ef8:	8b89      	lh	a0,18(v1)
41cb9efa:	bfc3      	lwu	a2,12(a3)
41cb9efc:	9419      	lw	a0,100(sp)
41cb9efe:	4113      	daddiu	s0,s1,3
41cb9f00:	8dc4      	lh	a2,8(a1)
41cb9f02:	bfc3      	lwu	a2,12(a3)
41cb9f04:	8fd9      	lh	a2,50(a3)
41cb9f06:	bfc3      	lwu	a2,12(a3)

41cb9f08 <autotest_ops>:
41cb9f08:	0001 0003 9729 411b 0002 0003 9859 411b     ....)..A....Y..A
41cb9f18:	00c0 0003 9385 411b 00c1 0003 947d 4103     .......A....}..A
41cb9f28:	0006 0003 9e3d 41d3 0015 0003 9e59 41d3     ....=..A....Y..A
41cb9f38:	0007 0003 98bd 4127 001c 0003 98c9 4127     ......'A......'A
41cb9f48:	0008 0003 98d5 4127 000a 0003 9219 410f     ......'A.......A
41cb9f58:	000e 0006 3629 41a1 000d 0006 36a9 41a1     ....)6.A.....6.A
41cb9f68:	000b 0003 90e9 410f 00c2 0002 969d 4123     .......A......#A
41cb9f78:	00c3 0002 97a1 4123 00c4 0003 9001 412b     ......#A......+A
41cb9f88:	0016 0003 928d 412b 0018 0003 9381 4133     ......+A......3A
41cb9f98:	0019 0003 947d 4133 001a 0007 9331 4133     ....}.3A....1.3A
41cb9fa8:	00c5 0002 9405 4137 00c6 0002 950d 4137     ......7A......7A
41cb9fb8:	001b 0003 9161 4133 00c7 0003 9385 411b     ....a.3A.......A
	...
Disassembly of section BANK_CONTROL_1_51:

41cf9a00 <vsnprintf>:
41cf9a00:	f00e 64b5 	save	a0-a3,40,s0-s1
/*!
 * \brief 格式化输出到字符串 (指定大小和参数列表).
 */
extern int vsnprintf(char* buf, size_t size, const char* fmt, va_list args)
{
41cf9a04:	6706      	move	s0,a2
41cf9a06:	a060      	lbu	v1,0(s0)
    char* str = buf;
    char* end = buf + size - 1;

    for (; *fmt != '\0'; fmt++)
41cf9a08:	6743      	move	v0,v1
41cf9a0a:	ea91      	seb	v0
41cf9a0c:	2209      	beqz	v0,41cf9a20 <vsnprintf+0x20>
41cf9a0e:	7225      	cmpi	v0,37
    {
        uint32 flags;
        int width;

        uint32 number;
        uint32 base;

        char num_str[16];
        int num_len;
        int sign;
        uint8 ch;
        if (*fmt != '%')
41cf9a10:	600d      	bteqz	41cf9a2c <vsnprintf+0x2c>
41cf9a12:	c460      	sb	v1,0(a0)
        {
            _putc(str, end, *fmt);
41cf9a14:	4481      	addiu	a0,a0,1
            continue;
        }

        fmt++;

        flags = 0, width = 0, base = 10;

        if (*fmt == '0')
        {
            flags |= _ZEROPAD;
            fmt++;
        }

        while (isdigit(*fmt))
        {
            width = (width * 10) + (*fmt - '0');
            fmt++;
        }

        switch (*fmt)
        {
            case 'c':
            {
                ch = (uint8)va_arg(args, int);

                _putc(str, end, ch);
41cf9a16:	4001      	addiu	s0,s0,1
41cf9a18:	a060      	lbu	v1,0(s0)
41cf9a1a:	6743      	move	v0,v1
41cf9a1c:	ea91      	seb	v0
41cf9a1e:	2af7      	bnez	v0,41cf9a0e <vsnprintf+0xe>
41cf9a20:	950a      	lw	a1,40(sp)
                continue;
            }

            case 's':
            {
                char* s = va_arg(args, char*);

                while (*s != '\0')
                _putc(str, end, *s++);

                continue;
            }

            //case 'X':
            //    flags |= _LARGE;

            case 'x':
            //  case 'p':
            base = 16;
            break;

            case 'd':
            //  case 'i':
            flags |= _SIGN;

            //  case 'u':
            break;

            default:
            continue;
        }

        number = va_arg(args, uint32);

        sign = 0, num_len = 0;

        if (flags & _SIGN)
        {
            if ((int) number < 0)
            {
                number = -(int) number;

                sign = '-';
                width -= 1;
            }
        }

        if (number == 0)
        {
            num_str[num_len++] = '0';
        }
        else
        {

            while (number != 0)
            {
                char ch = digits[number % base];

                num_str[num_len++] = ch;
                number /= base;
            }
        }

        width -= num_len;

        if (sign != 0)
        _putc(str, end, sign);

        if (flags & _ZEROPAD)
        {
            while (width-- > 0)
            _putc(str, end, '0');
        }

        while (num_len-- > 0)
        _putc(str, end, num_str[num_len]);
    }

    *str = '\0';

    return (str - buf);
}
41cf9a22:	6b00      	li	v1,0
41cf9a24:	e4ab      	subu	v0,a0,a1
41cf9a26:	c460      	sb	v1,0(a0)
41cf9a28:	6435      	restore	40,s0-s1
41cf9a2a:	e8a0      	jrc	ra
41cf9a2c:	6a00      	li	v0,0
41cf9a2e:	4001      	addiu	s0,s0,1
41cf9a30:	d204      	sw	v0,16(sp)
41cf9a32:	67e2      	move	a3,v0
41cf9a34:	a040      	lbu	v0,0(s0)
41cf9a36:	6b0a      	li	v1,10
41cf9a38:	653b      	move	t9,v1
41cf9a3a:	6762      	move	v1,v0
41cf9a3c:	eb91      	seb	v1
41cf9a3e:	7330      	cmpi	v1,48
41cf9a40:	6106      	btnez	41cf9a4e <vsnprintf+0x4e>
41cf9a42:	4001      	addiu	s0,s0,1
41cf9a44:	a040      	lbu	v0,0(s0)
41cf9a46:	6d02      	li	a1,2
41cf9a48:	6762      	move	v1,v0
41cf9a4a:	d504      	sw	a1,16(sp)
41cf9a4c:	eb91      	seb	v1
41cf9a4e:	4ad0      	addiu	v0,-48
41cf9a50:	ea11      	zeb	v0
41cf9a52:	5a0a      	sltiu	v0,10
41cf9a54:	6102      	btnez	41cf9a5a <vsnprintf+0x5a>
41cf9a56:	100e      	b	41cf9a74 <vsnprintf+0x74>
41cf9a58:	eb91      	seb	v1
41cf9a5a:	36e8      	sll	a2,a3,2
41cf9a5c:	e6f5      	addu	a1,a2,a3
41cf9a5e:	32a4      	sll	v0,a1,1
41cf9a60:	4001      	addiu	s0,s0,1
41cf9a62:	e27d      	addu	a3,v0,v1
41cf9a64:	a060      	lbu	v1,0(s0)
41cf9a66:	4fd0      	addiu	a3,-48
41cf9a68:	67c3      	move	a2,v1
41cf9a6a:	4ed0      	addiu	a2,-48
41cf9a6c:	ee11      	zeb	a2
41cf9a6e:	5e0a      	sltiu	a2,10
41cf9a70:	61f3      	btnez	41cf9a58 <vsnprintf+0x58>
41cf9a72:	eb91      	seb	v1
41cf9a74:	7364      	cmpi	v1,100
41cf9a76:	600c      	bteqz	41cf9a90 <vsnprintf+0x90>
41cf9a78:	5365      	slti	v1,101
41cf9a7a:	6053      	bteqz	41cf9b22 <.LBE5+0x4>
41cf9a7c:	7363      	cmpi	v1,99
41cf9a7e:	61cb      	btnez	41cf9a16 <vsnprintf+0x16>
41cf9a80:	950d      	lw	a1,52(sp)
41cf9a82:	4544      	addiu	v0,a1,4
41cf9a84:	f7ff a2fc 	lbu	a3,-4(v0)
41cf9a88:	d20d      	sw	v0,52(sp)
41cf9a8a:	c4e0      	sb	a3,0(a0)
41cf9a8c:	4481      	addiu	a0,a0,1
41cf9a8e:	17c3      	b	41cf9a16 <vsnprintf+0x16>
41cf9a90:	9104      	lw	s1,16(sp)
41cf9a92:	6a01      	li	v0,1
41cf9a94:	e94d      	or	s1,v0
41cf9a96:	d104      	sw	s1,16(sp)
41cf9a98:	920d      	lw	v0,52(sp)
41cf9a9a:	9304      	lw	v1,16(sp)
41cf9a9c:	4224      	addiu	s1,v0,4
41cf9a9e:	6e01      	li	a2,1
41cf9aa0:	d10d      	sw	s1,52(sp)
41cf9aa2:	41ac      	addiu	a1,s1,-4
41cf9aa4:	ee6c      	and	a2,v1
41cf9aa6:	6900      	li	s1,0
41cf9aa8:	9da0      	lw	a1,0(a1)
41cf9aaa:	d105      	sw	s1,20(sp)
41cf9aac:	2602      	beqz	a2,41cf9ab2 <vsnprintf+0xb2>
41cf9aae:	ed22      	slt	a1,s1
41cf9ab0:	614c      	btnez	41cf9b4a <.LBE6+0xc>
41cf9ab2:	2d26      	bnez	a1,41cf9b00 <vsnprintf+0x100>
41cf9ab4:	6d30      	li	a1,48
41cf9ab6:	677d      	move	v1,sp
41cf9ab8:	c3a0      	sb	a1,0(v1)
41cf9aba:	6901      	li	s1,1
41cf9abc:	9305      	lw	v1,20(sp)
41cf9abe:	e737      	subu	a1,a3,s1
41cf9ac0:	2302      	beqz	v1,41cf9ac6 <vsnprintf+0xc6>
41cf9ac2:	c460      	sb	v1,0(a0)
41cf9ac4:	4481      	addiu	a0,a0,1
41cf9ac6:	9604      	lw	a2,16(sp)
41cf9ac8:	6f02      	li	a3,2
41cf9aca:	efcc      	and	a3,a2
41cf9acc:	270a      	beqz	a3,41cf9ae2 <vsnprintf+0xe2>
41cf9ace:	5501      	slti	a1,1
41cf9ad0:	456f      	addiu	v1,a1,-1
41cf9ad2:	6107      	btnez	41cf9ae2 <vsnprintf+0xe2>
41cf9ad4:	6d30      	li	a1,48
41cf9ad6:	6743      	move	v0,v1
41cf9ad8:	5201      	slti	v0,1
41cf9ada:	c4a0      	sb	a1,0(a0)
41cf9adc:	436f      	addiu	v1,v1,-1
41cf9ade:	4481      	addiu	a0,a0,1
41cf9ae0:	60fa      	bteqz	41cf9ad6 <vsnprintf+0xd6>
41cf9ae2:	5101      	slti	s1,1
41cf9ae4:	41af      	addiu	a1,s1,-1
41cf9ae6:	6197      	btnez	41cf9a16 <vsnprintf+0x16>
41cf9ae8:	67fd      	move	a3,sp
41cf9aea:	e5ed      	addu	v1,a1,a3
41cf9aec:	a340      	lbu	v0,0(v1)
41cf9aee:	67c5      	move	a2,a1
41cf9af0:	5601      	slti	a2,1
41cf9af2:	c440      	sb	v0,0(a0)
41cf9af4:	45af      	addiu	a1,a1,-1
41cf9af6:	4481      	addiu	a0,a0,1
41cf9af8:	436f      	addiu	v1,v1,-1
41cf9afa:	60f8      	bteqz	41cf9aec <vsnprintf+0xec>
41cf9afc:	4001      	addiu	s0,s0,1
41cf9afe:	178c      	b	41cf9a18 <vsnprintf+0x18>
41cf9b00:	b215      	lw	v0,41cf9b54 <.LBE6+0x16>
41cf9b02:	67dd      	move	a2,sp
41cf9b04:	651a      	move	t8,v0

41cf9b06 <.LBB5>:
41cf9b06:	6779      	move	v1,t9
41cf9b08:	ed7b      	divu	zero,a1,v1
41cf9b0a:	6758      	move	v0,t8
41cf9b0c:	4121      	addiu	s1,s1,1
41cf9b0e:	ed10      	mfhi	a1
41cf9b10:	eb12      	mflo	v1
41cf9b12:	e555      	addu	a1,v0
41cf9b14:	8540      	lb	v0,0(a1)
41cf9b16:	d506      	sw	a1,24(sp)
41cf9b18:	c640      	sb	v0,0(a2)
41cf9b1a:	ed12      	mflo	a1
41cf9b1c:	46c1      	addiu	a2,a2,1

41cf9b1e <.LBE5>:
41cf9b1e:	2bf3      	bnez	v1,41cf9b06 <.LBB5>
41cf9b20:	17cd      	b	41cf9abc <vsnprintf+0xbc>
41cf9b22:	7373      	cmpi	v1,115
41cf9b24:	610c      	btnez	41cf9b3e <.LBE6>

41cf9b26 <.LBB6>:
41cf9b26:	930d      	lw	v1,52(sp)
41cf9b28:	43c4      	addiu	a2,v1,4
41cf9b2a:	d60d      	sw	a2,52(sp)
41cf9b2c:	f7ff 9e7c 	lw	v1,-4(a2)
41cf9b30:	a340      	lbu	v0,0(v1)
41cf9b32:	f77f 2210 	beqz	v0,41cf9a16 <vsnprintf+0x16>
41cf9b36:	c440      	sb	v0,0(a0)
41cf9b38:	4361      	addiu	v1,v1,1
41cf9b3a:	4481      	addiu	a0,a0,1
41cf9b3c:	17f9      	b	41cf9b30 <.LBB6+0xa>

41cf9b3e <.LBE6>:
41cf9b3e:	7378      	cmpi	v1,120
41cf9b40:	6b10      	li	v1,16
41cf9b42:	653b      	move	t9,v1
41cf9b44:	60a9      	bteqz	41cf9a98 <vsnprintf+0x98>
41cf9b46:	4001      	addiu	s0,s0,1
41cf9b48:	1767      	b	41cf9a18 <vsnprintf+0x18>
41cf9b4a:	6e2d      	li	a2,45
41cf9b4c:	edab      	neg	a1
41cf9b4e:	47ef      	addiu	a3,a3,-1
41cf9b50:	d605      	sw	a2,20(sp)
41cf9b52:	17af      	b	41cf9ab2 <vsnprintf+0xb2>
41cf9b54:	9bf4      	lw	a3,80(v1)
41cf9b56:	41cf      	addiu	a2,s1,-1

41cf9b58 <print_log>:
41cf9b58:	f00e 64f5 	save	a0-a3,40,ra,s0-s1

#if 0
int printk(const char* format, ...)
{
    int i;

    va_list args;

    va_start(args, format);

    vsnprintf((uint8 *)PRINT_BUF_ADDR, PRINT_BUF_SIZE, format, args);

    libc_dma_print((uint8 *)PRINT_BUF_ADDR, 0, 0);

    //va_end(args);

    return i;
}
#endif

int print_log(const char* format, ...)
{
41cf9b5c:	b320      	lw	v1,41cf9bdc <print_log+0x84>
    int trans_bytes;

    print_log_t * print_log;

    va_list args;

    uint8 *data_buffer;
    
    if(g_test_mode == TEST_MODE_CARD)
41cf9b5e:	d50b      	sw	a1,44(sp)
41cf9b60:	d60c      	sw	a2,48(sp)
41cf9b62:	d70d      	sw	a3,52(sp)
41cf9b64:	d40a      	sw	a0,40(sp)
41cf9b66:	a340      	lbu	v0,0(v1)
41cf9b68:	2a02      	bnez	v0,41cf9b6e <print_log+0x16>
41cf9b6a:	6475      	restore	40,ra,s0-s1
    {
        return;    
    }    

    va_start(args, format);

    data_buffer = sys_malloc_large_data(256);

    print_log = (print_log_t *) data_buffer;

    trans_bytes = vsnprintf((uint8 *) &(print_log->log_data), PRINT_BUF_SIZE, format, args);

    //添加结束字符
    libc_memset(&print_log->log_data[trans_bytes], 0, 4);
    trans_bytes += 1;

    //保证四字节对齐
    trans_bytes = (((trans_bytes + 3) >> 2) << 2);

    att_write_data(STUB_CMD_ATT_PRINT_LOG, trans_bytes, data_buffer);

    libc_dma_print((uint8 *) &(print_log->log_data), 0, 0);

    att_read_data(STUB_CMD_ATT_ACK, 0, STUB_ATT_RW_TEMP_BUFFER);

    sys_free_large_data(data_buffer);

    return 0;
}
41cf9b6c:	e8a0      	jrc	ra
41cf9b6e:	6fff      	li	a3,255
41cf9b70:	b11c      	lw	s1,41cf9be0 <print_log+0x88>
41cf9b72:	4781      	addiu	a0,a3,1
41cf9b74:	6d20      	li	a1,32
41cf9b76:	6e00      	li	a2,0
41cf9b78:	e940      	jalr	s1
41cf9b7a:	6f16      	li	a3,22
41cf9b7c:	42c6      	addiu	a2,v0,6
41cf9b7e:	d604      	sw	a2,16(sp)
41cf9b80:	6786      	move	a0,a2
41cf9b82:	6dff      	li	a1,255
41cf9b84:	960a      	lw	a2,40(sp)
41cf9b86:	070b      	addiu	a3,sp,44
41cf9b88:	45a1      	addiu	a1,a1,1
41cf9b8a:	1a63 e680 	jal	41cf9a00 <vsnprintf>
41cf9b8e:	6722      	move	s1,v0
41cf9b90:	e151      	addu	a0,s1,v0
41cf9b92:	6702      	move	s0,v0
41cf9b94:	b214      	lw	v0,41cf9be4 <print_log+0x8c>
41cf9b96:	6f01      	li	a3,1
41cf9b98:	4486      	addiu	a0,a0,6
41cf9b9a:	6d00      	li	a1,0
41cf9b9c:	6e04      	li	a2,4
41cf9b9e:	ea40      	jalr	v0
41cf9ba0:	4004      	addiu	s0,s0,4
41cf9ba2:	300b      	sra	s0,2
41cf9ba4:	b211      	lw	v0,41cf9be8 <print_log+0x90>
41cf9ba6:	3508      	sll	a1,s0,2
41cf9ba8:	f400 6c07 	li	a0,1031
41cf9bac:	ea40      	jalr	v0
41cf9bae:	67d1      	move	a2,s1
41cf9bb0:	9404      	lw	a0,16(sp)
41cf9bb2:	6d00      	li	a1,0
41cf9bb4:	b30b      	lw	v1,41cf9be0 <print_log+0x88>
41cf9bb6:	67c5      	move	a2,a1
41cf9bb8:	eb40      	jalr	v1
41cf9bba:	6f4c      	li	a3,76
41cf9bbc:	b60c      	lw	a2,41cf9bec <print_log+0x94>
41cf9bbe:	b20d      	lw	v0,41cf9bf0 <print_log+0x98>
41cf9bc0:	f4e0 6c1e 	li	a0,1278
41cf9bc4:	ea40      	jalr	v0
41cf9bc6:	6d00      	li	a1,0
41cf9bc8:	b306      	lw	v1,41cf9be0 <print_log+0x88>
41cf9bca:	6791      	move	a0,s1
41cf9bcc:	6d20      	li	a1,32
41cf9bce:	6e00      	li	a2,0
41cf9bd0:	eb40      	jalr	v1
41cf9bd2:	6f17      	li	a3,23
41cf9bd4:	6a00      	li	v0,0
41cf9bd6:	6475      	restore	40,ra,s0-s1
41cf9bd8:	e8a0      	jrc	ra
41cf9bda:	0000      	addiu	s0,sp,0
41cf9bdc:	8dc9      	lh	a2,18(a1)
41cf9bde:	bfc3      	lwu	a2,12(a3)
41cf9be0:	88dd      	lh	a2,58(s0)
41cf9be2:	bfc3      	lwu	a2,12(a3)
41cf9be4:	88d5      	lh	a2,42(s0)
41cf9be6:	bfc3      	lwu	a2,12(a3)
41cf9be8:	88e5      	lh	a3,10(s0)
41cf9bea:	bfc3      	lwu	a2,12(a3)
41cf9bec:	a000      	lbu	s0,0(s0)
41cf9bee:	9fc3      	lw	a2,12(a3)
41cf9bf0:	890d      	lh	s0,26(s1)
41cf9bf2:	bfc3      	lwu	a2,12(a3)

41cf9bf4 <digits>:
41cf9bf4:	3130 3332 3534 3736 3938 6261 6463 6665     0123456789abcdef
	...
Disassembly of section BANK_CONTROL_1_52:

41d39a00 <led_flash_ok>:
41d39a00:	64f5      	save	40,ra,s0-s1
#include "ap_manager_test.h"
#include "ap_autotest_gpio.h"

void led_flash_ok(void)
{
41d39a02:	b53b      	lw	a1,41d39aec <led_flash_ok+0xec>
    uint8 i;
    uint8 led_num = 8;
    uint32 loop_cnt = 8;

    DISABLE_WATCH_DOG;
41d39a04:	6b69      	li	v1,105
41d39a06:	dd60      	sw	v1,0(a1)
41d39a08:	b53a      	lw	a1,41d39af0 <led_flash_ok+0xf0>

    //A0默认输出高电平，IO口接下拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);
41d39a0a:	4b98      	addiu	v1,-104
41d39a0c:	9de0      	lw	a3,0(a1)
41d39a0e:	b43a      	lw	a0,41d39af4 <led_flash_ok+0xf4>

    act_writel(act_readl(GPIOADAT) | (1 << 0), GPIOADAT);
41d39a10:	ef6d      	or	a3,v1
41d39a12:	dde0      	sw	a3,0(a1)
41d39a14:	9c40      	lw	v0,0(a0)
41d39a16:	6e08      	li	a2,8
41d39a18:	ea6d      	or	v0,v1
41d39a1a:	dc40      	sw	v0,0(a0)
41d39a1c:	67e3      	move	a3,v1
41d39a1e:	6c00      	li	a0,0

    for(i = 0; i < 8; i++)
41d39a20:	4401      	addiu	s0,a0,1
41d39a22:	9d40      	lw	v0,0(a1)
    {
        act_writel(act_readl(GPIOAOUTEN) | (1 << led_num), GPIOAOUTEN);
41d39a24:	6767      	move	v1,a3
41d39a26:	6790      	move	a0,s0
41d39a28:	ee64      	sllv	v1,a2
41d39a2a:	4621      	addiu	s1,a2,1
        led_num++;
41d39a2c:	ec11      	zeb	a0
41d39a2e:	ea6d      	or	v0,v1
41d39a30:	67d1      	move	a2,s1
41d39a32:	5c08      	sltiu	a0,8
41d39a34:	dd40      	sw	v0,0(a1)
41d39a36:	ee11      	zeb	a2
41d39a38:	61f3      	btnez	41d39a20 <led_flash_ok+0x20>
41d39a3a:	9d80      	lw	a0,0(a1)
    }

    led_num = 8;

    // 2823 芯片使用 A21 / VRO_S
    act_writel(act_readl(GPIOAOUTEN) | (1 << 21), GPIOAOUTEN);
41d39a3c:	b72f      	lw	a3,41d39af8 <led_flash_ok+0xf8>
41d39a3e:	6808      	li	s0,8
41d39a40:	eced      	or	a0,a3
41d39a42:	dd80      	sw	a0,0(a1)
41d39a44:	b42e      	lw	a0,41d39afc <led_flash_ok+0xfc>
    act_writel(act_readl(SIO_OUTEN) | (1 << 9), SIO_OUTEN);    
41d39a46:	f200 6e00 	li	a2,512
41d39a4a:	9c40      	lw	v0,0(a0)
41d39a4c:	d004      	sw	s0,16(sp)
41d39a4e:	eacd      	or	v0,a2
41d39a50:	dc40      	sw	v0,0(a0)
41d39a52:	6800      	li	s0,0

    while(1)
    {
        for(i = 0; i < 8; i++)
41d39a54:	b628      	lw	a2,41d39af4 <led_flash_ok+0xf4>
        {
            act_writel(act_readl(GPIOADAT) | (1 << led_num), GPIOADAT);
41d39a56:	9504      	lw	a1,16(sp)
41d39a58:	9e80      	lw	a0,0(a2)
41d39a5a:	6f01      	li	a3,1
41d39a5c:	ede4      	sllv	a3,a1
41d39a5e:	eced      	or	a0,a3
41d39a60:	6d00      	li	a1,0

            sys_mdelay(20);
41d39a62:	b328      	lw	v1,41d39b00 <led_flash_ok+0x100>
41d39a64:	de80      	sw	a0,0(a2)
41d39a66:	6f1d      	li	a3,29
41d39a68:	67c5      	move	a2,a1
41d39a6a:	eb40      	jalr	v1
41d39a6c:	6c14      	li	a0,20
41d39a6e:	9204      	lw	v0,16(sp)

            led_num++;
41d39a70:	40a1      	addiu	a1,s0,1
41d39a72:	6705      	move	s0,a1
41d39a74:	4221      	addiu	s1,v0,1
41d39a76:	e811      	zeb	s0
41d39a78:	e911      	zeb	s1
41d39a7a:	5808      	sltiu	s0,8
41d39a7c:	d104      	sw	s1,16(sp)
41d39a7e:	61ea      	btnez	41d39a54 <led_flash_ok+0x54>
41d39a80:	b01d      	lw	s0,41d39af4 <led_flash_ok+0xf4>
        }

        act_writel(act_readl(GPIOADAT) | (1 << 21), GPIOADAT);
41d39a82:	b51e      	lw	a1,41d39af8 <led_flash_ok+0xf8>
41d39a84:	98e0      	lw	a3,0(s0)
41d39a86:	b41c      	lw	a0,41d39af4 <led_flash_ok+0xf4>
41d39a88:	efad      	or	a3,a1
41d39a8a:	b61f      	lw	a2,41d39b04 <led_flash_ok+0x104>
        act_writel(act_readl(SIO_DAT) | (1 << 9), SIO_DAT);        
41d39a8c:	dce0      	sw	a3,0(a0)
41d39a8e:	9e40      	lw	v0,0(a2)
41d39a90:	f200 6b00 	li	v1,512
41d39a94:	b11c      	lw	s1,41d39b04 <led_flash_ok+0x104>
41d39a96:	ea6d      	or	v0,v1
41d39a98:	6d00      	li	a1,0

        sys_mdelay(20);
41d39a9a:	b01a      	lw	s0,41d39b00 <led_flash_ok+0x100>
41d39a9c:	d940      	sw	v0,0(s1)
41d39a9e:	6c14      	li	a0,20
41d39aa0:	67c5      	move	a2,a1
41d39aa2:	e840      	jalr	s0
41d39aa4:	6f1d      	li	a3,29
41d39aa6:	6800      	li	s0,0

        for(i = 0; i < 8; i++)
41d39aa8:	b113      	lw	s1,41d39af4 <led_flash_ok+0xf4>
41d39aaa:	9504      	lw	a1,16(sp)
        {
            led_num--;
41d39aac:	6c01      	li	a0,1

            act_writel(act_readl(GPIOADAT) & (~ (1 << led_num)), GPIOADAT);
41d39aae:	45ef      	addiu	a3,a1,-1
41d39ab0:	ef11      	zeb	a3
41d39ab2:	ef84      	sllv	a0,a3
41d39ab4:	99c0      	lw	a2,0(s1)
41d39ab6:	eb8f      	not	v1,a0
41d39ab8:	ee6c      	and	a2,v1
41d39aba:	6d00      	li	a1,0

            sys_mdelay(20);
41d39abc:	b211      	lw	v0,41d39b00 <led_flash_ok+0x100>
41d39abe:	d704      	sw	a3,16(sp)
41d39ac0:	d9c0      	sw	a2,0(s1)
41d39ac2:	6c14      	li	a0,20
41d39ac4:	67c5      	move	a2,a1
41d39ac6:	ea40      	jalr	v0
41d39ac8:	6f1d      	li	a3,29
41d39aca:	4041      	addiu	v0,s0,1
41d39acc:	6702      	move	s0,v0
41d39ace:	e811      	zeb	s0
41d39ad0:	5808      	sltiu	s0,8
41d39ad2:	61eb      	btnez	41d39aaa <led_flash_ok+0xaa>
41d39ad4:	9940      	lw	v0,0(s1)
        }

        act_writel(act_readl(GPIOADAT) & (~(1 << 21)), GPIOADAT);
41d39ad6:	b30d      	lw	v1,41d39b08 <led_flash_ok+0x108>
41d39ad8:	b60b      	lw	a2,41d39b04 <led_flash_ok+0x104>
        act_writel(act_readl(SIO_DAT) & (~(1 << 9)), SIO_DAT);        
41d39ada:	ea6c      	and	v0,v1
41d39adc:	d940      	sw	v0,0(s1)
41d39ade:	9e40      	lw	v0,0(a2)
41d39ae0:	f200 6801 	li	s0,513
41d39ae4:	e90b      	neg	s1,s0
41d39ae6:	b408      	lw	a0,41d39b04 <led_flash_ok+0x104>
41d39ae8:	ea2c      	and	v0,s1
41d39aea:	17b2      	b	41d39a50 <led_flash_ok+0x50>
41d39aec:	001c      	addiu	s0,sp,112
41d39aee:	c012      	sb	s0,18(s0)
41d39af0:	0000      	addiu	s0,sp,0
41d39af2:	c009      	sb	s0,9(s0)
41d39af4:	0008      	addiu	s0,sp,32
41d39af6:	c009      	sb	s0,9(s0)
41d39af8:	0000      	addiu	s0,sp,0
41d39afa:	0020      	addiu	s0,sp,128
41d39afc:	0028      	addiu	s0,sp,160
41d39afe:	c009      	sb	s0,9(s0)
41d39b00:	88dd      	lh	a2,58(s0)
41d39b02:	bfc3      	lwu	a2,12(a3)
41d39b04:	0030      	addiu	s0,sp,192
41d39b06:	c009      	sb	s0,9(s0)
41d39b08:	ffff      	daddiu	a3,sp,124
41d39b0a:	ffdf      	daddiu	a2,sp,124

41d39b0c <led_flash_fail>:
41d39b0c:	64f4      	save	32,ra,s0-s1

        loop_cnt--;
    }
}

void led_flash_fail(void)
{
41d39b0e:	b535      	lw	a1,41d39be0 <led_flash_fail+0xd4>
    uint8 i;
    uint8 led_num = 8;
    uint32 loop_cnt = 8;

    DISABLE_WATCH_DOG;
41d39b10:	6b69      	li	v1,105
41d39b12:	b735      	lw	a3,41d39be4 <led_flash_fail+0xd8>

    //A0默认输出高电平，IO口接下拉电阻
    act_writel(act_readl(GPIOAOUTEN) | (1 << 0), GPIOAOUTEN);
41d39b14:	dd60      	sw	v1,0(a1)
41d39b16:	9f80      	lw	a0,0(a3)
41d39b18:	4b98      	addiu	v1,-104
41d39b1a:	ec6d      	or	a0,v1
41d39b1c:	b533      	lw	a1,41d39be8 <led_flash_fail+0xdc>

    act_writel(act_readl(GPIOADAT) | (1 << 0), GPIOADAT);
41d39b1e:	df80      	sw	a0,0(a3)
41d39b20:	9d40      	lw	v0,0(a1)
41d39b22:	6e08      	li	a2,8
41d39b24:	ea6d      	or	v0,v1
41d39b26:	dd40      	sw	v0,0(a1)
41d39b28:	6c00      	li	a0,0

    for(i = 0; i < 8; i++)
41d39b2a:	6703      	move	s0,v1
41d39b2c:	9f40      	lw	v0,0(a3)
    {
        act_writel(act_readl(GPIOAOUTEN) | (1 << led_num), GPIOAOUTEN);
41d39b2e:	6730      	move	s1,s0
41d39b30:	ee24      	sllv	s1,a2
41d39b32:	ea2d      	or	v0,s1
41d39b34:	4421      	addiu	s1,a0,1
41d39b36:	6791      	move	a0,s1
41d39b38:	4661      	addiu	v1,a2,1
        led_num++;
41d39b3a:	ec11      	zeb	a0
41d39b3c:	67c3      	move	a2,v1
41d39b3e:	5c08      	sltiu	a0,8
41d39b40:	df40      	sw	v0,0(a3)
41d39b42:	ee11      	zeb	a2
41d39b44:	61f3      	btnez	41d39b2c <led_flash_fail+0x20>
41d39b46:	9f60      	lw	v1,0(a3)
    }

    // 2823 芯片使用 A21 / VRO_S
    act_writel(act_readl(GPIOAOUTEN) | (1 << 21), GPIOAOUTEN);
41d39b48:	b629      	lw	a2,41d39bec <led_flash_fail+0xe0>
41d39b4a:	f200 6c00 	li	a0,512
    act_writel(act_readl(SIO_OUTEN) | (1 << 9), SIO_OUTEN);
41d39b4e:	ebcd      	or	v1,a2
41d39b50:	df60      	sw	v1,0(a3)
41d39b52:	b728      	lw	a3,41d39bf0 <led_flash_fail+0xe4>
41d39b54:	b128      	lw	s1,41d39bf4 <led_flash_fail+0xe8>
41d39b56:	9f00      	lw	s0,0(a3)
41d39b58:	e88d      	or	s0,a0
41d39b5a:	df00      	sw	s0,0(a3)
41d39b5c:	6808      	li	s0,8

    led_num = 8;
41d39b5e:	6c00      	li	a0,0

    while(1)
    {
        for(i = 0; i < 8; i++)
41d39b60:	9d40      	lw	v0,0(a1)
        {
            act_writel(act_readl(GPIOADAT) | (1 << led_num), GPIOADAT);
41d39b62:	6b01      	li	v1,1
41d39b64:	e864      	sllv	v1,s0
41d39b66:	ea6d      	or	v0,v1
41d39b68:	dd40      	sw	v0,0(a1)
41d39b6a:	4441      	addiu	v0,a0,1
41d39b6c:	6782      	move	a0,v0
41d39b6e:	40e1      	addiu	a3,s0,1

            led_num++;
41d39b70:	ec11      	zeb	a0
41d39b72:	6707      	move	s0,a3
41d39b74:	5c08      	sltiu	a0,8
41d39b76:	e811      	zeb	s0
41d39b78:	61f3      	btnez	41d39b60 <led_flash_fail+0x54>
41d39b7a:	9d80      	lw	a0,0(a1)
        }
        act_writel(act_readl(GPIOADAT) | (1 << 21), GPIOADAT);
41d39b7c:	b31f      	lw	v1,41d39bf8 <led_flash_fail+0xec>
        act_writel(act_readl(SIO_DAT) | (1 << 9), SIO_DAT);

        sys_mdelay(100);
41d39b7e:	eccd      	or	a0,a2
41d39b80:	dd80      	sw	a0,0(a1)
41d39b82:	99c0      	lw	a2,0(s1)
41d39b84:	f200 6d00 	li	a1,512
41d39b88:	eead      	or	a2,a1
41d39b8a:	6d00      	li	a1,0
41d39b8c:	d9c0      	sw	a2,0(s1)
41d39b8e:	6c64      	li	a0,100
41d39b90:	67c5      	move	a2,a1
41d39b92:	eb40      	jalr	v1
41d39b94:	6f1d      	li	a3,29
41d39b96:	b515      	lw	a1,41d39be8 <led_flash_fail+0xdc>
41d39b98:	6c00      	li	a0,0

        for(i = 0; i < 8; i++)
41d39b9a:	6e01      	li	a2,1
41d39b9c:	404f      	addiu	v0,s0,-1
        {
            led_num--;
41d39b9e:	6702      	move	s0,v0
41d39ba0:	e811      	zeb	s0
41d39ba2:	67e6      	move	a3,a2

            act_writel(act_readl(GPIOADAT) & (~ (1 << led_num)), GPIOADAT);
41d39ba4:	e8e4      	sllv	a3,s0
41d39ba6:	ebef      	not	v1,a3
41d39ba8:	44e1      	addiu	a3,a0,1
41d39baa:	9d40      	lw	v0,0(a1)
41d39bac:	6787      	move	a0,a3
41d39bae:	ec11      	zeb	a0
41d39bb0:	ea6c      	and	v0,v1
41d39bb2:	5c08      	sltiu	a0,8
41d39bb4:	dd40      	sw	v0,0(a1)
41d39bb6:	61f2      	btnez	41d39b9c <led_flash_fail+0x90>
41d39bb8:	9de0      	lw	a3,0(a1)

        }
        act_writel(act_readl(GPIOADAT) & (~(1 << 21)), GPIOADAT);
41d39bba:	b211      	lw	v0,41d39bfc <led_flash_fail+0xf0>
41d39bbc:	f200 6c01 	li	a0,513
        act_writel(act_readl(SIO_DAT) & (~(1 << 9)), SIO_DAT);
41d39bc0:	ef4c      	and	a3,v0
41d39bc2:	dde0      	sw	a3,0(a1)
41d39bc4:	99c0      	lw	a2,0(s1)
41d39bc6:	ed8b      	neg	a1,a0
41d39bc8:	eeac      	and	a2,a1
41d39bca:	b30c      	lw	v1,41d39bf8 <led_flash_fail+0xec>

        sys_mdelay(100);
41d39bcc:	6d00      	li	a1,0
41d39bce:	d9c0      	sw	a2,0(s1)
41d39bd0:	6c64      	li	a0,100
41d39bd2:	67c5      	move	a2,a1
41d39bd4:	eb40      	jalr	v1
41d39bd6:	6f1d      	li	a3,29
41d39bd8:	b504      	lw	a1,41d39be8 <led_flash_fail+0xdc>
41d39bda:	b605      	lw	a2,41d39bec <led_flash_fail+0xe0>
41d39bdc:	17c0      	b	41d39b5e <led_flash_fail+0x52>
41d39bde:	0000      	addiu	s0,sp,0
41d39be0:	001c      	addiu	s0,sp,112
41d39be2:	c012      	sb	s0,18(s0)
41d39be4:	0000      	addiu	s0,sp,0
41d39be6:	c009      	sb	s0,9(s0)
41d39be8:	0008      	addiu	s0,sp,32
41d39bea:	c009      	sb	s0,9(s0)
41d39bec:	0000      	addiu	s0,sp,0
41d39bee:	0020      	addiu	s0,sp,128
41d39bf0:	0028      	addiu	s0,sp,160
41d39bf2:	c009      	sb	s0,9(s0)
41d39bf4:	0030      	addiu	s0,sp,192
41d39bf6:	c009      	sb	s0,9(s0)
41d39bf8:	88dd      	lh	a2,58(s0)
41d39bfa:	bfc3      	lwu	a2,12(a3)
41d39bfc:	ffff      	daddiu	a3,sp,124
41d39bfe:	ffdf      	daddiu	a2,sp,124

41d39c00 <act_test_report_gpio_result>:
41d39c00:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
    }
}

void act_test_report_gpio_result(gpio_test_arg_t *gpio_test_arg, test_result_e result, uint32 test_id)
{
41d39c04:	ed11      	zeb	a1
41d39c06:	6c00      	li	a0,0
    int ret_val;
    return_result_t *return_data;
    uint16 trans_bytes = 0;
41d39c08:	677d      	move	v1,sp
41d39c0a:	b248      	lw	v0,41d39d28 <.LBE3+0x3e>

    DEBUG_ATT_PRINT("gpio test result", result, 2);
41d39c0c:	cb88      	sh	a0,16(v1)
41d39c0e:	6705      	move	s0,a1
41d39c10:	0c38      	la	a0,41d39cf0 <.LBE3+0x6>
41d39c12:	6e02      	li	a2,2
41d39c14:	ea40      	jalr	v0
41d39c16:	6f4b      	li	a3,75
41d39c18:	285b      	bnez	s0,41d39cd0 <.LBE2+0x4>

    if (result == TEST_PASS)
41d39c1a:	b245      	lw	v0,41d39d2c <.LBE3+0x42>
    {
        ret_val = 1;
        att_write_test_info("gpio test ok", 0, 0);
    }
    else
    {
        ret_val = 0;
        att_write_test_info("gpio test failed", 0, 0);
41d39c1c:	67b0      	move	a1,s0
41d39c1e:	0c3a      	la	a0,41d39d04 <.LBE3+0x1a>
41d39c20:	ea40      	jalr	v0
41d39c22:	67d0      	move	a2,s0
41d39c24:	b643      	lw	a2,41d39d30 <.LBE3+0x46>
    }

    if (g_test_mode != TEST_MODE_CARD)
41d39c26:	6901      	li	s1,1
41d39c28:	a6a0      	lbu	a1,0(a2)
41d39c2a:	255b      	beqz	a1,41d39ce2 <.LBB3>

41d39c2c <.LBB2>:
41d39c2c:	b442      	lw	a0,41d39d34 <.LBE3+0x4a>
    {
        return_data = (return_result_t *) (STUB_ATT_RETURN_DATA_BUFFER);

        return_data->test_id = test_id;
41d39c2e:	675d      	move	v0,sp
41d39c30:	aad8      	lhu	a2,48(v0)
41d39c32:	c428      	sb	s1,8(a0)

        return_data->test_result = ret_val;
41d39c34:	930a      	lw	v1,40(sp)

        uint32_to_unicode(gpio_test_arg->gpioA_value, return_data->return_arg, &trans_bytes, 16);
41d39c36:	b540      	lw	a1,41d39d34 <.LBE3+0x4a>
41d39c38:	ccc3      	sh	a2,6(a0)
41d39c3a:	9b80      	lw	a0,0(v1)
41d39c3c:	4d0a      	addiu	a1,10
41d39c3e:	0604      	addiu	a2,sp,16
41d39c40:	1a43 e6a4 	jal	41cb9a90 <uint32_to_unicode>
41d39c44:	6f10      	li	a3,16
41d39c46:	67fd      	move	a3,sp

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;
41d39c48:	afa8      	lhu	a1,16(a3)
41d39c4a:	b33b      	lw	v1,41d39d34 <.LBE3+0x4a>
41d39c4c:	45c1      	addiu	a2,a1,1
41d39c4e:	cfc8      	sh	a2,16(a3)
41d39c50:	970a      	lw	a3,40(sp)

        uint32_to_unicode(gpio_test_arg->gpioB_value, &(return_data->return_arg[trans_bytes]), &trans_bytes, 16);
41d39c52:	ee31      	zeh	a2
41d39c54:	30a4      	sll	s0,a1,1
41d39c56:	34c4      	sll	a0,a2,1
41d39c58:	e069      	addu	v0,s0,v1
41d39c5a:	e475      	addu	a1,a0,v1
41d39c5c:	682c      	li	s0,44
41d39c5e:	9f81      	lw	a0,4(a3)
41d39c60:	4d0a      	addiu	a1,10
41d39c62:	0604      	addiu	a2,sp,16
41d39c64:	6f10      	li	a3,16
41d39c66:	1a43 e6a4 	jal	41cb9a90 <uint32_to_unicode>
41d39c6a:	ca05      	sh	s0,10(v0)
41d39c6c:	67bd      	move	a1,sp

        //添加参数分隔符','
        return_data->return_arg[trans_bytes++] = 0x002c;
41d39c6e:	adc8      	lhu	a2,16(a1)
41d39c70:	b431      	lw	a0,41d39d34 <.LBE3+0x4a>
41d39c72:	46e1      	addiu	a3,a2,1
41d39c74:	cde8      	sh	a3,16(a1)
41d39c76:	33c4      	sll	v1,a2,1
41d39c78:	ef31      	zeh	a3

        uint32_to_unicode(gpio_test_arg->gpioSIO_value, &(return_data->return_arg[trans_bytes]), &trans_bytes, 16);        
41d39c7a:	960a      	lw	a2,40(sp)
41d39c7c:	35e4      	sll	a1,a3,1
41d39c7e:	e389      	addu	v0,v1,a0
41d39c80:	e595      	addu	a1,a0
41d39c82:	9e82      	lw	a0,8(a2)
41d39c84:	4d0a      	addiu	a1,10
41d39c86:	0604      	addiu	a2,sp,16
41d39c88:	6f10      	li	a3,16
41d39c8a:	1a43 e6a4 	jal	41cb9a90 <uint32_to_unicode>
41d39c8e:	ca05      	sh	s0,10(v0)
41d39c90:	677d      	move	v1,sp

        //添加结束符
        return_data->return_arg[trans_bytes++] = 0x0000;
41d39c92:	ab48      	lhu	v0,16(v1)
41d39c94:	b428      	lw	a0,41d39d34 <.LBE3+0x4a>
41d39c96:	4261      	addiu	v1,v0,1
41d39c98:	3544      	sll	a1,v0,1
41d39c9a:	e599      	addu	a2,a1,a0
41d39c9c:	67fd      	move	a3,sp
41d39c9e:	6783      	move	a0,v1

        //如果参数未四字节对齐，要四字节对齐处理
        if ((trans_bytes % 2) != 0)
41d39ca0:	cf68      	sh	v1,16(a3)
41d39ca2:	ec31      	zeh	a0
41d39ca4:	6f01      	li	a3,1
41d39ca6:	6d00      	li	a1,0
41d39ca8:	ef8c      	and	a3,a0
41d39caa:	cea5      	sh	a1,10(a2)
41d39cac:	2707      	beqz	a3,41d39cbc <.LBB2+0x90>
41d39cae:	4341      	addiu	v0,v1,1
        {
            return_data->return_arg[trans_bytes++] = 0x0000;
41d39cb0:	3384      	sll	v1,a0,1
41d39cb2:	b421      	lw	a0,41d39d34 <.LBE3+0x4a>
41d39cb4:	67dd      	move	a2,sp
41d39cb6:	e39d      	addu	a3,v1,a0
41d39cb8:	ce48      	sh	v0,16(a2)
41d39cba:	cfa5      	sh	a1,10(a3)
41d39cbc:	677d      	move	v1,sp
        }

        act_test_report_result(return_data, trans_bytes * 2 + 4);
41d39cbe:	abe8      	lhu	a3,16(v1)
41d39cc0:	b41d      	lw	a0,41d39d34 <.LBE3+0x4a>
41d39cc2:	35e4      	sll	a1,a3,1
41d39cc4:	45a4      	addiu	a1,a1,4
41d39cc6:	b21d      	lw	v0,41d39d38 <.LBE3+0x4e>
41d39cc8:	ea40      	jalr	v0
41d39cca:	ed31      	zeh	a1

41d39ccc <.LBE2>:
41d39ccc:	6475      	restore	40,ra,s0-s1
    }
    else
    {
        act_test_report_test_log(ret_val, test_id);
    }
}
41d39cce:	e8a0      	jrc	ra
41d39cd0:	6900      	li	s1,0
41d39cd2:	b217      	lw	v0,41d39d2c <.LBE3+0x42>
41d39cd4:	67b1      	move	a1,s1
41d39cd6:	0c10      	la	a0,41d39d14 <.LBE3+0x2a>
41d39cd8:	ea40      	jalr	v0
41d39cda:	67d1      	move	a2,s1
41d39cdc:	b615      	lw	a2,41d39d30 <.LBE3+0x46>
41d39cde:	a6a0      	lbu	a1,0(a2)
41d39ce0:	2da5      	bnez	a1,41d39c2c <.LBB2>

41d39ce2 <.LBB3>:
41d39ce2:	950c      	lw	a1,48(sp)
41d39ce4:	1802 e437 	jal	410390dc <act_test_report_test_log>
41d39ce8:	6791      	move	a0,s1

41d39cea <.LBE3>:
41d39cea:	6475      	restore	40,ra,s0-s1
41d39cec:	e8a0      	jrc	ra
41d39cee:	0000      	addiu	s0,sp,0
41d39cf0:	7067      	cmpi	s0,103
41d39cf2:	6f69      	li	a3,105
41d39cf4:	7420      	cmpi	a0,32
41d39cf6:	7365      	cmpi	v1,101
41d39cf8:	2074      	beqz	s0,41d39de2 <test_gpio+0xa6>
41d39cfa:	6572      	move	s3,v0
41d39cfc:	7573      	cmpi	a1,115
41d39cfe:	746c      	cmpi	a0,108
41d39d00:	0000      	addiu	s0,sp,0
41d39d02:	0000      	addiu	s0,sp,0
41d39d04:	7067      	cmpi	s0,103
41d39d06:	6f69      	li	a3,105
41d39d08:	7420      	cmpi	a0,32
41d39d0a:	7365      	cmpi	v1,101
41d39d0c:	2074      	beqz	s0,41d39df6 <.L60+0xa>
41d39d0e:	6b6f      	li	v1,111
41d39d10:	0000      	addiu	s0,sp,0
41d39d12:	0000      	addiu	s0,sp,0
41d39d14:	7067      	cmpi	s0,103
41d39d16:	6f69      	li	a3,105
41d39d18:	7420      	cmpi	a0,32
41d39d1a:	7365      	cmpi	v1,101
41d39d1c:	2074      	beqz	s0,41d39e06 <.L60+0x1a>
41d39d1e:	6166      	btnez	41d39dec <.L60>
41d39d20:	6c69      	li	a0,105
41d39d22:	6465      	restore	40,ra,s0
41d39d24:	0000      	addiu	s0,sp,0
41d39d26:	0000      	addiu	s0,sp,0
41d39d28:	88dd      	lh	a2,58(s0)
41d39d2a:	bfc3      	lwu	a2,12(a3)
41d39d2c:	8b89      	lh	a0,18(v1)
41d39d2e:	bfc3      	lwu	a2,12(a3)
41d39d30:	8dc9      	lh	a2,18(a1)
41d39d32:	bfc3      	lwu	a2,12(a3)
41d39d34:	a100      	lbu	s0,0(s1)
41d39d36:	9fc3      	lw	a2,12(a3)
41d39d38:	9b41      	lw	v0,4(v1)
41d39d3a:	41cb      	addiu	a2,s1,-5

41d39d3c <test_gpio>:
41d39d3c:	f008 64fe 	save	a0-a1,112,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *	  GPIO测试函数
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      music_test
 * \note
 *******************************************************************************/
test_result_e test_gpio(gpio_test_arg_t *gpio_test_arg, int32 *index)
{
41d39d40:	b536      	lw	a1,41d39e18 <.L60+0x2c>
    test_result_e test_result;

    // uint32 gpioA_out_bak = act_readl(GPIOAOUTEN);
    // uint32 gpioB_out_bak = act_readl(GPIOBOUTEN);
    // uint32 gpioA_in_bak = act_readl(GPIOAINEN);
    // uint32 gpioB_in_bak = act_readl(GPIOBINEN);
    // uint32 gpioA_pu_bak = act_readl(GPIOAPUEN);
    // uint32 gpioB_pu_bak = act_readl(GPIOBPUEN);
    // uint32 gpioA_pd_bak = act_readl(GPIOAPDEN);
    // uint32 gpioB_pd_bak = act_readl(GPIOBPDEN);
    // uint32 gpioA_dat_bak = act_readl(GPIOADAT);
    // uint32 gpioB_dat_bak = act_readl(GPIOBDAT);

    uint32 gpio_bak_array[15];
    uint32 gpio_reg;
    uint8 i;

    gpio_reg = GPIOAOUTEN;
41d39d42:	6724      	move	s1,a0
41d39d44:	0008      	addiu	s0,sp,32
41d39d46:	6c00      	li	a0,0
    for (i = 0; i < 15; i++, gpio_reg += 4)
41d39d48:	4441      	addiu	v0,a0,1
41d39d4a:	3788      	sll	a3,a0,2
    {
        gpio_bak_array[i] = act_readl(gpio_reg);
41d39d4c:	6782      	move	a0,v0
41d39d4e:	9d60      	lw	v1,0(a1)
41d39d50:	ec11      	zeb	a0
41d39d52:	e719      	addu	a2,a3,s0
41d39d54:	5c0f      	sltiu	a0,15
41d39d56:	de60      	sw	v1,0(a2)
41d39d58:	45a4      	addiu	a1,a1,4
41d39d5a:	61f6      	btnez	41d39d48 <test_gpio+0xc>
41d39d5c:	b730      	lw	a3,41d39e1c <.L60+0x30>
    }

    //MFP选择SIO7
    act_writel((act_readl(MFP_CTL3) & (~MFP_CTL3_VRO_MASK) | (2 << MFP_CTL3_VRO_SHIFT)), MFP_CTL3);
41d39d5e:	f018 6d01 	li	a1,49153
41d39d62:	edab      	neg	a1
41d39d64:	9f80      	lw	a0,0(a3)
41d39d66:	f010 6e00 	li	a2,32768
41d39d6a:	ecac      	and	a0,a1
41d39d6c:	eccd      	or	a0,a2
41d39d6e:	df80      	sw	a0,0(a3)
41d39d70:	9fa0      	lw	a1,0(a3)

    act_writel((act_readl(MFP_CTL3) & (~MFP_CTL3_VROS_MASK) | (2 << MFP_CTL3_VROS_SHIFT)), MFP_CTL3);
41d39d72:	b32c      	lw	v1,41d39e20 <.L60+0x34>
41d39d74:	b22c      	lw	v0,41d39e24 <.L60+0x38>
41d39d76:	ed6c      	and	a1,v1
41d39d78:	ed4d      	or	a1,v0
41d39d7a:	dfa0      	sw	a1,0(a3)
41d39d7c:	b52b      	lw	a1,41d39e28 <.L60+0x3c>

    //VRO与SIO7复用，需关闭VRO
    act_writel((act_readl(DAC_ANACTL) & (~(1 << DAC_ANACTL_OPVROEN))), DAC_ANACTL);
41d39d7e:	6eff      	li	a2,255
41d39d80:	9d40      	lw	v0,0(a1)
41d39d82:	4682      	addiu	a0,a2,2
41d39d84:	eb8b      	neg	v1,a0
41d39d86:	ea6c      	and	v0,v1
41d39d88:	b429      	lw	a0,41d39e2c <.L60+0x40>

    //disable JTAG
    act_writel(act_readl(MFP_CTL2) & (~0xc0000000), MFP_CTL2);
41d39d8a:	dd40      	sw	v0,0(a1)
41d39d8c:	9cc0      	lw	a2,0(a0)
41d39d8e:	b729      	lw	a3,41d39e30 <.L60+0x44>
41d39d90:	951d      	lw	a1,116(sp)

    //测试GPIO是否存在短路
    test_result = test_gpio_short(gpio_test_arg->gpioA_value, GPIO_REGA_BASE, gpio_test_arg->gpioB_value,
41d39d92:	eeec      	and	a2,a3
41d39d94:	dcc0      	sw	a2,0(a0)
41d39d96:	99c1      	lw	a2,4(s1)
41d39d98:	9980      	lw	a0,0(s1)
41d39d9a:	9962      	lw	v1,8(s1)
41d39d9c:	b227      	lw	v0,41d39e38 <.L60+0x4c>
41d39d9e:	d506      	sw	a1,24(sp)
41d39da0:	b725      	lw	a3,41d39e34 <.L60+0x48>
41d39da2:	b51e      	lw	a1,41d39e18 <.L60+0x2c>
41d39da4:	d304      	sw	v1,16(sp)
41d39da6:	1842 e400 	jal	410b9000 <test_gpio_short>
41d39daa:	d205      	sw	v0,20(sp)
41d39dac:	67c2      	move	a2,v0
41d39dae:	ee11      	zeb	a2
41d39db0:	2e1d      	bnez	a2,41d39dec <.L60>
            GPIO_REGB_BASE, gpio_test_arg->gpioSIO_value, GPIO_REGSIO_BASE, index);

    if (test_result != TEST_PASS)
41d39db2:	971d      	lw	a3,116(sp)
    {
        goto end_test;
    }

    //测试GPIO是否存在短路到GND
    test_result = test_gpio_short_gnd(gpio_test_arg->gpioA_value, GPIO_REGA_BASE, gpio_test_arg->gpioB_value,
41d39db4:	99c1      	lw	a2,4(s1)
41d39db6:	9980      	lw	a0,0(s1)
41d39db8:	9962      	lw	v1,8(s1)
41d39dba:	b220      	lw	v0,41d39e38 <.L60+0x4c>
41d39dbc:	d706      	sw	a3,24(sp)
41d39dbe:	b517      	lw	a1,41d39e18 <.L60+0x2c>
41d39dc0:	b71d      	lw	a3,41d39e34 <.L60+0x48>
41d39dc2:	d304      	sw	v1,16(sp)
41d39dc4:	1842 e4ec 	jal	410b93b0 <test_gpio_short_gnd>
41d39dc8:	d205      	sw	v0,20(sp)
41d39dca:	67c2      	move	a2,v0
41d39dcc:	ee11      	zeb	a2
41d39dce:	2e0e      	bnez	a2,41d39dec <.L60>
            GPIO_REGB_BASE, gpio_test_arg->gpioSIO_value, GPIO_REGSIO_BASE, index);

    if (test_result != TEST_PASS)
41d39dd0:	b71a      	lw	a3,41d39e38 <.L60+0x4c>
    {
        goto end_test;
    }

    //测试GPIO是否存在断路
    test_result = test_gpio_open(gpio_test_arg->gpioA_value, GPIO_REGA_BASE, gpio_test_arg->gpioB_value,
41d39dd2:	951d      	lw	a1,116(sp)
41d39dd4:	99c1      	lw	a2,4(s1)
41d39dd6:	9980      	lw	a0,0(s1)
41d39dd8:	9942      	lw	v0,8(s1)
41d39dda:	d705      	sw	a3,20(sp)
41d39ddc:	d506      	sw	a1,24(sp)
41d39dde:	b716      	lw	a3,41d39e34 <.L60+0x48>
41d39de0:	b50e      	lw	a1,41d39e18 <.L60+0x2c>
41d39de2:	1842 e569 	jal	410b95a4 <test_gpio_open>
41d39de6:	d204      	sw	v0,16(sp)
41d39de8:	67c2      	move	a2,v0
41d39dea:	ee11      	zeb	a2

41d39dec <.L60>:
41d39dec:	b40b      	lw	a0,41d39e18 <.L60+0x2c>
            GPIO_REGB_BASE, gpio_test_arg->gpioSIO_value, GPIO_REGSIO_BASE, index);

    if (test_result != TEST_PASS)
    {
        goto end_test;
    }

    test_result = TEST_PASS;
    end_test:
    // act_writel(gpioA_out_bak, GPIOAOUTEN);
    // act_writel(gpioA_in_bak, GPIOAINEN);
    // act_writel(gpioA_pu_bak, GPIOAPUEN);
    // act_writel(gpioA_pd_bak, GPIOAPDEN);
    // act_writel(gpioA_dat_bak, GPIOADAT);
    // act_writel(gpioB_out_bak, GPIOBOUTEN);
    // act_writel(gpioB_in_bak, GPIOBINEN);
    // act_writel(gpioB_pu_bak, GPIOBPUEN);
    // act_writel(gpioB_pd_bak, GPIOBPDEN);
    // act_writel(gpioB_dat_bak, GPIOBDAT);

    gpio_reg = GPIOAOUTEN;
41d39dee:	6b00      	li	v1,0
    for (i = 0; i < 15; i++, gpio_reg += 4)
41d39df0:	3568      	sll	a1,v1,2
    {
        act_writel(gpio_bak_array[i], gpio_reg);
41d39df2:	e509      	addu	v0,a1,s0
41d39df4:	43a1      	addiu	a1,v1,1
41d39df6:	6765      	move	v1,a1
41d39df8:	9ae0      	lw	a3,0(v0)
41d39dfa:	eb11      	zeb	v1
41d39dfc:	5b0f      	sltiu	v1,15
41d39dfe:	dce0      	sw	a3,0(a0)
41d39e00:	4484      	addiu	a0,a0,4
41d39e02:	61f6      	btnez	41d39df0 <.L60+0x4>
41d39e04:	2606      	beqz	a2,41d39e12 <.L60+0x26>
    }

    if(test_result != TEST_PASS)
41d39e06:	931d      	lw	v1,116(sp)
    {
        gpio_test_arg->gpioA_value = *index;
41d39e08:	6c00      	li	a0,0
        gpio_test_arg->gpioB_value = test_result;
        gpio_test_arg->gpioSIO_value = 0;
41d39e0a:	9be0      	lw	a3,0(v1)
41d39e0c:	d9c1      	sw	a2,4(s1)
41d39e0e:	d9e0      	sw	a3,0(s1)
41d39e10:	d982      	sw	a0,8(s1)
41d39e12:	6746      	move	v0,a2
    }

    return test_result;
}
41d39e14:	647e      	restore	112,ra,s0-s1
41d39e16:	e8a0      	jrc	ra
41d39e18:	0000      	addiu	s0,sp,0
41d39e1a:	c009      	sb	s0,9(s0)
41d39e1c:	0060      	addiu	s0,sp,384
41d39e1e:	c009      	sb	s0,9(s0)
41d39e20:	ffff      	daddiu	a3,sp,124
41d39e22:	fff3      	daddiu	a3,sp,76
41d39e24:	0000      	addiu	s0,sp,0
41d39e26:	0008      	addiu	s0,sp,32
41d39e28:	001c      	addiu	s0,sp,112
41d39e2a:	c005      	sb	s0,5(s0)
41d39e2c:	005c      	addiu	s0,sp,368
41d39e2e:	c009      	sb	s0,9(s0)
41d39e30:	ffff      	daddiu	a3,sp,124
41d39e32:	3fff      	ld	a3,248(a3)
41d39e34:	0014      	addiu	s0,sp,80
41d39e36:	c009      	sb	s0,9(s0)
41d39e38:	0028      	addiu	s0,sp,160
41d39e3a:	c009      	sb	s0,9(s0)

41d39e3c <act_test_gpio_test>:
41d39e3c:	64f5      	save	40,ra,s0-s1

test_result_e act_test_gpio_test(void *arg_buffer)
{
41d39e3e:	0504      	addiu	a1,sp,16
    int32 index;
    test_result_e ret_val;
    //DEBUG_ATT_PRINT("start gpio test", 0, 0);

    //DEBUG_ATT_PRINT("GPIO_A  :", *((uint32 *)arg_buffer), 2);
    //DEBUG_ATT_PRINT("GPIO_B  :", *(((uint32 *)arg_buffer)+1), 2);
    //DEBUG_ATT_PRINT("GPIO_SIO:", *(((uint32 *)arg_buffer)+2), 2);

    gpio_test_arg_t *gpio_test_arg = (gpio_test_arg_t *) arg_buffer;

    ret_val = test_gpio(gpio_test_arg, &index);
41d39e40:	1a83 e74f 	jal	41d39d3c <test_gpio>
41d39e44:	6724      	move	s1,a0
41d39e46:	6702      	move	s0,v0
41d39e48:	67a2      	move	a1,v0

    act_test_report_gpio_result(gpio_test_arg, ret_val, TESTID_GPIO_TEST);
41d39e4a:	6791      	move	a0,s1
41d39e4c:	1a83 e700 	jal	41d39c00 <act_test_report_gpio_result>
41d39e50:	6e06      	li	a2,6
41d39e52:	6750      	move	v0,s0

    return ret_val;
}
41d39e54:	6475      	restore	40,ra,s0-s1
41d39e56:	e8a0      	jrc	ra

41d39e58 <act_test_gpio_test_ATS2823>:
41d39e58:	64f5      	save	40,ra,s0-s1

test_result_e act_test_gpio_test_ATS2823(void *arg_buffer)
{
41d39e5a:	0504      	addiu	a1,sp,16
    int32 index;
    test_result_e ret_val;
    //DEBUG_ATT_PRINT("start gpio test", 0, 0);

    //DEBUG_ATT_PRINT("GPIO_A  :", *((uint32 *)arg_buffer), 2);
    //DEBUG_ATT_PRINT("GPIO_B  :", *(((uint32 *)arg_buffer)+1), 2);
    //DEBUG_ATT_PRINT("GPIO_SIO:", *(((uint32 *)arg_buffer)+2), 2);

    gpio_test_arg_t *gpio_test_arg = (gpio_test_arg_t *) arg_buffer;

    ret_val = test_gpio(gpio_test_arg, &index);
41d39e5c:	1a83 e74f 	jal	41d39d3c <test_gpio>
41d39e60:	6724      	move	s1,a0
41d39e62:	6702      	move	s0,v0
41d39e64:	67a2      	move	a1,v0

    act_test_report_gpio_result(gpio_test_arg, ret_val, TESTID_GPIO_TEST_ATS2823);
41d39e66:	6791      	move	a0,s1
41d39e68:	1a83 e700 	jal	41d39c00 <act_test_report_gpio_result>
41d39e6c:	6e15      	li	a2,21
41d39e6e:	6750      	move	v0,s0

    return ret_val;
}
41d39e70:	6475      	restore	40,ra,s0-s1
41d39e72:	e8a0      	jrc	ra
	...
