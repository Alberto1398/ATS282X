//系统设置--数字音效选项
DAE_BYPASS_ENABLE{450}         = 0[0,1];         //是否禁用DAE数字音效，0表示不禁用，即开启DAE数字音效，1表示禁用

DAE_PRECUT_RATIO               = %d(EQ_ALLGAIN_VAL)[0~600,1];   //预衰减，单位0.1db
DAE_EQUIVALENT_GAIN            = %d(EQ_EQUIVALENT_VAL)[0~600,1];    //等效预衰减，单位0.1db，该值是对DAE音效模块对信号提升的一个评估值；该参数只有打开MDRC时才起作用

DAE_VIRTUAL_BASS_ENABLE        = %d(VBASS_EN)[0,1];         //是否打开低音增强，0表示不打开，1表示打开
DAE_VIRTUAL_BASS_CUTOFF_FREQ   = %d(VBASS_SCF)[40~200,1];   //虚拟低音低频截止频率，单位为Hz
DAE_VIRTUAL_BASS_RATIO         = %d(VBASS_VBG)[0~240,1];    //虚拟低音增益，单位为0.1DB
DAE_ORIGINAL_BASS_RATIO        = 0[-60~12,1];    //原始低音增益，单位为DB

DAE_TREBLE_ENHANCE_ENABLE      = %d(TE_EN)[0,1];         //是否打开高音增强，0表示不打开，1表示打开
DAE_TREBLE_ENHANCE_CUTOFF_FREQ = %d(TE_CF)[2000~20000,1000]; //高音增强高频截止频率，单位为Hz
DAE_TREBLE_ENHANCE_RATIO       = %d(TE_GAIN)[0~150,1];      //高音增强增益，单位为0.1DB

DAE_VIRTUAL_SURROUND_ENABLE    = %d(SURR_EN)[0,1];         //是否打开虚拟环绕音效，0表示不打开，1表示打开
DAE_VIRTUAL_SURROUND_ANGLE     = %d(SURR_HA)[10~60,10];   //虚拟环绕相位角度，单位为度
DAE_VIRTUAL_SURROUND_RATIO     = %d(SURR_SG)[-60~0,1];    //虚拟环绕增益，单位为DB

DAE_ENHANCED_ENABLE            = %d(SEE_EN)[0,1];         //是否打开音效增强效果
DAE_ENHANCED_BAND0_SETTING     = 0[%d(SEE_HP_CF), %d(SEE_HP_REV), %d(SEE_HP_STV), %d(SEE_HP_HTV), %d(SEE_HP_ER)];  //增强音效-高通减弱 [截至频率, reserve, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_BAND1_SETTING     = 0[%d(SEE_LF_CF), %d(SEE_LF_EVB), %d(SEE_LF_STV), %d(SEE_LF_HTV), %d(SEE_LF_ER)];  //增强音效-低频增强 [低频频率, 低音增强选项, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_BAND2_SETTING     = 0[%d(SEE_HF_CF), %d(SEE_HF_ETE), %d(SEE_HF_STV), %d(SEE_HF_HTV), %d(SEE_HF_ER)];  //增强音效-高频增强 [高频频率, 高音增强选项, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_BAND3_SETTING     = 0[%d(SEE_FP_FP1), %d(SEE_FP_REV1), %d(SEE_FP_STV1), %d(SEE_FP_HTV1), %d(SEE_FP_ER1)];  //增强音效-PEQ增强  [PEQ频点, reserve, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_BAND4_SETTING     = 0[%d(SEE_FP_FP2), %d(SEE_FP_REV2), %d(SEE_FP_STV2), %d(SEE_FP_HTV2), %d(SEE_FP_ER2)];   //增强音效-PEQ增强  [PEQ频点, reserve, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_BAND5_SETTING     = 0[%d(SEE_FP_FP3), %d(SEE_FP_REV3), %d(SEE_FP_STV3), %d(SEE_FP_HTV3), %d(SEE_FP_ER3)];   //增强音效-PEQ增强  [PEQ频点, reserve, 小音量开始音量 -590 ~ 0, 小音量保持音量 -600 ~ -10, 增益 0 ~ 120] 单位均为 0.1db
DAE_ENHANCED_PEAK_RATIO        = %d(SEE_PEAK_RATIO)[10~30,1];    //音效增强尖峰比率，需要综合考虑增强PEQ点相互影响程度，以及低音增强和高音增强，单位为0.1
DAE_WEAKEN_ENABLE              = %d(SEW_EN)[0,1];         //是否打开音效减弱效果
DAE_WEAKEN_BAND0_SETTING       = 0[%d(SEW_HP_CF), %d(SEW_HP_REV), %d(SEW_HP_STV), %d(SEW_HP_HTV), %d(SEW_HP_ER)];     //减弱音效-高通增强 [截至频率, reserve, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为 0.1db
DAE_WEAKEN_BAND1_SETTING       = 0[%d(SEW_LF_CF), %d(SEW_LF_EVB), %d(SEW_LF_STV), %d(SEW_LF_HTV), %d(SEW_LF_ER)];       //减弱音效-低频减弱 [低频频率, 低音增强选项, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为
DAE_WEAKEN_BAND2_SETTING       = 0[%d(SEW_HF_CF), %d(SEW_HF_ETE), %d(SEW_HF_STV), %d(SEW_HF_HTV), %d(SEW_HF_ER)];       //减弱音效-高频减弱 [高频频率, 高音增强选项, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为
DAE_WEAKEN_BAND3_SETTING       = 0[%d(SEW_FP_FP1), %d(SEW_FP_REV1), %d(SEW_FP_STV1), %d(SEW_FP_HTV1), %d(SEW_FP_ER1)];       //减弱音效-PEQ减弱  [PEQ频点, reserve, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为
DAE_WEAKEN_BAND4_SETTING       = 0[%d(SEW_FP_FP2), %d(SEW_FP_REV2), %d(SEW_FP_STV2), %d(SEW_FP_HTV2), %d(SEW_FP_ER2)];       //减弱音效-PEQ减弱  [PEQ频点, reserve, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为
DAE_WEAKEN_BAND5_SETTING       = 0[%d(SEW_FP_FP3), %d(SEW_FP_REV3), %d(SEW_FP_STV3), %d(SEW_FP_HTV3), %d(SEW_FP_ER3)];       //减弱音效-PEQ减弱  [PEQ频点, reserve, 大音量开始音量 -600 ~ -10, 大音量保持音量 -590 ~ 0, 增益 -120 ~ 0] 单位均为

DAE_SIGNAL_ENERGY_ENABLE       = %d(SD_EN)[0,1];             //是否打开信号检测功能
DAE_SIGNAL_ENERGY_SETTING      = 0[%d(SD_F_SDP), %d(SD_I_SDPN), %d(SD_F_SDTV), %d(SD_I_SDESPN), %d(SD_I_SDMINVAL)];  //信号检测参数：检测周期ms 范围 1000 ~ 2000，有效周期数max=30，预降0.1DB条件 范围-60 ~ -10，预降周期数条件<=max，信号大小有效最小值0.1db 范围 -800 ~ 0

DAE_PEQ_ENABLE                 = %d(EQ_EN)[0,1];             //是否打开PEQ算法
                               // Freq   Q: N/10  Gain: N/10  Type
DAE_PEQ_BANK0_SETTING          = %d(EQ_POINT_EN_01)[%d(EQ_FC_01), %d(EQ_QVAL_01), %d(EQ_GAIN_01), %d(EQ_TYPE_01)]; //[中心频率或截止频率；Q值，单位为0.1；增益，单位为0.1DB，范围-120 ~ 120；类型 1表示peaking，2表示high pass，等]
DAE_PEQ_BANK1_SETTING          = %d(EQ_POINT_EN_02)[%d(EQ_FC_02), %d(EQ_QVAL_02), %d(EQ_GAIN_02), %d(EQ_TYPE_02)];
DAE_PEQ_BANK2_SETTING          = %d(EQ_POINT_EN_03)[%d(EQ_FC_03), %d(EQ_QVAL_03), %d(EQ_GAIN_03), %d(EQ_TYPE_03)];
DAE_PEQ_BANK3_SETTING          = %d(EQ_POINT_EN_04)[%d(EQ_FC_04), %d(EQ_QVAL_04), %d(EQ_GAIN_04), %d(EQ_TYPE_04)];
DAE_PEQ_BANK4_SETTING          = %d(EQ_POINT_EN_05)[%d(EQ_FC_05), %d(EQ_QVAL_05), %d(EQ_GAIN_05), %d(EQ_TYPE_05)];
DAE_PEQ_BANK5_SETTING          = %d(EQ_POINT_EN_06)[%d(EQ_FC_06), %d(EQ_QVAL_06), %d(EQ_GAIN_06), %d(EQ_TYPE_06)];
DAE_PEQ_BANK6_SETTING          = %d(EQ_POINT_EN_07)[%d(EQ_FC_07), %d(EQ_QVAL_07), %d(EQ_GAIN_07), %d(EQ_TYPE_07)];
DAE_PEQ_BANK7_SETTING          = %d(EQ_POINT_EN_08)[%d(EQ_FC_08), %d(EQ_QVAL_08), %d(EQ_GAIN_08), %d(EQ_TYPE_08)];
DAE_PEQ_BANK8_SETTING          = %d(EQ_POINT_EN_09)[%d(EQ_FC_09), %d(EQ_QVAL_09), %d(EQ_GAIN_09), %d(EQ_TYPE_09)];
DAE_PEQ_BANK9_SETTING          = %d(EQ_POINT_EN_10)[%d(EQ_FC_10), %d(EQ_QVAL_10), %d(EQ_GAIN_10), %d(EQ_TYPE_10)];
DAE_PEQ_BANK10_SETTING         = %d(EQ_POINT_EN_11)[%d(EQ_FC_11), %d(EQ_QVAL_11), %d(EQ_GAIN_11), %d(EQ_TYPE_11)];
DAE_PEQ_BANK11_SETTING         = %d(EQ_POINT_EN_12)[%d(EQ_FC_12), %d(EQ_QVAL_12), %d(EQ_GAIN_12), %d(EQ_TYPE_12)];
DAE_PEQ_BANK12_SETTING         = %d(EQ_POINT_EN_13)[%d(EQ_FC_13), %d(EQ_QVAL_13), %d(EQ_GAIN_13), %d(EQ_TYPE_13)];
DAE_PEQ_BANK13_SETTING         = %d(EQ_POINT_EN_14)[%d(EQ_FC_14), %d(EQ_QVAL_14), %d(EQ_GAIN_14), %d(EQ_TYPE_14)];
DAE_PEQ_BANK14_SETTING         = %d(EQ_POINT_EN_15)[%d(EQ_FC_15), %d(EQ_QVAL_15), %d(EQ_GAIN_15), %d(EQ_TYPE_15)];
DAE_PEQ_BANK15_SETTING         = %d(EQ_POINT_EN_16)[%d(EQ_FC_16), %d(EQ_QVAL_16), %d(EQ_GAIN_16), %d(EQ_TYPE_16)];
DAE_PEQ_BANK16_SETTING         = %d(EQ_POINT_EN_17)[%d(EQ_FC_17), %d(EQ_QVAL_17), %d(EQ_GAIN_17), %d(EQ_TYPE_17)];
DAE_PEQ_BANK17_SETTING         = %d(EQ_POINT_EN_18)[%d(EQ_FC_18), %d(EQ_QVAL_18), %d(EQ_GAIN_18), %d(EQ_TYPE_18)];
DAE_PEQ_BANK18_SETTING         = %d(EQ_POINT_EN_19)[%d(EQ_FC_19), %d(EQ_QVAL_19), %d(EQ_GAIN_19), %d(EQ_TYPE_19)];
DAE_PEQ_BANK19_SETTING         = %d(EQ_POINT_EN_20)[%d(EQ_FC_20), %d(EQ_QVAL_20), %d(EQ_GAIN_20), %d(EQ_TYPE_20)];

DAE_GRAPHICS_EQ_ENABLE         = 0[0,1];         //是否打开图形EQ，即EQ音效，0表示不打开，1表示打开
DAE_GRAPHICS_EQ_TYPE           = 0[0~7,1];       //图形EQ类型，0-none, 1~7 分别为 JAZZ, POP, CLASSIC, SOFT, DBB, ROCK, USER

DAE_SPK_COMPENSATION_ENABLE    = %d(TEQ_EN)[0,1];         //是否打开喇叭补偿算法
DAE_SPK_COMPENSATION_SETTING   = 0[128, %d(TEQ_L_QVAL), %d(TEQ_R_QVAL)];   //喇叭补偿参数，分别是滤波器阶数 0~512, 左声道滤波器Q值 0~31, 右声道滤波器Q值 0~31

DAE_MDRC_ENABLE                = %d(DRC_EN)[0,1];         //是否打开MDRC，0表示不打开，1表示打开
                               // threshold, attack_time, release_time, crossover_freq
DAE_MDRC_BANK0_SETTING         = 0[%d(DRC1_THRESHOLD_01), %d(DRC1_ATTACK_TIME_01), %d(DRC1_RELEASE_TIME_01), %d(DRC_MIDMIN)]; //[动态范围控制阈值，单位为0.1DB，范围 -60DB ~ 0DB; 限幅器启动时间，单位为0.01ms，取值范围为 0.02 ~ 10 ms; 限幅器释放时间，单位为1ms，取值范围为 1 ~ 1000 ms; 分频点]
DAE_MDRC_BANK1_SETTING         = 0[%d(DRC1_THRESHOLD_02), %d(DRC1_ATTACK_TIME_02), %d(DRC1_RELEASE_TIME_02), %d(DRC_MAXMID)];
DAE_MDRC_BANK2_SETTING         = 0[%d(DRC1_THRESHOLD_03), %d(DRC1_ATTACK_TIME_03), %d(DRC1_RELEASE_TIME_03), 0];
DAE_MDRC_LIMITER_TH_DIFF       = %d(DRC1_LIMITER_THRDIFF)[0~30,1];     //非AUX MDRC模式下Limiter阈值高于MDRC最高阈值的差值，单位为0.1DB
DAE_MDRC_VOLUME_ADJUST         = %d(DRC1_MVOLUME)[-30~30,1];    //非AUX MDRC模式下音量微调，单位为0.1DB
DAE_MDRC_SIGNAL_ADJUST         = %d(DRC1_SIGNALPRECUT)[-30~0,1];     //非AUX MDRC模式下信号微调，单位为0.1DB

                               // threshold, attack_time, release_time, crossover_freq
DAE_MDRC_AUX_BANK0_SETTING     = 0[%d(DRC0_THRESHOLD_01), %d(DRC0_ATTACK_TIME_01), %d(DRC0_RELEASE_TIME_01), %d(DRC_MIDMIN)]; //[动态范围控制阈值，单位为0.1DB，范围 -60DB ~ 0DB; 限幅器启动时间，单位为0.01ms，取值范围为 0.02 ~ 10 ms; 限幅器释放时间，单位为1ms，取值范围为 1 ~ 1000 ms; 分频点]
DAE_MDRC_AUX_BANK1_SETTING     = 0[%d(DRC0_THRESHOLD_02), %d(DRC0_ATTACK_TIME_02), %d(DRC0_RELEASE_TIME_02), %d(DRC_MAXMID)];
DAE_MDRC_AUX_BANK2_SETTING     = 0[%d(DRC0_THRESHOLD_03), %d(DRC0_ATTACK_TIME_03), %d(DRC0_RELEASE_TIME_03), 0];
DAE_MDRC_AUX_LIMITER_TH_DIFF   = %d(DRC0_LIMITER_THRDIFF)[0~30,1];     //AUX MDRC模式下Limiter阈值高于MDRC最高阈值的差值，单位为0.1DB
DAE_MDRC_AUX_VOLUME_ADJUST     = %d(DRC0_MVOLUME)[-30~30,1];    //AUX MDRC模式下音量微调，单位为0.1DB
DAE_MDRC_AUX_SIGNAL_ADJUST     = %d(DRC0_SIGNALPRECUT)[-30~0,1];     //AUX MDRC模式下信号微调，单位为0.1DB

DAE_LIMITER_ENABLE             = %d(LIMITER_EN)[0,1];         //是否打开限幅器，0表示不打开，1表示打开
                               // threshold, attack_time, release_time, reserve
DAE_LIMITER_SETTING            = 0[%d(LM_TH0), %d(LM_AT0), %d(LM_RT0), 0]; //[限幅器阈值，单位为0.1DB，范围 -60DB ~ 0DB; 限幅器启动时间，单位为0.01ms，取值范围为 0.02 ~ 10 ms; 限幅器释放时间，单位为1ms，取值范围为 1 ~ 1000 ms]

//为兼容标准音效模型添加的DAE参数配置项
DAE_DEFAULT_TYPE          	                    = %d(AL_MODE)[0,1];//0:智能模式 1:标准模式 

DAE_PRECUT_RATIO_UNAUX               			= %d(EQ_ALLGAIN_VAL_UNAUX)[0~600,1];   //预衰减，单位0.1db
DAE_COMPRESSOR_ENABLE                           = %d(CP_EN)[0,1];//是否打开压缩器，0表示不打开，1表示打开
                                                  //阈值1 压缩比1 阈值2 压缩比2 RMS检测平均时间(ms)  启动时间 释放时间
//AUX模式										
DAE_COMPRESSOR_AUX_SETTING                      = 0[%d(CP_TH01), %d(CP_CR01), %d(CP_TH02), %d(CP_CR02), %d(CP_RAT), %d(CP_AT), %d(CP_RT)]; //[压缩器阈值1，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比1，单位为1，范围 1 ~ 1000;压缩器阈值2，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比2，单位为1，范围 1 ~ 1000;压缩器RMS检测平均时间(ms)，单位为0.01ms，取值范围为 0.02 ~ 100 ms;压缩器启动时间，单位为0.01ms，取值范围为 0.02 ~ 100 ms; 压缩器释放时间，单位为1ms，取值范围为 1 ~ 500 ms]
//非AUX模式													  
DAE_COMPRESSOR_SETTING                          = 0[%d(CP1_TH01), %d(CP1_CR01), %d(CP1_TH02), %d(CP1_CR02), %d(CP1_RAT), %d(CP1_AT), %d(CP1_RT)]; //[压缩器阈值1，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比1，单位为1，范围 1 ~ 1000;压缩器阈值2，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比2，单位为1，范围 1 ~ 1000;压缩器RMS检测平均时间(ms)，单位为0.01ms，取值范围为 0.02 ~ 100 ms;压缩器启动时间，单位为0.01ms，取值范围为 0.02 ~ 100 ms; 压缩器释放时间，单位为1ms，取值范围为 1 ~ 500 ms]

DAE_MDRC_ENABLE_STANDARD_MODE  			        = %d(CPDRC_EN)[0,1];//是否打开mdrc，0表示不打开，1表示打开										     
											       //阈值1 压缩比1 阈值2 压缩比2 RMS检测平均时间(ms)  启动时间 释放时间 reserve
DAE_MDRC_BANK0_SETTING_STANDARD_MODE            = 0[%d(CPDRC1_COM0_TH01), %d(CPDRC1_COM0_CR01), %d(CPDRC1_COM0_TH02), %d(CPDRC1_COM0_CR02), %d(CPDRC1_COM0_RAT), %d(CPDRC1_COM0_AT), %d(CPDRC1_COM0_RT), 0];//[压缩器阈值1，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比1，单位为1，范围 1 ~ 1000;压缩器阈值2，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比2，单位为1，范围 1 ~ 1000;压缩器RMS检测平均时间(ms)，单位为0.01ms，取值范围为 0.02 ~ 100 ms;压缩器启动时间，单位为0.01ms，取值范围为 0.02 ~ 100 ms; 压缩器释放时间，单位为1ms，取值范围为 1 ~ 500 ms;reserve]
DAE_MDRC_BANK1_SETTING_STANDARD_MODE            = 0[%d(CPDRC1_COM1_TH01), %d(CPDRC1_COM1_CR01), %d(CPDRC1_COM1_TH02), %d(CPDRC1_COM1_CR02), %d(CPDRC1_COM1_RAT), %d(CPDRC1_COM1_AT), %d(CPDRC1_COM1_RT), 0];
DAE_MDRC_BANK2_SETTING_STANDARD_MODE            = 0[%d(CPDRC1_COM2_TH01), %d(CPDRC1_COM2_CR01), %d(CPDRC1_COM2_TH02), %d(CPDRC1_COM2_CR02), %d(CPDRC1_COM2_RAT), %d(CPDRC1_COM2_AT), %d(CPDRC1_COM2_RT), 0];
											  
											      //音量微调 信号微调 低中分频点 中高分频点  增益补偿(makeup_gain)
DAE_MDRC_EXPAND_BANK1_SETTING_STANDARD_MODE     = 0[%d(CPDRC1_MVOLUME), %d(CPDRC1_SIGNALPRECUT), %d(CPDRC_MIDMIN), %d(CPDRC_MAXMID), %d(CPDRC1_GAINCOM)];
											      //threshold  attack_time, release_time  Q_val
MDRC_PEAK_DETECTCOMPENSATION               	    = 0[%d(CPDRC1_TSVALUE), %d(CPDRC1_STARTTIME), %d(CPDRC1_RELEASETIME), %d(CPDRC1_QVALUE)]; 	 //[MDRC峰值检测阈值，单位为0.1DB，范围 -60DB ~ 0DB;启动时间，单位为0.01ms，取值范围为 0.02 ~ 10 ms; 释放时间，单位为1ms，取值范围为 1 ~ 1000 ms; Q值，单位为0.1 范围0.1 ~ 0.9]											 

DAE_MDRC_AUX_BANK0_SETTING_STANDARD_MODE        = 0[%d(CPDRC0_COM0_TH01), %d(CPDRC0_COM0_CR01), %d(CPDRC0_COM0_TH02), %d(CPDRC0_COM0_CR02), %d(CPDRC0_COM0_RAT), %d(CPDRC0_COM0_AT), %d(CPDRC0_COM0_RT), 0];//[压缩器阈值1，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比1，单位为1，范围 1 ~ 1000;压缩器阈值2，单位为0.1DB，范围 -60DB ~ 0DB; 压缩器压缩比2，单位为1，范围 1 ~ 1000;压缩器RMS检测平均时间(ms)，单位为0.01ms，取值范围为 0.02 ~ 100 ms;压缩器启动时间，单位为0.01ms，取值范围为 0.02 ~ 100 ms; 压缩器释放时间，单位为1ms，取值范围为 1 ~ 500 ms;reserve]
DAE_MDRC_AUX_BANK1_SETTING_STANDARD_MODE        = 0[%d(CPDRC0_COM1_TH01), %d(CPDRC0_COM1_CR01), %d(CPDRC0_COM1_TH02), %d(CPDRC0_COM1_CR02), %d(CPDRC0_COM1_RAT), %d(CPDRC0_COM1_AT), %d(CPDRC0_COM1_RT), 0];
DAE_MDRC_AUX_BANK2_SETTING_STANDARD_MODE        = 0[%d(CPDRC0_COM2_TH01), %d(CPDRC0_COM2_CR01), %d(CPDRC0_COM2_TH02), %d(CPDRC0_COM2_CR02), %d(CPDRC0_COM2_RAT), %d(CPDRC0_COM2_AT), %d(CPDRC0_COM2_RT), 0];			
							
											       //音量微调 信号微调 低中分频点 中高分频点  增益补偿(makeup_gain)	
DAE_MDRC_AUX_EXPAND_BANK1_SETTING_STANDARD_MODE = 0[%d(CPDRC0_MVOLUME), %d(CPDRC0_SIGNALPRECUT), %d(CPDRC_MIDMIN), %d(CPDRC_MAXMID), %d(CPDRC0_GAINCOM)];
												   //threshold  attack_time, release_time  Q_val
MDRC_PEAK_AUX_DETECTCOMPENSATION                = 0[%d(CPDRC0_TSVALUE), %d(CPDRC0_STARTTIME), %d(CPDRC0_RELEASETIME), %d(CPDRC0_QVALUE)]; 	//[MDRC峰值检测阈值，单位为0.1DB，范围 -60DB ~ 0DB;启动时间，单位为0.01ms，取值范围为 0.02 ~ 10 ms; 释放时间，单位为1ms，取值范围为 1 ~ 1000 ms; Q值，单位为0.1 范围0.1 ~ 0.9]

//音量对应的DAE参数表
//AUX模式				
				 //预衰减 压缩器_TH1 压缩器_TH2  信号微调 音量微调 增益补偿 补偿滤波器阈值  MDRC低频_th1 MDRC低频_th2 MDRC中频_th1 MDRC中频_th2 MDRC高频_th1 MDRC高频_th2
VOL_31_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_31), 99(CP_TH01_31), 99(CP_TH02_31), 99(CPDRC0_SIGNALPRECUT_31), 99(CPDRC0_MVOLUME_31), 99(CPDRC0_GAINCOM_31), 99(CPDRC0_TSVALUE_31), 99(CPDRC0_COM0_TH01_31), 99(CPDRC0_COM0_TH02_31), 99(CPDRC0_COM1_TH01_31), 99(CPDRC0_COM1_TH02_31), 99(CPDRC0_COM2_TH01_31), 99(CPDRC0_COM2_TH02_31)];
VOL_30_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_30), 99(CP_TH01_30), 99(CP_TH02_30), 99(CPDRC0_SIGNALPRECUT_30), 99(CPDRC0_MVOLUME_30), 99(CPDRC0_GAINCOM_30), 99(CPDRC0_TSVALUE_30), 99(CPDRC0_COM0_TH01_30), 99(CPDRC0_COM0_TH02_30), 99(CPDRC0_COM1_TH01_30), 99(CPDRC0_COM1_TH02_30), 99(CPDRC0_COM2_TH01_30), 99(CPDRC0_COM2_TH02_30)];
VOL_29_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_29), 99(CP_TH01_29), 99(CP_TH02_29), 99(CPDRC0_SIGNALPRECUT_29), 99(CPDRC0_MVOLUME_29), 99(CPDRC0_GAINCOM_29), 99(CPDRC0_TSVALUE_29), 99(CPDRC0_COM0_TH01_29), 99(CPDRC0_COM0_TH02_29), 99(CPDRC0_COM1_TH01_29), 99(CPDRC0_COM1_TH02_29), 99(CPDRC0_COM2_TH01_29), 99(CPDRC0_COM2_TH02_29)];
VOL_28_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_28), 99(CP_TH01_28), 99(CP_TH02_28), 99(CPDRC0_SIGNALPRECUT_28), 99(CPDRC0_MVOLUME_28), 99(CPDRC0_GAINCOM_28), 99(CPDRC0_TSVALUE_28), 99(CPDRC0_COM0_TH01_28), 99(CPDRC0_COM0_TH02_28), 99(CPDRC0_COM1_TH01_28), 99(CPDRC0_COM1_TH02_28), 99(CPDRC0_COM2_TH01_28), 99(CPDRC0_COM2_TH02_28)];
VOL_27_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_27), 99(CP_TH01_27), 99(CP_TH02_27), 99(CPDRC0_SIGNALPRECUT_27), 99(CPDRC0_MVOLUME_27), 99(CPDRC0_GAINCOM_27), 99(CPDRC0_TSVALUE_27), 99(CPDRC0_COM0_TH01_27), 99(CPDRC0_COM0_TH02_27), 99(CPDRC0_COM1_TH01_27), 99(CPDRC0_COM1_TH02_27), 99(CPDRC0_COM2_TH01_27), 99(CPDRC0_COM2_TH02_27)];
VOL_26_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_26), 99(CP_TH01_26), 99(CP_TH02_26), 99(CPDRC0_SIGNALPRECUT_26), 99(CPDRC0_MVOLUME_26), 99(CPDRC0_GAINCOM_26), 99(CPDRC0_TSVALUE_26), 99(CPDRC0_COM0_TH01_26), 99(CPDRC0_COM0_TH02_26), 99(CPDRC0_COM1_TH01_26), 99(CPDRC0_COM1_TH02_26), 99(CPDRC0_COM2_TH01_26), 99(CPDRC0_COM2_TH02_26)];
VOL_25_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_25), 99(CP_TH01_25), 99(CP_TH02_25), 99(CPDRC0_SIGNALPRECUT_25), 99(CPDRC0_MVOLUME_25), 99(CPDRC0_GAINCOM_25), 99(CPDRC0_TSVALUE_25), 99(CPDRC0_COM0_TH01_25), 99(CPDRC0_COM0_TH02_25), 99(CPDRC0_COM1_TH01_25), 99(CPDRC0_COM1_TH02_25), 99(CPDRC0_COM2_TH01_25), 99(CPDRC0_COM2_TH02_25)];
VOL_24_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_24), 99(CP_TH01_24), 99(CP_TH02_24), 99(CPDRC0_SIGNALPRECUT_24), 99(CPDRC0_MVOLUME_24), 99(CPDRC0_GAINCOM_24), 99(CPDRC0_TSVALUE_24), 99(CPDRC0_COM0_TH01_24), 99(CPDRC0_COM0_TH02_24), 99(CPDRC0_COM1_TH01_24), 99(CPDRC0_COM1_TH02_24), 99(CPDRC0_COM2_TH01_24), 99(CPDRC0_COM2_TH02_24)];
VOL_23_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_23), 99(CP_TH01_23), 99(CP_TH02_23), 99(CPDRC0_SIGNALPRECUT_23), 99(CPDRC0_MVOLUME_23), 99(CPDRC0_GAINCOM_23), 99(CPDRC0_TSVALUE_23), 99(CPDRC0_COM0_TH01_23), 99(CPDRC0_COM0_TH02_23), 99(CPDRC0_COM1_TH01_23), 99(CPDRC0_COM1_TH02_23), 99(CPDRC0_COM2_TH01_23), 99(CPDRC0_COM2_TH02_23)];
VOL_22_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_22), 99(CP_TH01_22), 99(CP_TH02_22), 99(CPDRC0_SIGNALPRECUT_22), 99(CPDRC0_MVOLUME_22), 99(CPDRC0_GAINCOM_22), 99(CPDRC0_TSVALUE_22), 99(CPDRC0_COM0_TH01_22), 99(CPDRC0_COM0_TH02_22), 99(CPDRC0_COM1_TH01_22), 99(CPDRC0_COM1_TH02_22), 99(CPDRC0_COM2_TH01_22), 99(CPDRC0_COM2_TH02_22)];
VOL_21_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_21), 99(CP_TH01_21), 99(CP_TH02_21), 99(CPDRC0_SIGNALPRECUT_21), 99(CPDRC0_MVOLUME_21), 99(CPDRC0_GAINCOM_21), 99(CPDRC0_TSVALUE_21), 99(CPDRC0_COM0_TH01_21), 99(CPDRC0_COM0_TH02_21), 99(CPDRC0_COM1_TH01_21), 99(CPDRC0_COM1_TH02_21), 99(CPDRC0_COM2_TH01_21), 99(CPDRC0_COM2_TH02_21)];
VOL_20_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_20), 99(CP_TH01_20), 99(CP_TH02_20), 99(CPDRC0_SIGNALPRECUT_20), 99(CPDRC0_MVOLUME_20), 99(CPDRC0_GAINCOM_20), 99(CPDRC0_TSVALUE_20), 99(CPDRC0_COM0_TH01_20), 99(CPDRC0_COM0_TH02_20), 99(CPDRC0_COM1_TH01_20), 99(CPDRC0_COM1_TH02_20), 99(CPDRC0_COM2_TH01_20), 99(CPDRC0_COM2_TH02_20)];
VOL_19_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_19), 99(CP_TH01_19), 99(CP_TH02_19), 99(CPDRC0_SIGNALPRECUT_19), 99(CPDRC0_MVOLUME_19), 99(CPDRC0_GAINCOM_19), 99(CPDRC0_TSVALUE_19), 99(CPDRC0_COM0_TH01_19), 99(CPDRC0_COM0_TH02_19), 99(CPDRC0_COM1_TH01_19), 99(CPDRC0_COM1_TH02_19), 99(CPDRC0_COM2_TH01_19), 99(CPDRC0_COM2_TH02_19)];
VOL_18_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_18), 99(CP_TH01_18), 99(CP_TH02_18), 99(CPDRC0_SIGNALPRECUT_18), 99(CPDRC0_MVOLUME_18), 99(CPDRC0_GAINCOM_18), 99(CPDRC0_TSVALUE_18), 99(CPDRC0_COM0_TH01_18), 99(CPDRC0_COM0_TH02_18), 99(CPDRC0_COM1_TH01_18), 99(CPDRC0_COM1_TH02_18), 99(CPDRC0_COM2_TH01_18), 99(CPDRC0_COM2_TH02_18)];
VOL_17_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_17), 99(CP_TH01_17), 99(CP_TH02_17), 99(CPDRC0_SIGNALPRECUT_17), 99(CPDRC0_MVOLUME_17), 99(CPDRC0_GAINCOM_17), 99(CPDRC0_TSVALUE_17), 99(CPDRC0_COM0_TH01_17), 99(CPDRC0_COM0_TH02_17), 99(CPDRC0_COM1_TH01_17), 99(CPDRC0_COM1_TH02_17), 99(CPDRC0_COM2_TH01_17), 99(CPDRC0_COM2_TH02_17)];
VOL_16_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_16), 99(CP_TH01_16), 99(CP_TH02_16), 99(CPDRC0_SIGNALPRECUT_16), 99(CPDRC0_MVOLUME_16), 99(CPDRC0_GAINCOM_16), 99(CPDRC0_TSVALUE_16), 99(CPDRC0_COM0_TH01_16), 99(CPDRC0_COM0_TH02_16), 99(CPDRC0_COM1_TH01_16), 99(CPDRC0_COM1_TH02_16), 99(CPDRC0_COM2_TH01_16), 99(CPDRC0_COM2_TH02_16)];
VOL_15_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_15), 99(CP_TH01_15), 99(CP_TH02_15), 99(CPDRC0_SIGNALPRECUT_15), 99(CPDRC0_MVOLUME_15), 99(CPDRC0_GAINCOM_15), 99(CPDRC0_TSVALUE_15), 99(CPDRC0_COM0_TH01_15), 99(CPDRC0_COM0_TH02_15), 99(CPDRC0_COM1_TH01_15), 99(CPDRC0_COM1_TH02_15), 99(CPDRC0_COM2_TH01_15), 99(CPDRC0_COM2_TH02_15)];
VOL_14_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_14), 99(CP_TH01_14), 99(CP_TH02_14), 99(CPDRC0_SIGNALPRECUT_14), 99(CPDRC0_MVOLUME_14), 99(CPDRC0_GAINCOM_14), 99(CPDRC0_TSVALUE_14), 99(CPDRC0_COM0_TH01_14), 99(CPDRC0_COM0_TH02_14), 99(CPDRC0_COM1_TH01_14), 99(CPDRC0_COM1_TH02_14), 99(CPDRC0_COM2_TH01_14), 99(CPDRC0_COM2_TH02_14)];
VOL_13_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_13), 99(CP_TH01_13), 99(CP_TH02_13), 99(CPDRC0_SIGNALPRECUT_13), 99(CPDRC0_MVOLUME_13), 99(CPDRC0_GAINCOM_13), 99(CPDRC0_TSVALUE_13), 99(CPDRC0_COM0_TH01_13), 99(CPDRC0_COM0_TH02_13), 99(CPDRC0_COM1_TH01_13), 99(CPDRC0_COM1_TH02_13), 99(CPDRC0_COM2_TH01_13), 99(CPDRC0_COM2_TH02_13)];
VOL_12_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_12), 99(CP_TH01_12), 99(CP_TH02_12), 99(CPDRC0_SIGNALPRECUT_12), 99(CPDRC0_MVOLUME_12), 99(CPDRC0_GAINCOM_12), 99(CPDRC0_TSVALUE_12), 99(CPDRC0_COM0_TH01_12), 99(CPDRC0_COM0_TH02_12), 99(CPDRC0_COM1_TH01_12), 99(CPDRC0_COM1_TH02_12), 99(CPDRC0_COM2_TH01_12), 99(CPDRC0_COM2_TH02_12)];
VOL_11_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_11), 99(CP_TH01_11), 99(CP_TH02_11), 99(CPDRC0_SIGNALPRECUT_11), 99(CPDRC0_MVOLUME_11), 99(CPDRC0_GAINCOM_11), 99(CPDRC0_TSVALUE_11), 99(CPDRC0_COM0_TH01_11), 99(CPDRC0_COM0_TH02_11), 99(CPDRC0_COM1_TH01_11), 99(CPDRC0_COM1_TH02_11), 99(CPDRC0_COM2_TH01_11), 99(CPDRC0_COM2_TH02_11)];
VOL_10_DAE_AUX = 0[99(EQ_ALLGAIN_VAL_10), 99(CP_TH01_10), 99(CP_TH02_10), 99(CPDRC0_SIGNALPRECUT_10), 99(CPDRC0_MVOLUME_10), 99(CPDRC0_GAINCOM_10), 99(CPDRC0_TSVALUE_10), 99(CPDRC0_COM0_TH01_10), 99(CPDRC0_COM0_TH02_10), 99(CPDRC0_COM1_TH01_10), 99(CPDRC0_COM1_TH02_10), 99(CPDRC0_COM2_TH01_10), 99(CPDRC0_COM2_TH02_10)];
VOL_9_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_9), 99(CP_TH01_9), 99(CP_TH02_9), 99(CPDRC0_SIGNALPRECUT_9), 99(CPDRC0_MVOLUME_9), 99(CPDRC0_GAINCOM_9), 99(CPDRC0_TSVALUE_9), 99(CPDRC0_COM0_TH01_9), 99(CPDRC0_COM0_TH02_9), 99(CPDRC0_COM1_TH01_9), 99(CPDRC0_COM1_TH02_9), 99(CPDRC0_COM2_TH01_9), 99(CPDRC0_COM2_TH02_9)];
VOL_8_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_8), 99(CP_TH01_8), 99(CP_TH02_8), 99(CPDRC0_SIGNALPRECUT_8), 99(CPDRC0_MVOLUME_8), 99(CPDRC0_GAINCOM_8), 99(CPDRC0_TSVALUE_8), 99(CPDRC0_COM0_TH01_8), 99(CPDRC0_COM0_TH02_8), 99(CPDRC0_COM1_TH01_8), 99(CPDRC0_COM1_TH02_8), 99(CPDRC0_COM2_TH01_8), 99(CPDRC0_COM2_TH02_8)];
VOL_7_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_7), 99(CP_TH01_7), 99(CP_TH02_7), 99(CPDRC0_SIGNALPRECUT_7), 99(CPDRC0_MVOLUME_7), 99(CPDRC0_GAINCOM_7), 99(CPDRC0_TSVALUE_7), 99(CPDRC0_COM0_TH01_7), 99(CPDRC0_COM0_TH02_7), 99(CPDRC0_COM1_TH01_7), 99(CPDRC0_COM1_TH02_7), 99(CPDRC0_COM2_TH01_7), 99(CPDRC0_COM2_TH02_7)];
VOL_6_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_6), 99(CP_TH01_6), 99(CP_TH02_6), 99(CPDRC0_SIGNALPRECUT_6), 99(CPDRC0_MVOLUME_6), 99(CPDRC0_GAINCOM_6), 99(CPDRC0_TSVALUE_6), 99(CPDRC0_COM0_TH01_6), 99(CPDRC0_COM0_TH02_6), 99(CPDRC0_COM1_TH01_6), 99(CPDRC0_COM1_TH02_6), 99(CPDRC0_COM2_TH01_6), 99(CPDRC0_COM2_TH02_6)];
VOL_5_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_5), 99(CP_TH01_5), 99(CP_TH02_5), 99(CPDRC0_SIGNALPRECUT_5), 99(CPDRC0_MVOLUME_5), 99(CPDRC0_GAINCOM_5), 99(CPDRC0_TSVALUE_5), 99(CPDRC0_COM0_TH01_5), 99(CPDRC0_COM0_TH02_5), 99(CPDRC0_COM1_TH01_5), 99(CPDRC0_COM1_TH02_5), 99(CPDRC0_COM2_TH01_5), 99(CPDRC0_COM2_TH02_5)];
VOL_4_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_4), 99(CP_TH01_4), 99(CP_TH02_4), 99(CPDRC0_SIGNALPRECUT_4), 99(CPDRC0_MVOLUME_4), 99(CPDRC0_GAINCOM_4), 99(CPDRC0_TSVALUE_4), 99(CPDRC0_COM0_TH01_4), 99(CPDRC0_COM0_TH02_4), 99(CPDRC0_COM1_TH01_4), 99(CPDRC0_COM1_TH02_4), 99(CPDRC0_COM2_TH01_4), 99(CPDRC0_COM2_TH02_4)];
VOL_3_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_3), 99(CP_TH01_3), 99(CP_TH02_3), 99(CPDRC0_SIGNALPRECUT_3), 99(CPDRC0_MVOLUME_3), 99(CPDRC0_GAINCOM_3), 99(CPDRC0_TSVALUE_3), 99(CPDRC0_COM0_TH01_3), 99(CPDRC0_COM0_TH02_3), 99(CPDRC0_COM1_TH01_3), 99(CPDRC0_COM1_TH02_3), 99(CPDRC0_COM2_TH01_3), 99(CPDRC0_COM2_TH02_3)];
VOL_2_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_2), 99(CP_TH01_2), 99(CP_TH02_2), 99(CPDRC0_SIGNALPRECUT_2), 99(CPDRC0_MVOLUME_2), 99(CPDRC0_GAINCOM_2), 99(CPDRC0_TSVALUE_2), 99(CPDRC0_COM0_TH01_2), 99(CPDRC0_COM0_TH02_2), 99(CPDRC0_COM1_TH01_2), 99(CPDRC0_COM1_TH02_2), 99(CPDRC0_COM2_TH01_2), 99(CPDRC0_COM2_TH02_2)];
VOL_1_DAE_AUX  = 0[99(EQ_ALLGAIN_VAL_1), 99(CP_TH01_1), 99(CP_TH02_1), 99(CPDRC0_SIGNALPRECUT_1), 99(CPDRC0_MVOLUME_1), 99(CPDRC0_GAINCOM_1), 99(CPDRC0_TSVALUE_1), 99(CPDRC0_COM0_TH01_1), 99(CPDRC0_COM0_TH02_1), 99(CPDRC0_COM1_TH01_1), 99(CPDRC0_COM1_TH02_1), 99(CPDRC0_COM2_TH01_1), 99(CPDRC0_COM2_TH02_1)];
VOL_0_DAE_AUX  = 0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

//非AUX模式	
VOL_31_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_31), 99(CP1_TH01_31), 99(CP1_TH02_31), 99(CPDRC1_SIGNALPRECUT_31), 99(CPDRC1_MVOLUME_31), 99(CPDRC1_GAINCOM_31), 99(CPDRC1_TSVALUE_31), 99(CPDRC1_COM0_TH01_31), 99(CPDRC1_COM0_TH02_31), 99(CPDRC1_COM1_TH01_31), 99(CPDRC1_COM1_TH02_31), 99(CPDRC1_COM2_TH01_31), 99(CPDRC1_COM2_TH02_31)];
VOL_30_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_30), 99(CP1_TH01_30), 99(CP1_TH02_30), 99(CPDRC1_SIGNALPRECUT_30), 99(CPDRC1_MVOLUME_30), 99(CPDRC1_GAINCOM_30), 99(CPDRC1_TSVALUE_30), 99(CPDRC1_COM0_TH01_30), 99(CPDRC1_COM0_TH02_30), 99(CPDRC1_COM1_TH01_30), 99(CPDRC1_COM1_TH02_30), 99(CPDRC1_COM2_TH01_30), 99(CPDRC1_COM2_TH02_30)];
VOL_29_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_29), 99(CP1_TH01_29), 99(CP1_TH02_29), 99(CPDRC1_SIGNALPRECUT_29), 99(CPDRC1_MVOLUME_29), 99(CPDRC1_GAINCOM_29), 99(CPDRC1_TSVALUE_29), 99(CPDRC1_COM0_TH01_29), 99(CPDRC1_COM0_TH02_29), 99(CPDRC1_COM1_TH01_29), 99(CPDRC1_COM1_TH02_29), 99(CPDRC1_COM2_TH01_29), 99(CPDRC1_COM2_TH02_29)];
VOL_28_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_28), 99(CP1_TH01_28), 99(CP1_TH02_28), 99(CPDRC1_SIGNALPRECUT_28), 99(CPDRC1_MVOLUME_28), 99(CPDRC1_GAINCOM_28), 99(CPDRC1_TSVALUE_28), 99(CPDRC1_COM0_TH01_28), 99(CPDRC1_COM0_TH02_28), 99(CPDRC1_COM1_TH01_28), 99(CPDRC1_COM1_TH02_28), 99(CPDRC1_COM2_TH01_28), 99(CPDRC1_COM2_TH02_28)];
VOL_27_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_27), 99(CP1_TH01_27), 99(CP1_TH02_27), 99(CPDRC1_SIGNALPRECUT_27), 99(CPDRC1_MVOLUME_27), 99(CPDRC1_GAINCOM_27), 99(CPDRC1_TSVALUE_27), 99(CPDRC1_COM0_TH01_27), 99(CPDRC1_COM0_TH02_27), 99(CPDRC1_COM1_TH01_27), 99(CPDRC1_COM1_TH02_27), 99(CPDRC1_COM2_TH01_27), 99(CPDRC1_COM2_TH02_27)];
VOL_26_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_26), 99(CP1_TH01_26), 99(CP1_TH02_26), 99(CPDRC1_SIGNALPRECUT_26), 99(CPDRC1_MVOLUME_26), 99(CPDRC1_GAINCOM_26), 99(CPDRC1_TSVALUE_26), 99(CPDRC1_COM0_TH01_26), 99(CPDRC1_COM0_TH02_26), 99(CPDRC1_COM1_TH01_26), 99(CPDRC1_COM1_TH02_26), 99(CPDRC1_COM2_TH01_26), 99(CPDRC1_COM2_TH02_26)];
VOL_25_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_25), 99(CP1_TH01_25), 99(CP1_TH02_25), 99(CPDRC1_SIGNALPRECUT_25), 99(CPDRC1_MVOLUME_25), 99(CPDRC1_GAINCOM_25), 99(CPDRC1_TSVALUE_25), 99(CPDRC1_COM0_TH01_25), 99(CPDRC1_COM0_TH02_25), 99(CPDRC1_COM1_TH01_25), 99(CPDRC1_COM1_TH02_25), 99(CPDRC1_COM2_TH01_25), 99(CPDRC1_COM2_TH02_25)];
VOL_24_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_24), 99(CP1_TH01_24), 99(CP1_TH02_24), 99(CPDRC1_SIGNALPRECUT_24), 99(CPDRC1_MVOLUME_24), 99(CPDRC1_GAINCOM_24), 99(CPDRC1_TSVALUE_24), 99(CPDRC1_COM0_TH01_24), 99(CPDRC1_COM0_TH02_24), 99(CPDRC1_COM1_TH01_24), 99(CPDRC1_COM1_TH02_24), 99(CPDRC1_COM2_TH01_24), 99(CPDRC1_COM2_TH02_24)];
VOL_23_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_23), 99(CP1_TH01_23), 99(CP1_TH02_23), 99(CPDRC1_SIGNALPRECUT_23), 99(CPDRC1_MVOLUME_23), 99(CPDRC1_GAINCOM_23), 99(CPDRC1_TSVALUE_23), 99(CPDRC1_COM0_TH01_23), 99(CPDRC1_COM0_TH02_23), 99(CPDRC1_COM1_TH01_23), 99(CPDRC1_COM1_TH02_23), 99(CPDRC1_COM2_TH01_23), 99(CPDRC1_COM2_TH02_23)];
VOL_22_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_22), 99(CP1_TH01_22), 99(CP1_TH02_22), 99(CPDRC1_SIGNALPRECUT_22), 99(CPDRC1_MVOLUME_22), 99(CPDRC1_GAINCOM_22), 99(CPDRC1_TSVALUE_22), 99(CPDRC1_COM0_TH01_22), 99(CPDRC1_COM0_TH02_22), 99(CPDRC1_COM1_TH01_22), 99(CPDRC1_COM1_TH02_22), 99(CPDRC1_COM2_TH01_22), 99(CPDRC1_COM2_TH02_22)];
VOL_21_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_21), 99(CP1_TH01_21), 99(CP1_TH02_21), 99(CPDRC1_SIGNALPRECUT_21), 99(CPDRC1_MVOLUME_21), 99(CPDRC1_GAINCOM_21), 99(CPDRC1_TSVALUE_21), 99(CPDRC1_COM0_TH01_21), 99(CPDRC1_COM0_TH02_21), 99(CPDRC1_COM1_TH01_21), 99(CPDRC1_COM1_TH02_21), 99(CPDRC1_COM2_TH01_21), 99(CPDRC1_COM2_TH02_21)];
VOL_20_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_20), 99(CP1_TH01_20), 99(CP1_TH02_20), 99(CPDRC1_SIGNALPRECUT_20), 99(CPDRC1_MVOLUME_20), 99(CPDRC1_GAINCOM_20), 99(CPDRC1_TSVALUE_20), 99(CPDRC1_COM0_TH01_20), 99(CPDRC1_COM0_TH02_20), 99(CPDRC1_COM1_TH01_20), 99(CPDRC1_COM1_TH02_20), 99(CPDRC1_COM2_TH01_20), 99(CPDRC1_COM2_TH02_20)];
VOL_19_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_19), 99(CP1_TH01_19), 99(CP1_TH02_19), 99(CPDRC1_SIGNALPRECUT_19), 99(CPDRC1_MVOLUME_19), 99(CPDRC1_GAINCOM_19), 99(CPDRC1_TSVALUE_19), 99(CPDRC1_COM0_TH01_19), 99(CPDRC1_COM0_TH02_19), 99(CPDRC1_COM1_TH01_19), 99(CPDRC1_COM1_TH02_19), 99(CPDRC1_COM2_TH01_19), 99(CPDRC1_COM2_TH02_19)];
VOL_18_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_18), 99(CP1_TH01_18), 99(CP1_TH02_18), 99(CPDRC1_SIGNALPRECUT_18), 99(CPDRC1_MVOLUME_18), 99(CPDRC1_GAINCOM_18), 99(CPDRC1_TSVALUE_18), 99(CPDRC1_COM0_TH01_18), 99(CPDRC1_COM0_TH02_18), 99(CPDRC1_COM1_TH01_18), 99(CPDRC1_COM1_TH02_18), 99(CPDRC1_COM2_TH01_18), 99(CPDRC1_COM2_TH02_18)];
VOL_17_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_17), 99(CP1_TH01_17), 99(CP1_TH02_17), 99(CPDRC1_SIGNALPRECUT_17), 99(CPDRC1_MVOLUME_17), 99(CPDRC1_GAINCOM_17), 99(CPDRC1_TSVALUE_17), 99(CPDRC1_COM0_TH01_17), 99(CPDRC1_COM0_TH02_17), 99(CPDRC1_COM1_TH01_17), 99(CPDRC1_COM1_TH02_17), 99(CPDRC1_COM2_TH01_17), 99(CPDRC1_COM2_TH02_17)];
VOL_16_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_16), 99(CP1_TH01_16), 99(CP1_TH02_16), 99(CPDRC1_SIGNALPRECUT_16), 99(CPDRC1_MVOLUME_16), 99(CPDRC1_GAINCOM_16), 99(CPDRC1_TSVALUE_16), 99(CPDRC1_COM0_TH01_16), 99(CPDRC1_COM0_TH02_16), 99(CPDRC1_COM1_TH01_16), 99(CPDRC1_COM1_TH02_16), 99(CPDRC1_COM2_TH01_16), 99(CPDRC1_COM2_TH02_16)];
VOL_15_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_15), 99(CP1_TH01_15), 99(CP1_TH02_15), 99(CPDRC1_SIGNALPRECUT_15), 99(CPDRC1_MVOLUME_15), 99(CPDRC1_GAINCOM_15), 99(CPDRC1_TSVALUE_15), 99(CPDRC1_COM0_TH01_15), 99(CPDRC1_COM0_TH02_15), 99(CPDRC1_COM1_TH01_15), 99(CPDRC1_COM1_TH02_15), 99(CPDRC1_COM2_TH01_15), 99(CPDRC1_COM2_TH02_15)];
VOL_14_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_14), 99(CP1_TH01_14), 99(CP1_TH02_14), 99(CPDRC1_SIGNALPRECUT_14), 99(CPDRC1_MVOLUME_14), 99(CPDRC1_GAINCOM_14), 99(CPDRC1_TSVALUE_14), 99(CPDRC1_COM0_TH01_14), 99(CPDRC1_COM0_TH02_14), 99(CPDRC1_COM1_TH01_14), 99(CPDRC1_COM1_TH02_14), 99(CPDRC1_COM2_TH01_14), 99(CPDRC1_COM2_TH02_14)];
VOL_13_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_13), 99(CP1_TH01_13), 99(CP1_TH02_13), 99(CPDRC1_SIGNALPRECUT_13), 99(CPDRC1_MVOLUME_13), 99(CPDRC1_GAINCOM_13), 99(CPDRC1_TSVALUE_13), 99(CPDRC1_COM0_TH01_13), 99(CPDRC1_COM0_TH02_13), 99(CPDRC1_COM1_TH01_13), 99(CPDRC1_COM1_TH02_13), 99(CPDRC1_COM2_TH01_13), 99(CPDRC1_COM2_TH02_13)];
VOL_12_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_12), 99(CP1_TH01_12), 99(CP1_TH02_12), 99(CPDRC1_SIGNALPRECUT_12), 99(CPDRC1_MVOLUME_12), 99(CPDRC1_GAINCOM_12), 99(CPDRC1_TSVALUE_12), 99(CPDRC1_COM0_TH01_12), 99(CPDRC1_COM0_TH02_12), 99(CPDRC1_COM1_TH01_12), 99(CPDRC1_COM1_TH02_12), 99(CPDRC1_COM2_TH01_12), 99(CPDRC1_COM2_TH02_12)];
VOL_11_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_11), 99(CP1_TH01_11), 99(CP1_TH02_11), 99(CPDRC1_SIGNALPRECUT_11), 99(CPDRC1_MVOLUME_11), 99(CPDRC1_GAINCOM_11), 99(CPDRC1_TSVALUE_11), 99(CPDRC1_COM0_TH01_11), 99(CPDRC1_COM0_TH02_11), 99(CPDRC1_COM1_TH01_11), 99(CPDRC1_COM1_TH02_11), 99(CPDRC1_COM2_TH01_11), 99(CPDRC1_COM2_TH02_11)];
VOL_10_DAE    = 0[99(EQ_ALLGAIN_VAL_UNAUX_10), 99(CP1_TH01_10), 99(CP1_TH02_10), 99(CPDRC1_SIGNALPRECUT_10), 99(CPDRC1_MVOLUME_10), 99(CPDRC1_GAINCOM_10), 99(CPDRC1_TSVALUE_10), 99(CPDRC1_COM0_TH01_10), 99(CPDRC1_COM0_TH02_10), 99(CPDRC1_COM1_TH01_10), 99(CPDRC1_COM1_TH02_10), 99(CPDRC1_COM2_TH01_10), 99(CPDRC1_COM2_TH02_10)];
VOL_9_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_9), 99(CP1_TH01_9), 99(CP1_TH02_9), 99(CPDRC1_SIGNALPRECUT_9), 99(CPDRC1_MVOLUME_9), 99(CPDRC1_GAINCOM_9), 99(CPDRC1_TSVALUE_9), 99(CPDRC1_COM0_TH01_9), 99(CPDRC1_COM0_TH02_9), 99(CPDRC1_COM1_TH01_9), 99(CPDRC1_COM1_TH02_9), 99(CPDRC1_COM2_TH01_9), 99(CPDRC1_COM2_TH02_9)];
VOL_8_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_8), 99(CP1_TH01_8), 99(CP1_TH02_8), 99(CPDRC1_SIGNALPRECUT_8), 99(CPDRC1_MVOLUME_8), 99(CPDRC1_GAINCOM_8), 99(CPDRC1_TSVALUE_8), 99(CPDRC1_COM0_TH01_8), 99(CPDRC1_COM0_TH02_8), 99(CPDRC1_COM1_TH01_8), 99(CPDRC1_COM1_TH02_8), 99(CPDRC1_COM2_TH01_8), 99(CPDRC1_COM2_TH02_8)];
VOL_7_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_7), 99(CP1_TH01_7), 99(CP1_TH02_7), 99(CPDRC1_SIGNALPRECUT_7), 99(CPDRC1_MVOLUME_7), 99(CPDRC1_GAINCOM_7), 99(CPDRC1_TSVALUE_7), 99(CPDRC1_COM0_TH01_7), 99(CPDRC1_COM0_TH02_7), 99(CPDRC1_COM1_TH01_7), 99(CPDRC1_COM1_TH02_7), 99(CPDRC1_COM2_TH01_7), 99(CPDRC1_COM2_TH02_7)];
VOL_6_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_6), 99(CP1_TH01_6), 99(CP1_TH02_6), 99(CPDRC1_SIGNALPRECUT_6), 99(CPDRC1_MVOLUME_6), 99(CPDRC1_GAINCOM_6), 99(CPDRC1_TSVALUE_6), 99(CPDRC1_COM0_TH01_6), 99(CPDRC1_COM0_TH02_6), 99(CPDRC1_COM1_TH01_6), 99(CPDRC1_COM1_TH02_6), 99(CPDRC1_COM2_TH01_6), 99(CPDRC1_COM2_TH02_6)];
VOL_5_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_5), 99(CP1_TH01_5), 99(CP1_TH02_5), 99(CPDRC1_SIGNALPRECUT_5), 99(CPDRC1_MVOLUME_5), 99(CPDRC1_GAINCOM_5), 99(CPDRC1_TSVALUE_5), 99(CPDRC1_COM0_TH01_5), 99(CPDRC1_COM0_TH02_5), 99(CPDRC1_COM1_TH01_5), 99(CPDRC1_COM1_TH02_5), 99(CPDRC1_COM2_TH01_5), 99(CPDRC1_COM2_TH02_5)];
VOL_4_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_4), 99(CP1_TH01_4), 99(CP1_TH02_4), 99(CPDRC1_SIGNALPRECUT_4), 99(CPDRC1_MVOLUME_4), 99(CPDRC1_GAINCOM_4), 99(CPDRC1_TSVALUE_4), 99(CPDRC1_COM0_TH01_4), 99(CPDRC1_COM0_TH02_4), 99(CPDRC1_COM1_TH01_4), 99(CPDRC1_COM1_TH02_4), 99(CPDRC1_COM2_TH01_4), 99(CPDRC1_COM2_TH02_4)];
VOL_3_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_3), 99(CP1_TH01_3), 99(CP1_TH02_3), 99(CPDRC1_SIGNALPRECUT_3), 99(CPDRC1_MVOLUME_3), 99(CPDRC1_GAINCOM_3), 99(CPDRC1_TSVALUE_3), 99(CPDRC1_COM0_TH01_3), 99(CPDRC1_COM0_TH02_3), 99(CPDRC1_COM1_TH01_3), 99(CPDRC1_COM1_TH02_3), 99(CPDRC1_COM2_TH01_3), 99(CPDRC1_COM2_TH02_3)];
VOL_2_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_2), 99(CP1_TH01_2), 99(CP1_TH02_2), 99(CPDRC1_SIGNALPRECUT_2), 99(CPDRC1_MVOLUME_2), 99(CPDRC1_GAINCOM_2), 99(CPDRC1_TSVALUE_2), 99(CPDRC1_COM0_TH01_2), 99(CPDRC1_COM0_TH02_2), 99(CPDRC1_COM1_TH01_2), 99(CPDRC1_COM1_TH02_2), 99(CPDRC1_COM2_TH01_2), 99(CPDRC1_COM2_TH02_2)];
VOL_1_DAE     = 0[99(EQ_ALLGAIN_VAL_UNAUX_1), 99(CP1_TH01_1), 99(CP1_TH02_1), 99(CPDRC1_SIGNALPRECUT_1), 99(CPDRC1_MVOLUME_1), 99(CPDRC1_GAINCOM_1), 99(CPDRC1_TSVALUE_1), 99(CPDRC1_COM0_TH01_1), 99(CPDRC1_COM0_TH02_1), 99(CPDRC1_COM1_TH01_1), 99(CPDRC1_COM1_TH02_1), 99(CPDRC1_COM2_TH01_1), 99(CPDRC1_COM2_TH02_1)];
VOL_0_DAE     = 0[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];